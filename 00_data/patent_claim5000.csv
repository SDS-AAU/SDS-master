patent_id,claim_number,text,sequence,dependent,exemplary,subclass
10606734,6,"6. A computer-program product for intelligent mobile device selection for mobile application testing, the computer-program product comprising: a computer-readable storage medium readable by a processing circuit and storing instructions for execution by the processing circuit for performing a method comprising: determining features of a new mobile application to be tested; comparing, by a processor, the features of the new mobile application to be tested with features of multiple known mobile applications to identify one or more known mobile applications with similar features; based at least in part on automated analysis of user reviews of the one or more known mobile applications operating in one or more types of mobile devices, providing one or more risk scores for operation of the new mobile application in the one or more types of mobile devices, wherein providing the one or more risk scores comprises generating a respective risk score for operating the new mobile application in each type of mobile device of the one or more types of mobile devices, the respective risk scores being determined based, at least in part, on automated analysis of user reviews of the one or more known mobile applications with similar features operating on that type of mobile device; using, by the processor, at least in part, the one or more risk scores in deciding in which types of mobile devices to test the operation of the new mobile application.",5,,0,A
10606734,7,"7. The computer program product of claim 6 , wherein the one or more risk scores are each determined based on one or more factors selected from a group consisting of: a degree of feature similarity between the new mobile application and the known mobile application with similar features, a number of defect instances reported for the known mobile application on the type of mobile device, a sentiment of user reviews of the known mobile device application on the type of mobile device, and a number of like or dislike reviews of the known mobile application on the type of mobile device.",6,claim 6,0,A
10606734,8,"8. The computer program product of claim 6 , further comprising automatedly analyzing user reviews of the multiple known mobile device applications operating in the one or more types of mobile devices, and filtering the user reviews to identify any technical issue with a known mobile device application on a particular type of mobile device, the technical issue relating to using of the known mobile device application on that particular type of mobile device.",7,claim 6,0,A
10606734,9,"9. The computer program product of claim 8 , wherein the automatedly analyzing is based on semantic analysis of the user reviews of the multiple known mobile applications.",8,claim 8,0,A
10606734,10,"10. The computer program product of claim 6 , wherein the features of the new mobile application include features selected from the group consisting of operational requirements for the new mobile application and attributes of the new mobile application for a user.",9,claim 6,0,A
10606736,1,"1. A computer-implemented method for creation of a test plan for load testing a website or web application comprising: receiving a set of input parameters, which includes a specified time period range; retrieving, from a data storage repository, beacon data of real user sessions on the website or web application that fall within the specified time period range; identifying, from the beacon data, a set of peak traffic time periods, which includes a peak day, a peak hour, a peak minute, and a peak second; calculating user session statistics for the peak day, the user session statistics including median session duration, session length, and think times; generating a page group distribution table that includes a list of all page groups and page group hit percentages, relative to all other page groups, for the real user sessions during the peak hour; and generating a set of test scenario paths representative of the page group distribution table.",0,,1,A
10606736,2,"2. The computer-implemented method of claim 1 wherein the generating of the set of test scenario paths comprises: a) assigning weights to each page group in accordance with the page group hit percentage of the page group; b) creating a list of all the real user sessions during the peak hour having a session length greater than 1, for each real user session in the list determining: (i) an actual path, which is a sequence of page groups traversed by the real user; (ii) a page group list which includes distinct page groups in the actual path; (iii) a total page group weight, which is a sum of all the page group weights for the actual path; (iv) a session length deviation, which is an absolute value of a difference between a session length of the real user session and the median session length; (v) a session duration deviation, which is an absolute value of a difference between a session duration of the real user session and the median session duration; (vi) an exit-entry proportion, which is a proportion of all the real user sessions that have the same entry and exit pages; (vii) an exit-entry weight, which is a number of real user sessions that have the same entry and exit pages; (viii) an exit-entry max paths, which is calculated by multiplying the exit-entry proportion by a specified number that limits the maximum paths; (ix) a primary sort variable, which is a ratio of the session length deviation to the total page group weight; and (x) a secondary sort variable, which is a ratio of the session duration deviation to the exit-entry weight; c) sorting the list of all the real user sessions during the peak hour by the primary sort variable, and then by the secondary sort variable; d) assigning a representative rank to each session according to position in the sorted list; e) determining a number of critical page groups by sorting the list of all page groups in descending order according to the page group hit percentage of the page group, the number of critical page groups being equal to a number of page groups from the sorted list of all page groups where a cumulative page group hit percentage is less than or equal to a minimum specified page coverage; f) selecting a top n unconverted session paths from the sorted list of all the real user sessions, where n is a specified maximum number of abandonment paths, top n unconverted session paths comprising abandonment paths of the set of test scenario paths; and g) selecting a top n converted session paths from the sorted list of all the real user sessions, where n is a specified maximum number of abandonment paths, top n unconverted session paths comprising conversion paths of the set of test scenario paths.",1,claim 1,0,A
10606736,3,3. The computer-implemented method of claim 1 further comprising creating a master table that lists the set of load test scenarios and the think times that represents a distribution of paths taken by real users during the peak hour.,2,claim 1,0,A
10606736,4,4. The computer-implemented method of claim 2 wherein the selecting of the top n unconverted session paths further comprises only selecting unconverted sessions that meet a filtering criteria.,3,claim 2,0,A
10606736,5,"5. The computer-implemented method of claim 4 wherein the filtering criteria comprises a number of page groups in the page group list is greater than 1, and the representative rank is less than or equal to the exit-entry max paths.",4,claim 4,0,A
10606736,6,6. The computer-implemented method of claim 2 wherein the selecting of the top n converted session paths further comprises only selecting converted sessions that meet a filtering criteria.,5,claim 2,0,A
10606736,7,"7. The computer-implemented method of claim 6 wherein the filtering criteria comprises a number of page groups in the page group list is greater than 1, and the representative rank is less than or equal to the exit-entry max paths.",6,claim 6,0,A
10606736,8,8. The computer-implemented method of claim 1 where in the generating a set of test scenario paths comprises determining one or more bounce paths for inclusion in the set of test scenario paths.,7,claim 1,0,A
10606736,9,"9. The computer-implemented method of claim 8 wherein the determining of the one or more bounce paths comprises: generating a list of distinct landing pages for the real user sessions that have a session length equal to 1; determining a bounce path percentage for each distinct landing page in the list, the bounce path percentage being calculated as a percentage of sessions that bounced on the distinct landing page relative to other landing pages in the list; ranking the list of distinct landing pages according to the bounce path percentage, from highest to lowest; calculating a cumulative bounce path percentage, starting from a highest bounce path percentage, for each distinct landing page in the ranked list; and selecting as the one or more bounce paths for inclusion in the set of test scenario paths, those distinct landing pages where the cumulative bounce path percentage is less than or equal to a specified minimum bounce path coverage.",8,claim 8,0,A
10606737,1,"1. A method for testing a resource constrained device, the method comprising: determining, via a testing engine, a plurality of test cases for testing the resource constrained device; accessing, via the testing engine, a plurality of test scripts corresponding to the plurality of test cases; determining, via the testing engine, a set of mutually independent primitive executables for the plurality of test scripts corresponding to the plurality of test cases, by: determining a plurality of steps of the plurality of test scripts; and determining one or more primitive executables for each of the plurality of steps of the plurality of test scripts, wherein the one or more primitive executables for each of the plurality of steps of the plurality of test scripts correspond to one or more atomic operations of the resource constrained device; determining, via the testing engine, a candidate test case from the plurality of test cases, wherein the candidate test case from the plurality of test cases is determined based on: computing a test score for each of the plurality of test cases based on a plurality of script execution parameters for a corresponding test script, wherein each of the plurality of script execution parameters for the corresponding test script comprises at least one of an estimated time of execution, an estimated usage of one or more resources, and a coverage of one or more components of the resource constrained device; and selecting the candidate test case from the plurality of test cases based on the computed test score for each of the plurality of test cases; transmitting, via the testing engine, the one or more primitive executables for each of the plurality of steps of the plurality of test scripts corresponding to the candidate test case from the plurality of test cases to the resource constrained device for execution; and receiving, via the testing engine, a result corresponding to the execution of the one or more primitive executables for each of the plurality of steps of the plurality of test scripts corresponding to the candidate test case from the plurality of test cases.",0,,1,A
10606737,2,"2. The method of claim 1 , further comprising: creating the one or more primitive executables for each of the plurality of steps of the plurality of test scripts; and determining a plurality of executable execution parameters for each of the plurality of one or more primitive executables for each of the plurality of steps of the plurality of test scripts.",1,claim 1,0,A
10606737,3,"3. The method of claim 2 , wherein each of the plurality of executable execution parameters comprises at least one of a name of the one or more primitive executables for each of the plurality of steps of the plurality of test scripts, a plurality of input parameters, a plurality of output parameters, an estimated time of execution, an estimated usage of one or more resources, and a coverage of one or more components of the resource constrained device.",2,claim 2,0,A
10606737,4,"4. The method of claim 1 , further comprising: creating the plurality of test scripts corresponding to the plurality of test cases; and determining the plurality of script execution parameters for each of the plurality of test scripts corresponding to the plurality of test cases.",3,claim 1,0,A
10606737,5,"5. The method of claim 1 , further comprising at least one of: determining a dependency of each of the plurality of steps of the plurality of test scripts with respect to each of a plurality of preceding steps of the plurality of test scripts; and determining a batch execution of the one or more primitive executables for each of the plurality of steps of the plurality of test scripts.",4,claim 1,0,A
10606737,6,"6. The method of claim 1 , wherein determining the candidate test case from the plurality of test cases further comprises sequencing the candidate test case based on a highest test score.",5,claim 1,0,A
10606737,7,"7. The method of claim 1 , wherein transmitting the one or more primitive executables for each of the plurality of steps of the plurality of test scripts corresponding to the candidate test case from the plurality of test cases to the resource constrained device for execution comprises: determining an availability of each of the one or more resources in the resource constrained device; and transmitting the one or more primitive executables for each of the plurality of steps of the plurality of test scripts corresponding to the candidate test case from the plurality of test cases to the resource constrained device based on the availability of each of the one or more resources in the resource constrained device.",6,claim 1,0,A
10606737,8,"8. The method of claim 7 , wherein the availability of each of the one or more resources in the resource constrained device is determined at a periodic interval or at run time.",7,claim 7,0,A
10606737,9,"9. A system for testing a resource constrained device, the system comprising: at least one processor; and a non-transitory computer-readable storage medium storing instructions that, when executed by the at least one processor, cause the at least one processor to perform operations comprising: determining, via a testing engine, a plurality of test cases for testing the resource constrained device; accessing, via the testing engine, a plurality of test scripts corresponding to the plurality of test cases; determining, via the testing engine, a set of mutually independent primitive executables for the plurality of test scripts corresponding to the plurality of test cases, by: determining a plurality of steps of the plurality of test scripts; and determining one or more primitive executables for each of the plurality of steps of the plurality of test scripts, wherein the one or more primitive executables for each of the plurality of steps of the plurality of test scripts correspond to one or more atomic operations of the resource constrained device; determining, via the testing engine, a candidate test case from the plurality of test cases, wherein the candidate test case from the plurality of test cases is determined based on: computing a test score for each of the plurality of test cases based on a plurality of script execution parameters for a corresponding test script, wherein each of the plurality of script execution parameters for the corresponding test script comprises at least one of an estimated time of execution, an estimated usage of one or more resources, and a coverage of one or more components of the resource constrained device; and selecting the candidate test case from the plurality of test cases based on the computed test score for each of the plurality of test cases; transmitting, via the testing engine, the one or more primitive executables for each of the plurality of steps of the plurality of test scripts corresponding to the candidate test case from the plurality of test cases to the resource constrained device for execution; and receiving, via the testing engine, a result corresponding to the execution of the one or more primitive executables for each of the plurality of steps of the plurality of test scripts corresponding to the candidate test case from the plurality of test cases.",8,,0,A
10606737,10,"10. The system of claim 9 , wherein the operations further comprise: creating the one or more primitive executables for each of the plurality of steps of the plurality of test scripts; and determining a plurality of executable execution parameters for each of the one or more primitive executables for each of the plurality of steps of the plurality of test scripts, wherein each of the plurality of executable execution parameters comprises at least one of a name of the one or more primitive executables for each of the plurality of steps of the plurality of test scripts, a plurality of input parameters, a plurality of output parameters, an estimated time of execution, an estimated usage of one or more resources, and a coverage of one or more components of the resource constrained device.",9,claim 9,0,A
10606737,11,"11. The system of claim 9 , wherein the operations further comprise: creating the plurality of test scripts corresponding to the plurality of test cases; and determining the plurality of script execution parameters for each of the plurality of test scripts corresponding to the plurality of test cases.",10,claim 9,0,A
10606737,12,"12. The system of claim 11 , wherein the operations further comprise at least one of: determining a dependency of each of the plurality of steps of the plurality of test scripts with respect to each of a plurality of preceding steps of the plurality of test scripts; and determining a batch execution of the one or more primitive executables for each of the plurality of steps of the plurality of test scripts.",11,claim 11,0,A
10606737,13,"13. The system of claim 9 , wherein determining the candidate test case from the plurality of test cases further comprises sequencing the candidate test case based on a highest test score.",12,claim 9,0,A
10606737,14,"14. The system of claim 9 , wherein transmitting the one or more primitive executables for each of the plurality of steps of the plurality of test scripts corresponding to the candidate test case from the plurality of test cases to the resource constrained device for execution comprises: determining an availability of each of the one or more resources in the resource constrained device; and transmitting the one or more primitive executables for each of the plurality of steps of the plurality of test scripts corresponding to the candidate test case from the plurality of test cases to the resource constrained device based on the availability of each of the one or more resources in the resource constrained device.",13,claim 9,0,A
10606737,15,"15. The system of claim 14 , wherein the availability of each of the one or more resources in the resource constrained device is determined at a periodic interval or at run time.",14,claim 14,0,A
10606737,16,"16. A non-transitory computer-readable storage medium having stored thereon, a set of computer-executable instructions for causing a computer comprising one or more processors to perform steps comprising: determining, via a testing engine, a plurality of test cases for testing a resource constrained device; accessing, via the testing engine, a plurality of test scripts corresponding to the plurality of test cases; determining, via the testing engine, a set of mutually independent primitive executables for the plurality of test scripts corresponding to the plurality of test cases, by: determining a plurality of steps of the plurality of test scripts; and determining one or more primitive executables for each of the plurality of steps of the plurality of test scripts, wherein the one or more primitive executables for each of the plurality of steps of the plurality of test scripts correspond to one or more atomic operations of the resource constrained device; determining, via the testing engine, a candidate test case from the plurality of test cases, wherein the candidate test case from the plurality of test cases is determined based on: computing a test score for each of the plurality of test cases based on a plurality of script execution parameters for a corresponding test script, wherein each of the plurality of script execution parameters for the corresponding test script comprises at least one of an estimated time of execution, an estimated usage of one or more resources, and a coverage of one or more components of the resource constrained device; and selecting the candidate test case from the plurality of test cases based on the computed test score for each of the plurality of test cases; transmitting, via the testing engine, the one or more primitive executables for each of the plurality of steps of the plurality of test scripts corresponding to the candidate test case from the plurality of test cases to the resource constrained device for execution; and receiving, via the testing engine, a result corresponding to the execution of the one or more primitive executables for each of the plurality of steps of the plurality of test scripts corresponding to the candidate test case from the plurality of test cases.",15,,0,A
10606738,1,"1. A method, comprising: receiving results from a network of nodes, by a submission node, the results created after execution of a test package by the network of nodes to perform a test associated with an application; and updating a blockchain with the results, by the submission node.",0,,1,A
10606738,2,"2. The method of claim 1 , further comprising: creating, by the submission node, a contract comprising test information used to perform the test; including the contract and a request in the test package, by the submission node; and providing the test package to the network of nodes, by the submission node.",1,claim 1,0,A
10606738,3,"3. The method of claim 2 , wherein the contract comprises one or more of a reward for performing the test, a number of test cycles, an amount of central processing unit utilization, an amount of memory utilization, and an amount of time.",2,claim 2,0,A
10606738,4,"4. The method of claim 1 , wherein the test package comprises an image container.",3,claim 1,0,A
10606738,5,"5. The method of claim 1 , wherein the submission node comprises a distributed peer proxy node server configured to distribute the test package to the network of nodes, and the network of nodes comprises a plurality of distributed peer proxy node client devices.",4,claim 1,0,A
10606738,6,"6. The method of claim 1 , further comprising: comparing the received results to known results associated with the application, by the submission node; and creating an alert, by the submission node, when the results are different from the known results.",5,claim 1,0,A
10606738,7,"7. The method of claim 1 , further comprising: broadcasting the results, by the submission node, to one or more client devices in the network.",6,claim 1,0,A
10606738,8,"8. An apparatus, comprising: a receiver configured to receive results from a network of nodes, the results created after execution of a test package by the network of nodes to perform a test associated with an application; and a processor configured to update a blockchain with the results.",7,,0,A
10606738,9,"9. The apparatus of claim 8 , wherein the processor is further configured to: create a contract comprising test information used to perform the test; include the contract and a request in the test package; and provide the test package to the network of nodes.",8,claim 8,0,A
10606738,10,"10. The apparatus of claim 9 , wherein the contract comprises one or more of a reward for performing the test, a number of test cycles, an amount of central processing unit utilization, an amount of memory utilization, and an amount of time.",9,claim 9,0,A
10606738,11,"11. The apparatus of claim 8 , wherein the test package comprises an image container.",10,claim 8,0,A
10606738,12,"12. The apparatus of claim 8 , wherein the apparatus comprises a distributed peer proxy node server configured to distribute the test package to the network of nodes, and the network of nodes comprises a plurality of distributed peer proxy node client devices.",11,claim 8,0,A
10606738,13,"13. The apparatus of claim 8 , wherein the processor is further configured to: compare the received results to known results associated with the application; and create an alert when the results are different from the known results.",12,claim 8,0,A
10606738,14,"14. The apparatus of claim 8 , further comprising: a transmitter configured to broadcast the results to one or more client devices in the network.",13,claim 8,0,A
10606738,15,"15. A non-transitory computer readable storage medium storing instructions that, when executed, cause a processor to perform: receiving results from a network of nodes, the results created after execution of a test package by the network of nodes to perform a test associated with an application; and updating a blockchain with the results.",14,,0,A
10606738,16,"16. The non-transitory computer readable storage medium of claim 15 , wherein the instructions are further configured to cause the processor to perform: creating a contract comprising test information used to perform the test; including the contract and a request in the test package; and providing the test package to the network of nodes.",15,claim 15,0,A
10606738,17,"17. The non-transitory computer readable storage medium of claim 16 , wherein the contract comprises one or more of a reward for performing the test, a number of test cycles, an amount of central processing unit utilization, an amount of memory utilization, and an amount of time.",16,claim 16,0,A
10606738,18,"18. The non-transitory computer readable storage medium of claim 15 , wherein the test package comprises an image container.",17,claim 15,0,A
10606738,19,"19. The non-transitory computer readable storage medium of claim 15 , wherein the test package is distributed by a distributed peer proxy node server, and the network of nodes comprises a plurality of distributed peer proxy node client devices.",18,claim 15,0,A
10606738,20,"20. The non-transitory computer readable storage medium of claim 15 , wherein the instructions are further configured to cause the processor to perform at least one of: comparing the received results to known results associated with the application; creating an alert when the results are different from the known results; and broadcasting the results to one or more client devices in the network.",19,claim 15,0,A
10606739,1,"1. A device, comprising: a memory; and one or more processors to: receive information identifying a development project; process the information identifying the development project to determine a set of scripts to assess program code of the development project, the set of scripts including a first script to detect an execution type of error, the set of scripts including a second script to detect a non-execution type of error; configure the set of scripts after determining the set of scripts; generate an artifact that includes one or more scripts of the set of scripts; communicate with a client device to monitor the development project and to periodically execute the artifact to perform a project assessment of the development project; receive, from the client device, information identifying results of the project assessment based on communicating with the client device to monitor the development project and to periodically execute the artifact, the results including information associated with detecting the execution type of error or information associated with detecting the non-execution type of error; and provide the information identifying the results.",0,,1,A
10606739,2,"2. The device of claim 1 , where the one or more processors are further to: execute a script, of the set of scripts, to determine whether a set of accessibility standards is satisfied by the development project; and communicate with the client device to provide an indication of whether the set of accessibility standards is satisfied by the development project.",1,claim 1,0,A
10606739,3,"3. The device of claim 1 , where the one or more processors, when configuring the set of scripts, are to: modify a script, of the set of scripts, based on the development project.",2,claim 1,0,A
10606739,4,"4. The device of claim 1 , where the one or more processors, when determining the set of scripts, are to: identify another development project; determine one or more scripts associated with the other development project; and select the one or more scripts associated with the other development project for the development project.",3,claim 1,0,A
10606739,5,"5. The device of claim 1 , where the one or more processors, when communicating with the client device to monitor the development project and to periodically execute the artifact, are to: provide, to the client device for execution, a test suite including the artifact.",4,claim 1,0,A
10606739,6,"6. The device of claim 1 , where the one or more processors, when providing the information identifying the results, are to: provide information identifying a certification relating to one or more requirements for the development project.",5,claim 1,0,A
10606739,7,"7. The device of claim 1 , where the one or more processors, when providing the information identifying the results, are to: provide information identifying a quality score associated with a set of developers working on the development project.",6,claim 1,0,A
10606739,8,"8. A method carried out with execution of memory-stored instructions coupled to a corresponding processor of one or more processing devices, comprising: determining, by a processing device, a set of scripts for a project assessment of program code of a development project; configuring, by the processing device, the set of scripts for execution to perform the project assessment of the program code of the development project based on determining the set of scripts, the set of scripts including: a first script to detect an execution type of error, and a second script to detect a non-execution type of error; generating, by the processing device, an artifact that includes one or more scripts of the set of scripts; monitoring, by the processing device, the development project; determining, by the processing device, to execute the one or more scripts to perform the project assessment of the program code of the development project based on monitoring the development project; communicating, by the processing device, with another device to monitor the development project and to periodically execute the artifact that includes the one or more scripts to perform the project assessment of the program code of the development project; receiving, by the processing device and from the other device, information identifying a set of results of the project assessment of the program code of the development project based on the other device executing the artifact that includes the one or more scripts; generating, by the processing device, a set of recommendations relating to the development project based on the set of results of the project assessment of the program code of the development project; and providing, by the processing device, information associated with the set of recommendations after generating the set of recommendations, the information, associated with the set of recommendations, identifying a project assessment result including information associated with detecting an execution type of error or information associated with detecting a non-execution type of error.",7,,0,A
10606739,9,"9. The method of claim 8 , where providing the information associated with the set of recommendations comprises: providing, to the other device, the information associated with the set of recommendations to cause the set of recommendations to be implemented for the development project.",8,claim 8,0,A
10606739,10,"10. The method of claim 8 , where generating the set of recommendations comprises: generating a recommendation relating to at least one of: program code quality, data security, data retention, data protection and risk coverage, program code documentation, development project accessibility, or a task assignment for a developer of the development project.",9,claim 8,0,A
10606739,11,"11. The method of claim 8 , further comprising: performing an initial assessment of the program code of the development project to identify an open source portion of the program code of the development project; determining a stored script relating to testing the open source portion; and including the stored script in the set of scripts to test the open source portion.",10,claim 8,0,A
10606739,12,"12. The method of claim 8 , further comprising: performing an initial assessment of the program code of the development project to identify a portion of the program code of the development project that is used in another development project, the other development project being associated with a stored script to test the portion of the program code of the development project; and including the stored script in the set of scripts to test the portion of the program code of the development project.",11,claim 8,0,A
10606739,13,"13. The method of claim 8 , further comprising: determining a portion of program code of another development project corresponding to a portion of the program code of the development project; determining documentation for the portion of the program code of the other development project; and including the documentation for the portion of the program code of the other development project in the development project to document the portion of the program code of the development project; and where providing the information associated with the set of recommendations comprises: providing the information associated with the set of recommendations based on including the documentation for the portion of the program code of the other development project in the development project.",12,claim 8,0,A
10606739,14,"14. A non-transitory computer-readable medium storing instructions, the instructions comprising: one or more instructions that, when executed by one or more processors, cause the one or more processors to: receive information identifying a development project; configure a set of scripts to assess program code of the development project, the set of scripts including; a first script to detect an execution type of error; a second script to detect a non-execution type of error; generate an artifact that includes one or more scripts of the set of scripts; determine to execute the one or more scripts to perform a project assessment of the development project; communicate with a client device to monitor the development project and to periodically execute the artifact that includes the one or more scripts to perform the project assessment of the development project; receive, from the client device, information identifying a result of the project assessment of the development project based on the client device executing the artifact that includes the one or more scripts; generate a user interface including the information identifying the result of the project assessment of the development project, the result of the project assessment of the development project including information associated with detecting an execution type of error or information associated with detecting a non-execution type of error; and communicate with the client device to provide the user interface for displaying the result of the project assessment of the development project via the client device.",13,,0,A
10606739,15,"15. The non-transitory computer-readable medium of claim 14 , where the one or more instructions, when executed by the one or more processors, further cause the one or more processors to: determine, based on the information associated with detecting the non-execution type of error, whether a set of accessibility standards is satisfied by the development project; and where the one or more instructions, that cause the one or more processors to generate the user interface, cause the one or more processors to: include, in the user interface, an indication of whether the set of accessibility standards is satisfied by the development project.",14,claim 14,0,A
10606739,16,"16. The non-transitory computer-readable medium of claim 14 , where the one or more instructions, when executed by the one or more processors, further cause the one or more processors to: modify a script, of the set of scripts, to configure the script based on the development project.",15,claim 14,0,A
10606739,17,"17. The non-transitory computer-readable medium of claim 14 , where the one or more instructions, that cause the one or more processors, further cause the one or more processors to: identify another development project similar to the development project; determine one or more scripts associated with the other development project; and select the one or more scripts associated with the other development project for the development project; and where the one or more instructions, that cause the one or more processors to configure the set of scripts, cause the one or more processors to: configure the one or more scripts associated with the other development project.",16,claim 14,0,A
10606739,18,"18. The non-transitory computer-readable medium of claim 14 , where the one or more instructions, when executed by the one or more processors, further cause the one or more processors to: generate a test suite that includes the one or more scripts; provide the test suite to the client device; and cause the client device to execute the test suite to execute the one or more scripts.",17,claim 14,0,A
10606739,19,"19. The non-transitory computer-readable medium of claim 14 , where the one or more instructions, when executed by the one or more processors, further cause the one or more processors to: process, using a machine learning technique, first data relating to the result of the project assessment of the development project and second data relating to results of executing other sets of scripts on other development projects; determine, based on processing the first data and the second data, a set of recommendations relating to the development project; and where the one or more instructions, that cause the one or more processors to generate the user interface, cause the one or more processors to: include the set of recommendations in the user interface.",18,claim 14,0,A
10606739,20,"20. The non-transitory computer-readable medium of claim 14 , where the non-execution type of error includes an error associated with an accessibility requirement for text-to-speech functionality.",19,claim 14,0,A
10606740,1,"1. A system comprising: a processor comprising a plurality of compute units; a control unit; and a memory subsystem; wherein the processor is configured to: launch a plurality of threads on the plurality of compute units, wherein each thread generates memory write requests targeting a memory location in the memory subsystem, each write request specifying a buffer identifier without specifying a target memory address; convey the memory write requests to the control unit; wherein the control unit is configured to: receive the memory write requests which do not specify target memory addresses; determine a memory starting address that corresponds to the buffer identifier; and generate target memory addresses for the memory write requests based at least in part on the memory starting address, wherein the target memory addresses reference locations in the memory subsystem.",0,,1,A
10606740,2,"2. The system as recited in claim 1 , wherein the control unit is configured to increment a target memory address after generating the target memory address for a given memory request.",1,claim 1,0,A
10606740,3,"3. The system as recited in claim 1 , wherein the control unit is located in a memory controller.",2,claim 1,0,A
10606740,4,"4. The system as recited in claim 1 , wherein the control unit is located in a cache.",3,claim 1,0,A
10606740,5,"5. The system as recited in claim 1 , wherein each write request comprises coordinates of one or more rasterized pixels.",4,claim 1,0,A
10606740,6,"6. The system as recited in claim 5 , wherein the control unit is configured to interleave write requests from the plurality of threads into a single output buffer stored in the memory subsystem.",5,claim 5,0,A
10606740,7,"7. The system as recited in claim 1 , wherein the control unit is configured to store an indication of a size of a single output buffer utilized by the write requests when the plurality of threads have completed execution.",6,claim 1,0,A
10606740,8,"8. A method comprising: launching a plurality of threads on a plurality of compute units, wherein each thread generates memory write requests targeting a memory location in a memory subsystem, each write request specifying a buffer identifier without specifying target memory addresses; conveying memory write requests to a control unit; receiving, at the control unit, the plurality of memory write requests which do not specify a target memory address; and determining, by the control unit, a memory starting address that corresponds to the buffer identifier; and generating, by the control unit, target memory addresses for the plurality of memory write requests based at least in part on the memory starting address.",7,,0,A
10606740,9,"9. The method as recited in claim 8 , further comprising incrementing, by the control unit, a target memory address after generating the target memory address for a given memory request.",8,claim 8,0,A
10606740,10,"10. The method as recited in claim 8 , wherein the control unit is located in a memory controller.",9,claim 8,0,A
10606740,11,"11. The method as recited in claim 8 , wherein the control unit is located in a cache.",10,claim 8,0,A
10606740,12,"12. The method as recited in claim 8 , wherein the plurality of memory requests are write requests, wherein each write request comprises coordinates of one or more rasterized pixels.",11,claim 8,0,A
10606740,13,"13. The method as recited in claim 12 , further comprising interleaving write requests from the plurality of threads into a single output buffer stored in the memory subsystem.",12,claim 12,0,A
10606740,14,"14. The method as recited in claim 8 , further comprising storing an indication of a size of a single output buffer utilized by the write requests when the plurality of threads have completed execution.",13,claim 8,0,A
10606740,15,"15. An apparatus comprising: a control unit; and a memory subsystem; wherein the control unit is configured to: receive memory write requests targeting a memory location in a memory subsystem, each write request specifying a buffer identifier without including a target memory address; and determine a memory starting address that corresponds to the buffer identifier; and generate target memory addresses for the memory write requests based at least in part on the memory starting address, wherein the target memory addresses reference locations in the memory subsystem.",14,,0,A
10606740,16,"16. The apparatus as recited in claim 15 , wherein the control unit is configured to increment a target memory address after generating the target memory address for a given memory request.",15,claim 15,0,A
10606740,17,"17. The apparatus as recited in claim 15 , wherein the control unit is located in a memory controller.",16,claim 15,0,A
10606740,18,"18. The apparatus as recited in claim 15 , wherein the control unit is located in a cache.",17,claim 15,0,A
10606740,19,"19. The apparatus as recited in claim 15 , wherein the plurality of memory requests are write requests, wherein each write request comprises coordinates of one or more rasterized pixels.",18,claim 15,0,A
10606740,20,"20. The apparatus as recited in claim 19 , wherein the control unit is configured to interleave write requests from the plurality of threads into a single output buffer stored in the memory subsystem.",19,claim 19,0,A
10606741,1,"1. A process performed by a computing device for deallocating blocks of memory, comprising: receiving a request to deallocate a previously allocated block of memory of (x) unit size; determining whether a binary buddy block is free; starting with a last power of 2 units block of memory released, merging the last power of 2 units block of memory with the binary buddy block to form a merged power of 2 units block of memory when the binary buddy block is free and has the same size as the released power of 2 units block of memory, and not merging an adjacent binary buddy block with the last power of 2 units block of memory in response to the binary buddy block being not free or having size not equal to that of the last power of 2 units block of memory; associating a max size with each merged power of 2 units block of memory; adjusting a maximum unit size value of the binary buddy block when it is not merged with the last power of 2 units block of memory and the address of the binary buddy block is greater than the address of the last power of 2 units block of memory; and successively releasing decreasing power of 2 units blocks of memory from the previously allocated block of memory until the entire previously allocated block has been released.",0,,1,A
10606741,2,"2. The process of claim 1 , further comprising: associating a max size with each power of 2 units block of memory released.",1,claim 1,0,A
10606741,3,"3. The process of claim 1 , further comprising: repeating the merging step for each merged power of 2 units block of memory, while the size of the power of 2 units block of memory has a size less than its max size.",2,claim 1,0,A
10606741,4,"4. The process of claim 1 , further comprising determining the binary buddy block as the next power of 2 units block of memory for merging at its new, merged size, when the binary buddy block is merged with the last power of 2 units block of memory and the address of the binary block is less than the address of the last power of 2 units block of memory.",3,claim 1,0,A
10606741,5,"5. The process of claim 1 , further comprising determining the last power of 2 units block of memory as the next power of 2 units block of memory for merging at its new, merged size, when the binary buddy block is merged with the last power of 2 block and the address of the binary block is greater than the address of the last power of 2 units block of memory.",4,claim 1,0,A
10606742,1,"1. A method for programming a motor drive having a rectifier that in operation converts an alternating current (AC) voltage input to a direct current (DC) voltage output and an inverter that, in operation, converts the DC voltage output to a controlled frequency AC output to drive an electric motor, and a human interface module that in operation displays settings for driving the electric motor, comprising: storing a programming configuration for driving the electric motor and controlling operation of the human interface module; prior to placing the motor drive in service to drive the electric motor, coupling a flash memory to the motor drive, the motor drive being separate from the electric motor to be driven by the motor drive; and prior to placing the motor drive in service to drive the electric motor, transferring a programming configuration to the flash memory of the motor drive based on the programming configuration, the programming configuration, in operation, determining operating characteristics of the motor drive.",0,,1,A
10606742,2,"2. The method of claim 1 , wherein the human interface module is configured to provide operator control of the motor drive.",1,claim 1,0,A
10606742,3,"3. The method of claim 1 , wherein the programming configuration comprises firmware applicable to both of the motor drive and/or to the human interface module.",2,claim 1,0,A
10606742,4,"4. The method of claim 3 , wherein the motor drive and the human interface module are communicatively coupled to one another.",3,claim 3,0,A
10606742,5,"5. The method of claim 4 , wherein the human interface module comprises a peripheral device located externally from the motor drive.",4,claim 4,0,A
10606742,6,"6. The method of claim 5 , wherein transferring the programming configuration comprises adding to or replacing at least a portion of the programming configuration previously included on the flash memory of the motor drive and the human interface module of the motor drive.",5,claim 5,0,A
10606742,7,"7. The method of claim 6 , wherein transferring the programming configuration comprises replacing the current programming configuration with the programming configuration.",6,claim 6,0,A
10606742,8,"8. A motor drive having a rectifier that in operation converts an alternating current (AC) voltage input to a direct current (DC) voltage output and an inverter that in operation converts the DC voltage output to a controlled frequency AC output to drive an electric motor, and a human interface module that in operation displays settings for driving the electric motor, comprising: drive circuitry separate from the electric motor to be driven by the motor drive, the drive circuitry configured to output an output power waveform that in operation drives the electric motor; a flash memory that, in operation, stores programming configuration for controlling the electric motor; and a memory port communicatively coupled to the drive circuitry and to the human interface module, wherein the memory port is configured to enable the flash memory to be added and removed from the assembled motor drive, wherein the flash memory, in operation, is configured to receive and store the programming configuration prior to placing the motor drive in service to drive the electric motor.",7,,0,A
10606742,9,"9. The motor drive of claim 8 , wherein the human interface module is configured to provide operator control of the motor drive.",8,claim 8,0,A
10606742,10,"10. The motor drive of claim 8 , wherein the programming configuration comprises firmware applicable to both of the motor drive and/or to the human interface module.",9,claim 8,0,A
10606742,11,"11. The motor drive of claim 10 , wherein the drive circuitry and the human interface module are communicatively coupled to one another.",10,claim 10,0,A
10606742,12,"12. The motor drive of claim 8 , wherein the programming configuration includes parameter settings for multiple programming configurations.",11,claim 8,0,A
10606742,13,"13. The motor drive of claim 12 , wherein the human interface module comprises a peripheral device located externally from the motor drive.",12,claim 12,0,A
10606742,14,"14. The motor drive of claim 12 , wherein the motor drive is configured to update the programming configuration by adding to or replacing at least a portion of the programming configuration while coupled to the electric motor.",13,claim 12,0,A
10606742,15,"15. The motor drive of claim 14 , wherein the motor drive is configured to receive the programming configuration by removal and programming of the flash memory from the memory port while the motor drive is coupled to the electric motor.",14,claim 14,0,A
10606742,16,"16. A method for programming a motor drive having a rectifier that in operation converts an alternating current (AC) voltage input to a direct current (DC) voltage output and an inverter that in operation converts the DC voltage output to a controlled frequency AC output to drive an electric motor, and a human interface module that in operation displays settings for driving the electric motor, comprising: prior to placing the motor drive in service to drive the electric motor, storing a programming configuration on a flash memory of the motor drive, the programming configuration for driving the electric motor and controlling operation of the human interface module; and removing the flash memory from the motor drive and installing the flash memory including the programming configuration in a second motor drive for driving the same electric motor.",15,,0,A
10606742,17,"17. The method of claim 16 , wherein the flash memory is provided in the human interface module, and is installed in the second motor drive by removing the human interface module from the motor drive and installing the human interface module in the second motor drive by removing the human interface module from an external port of the motor drive and installing the human interface module on a second external port of the second motor drive.",16,claim 16,0,A
10606742,18,"18. The method of claim 16 , comprising updating the programming configuration by a network connection once the flash memory is installed on the second motor drive.",17,claim 16,0,A
10606742,19,"19. The method of claim 16 , wherein flash memory is installed in the second motor drive prior to coupling the second motor drive to the electric motor.",18,claim 16,0,A
10606742,20,"20. A system for programming a motor drive having a rectifier that in operation converts an alternating current (AC) voltage input to a direct current (DC) voltage output and an inverter that in operation converts the DC voltage output to a controlled frequency AC output to drive an electric motor, and a human interface module that in operation displays settings for driving the electric motor, comprising: a flash memory configured to store a programming configuration for driving the electric motor and controlling operation of the human interface module prior to placing the motor drive in service to drive the electric motor; and a second motor drive configured to receive the flash memory prior to placing the second motor drive in service to drive the same electric motor and to utilize the programming configuration stored on the flash memory for controlling the electric motor.",19,,0,A
10606742,21,"21. The system of claim 20 , wherein the second motor drive is configured to update the programming configuration by adding to or replacing at least a portion of the programming configuration by connection to a network.",20,claim 20,0,A
10606742,22,"22. The system of claim 20 , wherein the flash memory is provided in the human interface module, and is installed in the second motor drive by removing the human interface module from an external port of the motor drive and installing the human interface module in an external port of the second motor drive.",21,claim 20,0,A
10606742,23,"23. The system of claim 20 , wherein the flash memory unit is configured to couple to a first memory port of the first motor drive, to retrieve the configuration file from the first motor drive, to couple to a second memory port of the second motor drive, and to transfer the configuration file to the second motor drive.",22,claim 20,0,A
10606742,24,"24. The system of claim 23 , wherein the communicative coupling comprises a wireless connection.",23,claim 23,0,A
10606742,25,"25. A method of installing a programming configuration of a motor drive having a rectifier that in operation converts an alternating current (AC) voltage input to a direct current (DC) voltage output and an inverter that in operation converts the DC voltage output to a controlled frequency AC output to drive an electric motor, and a human interface module that in operation displays settings for driving the electric motor, the motor drive separate from the electric motor to be driven by the motor drive, comprising: prior to placing the motor drive in service to drive the electric motor, loading a programming configuration stored on a flash memory, the programming configuration for driving the electric motor and controlling operation of the human interface module; and prior to placing the motor drive in service to drive the electric motor, installing the flash memory in the motor drive.",24,,0,A
10606742,26,"26. The method of claim 25 , wherein the flash memory is provided in a human interface module, and the flash memory is installed in the motor drive by installing the human interface module in the motor drive.",25,claim 25,0,A
10606742,27,"27. The method of claim 26 , wherein human interface module is installed in an external port of the motor drive prior to coupling the motor drive to the electric motor.",26,claim 26,0,A
10606742,28,"28. A motor drive having a rectifier that in operation converts an alternating current (AC) voltage input to a direct current (DC) voltage output and an inverter that in operation converts the DC voltage output to a controlled frequency AC output to drive an electric motor, and a human interface module that in operation displays settings for driving the electric motor, comprising: drive circuitry separate from the electric motor to be driven by the motor drive, wherein the motor drive is configured to output an output power waveform for driving the electric motor; a memory port communicatively coupled to the drive circuitry; and a flash memory installable and removable from the memory port and storing programming configuration for control of the motor drive; wherein the flash memory is installable in the memory port while storing the programming configuration but prior to placing the motor drive in service to drive the electric motor.",27,,0,A
10606742,29,"29. The motor drive of claim 28 , wherein the programming configuration is stored on the flash memory by a computing device separate from the motor drive.",28,claim 28,0,A
10606742,30,"30. The motor drive of claim 29 , wherein the motor drive is configured to update the programming configuration after the motor drive is coupled to the electric motor.",29,claim 29,0,A
10606742,31,"31. A method for programming a plurality of motor drives having rectifiers that in operation convert alternating current (AC) voltage inputs to direct current (DC) voltage outputs and inverters that in operation convert the DC voltage outputs to controlled frequency AC outputs to drive a plurality of electric motors, and at least one human interface module that in operation displays settings for driving the plurality of electric motors, comprising: transferring programming configuration stored on flash memory to a respective flash memory of a plurality of motor drives that are separate from a plurality of motors to be driven by the respective motor drives, the programming configuration for driving the plurality of electric motors, the transferring occurring prior to placing each of the motor drive in service to drive a respective electric motor.",30,,0,A
10606742,32,"32. The method of claim 31 , comprising updating the programming configuration using a programming device separate from the plurality of motor drives.",31,claim 31,0,A
10606742,33,"33. The method of claim 32 , comprising installing the flash memory of each motor drive in the respective motor drive after transferring the programming configuration to the flash memory but prior to coupling the motor drives to the respective electric motors.",32,claim 32,0,A
10606742,34,"34. A system for programming a plurality of motor drives having rectifiers that in operation convert alternating current (AC) voltage inputs to direct current (DC) voltage outputs and inverters that in operation convert the DC voltage outputs to controlled frequency AC outputs to drive a plurality of electric motors, and at least one human interface module that in operation displays settings for driving the plurality of electric motors, comprising: a plurality of motor drives separate from a plurality of motors to be driven by the respective motor drives, each motor drive comprising an external port for receiving flash memory; a plurality of flash memories configured to store programming configuration for operation of the motor drives in driving the respective electric motors; wherein each flash memory unit is configured to receive the programming configuration prior to placing the motor drives in service to drive the respective electric motors, and to allow an operator to update programming configuration of each motor drive after coupling the motor drive to the respective electric motor.",33,,0,A
10606742,35,"35. The control system of claim 34 , comprising a computing device configured to store the configuration file onto the flash memory unit.",34,claim 34,0,A
10606742,36,"36. The control system of claim 35 , wherein the computing device is separate from the plurality of motor drives.",35,claim 35,0,A
10606742,37,"37. The control system of claim 34 , wherein each of the plurality of motor drives includes an external memory port configured to facilitate communicatively coupling the flash memories to the plurality of motor.",36,claim 34,0,A
10606742,38,"38. A method of updating a programming configuration of a motor drive separate from a motor to be driven by the motor drive, the motor drive having a rectifier that in operation converts an alternating current (AC) voltage input to a direct current (DC) voltage output and an inverter that in operation converts the DC voltage output to a controlled frequency AC output to drive an electric motor, comprising: restricting access to a first set of operating parameters of the motor drive to a programmer of the motor drive; customizing the motor drive for a control system application by manipulating the first set of operating parameters, wherein customizing the first set of operating parameters comprises updating the first set of operating parameters by transferring a configuration file to a flash memory prior to placing the motor drive in service to drive the electric motor; and after coupling the motor drive to the electric motor, enabling an operator to access to a second set of operating parameters of the motor drive via a human interface module, that in operation displays settings for driving the electric motor.",37,,0,A
10606742,39,"39. The method of claim 38 , comprising manipulating the second set of operating parameters on the human interface module coupled to an external port of the motor drive.",38,claim 38,0,A
10606742,40,"40. The method of claim 39 , wherein the programming configuration comprises firmware applicable to the motor drive and the human interface module configured to provide operator control of the motor drive.",39,claim 39,0,A
10606742,41,"41. A motor drive having a rectifier that in operation converts an alternating current (AC) voltage input to a direct current (DC) voltage output and an inverter that in operation converts the DC voltage output to a controlled frequency AC output to drive an electric motor, and a human interface module that in operation displays settings for driving the electric motor, the motor drive separate from the electric motor to be driven by the motor drive, comprising: a memory port communicatively coupled to drive circuitry, wherein the memory port is configured to enable a flash memory storing programming configuration to be added and removed from the assembled motor drive after loading the programming configuration on the flash memory but prior to placing the motor drive in service to drive the electric motor; and the drive circuitry configured to output an output power waveform for driving the electric motor; wherein access to a first set of operating parameters of the motor drive is restricted, and second set of operating parameters of the motor drive is accessible to be customized via the human interface module after coupling the motor drive to the electric motor.",40,,0,A
10606742,42,"42. The motor drive of claim 41 , comprising the human interface module mounted externally on the motor drive and removable from the motor drive, and configured to enable the operator to manipulate the second set of operating parameters.",41,claim 41,0,A
10606742,43,"43. The motor drive of claim 41 , wherein the programming configuration comprises firmware applicable to the motor drive and the human interface module configured to provide operator control of the motor drive.",42,claim 41,0,A
10606743,1,"1. An apparatus, comprising: an array of non-volatile memory cells including a plurality of sections each with a plurality of rows; and a controller configured to: move data stored in a first portion of the array in a first particular order based on a first wear leveling algorithm, wherein the first particular order includes moving data from a first row of a first section of the array to a second row of the first section of the array via a first sensing component stripe, wherein the first sensing component stripe is only coupled to rows of the first section of the array; and move data stored in a second portion of the array in a second particular order different than the first particular order based on a second wear leveling algorithm different from the first wear leveling algorithm and move data from a second section of the array to the first row of the first section of the array, via the first sensing component stripe and a second sensing component stripe, to create an open row in the second section of the array for wear leveling.",0,,1,A
10606743,2,"2. The apparatus of claim 1 , wherein the data stored in the second portion of the array is moved from the second section to the first section prior to the data stored in the first portion of the array being moved again.",1,claim 1,0,A
10606743,3,"3. The apparatus of claim 1 , wherein a first number of sense amplifiers in the first sensing component stripe are activated when moving the data stored in the first portion of the array from the first row to the second row.",2,claim 1,0,A
10606743,4,"4. The apparatus of claim 1 , wherein a first number of sense amplifiers in the first sensing component stripe and a second number of sense amplifiers in the second sensing component stripe are activated when moving the data stored in the second portion of the array from the second section to the first section.",3,claim 1,0,A
10606743,5,"5. The apparatus of claim 1 , wherein the controller is configured to move data stored in a third portion of the array from a third section to the second section in response to data from a particular number of portions of memory cells in the second section being moved within the second section.",4,claim 1,0,A
10606743,6,"6. The apparatus of claim 1 , wherein the controller includes a counter to count a number of times data stored in a plurality of portions of the array is moved between rows within a particular section.",5,claim 1,0,A
10606743,7,"7. The apparatus of claim 1 , wherein the first portion of the array includes a portion of the first row.",6,claim 1,0,A
10606743,8,"8. The apparatus of claim 1 , wherein the first portion of the array includes the first row.",7,claim 1,0,A
10606743,9,"9. The apparatus of claim 1 , wherein the array of non-volatile memory cells is a 3D array.",8,claim 1,0,A
10606743,10,"10. An apparatus, comprising: an array of non-volatile memory cells including a plurality of sections each with a plurality of rows; and a controller configured to: move data stored in a first portion of the array in a first particular order based on a first wear leveling algorithm, wherein the first particular order includes moving the data from a first row of a first section of the array to a second row of the first section of the array via a first sensing component stripe, wherein the first sensing component stripe is only coupled to rows of the first section of the array; and move data stored in a second portion of the array in a second particular order different than the first particular order based on a second wear leveling algorithm different from the first wear leveling algorithm and move data from a second section of the array to the first section of the array, via the first sensing component stripe and a second sensing component stripe, to create an open row in the second section for wear leveling in response to data from each row in the first section being moved within the first section, wherein the second sensing component stripe is only coupled to rows of the second section of the array.",9,,0,A
10606743,11,"11. The apparatus of claim 10 , wherein the controller is configured to move the data stored in the first portion of the array from the first row to the second row by firing the first row of memory cells.",10,claim 10,0,A
10606743,12,"12. The apparatus of claim 10 , wherein the controller is configured to move the data stored in the first portion of the array from the first row to the second row by sensing and latching the data stored in the first portion in one of a first number of sense amplifiers in the first sensing component stripe.",11,claim 10,0,A
10606743,13,"13. The apparatus of claim 10 , wherein the controller is configured to move the data stored in the first portion of the array from the first row to the second row by firing the second row of memory cells.",12,claim 10,0,A
10606743,14,"14. The apparatus of claim 10 , wherein the controller is configured to move the data stored in the first portion of the array from the first row to the second row by moving the data stored in the first portion of the array from a first number of sense amplifiers in the first sensing component stripe to the second row.",13,claim 10,0,A
10606743,15,"15. An apparatus, comprising: an array of non-volatile memory cells including a plurality of sections each with a plurality of rows; and a controller configured to: move data stored in a first section of the array among a plurality of rows in the first section in a first particular order based on a first wear leveling algorithm via a first sensing component stripe, wherein the first sensing component stripe is only coupled to rows in the first section of the array; move a portion of data stored in a particular row of a second section of the array to the first section of the array, via the first sensing component stripe and a second sensing component stripe, to create an open row in the second section of the array for wear leveling; and move data stored in the second section of the array among a plurality of rows in the second section of the array in a second particular order different than the first particular order based on a second wear leveling algorithm different from the first wear leveling algorithm via the second sensing component stripe, wherein the second sensing component stripe is only coupled to rows in the second section of the array.",14,,0,A
10606743,16,"16. The apparatus of claim 15 , wherein the controller is configured to move the data stored in the first section of the array of non-volatile memory cells by firing a row of memory cells in the first section.",15,claim 15,0,A
10606743,17,"17. The apparatus of claim 15 , wherein the controller is configured to move the data stored in the first section of the array by sensing and latching the data stored in the first section of the array in a first number of sense amplifiers in the first sensing component stripe.",16,claim 15,0,A
10606743,18,"18. The apparatus of claim 15 , wherein the controller is configured to perform an error correction operation on the portion of data stored in the particular row of the second section of the array when the portion of data stored in the particular row of the second section of the array is moved from the second section to the first section of the array.",17,claim 15,0,A
10606743,19,"19. The apparatus of claim 15 , wherein the controller is configured to move the portion of data stored in the particular row of the second section of the array of non-volatile memory cells by sensing and latching the portion of data stored in the particular row of the second section of the array of non-volatile memory cells in a second number of sense amplifiers in the second sensing component stripe.",18,claim 15,0,A
10606743,20,"20. The apparatus of claim 15 , wherein the controller is configured to move the portion of data stored in the particular row of the second section of the array of non-volatile memory cells by firing a different row of memory cells in the second section of the array of non-volatile memory cells.",19,claim 15,0,A
10606743,21,"21. A method, comprising: moving data stored in a first portion of an array of non-volatile memory cells in a first particular order based on a first wear leveling algorithm, wherein the first particular order includes moving the data from a first row of a first section of the array of non-volatile memory cells to a second row of the first section of the array of non-volatile memory cells via a first sensing component stripe, wherein the first sensing component stripe is only coupled to rows of the first section of the array of non-volatile memory cells; and moving data stored in a second portion of the array of non-volatile memory cells in a second particular order different than the first particular order based on a second wear leveling algorithm different from the first wear leveling algorithm and moving data from a second section of the array of non-volatile memory cells to the first section of the array of non-volatile memory cells, via the first sensing component stripe and a second sensing component stripe, to create an open row in the second section of the array of non-volatile memory cells for wear leveling in response to data from a particular number of portions of memory cells in the first section of the array of non-volatile memory cells being moved within the first section of the array of non-volatile memory cells, wherein the second sensing component stripe is only coupled to rows of the second section of the array of non-volatile memory cells.",20,,0,A
10606743,22,"22. The method of claim 21 , further comprising moving data stored in a third portion of the array of non-volatile memory cells from a third row of the second section to a fourth row of the second section.",21,claim 21,0,A
10606743,23,"23. The method of claim 21 , further comprising moving the data stored in the second portion of the array from the second section to the first section prior to the data stored in the first portion of the array of non-volatile memory cells being moved again.",22,claim 21,0,A
10606743,24,"24. The method of claim 21 , further comprising activating a first number of sense amplifiers in the first sensing component stripe when moving the data stored in the first portion of the array of non-volatile memory cells from the first row to the second row.",23,claim 21,0,A
10606743,25,"25. The method of claim 21 , further comprising activating a first number of sense amplifiers in the first sensing component stripe and a second number of sense amplifiers in the second sensing component stripe when moving the data stored in the second portion of the array of non-volatile memory cells from the second section to the first section.",24,claim 21,0,A
10606743,26,"26. The method of claim 21 , further comprising moving data stored in a third portion of the array from a third section to the second section in response to data from a particular number of portions of non-volatile memory cells in the second section being moved within the second section.",25,claim 21,0,A
10606743,27,"27. The method of claim 21 , further comprising counting data stored in a plurality of portions of the array of non-volatile memory cells moved between a plurality of rows within a particular section via a counter.",26,claim 21,0,A
10606743,28,"28. A method, comprising: moving data stored in a first section of an array between a plurality of rows in the first section in a first particular order based on a first wear leveling algorithm via a first sensing component stripe, wherein the first sensing component stripe is only coupled to rows in the first section of the array; moving a portion of data stored in a second section of the array to the first section of the array, via the first sensing component stripe and a second sensing component stripe, to create an open row in the second section of the array for wear leveling; and moving data stored in the second section of the array in a second particular order different than the first particular order based on a second wear leveling algorithm different from the first wear leveling algorithm via the second sensing component stripe, wherein the second sensing component stripe is only coupled to rows in the second section of the array.",27,,0,A
10606743,29,"29. The method of claim 28 , further comprising firing a row of memory cells in the second section to move the portion of data stored in the second section of the array of non-volatile memory cells.",28,claim 28,0,A
10606743,30,"30. The method of claim 28 , further comprising sensing and latching the portion of data stored in the second section of the array of non-volatile memory cells in a first number of sense amplifiers in the first sensing component stripe to move the portion of data.",29,claim 28,0,A
10606743,31,"31. The method of claim 28 , further comprising performing an error correction operation on the data when moving the data between the plurality of rows.",30,claim 28,0,A
10606744,1,"1. A method for accessing a flash memory module, comprising: building a plurality of physical block recording tables respectively corresponding to a plurality of logical address to physical address (L2P) mapping tables, wherein each physical block recording table records at least one block whose physical address is recorded in the corresponding L2P mapping table; and when a specific block within the flash memory module is under a garbage collection operation, for a data page of the specific block whose logical address is within a specific L2P mapping table of the plurality of L2P tables, referring to the corresponding physical block recording table to determine whether to read the specific L2P mapping table from the flash memory module, for determining the data page to be valid or invalid.",0,,1,A
10606744,2,"2. The method of claim 1 , wherein the step of referring to the physical block recording table to determine whether to read the specific L2P mapping table from the flash memory module, for determining the data page to be valid or invalid comprises: when the physical block recording table indicates that the specific L2P mapping table has a physical address of the specific block, reading the specific L2P mapping table from the flash memory module and determining the data page to be valid or invalid based on the specific L2P mapping table; and when the physical block recording table indicates that the specific L2P mapping table does not have the physical address of the specific block, determining the data page to be invalid.",1,claim 1,0,A
10606744,3,"3. The method of claim 2 , wherein the step of determining the data page to be invalid when the physical block recording table indicates that the specific L2P mapping table does not have the physical address of the specific block comprises: when the physical block recording table indicates that the L2P mapping table does not have the physical address of the specific block, directly determining the data page to be invalid without reading the specific L2P mapping table from the flash memory module.",2,claim 2,0,A
10606744,4,"4. The method of claim 1 , wherein the physical block recording tables is stored in a memory of a flash memory controller, and when the flash memory controller updates at least a portion of the L2P mapping tables, at least a portion of the physical block recording tables is updated in accordance with the updated contents of the L2P mapping table(s).",3,claim 1,0,A
10606744,5,"5. The method of claim 1 , wherein each of the physical block recording tables records status of a plurality of blocks in the flash memory module, and the status of each block records whether the corresponding L2P mapping table has a physical address of any data page in the specific block.",4,claim 1,0,A
10606744,6,"6. The method of claim 5 , wherein the specific block comprises a plurality of pages; the status of each block is represented by a bit, and the two digit values of the bit are utilized to represent whether the corresponding L2P mapping table has a physical address of any data page in the specific block.",5,claim 5,0,A
10606744,7,"7. The method of claim 1 , wherein each of the physical block recording tables records status of a plurality of block groups in the flash memory module, each block group comprises a plurality of blocks, and the status of each block group records whether the corresponding L2P mapping table has a physical address of any data page of a block in the block group.",6,claim 1,0,A
10606744,8,"8. The method of claim 7 , wherein each of the blocks within the block group comprises a plurality of pages; the status of each block group is represented by a bit, and the two digit values of the bit are utilized to represent whether the corresponding L2P mapping table has a physical address of any data page of a block in the block group.",7,claim 7,0,A
10606744,9,"9. A flash memory controller, wherein the flash memory controller is utilized to access a flash memory module, and the flash memory controller comprises: a read-only memory (ROM), for storing a code; a microprocessor, for executing the code to control access to the flash memory module; and a memory, for storing a plurality of physical block recording tables respectively corresponding to a plurality of L2P mapping tables, wherein each physical block recording table records at least one block whose physical address is recorded in the corresponding L2P mapping table; wherein when a specific block within the flash memory module is under a garbage collection operation, for a data page of the specific block whose logical address is within a specific L2P mapping table of the plurality of L2P tables, referring to the corresponding physical block recording table to determine whether to read the specific L2P mapping table from the flash memory module, for determining the data page to be valid or invalid.",8,,0,A
10606744,10,"10. The flash memory controller of claim 9 , wherein when the physical block recording table indicates that the L2P mapping table has a physical address of the specific block, the microprocessor reads the specific L2P mapping table from the flash memory module and determines the data page to be valid or invalid based on the specific L2P mapping table; and when the physical block recording table indicates that the specific L2P mapping table does not have the physical address of the specific block, the microprocessor determines the data page to be invalid.",9,claim 9,0,A
10606744,11,"11. The flash memory controller of claim 10 , wherein when the physical block recording table indicates that the specific L2P mapping table does not have the physical address of the specific block, the microprocessor directly determines the data page to be invalid without reading the specific L2P mapping table from the flash memory module.",10,claim 10,0,A
10606744,12,"12. The flash memory controller of claim 9 , wherein when the microprocessor updates at least a portion of the L2P mapping tables, at least a portion of the physical block recording tables is updated in accordance with the updated contents of the L2P mapping table together(s).",11,claim 9,0,A
10606744,13,"13. The flash memory controller of claim 9 , wherein each of the physical block recording tables records status of a plurality of blocks in the flash memory module, and the status of each block records whether the corresponding L2P mapping table has a physical address of any data page in the specific block.",12,claim 9,0,A
10606744,14,"14. The flash memory controller of claim 13 , wherein the specific block comprises a plurality of pages; the status of each block is represented by a bit, and the two digit values of the bit are utilized to represent whether the corresponding L2P mapping table has a physical address of any data page in the specific block.",13,claim 13,0,A
10606744,15,"15. The flash memory controller of claim 9 , wherein each of the physical block recording tables records status of a plurality of block groups in the flash memory module, each block group comprises a plurality of blocks, and the status of each block group records whether the corresponding L2P mapping table has a physical address of any data page of a block in the block group.",14,claim 9,0,A
10606744,16,"16. The flash memory controller of claim 15 , wherein each of the blocks within the block group comprises a plurality of pages; the status of each block group is represented by a bit, and the two digit values of the bit are utilized to represent whether the corresponding L2P mapping table has a physical address of any data page of a block in the block group.",15,claim 15,0,A
10606744,17,"17. An electronic device comprising: a flash memory module; and a flash memory controller, for accessing the flash memory module; wherein the flash memory controller builds a plurality of physical block recording tables respectively corresponding to a plurality of L2P mapping tables, wherein each physical block recording table records at least one block whose physical address is recorded in the corresponding L2P mapping table; and when a specific block within the flash memory module is under a garbage collection operation, for a data page of the specific block whose logical address is within a specific L2P mapping table, referring to the corresponding physical block recording table to determine whether to read the specific L2P mapping table from the flash memory module, for determining the data page to be valid or invalid.",16,,0,A
10606744,18,"18. The electronic device of claim 17 , wherein when the physical block recording table indicates that the L2P mapping table has a physical address of the specific block, the flash memory controller reads the specific L2P mapping table from the flash memory module and determines the data page to be valid or invalid based on the specific L2P mapping table; and when the physical block recording table indicates that the specific L2P mapping table does not have the physical address of the specific block, the flash memory controller directly determines the data page to be invalid without reading the specific L2P mapping table from the flash memory module.",17,claim 17,0,A
10606745,1,"1. A memory system, comprising: a non-volatile memory; a first memory and a second memory; and a memory controller configured to receive a first logical address from a host in a first reading, read a first address conversion table corresponding to the first logical address from the non-volatile memory, store, in the non-volatile memory, a second address conversion table of a first state stored in the first memory in a case where the first logical address corresponds to a second logical address stored in the second memory, and in a case where the first logical address does not correspond to the second logical address, store a third logical address in the second memory, the third logical address corresponding to a third address conversion table of a second state stored in the first memory, erase the third address conversion table from the first memory, and store the first address conversion table in the first memory.",0,,1,A
10606745,2,"2. The memory system of claim 1 , wherein the memory controller is further configured to, after the second address conversion table is stored in the non-volatile memory, erase the second address conversion table from the first memory and store the first address conversion table in the first memory.",1,claim 1,0,A
10606745,3,"3. The memory system of claim 1 , wherein the first state indicates a state in which a content of a corresponding address conversion table stored in the first memory is different from a content of the corresponding address conversion table stored in the non-volatile memory.",2,claim 1,0,A
10606745,4,"4. The memory system of claim 1 , wherein the second state indicates a state in which a content of a corresponding address conversion table stored in the first memory is not different from a content of the corresponding address conversion table stored in the non-volatile memory.",3,claim 1,0,A
10606745,5,"5. The memory system of claim 1 , wherein the second logical address stored in the second memory indicates a local access target address.",4,claim 1,0,A
10606745,6,"6. A memory system, comprising: a non-volatile memory; a first memory and a second memory, and a memory controller configured to receive a first logical address from a host in a first reading, read a first address conversion table corresponding to the first logical address from the non-volatile memory, and store, in the non-volatile memory, a second address conversion table of a first state stored in the first memory in a case where the first logical address corresponds to a second logical address stored in the second memory, wherein, at a time of a second reading before the first reading, a fourth address conversion table corresponding to the second logical address is erased from the first memory, and the second logical address is stored in the second memory.",5,,0,A
10606746,1,"1. An access request processing method, wherein the method is performed by a computer system, the computer system comprises a processor and a non-volatile memory (NVM), and the access request processing method comprises: receiving a write request, wherein the write request carries a file identifier, a buffer pointer, and a size of to-be-written data, the buffer pointer points to a buffer for caching the to-be-written data, and the to-be-written data is modified data of an object file that is to be accessed according to the write request; obtaining an access location according to the file identifier, wherein the access location indicates a start address for writing data into the object file according to the write request; determining object cache pages according to the access location, the size of the to-be-written data, and a size of a cache page, wherein the object cache pages are memory pages in internal memory that are configured to cache file data that is in the object file and that is modified by the to-be-written data; determining that the NVM stores a log chain of a first object cache page of the object cache pages, wherein the log chain of the first object cache page comprises a first data node, the first data node comprises information about a first log data chunk, and the first log data chunk comprises modified data of the first object cache page during a modification; inserting a second data node into the log chain of the first object cache page, wherein the second data node comprises information about a second log data chunk of the first object cache page, the second log data chunk is at least partial to-be-written data that is obtained from the buffer to which the buffer pointer points, and the information about the second log data chunk comprises the second log data chunk or a storage address of the second log data chunk in the NVM; determining that an intra-page location of the second log data chunk overlaps an intra-page location of the first log data chunk, wherein the intra-page location of the second log data chunk is a location of the second log data chunk in the first object cache page, and the intra-page location of the first log data chunk is a location of the first log data chunk in the first object cache page; and setting, in the first data node, data that is in the first log data chunk and that overlaps the second log data chunk to invalid data.",0,,1,A
10606746,2,"2. The access request processing method according to claim 1 , wherein the inserting the second data node into the log chain of the first object cache page comprises inserting the second data node into a head or a tail of the log chain of the first object cache page, wherein after the second data node is inserted, the log chain of the first object cache page comprises at least two data nodes that are sequentially linked according to an update sequence of the first object cache page.",1,claim 1,0,A
10606746,3,"3. The access request processing method according to claim 1 , further comprising: updating at least one log data chunk in the log chain to the first object cache page according to information about the at least one log data chunk, to obtain an updated first object cache page, wherein the information about the at least one log data chunk is recorded in the log chain of the first object cache page; and storing data of the updated first object cache page in an external storage device of the computer system.",2,claim 1,0,A
10606746,4,"4. The access request processing method according to claim 1 , wherein the setting, in the first data node, data that is in the first log data chunk and that overlaps the second log data chunk to invalid data comprises, when the intra-page location of the second log data chunk partially overlaps the intra-page location of the first log data chunk, modifying, in the first data node, information about the intra-page location of the first log data chunk according to an intra-page location of the data that is in the first log data chunk and that overlaps the second log data chunk, to set the data that is in the first log data chunk and that overlaps the second log data chunk to invalid data, wherein the information about the intra-page location of the first log data chunk comprises at least one of an ��intra-page offset�� or a ��log data length�� of the first",3,claim 1,0,A
10606746,5,"5. The access request processing method according to claim 1 , wherein the setting, in the first data node, data that is in the first log data chunk and that overlaps the second log data chunk to invalid data comprises, when the intra-page location of the second log data chunk comprises the intra-page location of the first log data chunk, deleting the first data node.",4,claim 1,0,A
10606746,6,"6. The access request processing method according to claim 1 , wherein the setting, in the first data node, data that is in the first log data chunk and that overlaps the second log data chunk to invalid data comprises: when the intra-page location of the first log data chunk comprises the intra-page location of the second log data chunk, splitting the first data node into a first data subnode and a second data subnode, wherein data structures of the first data subnode and the second data subnode are the same as a data structure of the first data node; and separately recording, in the first data subnode and the second data subnode, data that is in the first log data chunk and that does not overlap the second log data chunk, to set the data that is in the first log data chunk and that overlaps the second log data chunk to invalid data.",5,claim 1,0,A
10606746,7,"7. The access request processing method according to claim 3 , further comprising after storing the data of the updated first object cache page in the external storage device of the computer system, reclaiming the log chain of the first object cache page.",6,claim 3,0,A
10606746,8,"8. A computer system comprising: a non-volatile memory (NVM); and a processor coupled to the NVM and configured to: receive a write request, wherein the write request carries a file identifier, a buffer pointer, and a size of to-be-written data, the buffer pointer points to a buffer for caching the to-be-written data, and the to-be-written data is modified data of an object file that is to be accessed according to the write request; obtain an access location according to the file identifier, wherein the access location indicates a start address for writing data into the object file according to the write request; determine object cache pages according to the access location, the size of the to-be-written data, and a size of a cache page, wherein the object cache pages are memory pages in internal memory that are configured to cache file data that is in the object file and that is modified by the to-be-written data; determine that the NVM stores a log chain of a first object cache page of the object cache pages, wherein the log chain of the first object cache page comprises a first data node, the first data node comprises information about a first log data chunk, and the first log data chunk comprises modified data of the first object cache page during a modification; insert a second data node into the log chain of the first object cache page, wherein the second data node comprises information about a second log data chunk of the first object cache page, the second log data chunk is at least partial to-be-written data that is obtained from the buffer to which the buffer pointer points, and the information about the second log data chunk comprises the second log data chunk or a storage address of the second log data chunk in the NVM; determine that an intra-page location of the second log data chunk overlaps an intra-page location of the first log data chunk, wherein the intra-page location of the second log data chunk is a location of the second log data chunk in the first object cache page, and the intra-page location of the first log data chunk is a location of the first log data chunk in the first object cache page; and set, in the first data node, data that is in the first log data chunk and that overlaps the second log data chunk to invalid data.",7,,0,A
10606746,9,"9. The computer system according to claim 8 , wherein the processor is further configured to insert the second data node into a head or a tail of the log chain of the first object cache page, wherein after the second data node is inserted, the log chain of the first object cache page comprises at least two data nodes that are sequentially linked according to an update sequence of the first object cache page.",8,claim 8,0,A
10606746,10,"10. The computer system according to claim 8 , wherein the processor is further configured to: update at least one log data chunk in the log chain to the first object cache page according to information about the at least one log data chunk, to obtain an updated first object cache page, wherein the information about the at least one log data chunk is recorded in the log chain of the first object cache page; and store data of the updated first object cache page in an external storage device of the computer system.",9,claim 8,0,A
10606746,11,"11. The computer system according to claim 8 , wherein the processor is further configured to, when the intra-page location of the second log data chunk partially overlaps the intra-page location of the first log data chunk, modify, in the first data node, information about the intra-page location of the first log data chunk according to an intra-page location of the data that is in the first log data chunk and that overlaps the second log data chunk, to set the data that is in the first log data chunk and that overlaps the second log data chunk to invalid data, wherein the information about the intra-page location of the first log data chunk comprises at least one of an ��intra-page offset�� or a ��log data length�� of the first",10,claim 8,0,A
10606746,12,"12. The computer system according to claim 8 , wherein the processor is specifically configured to: when the intra-page location of the second log data chunk comprises the intra-page location of the first log data chunk, delete the first data node.",11,claim 8,0,A
10606746,13,"13. The computer system according to claim 8 , wherein the processor is further configured to: when the intra-page location of the first log data chunk comprises the intra-page location of the second log data chunk, split the first data node into a first data subnode and a second data subnode, wherein data structures of the first data subnode and the second data subnode are the same as a data structure of the first data node; and separately record, in the first data subnode and the second data subnode, data that is in the first log data chunk and that does not overlap the second log data chunk, to set the data that is in the first log data chunk and that overlaps the second log data chunk to invalid data.",12,claim 8,0,A
10606746,14,"14. The computer system according to claim 10 , wherein the processor is further configured to, after storing the data of the updated first object cache page in the external storage device of the computer system, reclaim the log chain of the first object cache page.",13,claim 10,0,A
10606746,15,"15. A computer program product comprising computer-executable instructions stored on a non-transitory computer-readable medium that, when executed by a processor, cause an apparatus to: receive a write request, wherein the write request carries a file identifier, a buffer pointer, and a size of to-be-written data, the buffer pointer points to a buffer for caching the to-be-written data, and the to-be-written data is modified data of an object file that is to be accessed according to the write request; obtain an access location according to the file identifier, wherein the access location indicates a start address for writing data into the object file according to the write request; determine object cache pages according to the access location, the size of the to-be-written data, and a size of a cache page, wherein the object cache pages are memory pages in internal memory that are configured to cache file data that is in the object file and that is modified by the to-be-written data; determine that a non-volatile memory (NVM) stores a log chain of a first object cache page of the object cache pages, wherein the log chain of the first object cache page comprises a first data node, the first data node comprises information about a first log data chunk, and the first log data chunk comprises modified data of the first object cache page during a modification; insert a second data node into the log chain of the first object cache page, wherein the second data node comprises information about a second log data chunk of the first object cache page, the second log data chunk is at least partial to-be-written data that is obtained from the buffer to which the buffer pointer points, and the information about the second log data chunk comprises the second log data chunk or a storage address of the second log data chunk in the NVM; determine that an intra-page location of the second log data chunk overlaps an intra-page location of the first log data chunk, wherein the intra-page location of the second log data chunk is a location of the second log data chunk in the first object cache page, and the intra-page location of the first log data chunk is a location of the first log data chunk in the first object cache page; and set, in the first data node, data that is in the first log data chunk and that overlaps the second log data chunk to invalid data.",14,,0,A
10606746,16,"16. The computer program product according to claim 15 , wherein the instructions further cause the apparatus to insert the second data node into a head or a tail of the log chain of the first object cache page, wherein after the second data node is inserted, the log chain of the first object cache page comprises at least two data nodes that are sequentially linked according to an update sequence of the first object cache page.",15,claim 15,0,A
10606746,17,"17. The computer program product according to claim 15 , wherein the instructions further cause the apparatus to: update at least one log data chunk in the log chain to the first object cache page according to information about the at least one log data chunk, to obtain an updated first object cache page, wherein the information about the at least one log data chunk is recorded in the log chain of the first object cache page; and store data of the updated first object cache page in an external storage device of the apparatus.",16,claim 15,0,A
10606746,18,"18. The computer program product according to claim 15 , wherein the instructions further cause the apparatus to, when the intra-page location of the second log data chunk partially overlaps the intra-page location of the first log data chunk, modify, in the first data node, information about the intra-page location of the first log data chunk according to an intra-page location of the data that is in the first log data chunk and that overlaps the second log data chunk, to set the data that is in the first log data chunk and that overlaps the second log data chunk to invalid data, wherein the information about the intra-page location of the first log data chunk comprises at least one of an ��intra-page offset�� or a ��log data length�� of the first",17,claim 15,0,A
10606746,19,"19. The computer program product according to claim 15 , wherein the instructions further cause the apparatus to, when the intra-page location of the second log data chunk comprises the intra-page location of the first log data chunk, delete first data node.",18,claim 15,0,A
10606746,20,"20. The computer program product according to claim 15 , wherein the instructions further cause the apparatus to: when the intra-page location of the first log data chunk comprises the intra-page location of the second log data chunk, split the first data node into a first data subnode and a second data subnode, wherein data structures of the first data subnode and the second data subnode are the same as a data structure of the first data node; and separately record, in the first data subnode and the second data subnode, data that is in the first log data chunk and that does not overlap the second log data chunk, to set the data that is in the first log data chunk and that overlaps the second log data chunk to invalid data.",19,claim 15,0,A
10606746,21,"21. The computer program product according to claim 17 , wherein the instructions further cause the apparatus to, after storing data of the updated first object cache page in the external storage device of the apparatus, reclaim the log chain of the first object cache page.",20,claim 17,0,A
10606747,1,"1. A method of operating a memory controller, comprising: receiving an unmap request for requesting deletion of address mapping information for an unmap address from a host; storing the unmap address and prestored unmap-pattern data in a random access memory (RAM); and outputting the unmap-pattern data to the host in response to a read request for the unmap address being inputted.",0,,1,A
10606747,2,"2. The method according to claim 1 , wherein the random access memory is a static random access memory (SRAM).",1,claim 1,0,A
10606747,3,"3. The method according to claim 1 , wherein the unmap-pattern data has different pieces of pattern data depending on a communication Interface between the memory controller and the host.",2,claim 1,0,A
10606747,4,"4. The method according to claim 1 , wherein the unmap-pattern data is prestored in the random access memory.",3,claim 1,0,A
10606747,5,"5. The method according to claim 1 , wherein the random access memory stores a flag indicating that the unmap request for the unmap address has been inputted.",4,claim 1,0,A
10606747,6,"6. A method of operating a memory controller, the memory controller including a write cache buffer that individually stores write addresses in inputted write requests and unmap addresses in inputted unmap requests in an input order of the addresses, the method comprising: receiving a read request from a host; and outputting unmap-pattern data stored in the write cache buffer to the host when a logical block address in the read request is identical to any of the unmap addresses, wherein the unmap-pattern data is stored together with the unmap address in response to the unmap request.",5,,0,A
10606747,7,"7. A memory controller, comprising: a write cache buffer configured to temporarily store a write address and write data that are included in a write request inputted from a host; and a controller configured to, in response to an unmap request for requesting deletion of address mapping information for an unmap address from the host, store the unmap address and prestored unmap-pattern data in the write cache buffer.",6,,0,A
10606747,8,"8. The memory controller according to claim 7 , wherein the write cache buffer is a random access memory (RAM).",7,claim 7,0,A
10606747,9,"9. The memory controller according to claim 7 , wherein the unmap-pattern data has different pieces of pattern data depending on a communication interface between the memory controller and the host.",8,claim 7,0,A
10606747,10,"10. The memory controller according to claim 7 , wherein the unmap-pattern data is prestored in a memory device controlled by the memory controller.",9,claim 7,0,A
10606747,11,"11. The memory controller according to claim 7 , wherein the write cache buffer stores a flag indicating that an unmap request for the unmap address has been inputted.",10,claim 7,0,A
10606748,1,"1. An information processing apparatus that uses a socket object as a communication interface, the information processing apparatus comprising: at least one processor; and at least one memory that stores a program to be executed by the processor and that has a first memory region and a second memory region, wherein the processor is configured to execute the program and thereby cause the information processing apparatus to function as: a promote unit that transfer generated objects from the first memory region to the second memory region; a socket management unit that manages the number of generated socket objects of socket objects that have been generated; and a release unit that executes garbage collection if the number of generated socket objects is equal to or larger than a predetermined value, so as to close a socket object that has been generated and thereby release a resource for that socket object, wherein the release unit performs the garbage collection for the first memory region when the number of generated socket objects exceeds the predetermined value, and then performs the garbage collection for the second memory region regardless of whether or not there is free memory after performing the garbage collection for the first memory region.",0,,1,A
10606748,2,"2. The information processing apparatus according to claim 1 , wherein the socket management unit and the release unit are included in a virtual machine that is executed by the information processing apparatus, and the socket object is generated for an application that is executed on the virtual machine.",1,claim 1,0,A
10606748,3,"3. A resource management method to be performed by an information processing apparatus that uses a socket object as a communication interface and that has at least one memory including a first memory region and a second memory region, the method comprising: transferring generated objects from the first memory region to the second memory region; managing the number of generated socket objects of socket objects that have been generated; and executing garbage collection if the number of generated socket objects is equal to or larger than a predetermined value, so as to close a socket object that has been generated and thereby release a resource for that socket object, wherein the garbage collection for the first memory region is performed when the number of generated socket objects exceeds the predetermined value, and then the garbage collection for the second memory region is performed regardless of whether or not there is free memory after performing the garbage collection for the first memory region.",2,,0,A
10606748,4,"4. A non-transitory computer-readable medium storing a program configured to cause a computer to execute an information processing method, the computer using a socket object as a communication interface and having at least one memory including a first memory region and a second memory region, the method comprising: a promote step of transferring generated objects from the first memory region to the second memory region; a socket management step of managing the number of generated socket objects of socket objects that have been generated; and a release step of executing garbage collection if the number of generated socket objects is equal to or larger than a predetermined value, so as to close a socket object that has been generated and thereby release a resource for that socket object, wherein the garbage collection for the first memory region is performed when the number of generated socket objects exceeds the predetermined value, and then the garbage collection for the second memory region is performed regardless of whether or not there is free memory after performing the garbage collection for the first memory region.",3,,0,A
10606749,1,"1. A non-transitory computer-readable storage device storing instructions that, in response to execution, control a processor to perform operations, the operations comprising: receiving, from a member of a set of recommendation providers, a recommendation concerning whether or when to perform a storage management action on data stored in a collection of data storage devices that provide a multi-tier data store; selectively acting on the recommendation based on a credibility of the provider of the recommendation, where the credibility is based, at least in part, on a measure of a utility of a previous recommendation received from the provider; selectively updating the credibility of the member of the set of recommendation providers based, at least in part, on how the recommendation affects an optimization parameter of the multi-tier data store; selectively updating the credibility of members of the set of recommendation providers based, at least in part, on a rebalancing parameter; and selectively adapting the operation of the member of the set of recommendation providers by changing a likelihood that the member will make a recommendation about a portion of a file system stored by the multi-tier data store, changing the likelihood that the member will make a recommendation concerning a tier in the multi-tier data store, changing the likelihood that the member will make a recommendation concerning a type of device in the multi-tier data store, or changing the likelihood that the member will make a recommendation about flushing data, evicting data, recalling data, or deleting data from the multi-tier data store.",0,,1,A
10606749,2,"2. The non-transitory computer-readable storage device of claim 1 , where the storage management action is a flush operation, an evict operation, a recall operation, or a delete operation.",1,claim 1,0,A
10606749,3,"3. The non-transitory computer-readable storage device of claim 1 , where the credibility is further based, at least in part, on a measure of a consistency, a value, a worth, or an efficacy of a previous recommendation received from the provider.",2,claim 1,0,A
10606749,4,"4. A non-transitory computer-readable storage device storing computer executable instructions that when executed by a computer control the computer to perform a method, the method comprising: accessing a data storage transaction to be serviced by a device in a plurality of storage devices arranged in a multi-tier electronic data storage system, where the data storage transaction is a predicted transaction; selectively providing information about the data storage transaction to one or more members of a plurality of data movement recommenders; receiving, from a member of the plurality of data movement recommenders, a data movement recommendation, where the data movement recommendation is generated by a member of the plurality of data movement recommenders based on least recently used (LRU) reasoning, least frequently used (LFU) reasoning, large item eviction reasoning, small item eviction reasoning, space continuity reasoning, or weighted benefit analysis reasoning; performing a data movement action for a member of the plurality of storage devices based, at least in part, on the data movement recommendation and a credibility of the member of the plurality of data movement recommenders associated with the data movement recommendation, where the credibility is based, at least in part, on a utility of a previous recommendation received from the recommender; determining an impact of the data movement action on the multi-tier electronic data storage system; storing data relating the data movement action, the impact of the data movement action, and the data movement recommendation; selectively manipulating the credibility of the member of the plurality of data movement recommenders associated with the data movement recommendation based, at least in part, on the impact of the data movement action; and selectively collectively manipulating the credibility of members of the plurality of data movement recommenders based, at least in part, on determining a number of data movement actions performed for the member of the plurality of storage devices based on a data movement recommendation received from a member of the plurality of data movement recommenders, an amount of data moved for the member of the plurality of storage devices based on a data movement recommendation received from a member of the plurality of data movement recommenders, a time period, a cache hit rate for the multi-tier electronic data storage system falling below a threshold, or a response time for the multi-tier electronic data storage system exceeding a threshold, and further based on the cache hit rate for the multi-tier electronic data storage system and at least one of an actual size of the cache, or a derived size of the cache.",3,,0,A
10606749,5,"5. The non-transitory computer-readable storage device of claim 4 , where the data movement action is an evict action, a flush action, a recall action, or a delete action.",4,claim 4,0,A
10606749,6,"6. The non-transitory computer-readable storage device of claim 4 , where the credibility is further based, at least in part, on a measure of a consistency, a value, a worth, or an efficacy of a previous recommendation received from the recommender.",5,claim 4,0,A
10606749,7,"7. The non-transitory computer-readable storage device of claim 4 , where the impact of the data movement action is a projected impact.",6,claim 4,0,A
10606749,8,"8. The non-transitory computer-readable storage device of claim 4 , the method further comprising: changing a criterion upon which the credibility of members of the plurality of data movement recommenders is selectively collectively manipulated based, at least in part, on a change in a cache hit rate for the multi-tier electronic data storage system, on a change in a response time for the multi-tier electronic data storage system, on a change in a dollar cost for operating the multi-tier electronic data storage system, or on a change in an energy cost for operating the multi-tier electronic data storage system.",7,claim 4,0,A
10606749,9,"9. The non-transitory computer-readable storage device of claim 4 , where selectively manipulating the credibility of the member of the plurality of data movement recommenders is performed on a recommendation-by-recommendation basis, after a threshold number of data movement recommendations have been provided by the member of the plurality of data movement recommenders, or after a threshold period of time after the data movement action is performed.",8,claim 4,0,A
10606749,10,"10. An apparatus, comprising: a processor; a memory; a set of circuits; and a hardware interface that connects the processor, the memory, and the set of circuits; the set of circuits comprising: a first circuit configured to: receive a data storage request to be handled by a multi-tier data storage system; provide information about the data storage request to an advisor in a plurality of advisors; receive a recommendation from the advisor concerning whether, when, or how to move data in the multi-tier data storage system in response to the data storage request; selectively perform a data movement in the multi-tier data storage system based, at least in part, on the data storage request, the recommendation, and a weighting factor associated with the advisor; log information about the data storage request, the recommendation from the advisor, and the data movement; perform a retrospective analysis of a previous recommendation received from the advisor; update a credibility of the advisor based, at least in part, on a utility of the previous recommendation received from the advisor; a second circuit configured to: selectively determine an effect of the data movement on an optimization measure of the multi-tier data storage system during an interval of interest; a third circuit configured to: selectively adapt the weighting factor for the advisor upon determining that an update threshold has been met; and a fourth circuit configured to: selectively adapt an operation of a selected advisor in the plurality of advisors upon determining that an adaptation threshold has been met.",9,,0,A
10606749,11,"11. The apparatus of claim 10 , where the recommendation from the advisor is a flush recommendation, an evict recommendation, a recall recommendation, or a delete recommendation.",10,claim 10,0,A
10606749,12,"12. The apparatus of claim 10 , where the credibility is further based at least in part on a measure of a consistency, a value, a worth, or an efficacy of the previous recommendation received from the advisor.",11,claim 10,0,A
10606749,13,"13. The apparatus of claim 10 , where the second circuit is configured to selectively determine the effect of the data movement for less than each recommendation received from the plurality of advisors, and where the second circuit is configured to determine the interval of interest based on a time period, a point in time, a number of data movements performed, or an amount of data moved in the multi-tier data storage system.",12,claim 10,0,A
10606749,14,"14. The apparatus of claim 10 , where the third circuit is configured to selectively adapt the weighting factor for the advisor as part of a collective action that manipulates the weighting factor for two or more advisors in the plurality of advisors; and where the third circuit is configured to selectively adapt the weighting factor for the advisor based, at least in part, on the effect of the recommendation made by the advisor.",13,claim 10,0,A
10606749,15,"15. The apparatus of claim 10 , where the fourth circuit is configured to adapt the operation of the selected advisor by changing the likelihood that the selected advisor will: make a recommendation about a portion of a file system stored by the multi-tier data storage system, make a recommendation concerning a tier in the multi-tier data storage system, make a recommendation concerning a type of device in the multi-tier data storage system, or make a recommendation about flushing data, evicting data, recalling data, or deleting data.",14,claim 10,0,A
10606750,1,"1. A computing system, comprising: a multicore processor device comprising a plurality of cores, with each core comprising: a processor; and switching circuitry; a memory interface to couple at least one core of the plurality of cores to a memory; and a cache control unit to control a first level cache memory and a second level cache memory, the cache control unit included in at least one of the cores of the plurality of cores, with the cache control unit for caching data from the memory; and with the system further configured to: receive from a requesting core, a request to access a memory block from the memory; determine whether the memory block satisfies a predetermined condition; and based on the determination of whether the memory block satisfies the predetermined condition, store the memory block in the first level cache memory and not the second level cache memory when the condition is satisfied or store the memory block in both the first level cache memory and the second level cache memory when the condition is not satisfied.",0,,1,A
10606750,2,"2. The computing system of claim 1 , wherein the condition being satisfied includes the request to access the block being an initial request or a working set of blocks associated with the memory block fitting in the first level cache memory, and the condition not being satisfied includes the request to access the block being a non-initial request, and a working set of blocks associated with the memory block not fitting in the first level cache memory.",1,claim 1,0,A
10606750,3,"3. The computing system of claim 1 , wherein multiple cores of the plurality of cores each include a respective cache control unit to control a corresponding cache memory.",2,claim 1,0,A
10606750,4,"4. The computing system of claim 1 , wherein the cache controller is configured to determine whether or not to allocate the memory block into the requesting core's second level cache.",3,claim 1,0,A
10606750,5,"5. The computing system of claim 4 , wherein the cache controller configured to determine whether the memory block satisfies the condition, is further configured to: classify a first request for the particular memory block as a request for potentially streaming, non-temporal data; track subsequent requests for the same memory block; and when a predefined one of the subsequent requests cause a cache miss in the first level cache, change the classification of the memory block as not being a streaming block and allocate the memory block for storage into the second level cache.",4,claim 4,0,A
10606750,6,6. The computing system of claim 5 wherein a value for a number of subsequent request is one.,5,claim 5,0,A
10606750,7,7. The computing system of claim 5 wherein a value for a number of subsequent request is predetermined.,6,claim 5,0,A
10606750,8,8. The computing system of claim 4 further configured to: include a per-cache-block bit that indicates that a cache block corresponding to the memory block has been previously requested and an attribute to denote that the corresponding cache block is to be adaptively allocated.,7,claim 4,0,A
10606750,9,"9. The computing system of claim 1 , wherein the predetermined condition is a temporal condition.",8,claim 1,0,A
10606750,10,"10. The computing system of claim 9 , wherein when the requesting core or the cache controller determines that there is no reuse of the memory block, the cache control unit stores the requested memory block in the first level cache memory and not the second level cache memory.",9,claim 9,0,A
10606750,11,"11. The computing system of claim 9 wherein when the requesting core or the cache controller determines that there is reuse of the memory block, the cache control unit stores the requested memory block in the first level cache memory and the second level cache memory.",10,claim 9,0,A
10606750,12,12. The computing system of claim 1 wherein the core configures the cache control unit.,11,claim 1,0,A
10606750,13,13. The computing system of claim 1 wherein the cores or the cache controller are configured at runtime or by a compiler or by a programmer or by hardware.,12,claim 1,0,A
10606750,14,"14. The computing system of claim 1 wherein the cache control unit is further configured to: access an N-entry table that includes: a first tile ID field that stores an ID for a first tile; a second tile ID field that stores an ID for a second tile; and a fractional field that specifies a fraction of lines that map to the first tile relative to the second tile; determine a distribution between a first tile or a second tile, by the cache control unit using two hash functions of a physical address, with a first hash function providing an index into the N-entry table, and a second hash function determining whether the physical address maps to the first tile or the second tile.",13,claim 1,0,A
10606750,15,15. The computing system of claim 14 wherein determining whether the physical address maps to the first tile or the second tile is determined by comparing the second hash function to the fractional field entry.,14,claim 14,0,A
10606750,16,"16. A method of operating a computing system, the method comprising: receiving by a cache control unit associated with a first one of a plurality of cores of a multicore processor, a request to access a memory block stored in memory; determining whether the memory block satisfies a predetermined condition; and based on the determination of whether the memory block satisfies the condition, either storing the memory block in the first level cache memory and not the second level cache memory when the condition is satisfied; or storing the memory block in both the first level cache memory and the second level cache memory when the condition is not satisfied.",15,,0,A
10606750,17,"17. The method of claim 16 wherein the condition being satisfied includes the request to access the block being an initial request or a working set of blocks associated with the requested memory block fitting in the first level cache memory, and the condition not being satisfied includes the request to access the block being a non-initial request and a working set of blocks associated with the memory block not fitting in the first level cache memory.",16,claim 16,0,A
10606750,18,18. The method of claim 16 wherein multiple cores of the plurality of cores each include a respective cache control unit to control a corresponding cache memory.,17,claim 16,0,A
10606750,19,"19. The method of claim 16 wherein determining further comprises: determining by the requesting core or the cache controller that there is no reuse of the memory block, the cache control unit stores the memory block in the first level cache memory and not the second level cache memory.",18,claim 16,0,A
10606750,20,"20. The method of claim 16 wherein determining further comprises: determining by the requesting core or the cache controller that there is reuse of the memory block, the cache control unit stores the memory block in the first level cache memory and in the second level cache memory.",19,claim 16,0,A
10606750,21,"21. The method of claim 16 wherein determining by the requesting core or the cache controller further comprises: classifying a first request for the particular memory block as a request for potentially streaming, non-temporal data; tracking subsequent requests for the same memory block; and when a predefined one of the subsequent requests cause a cache miss in the first level cache, changing the classification of the memory block as not being a streaming block and allocate the memory block for storage into the second level cache.",20,claim 16,0,A
10606750,22,22. The method of claim 16 wherein a value for a number of subsequent request is predetermined.,21,claim 16,0,A
10606750,23,23. The method of claim 16 further comprising: accessing a per-cache-block bit that indicates that a cache block corresponding to the memory block has been previously requested; and accessing an attribute to denote that the cache block is to be adaptively allocated.,22,claim 16,0,A
10606751,1,"1. An apparatus, comprising: a memory; and logic, at least a portion of the logic in circuitry coupled to the memory, the logic to: receive an information element, the information element to include control information and a payload; separately classify each of the payload and the control information as one of a quality of service (QoS) traffic or a non-QoS traffic; and issue at least one write to one or more of a plurality of computer-readable media based on the classifications of the payload and the control information, the plurality of computer-readable media comprising a first computer-readable media and a second computer-readable media, the at least one write to comprise a first write to cause the payload to be written to the first computer-readable media based on the classification of the payload and a second write to cause the control information to be written to the second computer-readable media based on the classification of the control information.",0,,1,A
10606751,2,"2. The apparatus of claim 1 , wherein the plurality of computer-readable media include a cache memory and a system memory, wherein the classifications of the payload and the control information are to comprise different classifications.",1,claim 1,0,A
10606751,3,"3. The apparatus of claim 2 , wherein the logic is to determine the cache memory can accommodate the information element based on a predetermined value associated with the cache memory, wherein the first computer-readable media is to comprise the cache memory, wherein a number of fields of the control information for the information element are to be different than a number of fields of a control information of a different information element.",2,claim 2,0,A
10606751,4,"4. The apparatus of claim 3 , wherein the logic is further to prevent a subsequent information element from evicting the information element from the cache memory, wherein the cache memory is to be shared by a plurality of virtual network functions (VNFs).",3,claim 3,0,A
10606751,5,"5. The apparatus of claim 2 , wherein the logic is to determine the cache memory cannot accommodate the information element based on a predetermined value associated with the cache memory, wherein the control information is to comprise a differentiated services code point (DSCP) in a differentiated services (DS) field of an IP header, the classifications to be conveyed by one or more memory buffer descriptors.",4,claim 2,0,A
10606751,6,"6. The apparatus of claim 1 , the one or more of the plurality of computer-readable media comprising system memory or random access memory.",5,claim 1,0,A
10606751,7,"7. The apparatus of claim 1 , wherein the logic is to enable or disable a no snoop field in a peripheral component interconnect express (PCIe) write transaction based on the classification of the information element, wherein the control information is to comprise a PCIe transaction processing hint (TPH) field, wherein a PCIe root complex of the apparatus is to comprise at least a portion of the logic.",6,claim 1,0,A
10606751,8,"8. The apparatus of claim 1 , wherein the logic is to issue an allocating write to the first computer-readable media for the payload based on the classification of the payload, the first computer-readable media comprising a processor cache.",7,claim 1,0,A
10606751,9,"9. The apparatus of claim 1 , wherein the logic is to issue a non-allocating write to the first computer-readable media for the payload based on the classification of the payload, the first computer-readable media comprising a processor cache.",8,claim 1,0,A
10606751,10,"10. The apparatus of claim 1 , the logic to determine a priority for the information element based on QoS data generated using the control information, the priority comprising a high priority or a low priority.",9,claim 1,0,A
10606751,11,"11. The apparatus of claim 10 , the logic to store the information element in a cache memory responsive to the information element having the high priority.",10,claim 10,0,A
10606751,12,"12. One or more computer-readable media to store instructions that when executed by a processor circuit causes the processor circuit to: receive an information element, the information element to include a control information and a payload; separately classify each of the payload and control information as one of a quality of service (QoS) traffic or a non-QoS traffic; and issue at least one write to one or more of a plurality of computer-readable media based on the classifications of the payload and the control information, the plurality of computer-readable media comprising a first computer-readable media and a second computer-readable media, the at least one write to comprise a first write to cause the payload to be written to the first computer-readable media based on the classification of the payload and a second write to cause the control information to be written to the second computer-readable media based on the classification of the control information.",11,,0,A
10606751,13,"13. The one or more computer-readable media of claim 12 , wherein the first computer-readable media is to comprise a cache memory, wherein the control information is to comprise one or more tuples, wherein the classifications are to be based on a comparison of the one or more tuples to a tuple lookup data structure, wherein the comparison is to determine a match between the one or more tuples and a first entry of the tuple lookup data structure.",12,claim 12,0,A
10606751,14,"14. The one or more computer-readable media of claim 12 , the plurality of computer-readable media comprising random access memory or a system memory.",13,claim 12,0,A
10606751,15,"15. The one or more computer-readable media of claim 12 , with instructions to issue an allocating write to the first computer-readable media for the payload based on the classification of the payload, the first computer-readable media comprising a processor cache.",14,claim 12,0,A
10606751,16,"16. The one or more computer-readable media of claim 12 , with instructions to issue a non-allocating write to the first computer-readable media for the payload based on the classification of the payload, the first computer-readable media comprising a processor cache.",15,claim 12,0,A
10606751,17,"17. The one or more computer-readable media of claim 12 , with instructions to determine a priority for the information element based on QoS data generated using the control information, the priority comprising a high priority or a low priority.",16,claim 12,0,A
10606751,18,"18. The one or more computer-readable media of claim 17 , with instructions to store the information element in a cache memory responsive to the information element having the high priority.",17,claim 17,0,A
10606751,19,"19. A system comprising: a network device; and logic, at least a portion of the logic implemented by the network device, the logic to: receive, via the network device, an information element, the information element to include control information and a payload; separately classify each of the payload and the control information as one of a quality of service (QoS) traffic or a non-QoS traffic; and issue at least one write to one or more of a plurality of computer-readable media based on the classifications of the payload and the control information, the plurality of computer-readable media comprising a first computer-readable media and a second computer-readable media, the at least one write to comprise a first write to cause the payload to be written to the first computer-readable media based on the classification of the payload and a second write to cause the control information to be written to the second computer-readable media based on the classification of the control information.",18,,0,A
10606751,20,"20. The system of claim 19 , the network device including a physical network device comprising one or more of a network interface controller (NIC), a field programmable gate array (FPGA), an application specific integrated circuit (ASIC), a system on a chip (SOC), a platform controller hub (PCH), a direct media interface (DMI), an ultrapath interconnect (UPI), a direct memory access (DMA) controller, a complex programmable logic device (CPLD) a microprocessor, a server, a network node, and a computer.",19,claim 19,0,A
10606751,21,"21. The system of claim 20 , the physical network device to implement a virtual network device.",20,claim 20,0,A
10606751,22,"22. The system of claim 21 , the virtual network device comprising one or more of a virtualized network function (VNF), a soft processor, a hypervisor, a virtual disk drive, and a virtual private network (VPN).",21,claim 21,0,A
10606751,23,"23. The system of claim 19 , the logic to determine a priority for the information element based on QoS data generated using the control information, the priority comprising a high priority or a low priority.",22,claim 19,0,A
10606751,24,"24. The system of claim 23 , the logic to store the information element in a cache memory responsive to the information element having the high priority.",23,claim 23,0,A
10606752,1,"1. A method for coordinating cache management for an exclusive cache hierarchy, the method comprising: managing, by a coordinated cache logic section, a level three (L3) cache; and managing, by the coordinated cache logic section, a level two (L2) cache, wherein managing the L3 cache and the L2 cache includes coordinating a cache block replacement policy among the L3 cache and the L2 cache by filtering first data having relatively lower reuse probability from second data having relatively higher reuse probability; and tracking reuse patterns of demand requests separately from reuse patterns of prefetch requests.",0,,1,A
10606752,2,"2. The method of claim 1 , further comprising: inserting a first cache block A into the L2 cache; determining, by the coordinated cache logic section, whether there is a cache hit in the L2 cache; in response to determining that there is the cache hit, determining whether a prefetch bit associated with the first cache block A is asserted; in response to determining that the prefetch bit associated with the first cache block A is asserted, increasing a dead block prediction counter for prefetch requests; in response to determining that the prefetch bit associated with the first cache block A is not asserted, increasing a dead block prediction counter for demand requests; asserting a re-reference bit associated with the first cache block A; and providing the first cache block A to a core processor.",1,claim 1,0,A
10606752,3,"3. The method of claim 1 , further comprising: inserting a first cache block A into the L2 cache; determining, by the coordinated cache logic section, whether there is a cache hit in the L2 cache; in response to determining that there is not the cache hit, determining, by the coordinated cache logic section, whether a cache block replacement is needed; in response to determining that the cache block replacement is not needed, determining, by the coordinated cache logic section, whether a request for the first cache block A is a prefetch request; in response to determining that the request for the first cache block A is the prefetch request: inserting the first cache block A into the L2 cache; deasserting a re-reference bit associated with the first cache block A; and asserting a prefetch bit associated with the first cache block A; in response to determining that the request for the first cache block A is not the prefetch request: inserting the first cache block A into the L2 cache; deasserting the re-reference bit associated with the first cache block A; and deasserting the prefetch bit associated with the first cache block A.",2,claim 1,0,A
10606752,4,"4. A method for coordinating cache management for an exclusive cache hierarchy, the method comprising: managing, by a coordinated cache logic section, a level three (L3) cache; managing, by the coordinated cache logic section, a level two (L2) cache; wherein managing the L3 cache and the L2 cache includes coordinating a cache block replacement policy among the L3 cache and the L2 cache by filtering first data having relatively lower reuse probability from second data having relatively higher reuse probability; inserting a first cache block A into the L2 cache; determining, by the coordinated cache logic section, whether there is a cache hit in the L2 cache; in response to determining that there is not the cache hit, determining, by the coordinated cache logic section, whether a cache block replacement is needed; in response to determining that the cache block replacement is needed, finding a replacement candidate second cache block B; determining, by the coordinated cache logic section, whether a re-reference bit associated with the second cache block B is asserted; in response to determining that the re-reference bit associated with the second cache block B is not asserted, determining, by the coordinated cache logic section, whether a prefetch bit associated with the second cache block B is asserted; and in response to determining that the prefetch bit associated with the second cache block B is asserted, decreasing a dead block prediction counter for prefetch requests.",3,,0,A
10606752,5,"5. The method of claim 4 , further comprising: determining, by the coordinated cache logic section, whether the dead block prediction counter for prefetch requests is 0; in response to determining that the dead block prediction counter for prefetch requests is 0: marking the second cache block B as non-temporal; sending the second cache block B to the L3 cache; and allocating the second cache block B at a least recently used (LRU) position in the L3 cache.",4,claim 4,0,A
10606752,6,"6. A method for coordinating cache management for an exclusive cache hierarchy, the method comprising: managing, by a coordinated cache logic section, a level three (L3) cache; managing, by the coordinated cache logic section, a level two (L2) cache; wherein managing the L3 cache and the L2 cache includes coordinating a cache block replacement policy among the L3 cache and the L2 cache by filtering first data having relatively lower reuse probability from second data having relatively higher reuse probability; inserting a first cache block A into the L2 cache; determining, by the coordinated cache logic section, whether there is a cache hit in the L2 cache; in response to determining that there is not the cache hit, determining, by the coordinated cache logic section, whether a cache block replacement is needed; in response to determining that the cache block replacement is needed, finding a replacement candidate second cache block B; determining, by the coordinated cache logic section, whether a re-reference bit associated with the second cache block B is asserted; in response to determining that the re-reference bit associated with the second cache block B is not asserted, determining, by the coordinated cache logic section, whether a prefetch bit associated with the second cache block B is asserted; and in response to determining that the prefetch bit associated with the second cache block B is not asserted, decreasing a dead block prediction counter for demand requests.",5,,0,A
10606752,7,"7. The method of claim 6 , further comprising: determining, by the coordinated cache logic section, whether the dead block prediction counter for demand requests is 0; in response to determining that the dead block prediction counter for demand requests is 0: marking the second cache block B as non-temporal; sending the second cache block B to the L3 cache; and allocating the second cache block B at a least recently used (LRU) position in the L3 cache.",6,claim 6,0,A
10606752,8,"8. The method of claim 6 , further comprising: determining, by the coordinated cache logic section, whether the dead block prediction counter for demand requests is 0; in response to determining that the dead block prediction counter for demand requests is not 0: marking the second cache block B as temporal; sending the second cache block B to the L3 cache; and allocating the second cache block B at a least recently used (LRU)+1 position in the L3 cache.",7,claim 6,0,A
10606752,9,"9. The method of claim 1 , further comprising: inserting a first cache block A into the L2 cache; determining, by the coordinated cache logic section, whether there is a cache hit in the L2 cache; in response to determining that there is not the cache hit, determining, by the coordinated cache logic section, whether a cache block replacement is needed; in response to determining that the cache block replacement is needed, finding a replacement candidate second cache block B; determining, by the coordinated cache logic section, whether a re-reference bit associated with the second cache block B is asserted; in response to determining that the re-reference bit associated with the second cache block B is asserted, determining, by the coordinated cache logic section, whether a prefetch bit associated with the second cache block B is asserted; and in response to determining that the prefetch bit associated with the second cache block B is not asserted, determining, by the coordinated cache logic section, whether a dead block prediction counter for demand requests is 0.",8,claim 1,0,A
10606752,10,"10. The method of claim 1 , further comprising: inserting a first cache block A into the L2 cache; determining, by the coordinated cache logic section, whether there is a cache hit in the L2 cache; in response to determining that there is not the cache hit, determining, by the coordinated cache logic section, whether a cache block replacement is needed; in response to determining that the cache block replacement is needed, finding a replacement candidate second cache block B; determining, by the coordinated cache logic section, whether a re-reference bit associated with the second cache block B is asserted; in response to determining that the re-reference bit associated with the second cache block B is asserted, determining, by the coordinated cache logic section, whether a prefetch bit associated with the second cache block B is asserted; in response to determining that the prefetch bit associated with the second cache block B is asserted, determining, by the coordinated cache logic section, whether a dead block prediction counter for prefetch requests is 0; in response to determining that the dead block prediction counter for prefetch requests is 0: marking the second cache block B as non-temporal; sending the second cache block B to the L3 cache; and allocating the second cache block B at a least recently used (LRU) position in the L3 cache; in response to determining that the dead block prediction counter for prefetch requests is not 0: marking the second cache block B as temporal; sending the second cache block B to the L3 cache; and allocating the second cache block B at a least recently used (LRU)+1 position in the L3 cache.",9,claim 1,0,A
10606752,11,"11. The method of claim 1 , further comprising: inserting a first cache block A into the L2 cache; determining, by the coordinated cache logic section, whether there is a cache hit in the L2 cache; in response to determining that there is not the cache hit, determining, by the coordinated cache logic section, whether a cache block replacement is needed; in response to determining that the cache block replacement is needed, finding a replacement candidate second cache block B; determining, by the coordinated cache logic section, whether a re-reference bit associated with the second cache block B is asserted; in response to determining that the re-reference bit associated with the second cache block B is asserted, determining, by the coordinated cache logic section, whether a prefetch bit associated with the second cache block B is asserted; in response to determining that the prefetch bit associated with the second cache block B is asserted, determining, by the coordinated cache logic section, whether a dead block prediction counter for prefetch requests is 0; in response to determining that the dead block prediction counter for prefetch requests is 0: marking the second cache block B as non-temporal; bypassing the L3 cache; and sending the second cache block B to a main memory; in response to determining that the dead block prediction counter for prefetch requests is not 0: marking the second cache block B as temporal; sending the second cache block B to the L3 cache; and allocating the second cache block B at a least recently used (LRU)+1 position in the L3 cache.",10,claim 1,0,A
10606752,12,"12. The method of claim 1 , further comprising: inserting a first cache block A into the L2 cache; determining, by the coordinated cache logic section, whether there is a cache hit in the L2 cache; in response to determining that there is not the cache hit, determining, by the coordinated cache logic section, whether a cache block replacement is needed; in response to determining that the cache block replacement is needed, finding a replacement candidate second cache block B; determining, by the coordinated cache logic section, whether a re-reference bit associated with the second cache block B is asserted; in response to determining that the re-reference bit associated with the second cache block B is asserted, determining, by the coordinated cache logic section, whether a prefetch bit associated with the second cache block B is asserted; in response to determining that the prefetch bit associated with the second cache block B is asserted, determining, by the coordinated cache logic section, whether a dead block prediction counter for prefetch requests is 0; in response to determining that the dead block prediction counter for prefetch requests is 0, determining, by the coordinated cache logic section, whether an L2 cache replacement policy is biased toward bimodal re-reference interval prediction; in response to determining that the L2 cache replacement policy is biased toward bimodal re-reference interval prediction: marking the second cache block B as non-temporal; sending the second cache block B to the L3 cache; and allocating the second cache block B at a least recently used (LRU) position in the L3 cache; in response to determining that the L2 cache replacement policy is not biased toward bimodal re-reference interval prediction: marking the second cache block B as temporal; sending the second cache block B to the L3 cache; and allocating the second cache block B at a least recently used (LRU)+1 position in the L3 cache.",11,claim 1,0,A
10606752,13,"13. The method of claim 1 , further comprising: inserting a first cache block A into the L2 cache; determining, by the coordinated cache logic section, whether there is a cache hit in the L2 cache; in response to determining that there is not the cache hit, determining, by the coordinated cache logic section, whether a cache block replacement is needed; in response to determining that the cache block replacement is needed, finding a replacement candidate second cache block B; determining, by the coordinated cache logic section, whether a re-reference bit associated with the second cache block B is asserted; in response to determining that the re-reference bit associated with the second cache block B is asserted, determining, by the coordinated cache logic section, whether a prefetch bit associated with the second cache block B is asserted; and in response to determining that the prefetch bit associated with the second cache block B is asserted, determining, by the coordinated cache logic section, whether a dead block prediction counter for prefetch requests is 0.",12,claim 1,0,A
10606752,14,"14. The method of claim 13 , further comprising in response to determining that the dead block prediction counter for prefetch requests is 0, determining, by the coordinated cache logic section, whether an L2 cache replacement policy is biased toward bimodal re-reference interval prediction.",13,claim 13,0,A
10606752,15,"15. The method of claim 14 , further comprising in response to determining that the L2 cache replacement policy is biased toward bimodal re-reference interval prediction: marking the second cache block B as non-temporal; sending the second cache block B to the L3 cache; and allocating the second cache block B at a least recently used (LRU) position in the L3 cache.",14,claim 14,0,A
10606752,16,"16. The method of claim 15 , further comprising in response to determining that the L2 cache replacement policy is not biased toward bimodal re-reference interval prediction: marking the second cache block B as temporal; sending the second cache block B to the L3 cache; and allocating the second cache block B at a least recently used (LRU)+1 position in the L3 cache.",15,claim 15,0,A
10606753,1,"1. A memory module operable with a server in a network, the memory module and the server forming a first node in a cluster of nodes in the network, the memory module comprising: persistent memory providing data storage associated with the first node; non-persistent memory buffering data to or from the persistent memory; a node control device operatively coupled to the persistent memory and the non-persistent memory; a first interface for interfacing with the server; and a second interface for interfacing with the network; wherein the node control device comprises control logic including physical memory access logic, cluster-wide address management logic, and network transfer logic; wherein the physical memory access logic is configured to control accesses by the server to the persistent memory via the first interface; wherein the cluster-wide address management logic is configured to translate between a local unified memory access (UMA) address space and a global UMA address space, the local UMA address space being accessible by applications running on the server, the global UMA address space being mapped to a physical UMA address space, the physical UMA address space being associated with data storages in the cluster of nodes; and wherein the network transfer logic is configured to communicate with other nodes in the cluster of nodes command and data packets via the second interface.",0,,1,A
10606753,2,"2. The memory module of claim 1 , wherein first interface includes a main memory interface coupled to a memory bus in the first server.",1,claim 1,0,A
10606753,3,"3. The memory module of claim 1 , wherein the first interface is coupled to one of a PCIe interface, a Fiber Channel (FC) interface, and an Internet Protocol (IP) interface in the first server.",2,claim 1,0,A
10606753,4,"4. The memory module of claim 1 , wherein the second interface is an Internet Protocol (IP) interface or a Fiber Channel (FC) interface.",3,claim 1,0,A
10606753,5,"5. The memory module of claim 1 , wherein the cluster-wide address management logic is configured to determines a target node among the cluster of nodes in response to a first request from the server to access data storage at another node among the cluster of nodes.",4,claim 1,0,A
10606753,6,"6. The memory module of claim 5 , wherein, in response to the first request, the network transfer logic is configured to form a request packet including a network address for the target node, and to transmit the request packet to the network via the second interface.",5,claim 5,0,A
10606753,7,"7. The memory module of claim 6 , wherein the request packet includes an access type, and a size of data to be transferred in response to the first request.",6,claim 6,0,A
10606753,8,"8. The memory module of claim 6 , wherein the network transfer logic is further configured to, in response to the target node acknowledging receipt of the request packet, form a command packet including the network address of the target node, a storage address at the target node, and one or more dynamic real-time commands, and to transmit the command packet to the network via the second interface.",7,claim 6,0,A
10606753,9,"9. The memory module of claim 8 , wherein the network transfer logic is further configured to communicate one or more data packets with the target node via the second interface subsequent to transmitting the command packet, each of the one or more data packets identifying the target node, and the physical memory access logic is configured to communicate data in the one or more data packets with the first server.",8,claim 8,0,A
10606753,10,"10. The memory module of claim 9 , wherein, subsequent to communicating the one or more data packets, the network transfer logic is further configured to transmit to or receive from the target node a completion status packet via the second interface.",9,claim 9,0,A
10606753,11,"11. The memory module of claim 10 , wherein, subsequent to transmitting to or receiving from the target node the completion status packet, the network transfer logic is further configured to receive from or transmit to the target node an acknowledge packet.",10,claim 10,0,A
10606753,12,"12. The memory module of claim 1 , wherein the control logic is configured to: receive a request packet from the network via the second interface, the request packet including a target node address and a requester address; and in response to the target node address indicating that the first node is a target node for the request packet, receive a command packet from the network via the second interface, communicate one or more data packets with the network via the second interface in accordance with the command packet, and cause data in the one or more data packets to be buffered in the non-persistent memory, the data being read from or written into the persistent memory.",11,claim 1,0,A
10606753,13,"13. The memory module of claim 1 , wherein the control logic is configured to: receive a request packet from the network via the second interface, the request packet including a target node address and a requester address; and in response to the target node address indicating that the first node is not a target node for the request data packet, repeat the request packet to a next node in the cluster of nodes.",12,claim 1,0,A
10606753,14,"14. The memory module of claim 1 , wherein the control logic further includes configuration logic, and wherein the configuration logic is configured to modify the local UMA address space and the global UMA address space in response to a new node being inserted into the cluster of node.",13,claim 1,0,A
10606753,15,"15. The memory module of claim 14 , wherein the configuration logic is further configured to broadcast a reservation of a new space for the new node in the global UMA address space to other nodes in the cluster of nodes.",14,claim 14,0,A
10606753,16,"16. The memory module of claim 1 , wherein the control logic further includes configuration logic, and wherein the configuration logic is configured to: receive from the server a request for allocating a new UMA address to an application running on the server; send the request to a designated node via the second interface; receive a response from the designated node that the new UMA address has been allocated to the application; inform the server or application that the new UMA address has been allocated to the application; and broadcast to other nodes in the cluster of nodes that the new UMA address has been allocated to the application.",15,claim 1,0,A
10606753,17,"17. The memory module of claim 1 , wherein the physical memory access logic is further configured to control accesses by the server to memory spaces in other nodes in the cluster of nodes.",16,claim 1,0,A
10606753,18,"18. The memory module of claim 1 , further comprising a main memory unit, wherein the first interface includes a main memory interface coupled to a memory bus in the first server and wherein the first interface further includes a data signal router coupled to the main memory interface and controlled by the node control device.",17,claim 1,0,A
10606753,19,"19. The memory module of claim 18 , wherein the data router is configurable by the node control device to route data signals between the memory bus and the main memory unit, or between the main memory unit and the node control device, or between the memory bus and the node control device, depending on whether the server is accessing the main memory unit, or the persistent memory unit, or memory space in another node in the cluster of nodes.",18,claim 18,0,A
10606754,1,"1. A method, comprising: receiving a storage command from a host computer to retrieve first data from a specific physical region of a storage device comprising a logical storage device having multiple logical unit numbers (LUNs) and multiple physical storage devices; responsively retrieving second data being non-contiguous data from one or more additional physical regions of the multiple LUNs of an additional one of the multiple physical storage devices, physically non-adjacent to the first data such that the one or more additional physical regions are retrieved from a different physical storage device and partition than that storing the first data; wherein the first and second data are distributed on the multiple physical storage devices using block interleaving such that the first data and the second data each comprise the non-contiguous data; wherein the specific physical region and the one or more additional physical regions are combined into virtual regions, each of the virtual regions including a plurality of regions each comprising a sequence of bytes of a specific length of one megabyte, and each of the plurality of regions distributed among the multiple physical storage devices and previously concatenated or striped together to form a respective virtual region, and wherein the second data is responsively retrieved based on a logical mapping managed by the storage device and received prior to the storage command by the host computer, by: referencing the logical mapping, the logical mapping comprising relationships between logical regions of a logical volume and their corresponding physical regions; wherein the logical mapping contains a mapping of ranges of the logical regions which correspond to ranges of the physical regions and an indication of which of the multiple physical storage devices the ranges of the logical regions and the ranges of the physical regions are stored therein, matching the specific physical region in the logical mapping with a corresponding logical region, locating one or more additional logical regions that adjacently follow the corresponding logical region, and identifying the additional physical regions corresponding to the one or more additional logical regions that adjacently follow the corresponding logical region; conveying the second data including the additional physical regions to a cache; and periodically updating the logical mapping using a background daemon to determine changes in the relationships between the logical regions of the logical volume and their corresponding physical regions, wherein the logical mapping is contained in a Volume Group Descriptor Area (VGDA), the VGDA stored in a beginning descriptor area of each of the multiple physical storage devices such that each respective one of the multiple physical storage devices contains a respective VGDA having the logical mapping between the logical regions of the logical volume stored on each respective one of the multiple physical storage devices and their corresponding physical regions; wherein the storage device comprising the logical storage device having the multiple LUNs and multiple physical storage devices is selected from a list consisting of a hard disk drive and a solid state disk drive.",0,,1,A
10606754,2,"2. The method according to claim 1 , and comprising retrieving the first data from the specific physical region, and conveying the first data to the host computer.",1,claim 1,0,A
10606754,3,"3. The method according to claim 1 , and comprising retrieving the logical mapping from the storage device prior to receiving the storage command.",2,claim 1,0,A
10606754,4,"4. An apparatus, comprising: a storage device; and a processor configured to receive a storage command from a host computer to retrieve first data from a specific physical region of the storage device comprising a logical storage device having multiple logical unit numbers (LUNs) and multiple physical storage devices, to responsively retrieve second data being non-contiguous data from one or more additional physical regions of the multiple LUNs of an additional one of the multiple physical storage devices, physically non-adjacent to the first data such that the one or more additional physical regions are retrieved from a different physical storage device and partition than that storing the first data; wherein the first and second data are distributed on the multiple physical storage devices using block interleaving such that the first data and the second data each comprise the non-contiguous data; wherein the specific physical region and the one or more additional physical regions are combined into virtual regions, each of the virtual regions including a plurality of regions each comprising a sequence of bytes of a specific length of one megabyte, and each of the plurality of regions distributed among the multiple physical storage devices and previously concatenated or striped together to form a respective virtual region, and wherein the second data is responsively retrieved based on a logical mapping managed by the storage device and received prior to the storage command by the host computer, by: referencing the logical mapping, the logical mapping comprising relationships between logical regions of a logical volume and their corresponding physical regions; wherein the logical mapping contains a mapping of ranges of the logical regions which correspond to ranges of the physical regions and an indication of which of the multiple physical storage devices the ranges of the logical regions and the ranges of the physical regions are stored therein, matching the specific physical region in the logical mapping to a corresponding logical region, locating one or more additional logical regions that adjacently follow the corresponding logical region, and identifying the additional physical regions corresponding to the one or more additional logical regions that adjacently follow the corresponding logical region, wherein the processor is further configured to convey the second data including the additional physical regions to a cache, and periodically update the logical mapping using a background daemon to determine changes in the relationships between the logical regions of the logical volume and their corresponding physical regions, wherein the logical mapping is contained in a Volume Group Descriptor Area (VGDA), the VGDA stored in a beginning descriptor area of each of the multiple physical storage devices such that each respective one of the multiple physical storage devices contains a respective VGDA having the logical mapping between the logical regions of the logical volume stored on each respective one of the multiple physical storage devices and their corresponding physical regions; and further wherein the storage device comprising the logical storage device having the multiple LUNs and multiple physical storage devices is selected from a list consisting of a hard disk drive and a solid state disk drive.",3,,0,A
10606754,5,"5. The apparatus according to claim 4 , wherein the processor is configured to retrieve the first data from the specific physical region, and to convey the first data to the host computer.",4,claim 4,0,A
10606754,6,"6. The apparatus according to claim 4 , wherein the processor is configured to retrieve the logical mapping from the storage device prior to receiving the storage command.",5,claim 4,0,A
10606754,7,"7. A computer program product, the computer program product comprising: a non-transitory computer readable storage medium having computer readable program code embodied therewith, the computer readable program code comprising: computer readable program code configured to receive a storage command from a host computer to retrieve first data from a specific physical region of a storage device comprising a logical storage device having multiple logical unit numbers (LUNs) and multiple physical storage devices; computer readable program code configured to responsively retrieve second data being non-contiguous data from one or more additional physical regions of the multiple LUNs of an additional one of the multiple physical storage devices, physically non-adjacent to the first data such that the one or more additional physical regions are retrieved from a different physical storage device and partition than that storing the first data; wherein the first and second data are distributed on the multiple physical storage devices using block interleaving such that the first data and the second data each comprise the non-contiguous data; wherein the specific physical region and the one or more additional physical regions are combined into virtual regions, each of the virtual regions including a plurality of regions each comprising a sequence of bytes of a specific length of one megabyte, and each of the plurality of regions distributed among the multiple physical storage devices and previously concatenated or striped together to form a respective virtual region, and wherein the second data is responsively retrieved based on a logical mapping managed by the storage device and received prior to the storage command by the host computer, by: referencing the logical mapping, the logical mapping comprising relationships between logical regions of a logical volume and their corresponding physical regions; wherein the logical mapping contains a mapping of ranges of the logical regions which correspond to ranges of the physical regions and an indication of which of the multiple physical storage devices the ranges of the logical regions and the ranges of the physical regions are stored therein, matching the specific physical region to a corresponding logical region, locating one or more additional logical regions that adjacently follow the corresponding logical region, and identifying the additional physical regions corresponding to the one or more additional logical regions that adjacently follow the corresponding logical region; computer readable program code configured to convey the second data including the additional physical regions to a cache; and computer readable program code configured to periodically update the logical mapping using a background daemon to determine changes in the relationships between the logical regions of the logical volume and their corresponding physical regions, wherein the logical mapping is contained in a Volume Group Descriptor Area (VGDA), the VGDA stored in a beginning descriptor area of each of the multiple physical storage devices such that each respective one of the multiple physical storage devices contains a respective VGDA having the logical mapping between the logical regions of the logical volume stored on each respective one of the multiple physical storage devices and their corresponding physical regions; wherein the storage device comprises a logical storage device comprising the logical storage device having the multiple LUNs and multiple physical storage devices is selected from a list consisting of a hard disk drive and a solid state disk drive.",6,,0,A
10606755,1,"1. A method comprising: storing data associated with a first memory address in a cache line of a memory of a first processing unit, the cache line associated with a coherency state indicating that the memory has sole ownership of the cache line; decoding an instruction for execution by a second processing unit, the instruction comprising a source data operand specifying the first memory address usable to identify the data; executing, by the second processing unit, the decoded instruction by copying the data, as identified by the first memory address, from the cache line of the memory of the first processing unit to a register of the second processing unit, wherein responsive to the copy, the data stored in the cache line is to remain in the memory of the first processing unit and the coherency state associated with the cache line is to remain unchanged; and accessing the cache line in the memory by the first processing unit without the memory having to seek ownership of the cache line.",0,,1,A
10606755,2,"2. The method of claim 1 , wherein the memory is a level 1 (L1) cache, level 2 (L2) cache/mid-level cache (MLC), level 3 (L3) cache/last-level cache (LLC), or system memory.",1,claim 1,0,A
10606755,3,"3. The method of claim 1 , wherein the coherency state is a Modified (M) or Exclusive (E) state.",2,claim 1,0,A
10606755,4,"4. The method of claim 1 , wherein the instruction is a MOVGET instruction to provide read snapshot functionality.",3,claim 1,0,A
10606755,5,"5. The method of claim 1 , wherein the source and/or the destination operands to specify a data size, the data size being 4, 8, 16, 32, or 64-bytes.",4,claim 1,0,A
10606755,6,"6. The method of claim 1 , wherein the data is not copied to any cache of the second processing unit.",5,claim 1,0,A
10606755,7,"7. A method comprising: storing a first data associated with a first memory address in a cache line of a memory of a first processing unit, the cache line associated with a coherency state indicating that the memory has sole ownership of the cache line; decoding an instruction for execution by a second processing unit, the instruction comprising a source data operand identifying a register to store a second data and a destination operand to specify the first memory address; executing the decoded instruction by replacing the first data stored in the cache line of the memory of the first processing unit with the second data from the register, wherein subsequent to executing the decoded instruction, the memory of the first processing unit is to retain sole ownership of the cache line; and accessing the second data in the cache line in the memory by the first processing unit without the memory having to seek ownership of the cache line.",6,,0,A
10606755,8,"8. The method of claim 7 , wherein the memory is a level 1 (L1) cache, level 2 (L2) cache/mid-level cache (MLC), level 3 (L3) cache/last-level cache (LLC), or system memory.",7,claim 7,0,A
10606755,9,"9. The method of claim 7 , wherein the coherency state is a Modified (M) state.",8,claim 7,0,A
10606755,10,"10. The method of claim 7 , wherein the instruction is a MOVPUT instruction to provide in place write update functionality.",9,claim 7,0,A
10606755,11,"11. The method of claim 7 , wherein the source and/or the destination operands to specify a data size, the data size being 4, 8, 16, 32, or 64-bytes.",10,claim 7,0,A
10606755,12,"12. A system comprising: a first processing unit comprising a memory to store data associated with a first memory address in a cache line of the memory, the cache line associated with a coherency state indicating that the memory has sole ownership of the cache line; and a second processing unit comprising: decoder circuitry to decode an instruction, the instruction comprising a source data operand specifying the first memory address usable to identify the data; execution circuitry to execute the decoded instruction and copy data, as identified by the first memory address, from the cache line to a register of the second processing unit, wherein responsive to the copy, the data stored in the cache line is to remain in the memory of the first processing unit and the coherency state associated with the cache line is to remain unchanged; wherein the first processing unit is to access the cache line in the memory without the memory having to seek ownership of the cache line.",11,,0,A
10606755,13,"13. The system of claim 12 , wherein the memory is a level 1 (L1) cache, level 2 (L2) cache/mid-level cache (MLC), level 3 (L3) cache/last-level cache (LLC), or system memory.",12,claim 12,0,A
10606755,14,"14. The system of claim 12 , wherein the coherency state is a Modified (M) or Exclusive (E) state.",13,claim 12,0,A
10606755,15,"15. The system of claim 12 , wherein the instruction is a MOVGET instruction to provide read snapshot functionality.",14,claim 12,0,A
10606755,16,"16. The system of claim 12 , wherein the source and/or the destination operands to specify a data size, the data size being 4, 8, 16, 32, or 64-bytes.",15,claim 12,0,A
10606755,17,"17. A system comprising: a first processing unit comprising a memory to store a first data associated with a first memory address in a cache line of the memory, the cache line associated with a coherency state indicating that the memory has sole ownership of the cache line; and a second processing unit comprising: a register to store a second data; decoder circuitry to decode an instruction, the instruction comprising a source data operand to identify the register storing the second data and a destination operand to specify the first memory address; execution circuitry to execute the decoded instruction and replace the first data stored in the cache line of the memory of the first processing unit with the second data from the register, wherein subsequent to executing the decoded instruction, the memory of the first processing unit is to retain sole ownership of the cache line; and wherein the first processing unit is to access second data in the cache line in the memory without the memory having to seek ownership of the cache line.",16,,0,A
10606755,18,"18. The system of claim 17 , wherein the memory is a level 1 (L1) cache, level 2 (L2) cache/mid-level cache (MLC), level 3 (L3) cache/last-level cache (LLC), or system memory.",17,claim 17,0,A
10606755,19,"19. The system of claim 17 , wherein the coherency state is a Modified (M) state.",18,claim 17,0,A
10606755,20,"20. The system of claim 17 , wherein the instruction is a MOVPUT instruction to provide in place write update functionality.",19,claim 17,0,A
10606755,21,"21. The system of claim 17 , wherein the source and/or the destination operands to specify a data size, the data size being 4, 8, 16, 32, or 64-bytes.",20,claim 17,0,A
10606756,1,"1. A system, comprising: processor circuitry, the processor circuitry including: cache circuitry; and data transfer buffer circuitry coupled to the cache circuitry; memory controller circuitry; a storage device containing instructions that, when executed by the memory controller circuitry, cause the memory controller circuitry to: receive a request for data by an instruction executed by the processor circuitry; determine whether the requested data is present in the cache circuitry; responsive to a determination that the requested data is present in the cache circuitry, cause a transfer of the requested data from a cache circuitry to the data transfer buffer circuitry; responsive to a determination that the requested data is not present in the cache circuitry, cause a transfer of the requested data from a main memory to the data transfer buffer circuitry; and responsive to receipt of an indication of a successful execution of the instruction by the processor circuitry, transfer the requested data from the data transfer buffer circuitry to the cache circuitry.",0,,1,A
10606756,2,"2. The system of claim 1 wherein the instructions further cause the memory controller circuitry to: responsive to a determination the requested data is present in the cache circuitry, cause a transfer of the data from the cache circuitry to the processor circuitry.",1,claim 1,0,A
10606756,3,"3. The system of claim 1 wherein, responsive to a failure to receive the indication of the successful execution of the instruction by the processor circuitry, discard the requested data from the data transfer buffer circuitry.",2,claim 1,0,A
10606756,4,4. The system of claim 1 wherein the instructions that cause the memory controller circuitry to transfer the requested data from the data transfer buffer circuitry to the cache circuitry cause the memory controller circuitry to: transfer the requested data from the data transfer buffer circuitry to the cache circuitry responsive to receipt of a data indicative that the instruction has been retired by the processor circuitry.,3,claim 1,0,A
10606756,5,5. The system of claim 1 wherein the cache circuitry comprises multi-level cache circuitry that includes: Level 1 (L1) cache circuitry; Level 2 (L2) cache circuitry; and Last Level Cache (LLC) circuitry.,4,claim 1,0,A
10606756,6,"6. The system of claim 5 : wherein the memory controller circuitry, responsive to a determination that the requested is not present in the L1 cache circuitry, determines whether the requested data exists in the L2 cache circuitry or the LLC circuitry; and wherein the memory controller circuitry, responsive to a determination that the requested data is present in at least one of the L2 cache circuitry or the LLC circuitry, causes the transfer of the requested data to the processor circuitry.",5,claim 5,0,A
10606756,7,"7. The system of claim 1 wherein the data transfer buffer circuitry includes a plurality of data records, each of the data records including: a first data field to contain information indicative of an entity originating the data request; a second data field to contain information indicative of an address of the requested data; a third data field to contain the requested data; and a fourth data field to contain information indicative of an identifier associated with the instruction causing the data request.",6,claim 1,0,A
10606756,8,"8. A method, comprising: receiving, by memory controller circuitry, a request for data by an instruction executed by processor circuitry: determining, by the memory controller circuitry, whether the requested data is present in cache circuitry; causing, by the memory controller circuitry, a transfer of the requested data from the cache circuitry to a data transfer buffer circuitry responsive to a determination that the requested data is present in the cache circuitry; causing a transfer of the requested data from a main memory to the data transfer buffer circuitry responsive to a determination that the requested data is not present in the cache circuitry; and causing a transfer of the requested data from the data transfer buffer circuitry to the cache circuitry responsive to receipt of an indication of a successful execution of the instruction by the processor circuitry.",7,,0,A
10606756,9,"9. The method of claim 8 , further comprising: causing, by the memory controller circuitry, a transfer of the data from the cache circuitry to the processor circuitry responsive to a determination the requested data is present in the cache circuitry.",8,claim 8,0,A
10606756,10,"10. The method of claim 8 , further comprising: causing, by the memory controller circuitry, a retention of the requested data in the data transfer buffer circuitry responsive to a failure to receive the indication of the successful execution of the instruction by the processor circuitry.",9,claim 8,0,A
10606756,11,"11. The method of claim 8 wherein causing a transfer of the requested data from the data transfer buffer circuitry to the cache circuitry comprises: receiving, by the memory controller circuitry, data indicative that the instruction executed by the processor circuitry has been retired; and causing, by the memory controller circuitry, a transfer of the requested data from the data transfer buffer circuitry to the cache circuitry responsive to receipt of the data indicative that the instruction executed by the processor circuitry has been retired.",10,claim 8,0,A
10606756,12,"12. The method of claim 11 wherein causing, by the memory controller circuitry, a transfer of the requested data from the data transfer buffer circuitry to the cache circuitry comprises: causing, by the memory controller circuitry, a transfer of the requested data from the data transfer buffer circuitry to at least one of: Level 1 (L1) cache circuitry; Level 2 (L2) cache circuitry; and Last Level Cache (LLC) circuitry.",11,claim 11,0,A
10606756,13,"13. The method of claim 12 wherein determining whether the requested data is present in the cache circuitry further comprises: determining, by the memory controller circuitry, whether the requested data is present in the L1 cache circuitry; determining, by the memory controller circuitry, whether the requested data is present in the L2 Cache circuitry or the LLC circuitry responsive to a determination that the requested data is not present in the L1 Cache circuitry; and causing, by the memory controller circuitry, a transfer of the requested data from at least one of the L2 cache circuitry or the LLC circuitry to the processor circuitry responsive to a determination that the requested data exists in at least one of the L2 cache circuitry or the LLC circuitry.",12,claim 12,0,A
10606756,14,"14. The method of claim 8 wherein causing a transfer of the requested data from the main memory to the data transfer buffer circuitry further comprises: causing, by the memory controller circuitry, a transfer of the requested data from the main memory to the data transfer buffer circuitry, wherein the data transfer buffer circuitry includes a plurality of data records, each of the data records including: a first data field to contain information indicative of an entity originating the data request; a second data field to contain information indicative of an address of the requested data; a third data field to contain the requested data; and a fourth data field to contain information indicative of an identifier associated with the instruction causing the data request.",13,claim 8,0,A
10606756,15,"15. A system, comprising: means for receiving a request for data by an instruction executed by processor circuitry: means for determining whether the requested data is present in cache circuitry; means for causing a transfer of the requested data from the cache circuitry to a data transfer buffer circuitry responsive to a determination that the requested data is present in the cache circuitry; means for causing a transfer of the requested data from main memory to the data transfer buffer circuitry responsive to a determination that the requested data is not present in the cache circuitry; and means for causing a transfer of the requested data from the data transfer buffer circuitry to the cache circuitry responsive to receipt of an indication of a successful execution of the instruction by the processor circuitry.",14,,0,A
10606756,16,"16. The system of claim 15 , further comprising: means for transferring of the data from the cache circuitry to the processor circuitry responsive to a determination the requested data is present in the cache circuitry.",15,claim 15,0,A
10606756,17,"17. The system of claim 15 , further comprising: means for retaining the requested data in the location in the data transfer buffer circuitry responsive to a failure to receive the indication of the successful execution of the instruction by the processor circuitry.",16,claim 15,0,A
10606756,18,"18. The system of claim 15 wherein the means for transferring the requested data from the data transfer buffer circuitry to the cache circuitry comprises: means for receiving, by the memory controller circuitry, data indicative that the instruction executed by the processor circuitry has been retired; and means for transferring of the requested data from the location in the data transfer buffer circuitry to a location in the cache circuitry responsive to receipt of the data indicative that the instruction executed by the processor circuitry has been retired.",17,claim 15,0,A
10606756,19,19. The system of claim 18 wherein the means for transferring the requested data from the data transfer buffer circuitry to the cache circuitry comprises: means for transferring the requested data from the location in the data transfer buffer circuitry to at least one of: Level 1 (L1) cache circuitry; Level 2 (L2) cache circuitry; and Last Level Cache (LLC) circuitry.,18,claim 18,0,A
10606756,20,20. The system of claim 19 wherein the means for determining whether the requested data is present in the cache circuitry further comprises: means for determining whether the requested data is present in the L1 cache circuitry; means for determining whether the requested data is present in the L2 cache circuitry or the LLC circuitry responsive to a determination that the requested data is not present in the L1 cache circuitry; and means for transferring the requested data from at least one of the L2 cache circuitry or the LLC circuitry to the processor circuitry responsive to a determination that the requested data is present in at least one of the L2 cache circuitry or the LLC circuitry.,19,claim 19,0,A
10606756,21,"21. The system of claim 15 wherein the means for transferring the requested data from the main memory to the data transfer buffer circuitry further comprises: means for transferring the requested data from the main memory to the data transfer buffer circuitry, wherein the data transfer buffer circuitry includes a plurality of data records, each of the data records including: a first data field to contain information indicative of an entity originating the data request; a second data field to contain information indicative of an address of the requested data; a third data field to contain the requested data; and a fourth data field to contain information indicative of an identifier associated with the instruction causing the data request.",20,claim 15,0,A
10606756,22,"22. A non-transitory machine-readable storage medium containing instructions that, when executed by memory controller circuitry, cause the memory controller circuitry to: receive a request for data from an instruction executed by processor circuitry: determine whether the requested data is present in cache circuitry; cause a transfer of the requested data from the cache circuitry to a data transfer buffer circuitry responsive to a determination that the requested data is present in the cache circuitry; cause a transfer of the requested data from a main memory to the data transfer buffer circuitry responsive to a determination that the requested data is not present in the cache circuitry; and cause a transfer of the requested data from the data transfer buffer circuitry to the cache circuitry responsive to receipt of an indication of a successful execution of the instruction by the processor circuitry.",21,,0,A
10606756,23,23. The non-transitory machine-readable storage medium of claim 22 wherein the instructions cause the memory controller circuitry to: cause a transfer of the data from the cache circuitry to the processor circuitry responsive to a determination the requested data is present in the cache circuitry.,22,claim 22,0,A
10606756,24,24. The non-transitory machine-readable storage medium of claim 22 wherein the instructions cause the memory controller circuitry to: cause a retention of the requested data in the data transfer buffer circuitry responsive to a failure to receive the indication of the successful execution of the instruction by the processor circuitry.,23,claim 22,0,A
10606756,25,25. The non-transitory machine-readable storage medium of claim 22 wherein the instructions that cause a transfer of the requested data from the data transfer buffer circuitry to the cache circuitry cause the memory controller circuitry to: receive data indicative that the instruction executed by the processor circuitry has been retired; and cause a transfer of the requested data from the data transfer buffer circuitry to the cache circuitry responsive to receipt of the data indicative that the instruction executed by the processor circuitry has been retired.,24,claim 22,0,A
10606756,26,26. The non-transitory machine-readable storage medium of claim 25 wherein the instructions that cause a transfer of the requested data from the data transfer buffer circuitry to the cache circuitry cause the memory controller circuitry to: cause a transfer of the requested data from the data transfer buffer circuitry to at least one of: Level 1 (L1) cache circuitry; Level 2 (L2) cache circuitry; and Last Level Cache (LLC) circuitry.,25,claim 25,0,A
10606756,27,27. The non-transitory machine-readable storage medium of claim 26 wherein the instructions that determine whether the requested data is present in the cache circuitry cause the memory controller circuitry to: determine whether the requested data is present in the L1 cache circuitry; determine whether the requested data is present in the L2 cache circuitry or the LLC circuitry responsive to a determination that the requested data is not present in the L1 cache circuitry; and cause a transfer of the requested data from at least one of the L2 cache circuitry or the LLC circuitry to the processor circuitry responsive to a determination that the requested data is present in at least one of the L2 cache circuitry or the LLC circuitry.,26,claim 26,0,A
10606757,1,"1. A method of flushing metadata, comprising: removing a metadata identifier included in a sub-list of a first list to a corresponding sub-list of a second list, the sub-list of the first list and the corresponding sub-list of the second list being associated with the same processing unit; removing the metadata identifiers from the corresponding sub-list of the second list to a third list based on a storage position of the metadata identifier; and determining metadata to be flushed from the third list to a metadata repository; wherein removing the metadata identifiers from the corresponding sub-list of the second list to a third list comprises determining metadata identifiers to be removed to the third list based on at least one of a utilization efficiency of a cache associated with metadata and a predefined flush sequence of the metadata.",0,,1,A
10606757,2,"2. The method according to claim 1 , wherein removing a metadata identifier to a corresponding sub-list of a second list comprises: in response to at least one of a plurality of trigger conditions being satisfied, removing the metadata identifier included in a sub-list of a first list to a corresponding sub-list of a second list, the trigger conditions comprising: a utilization efficiency of a log system for recording metadata flushes exceeding a first threshold; a utilization efficiency of a cache associated with metadata exceeding a second threshold; and a predefined time interval being reached.",1,claim 1,0,A
10606757,3,"3. The method according to claim 1 , wherein removing the metadata identifiers from the corresponding sub-list of the second list to a third list comprises: determining a number of metadata identifiers to be removed to the third list according to a utilization efficiency of a cache associated with metadata; obtaining a predefined flush sequence of the metadata from a log system for recording metadata flushes; and determining the metadata identifiers to be removed to the third list based on the predefined flush sequence of the metadata and the number.",2,claim 1,0,A
10606757,4,"4. The method according to claim 3 , wherein determining the metadata identifiers to be removed to the third list comprises: determining the number of metadata to be flushed first based on the predefined flush sequence of the metadata; and determining the metadata identifiers corresponding to the determined metadata as the metadata identifiers to be removed to the third list.",3,claim 3,0,A
10606757,5,"5. The method according to claim 1 , wherein determining metadata to be flushed from the third list to a metadata repository comprises: obtaining a predefined flush sequence of the metadata from a log system for recording metadata flushes; and grouping the metadata identifiers in the third list based on the predefined flush sequence of the metadata, each group of metadata identifiers comprising one or more metadata identifiers, metadata corresponding to the one or more metadata identifiers having a predefined flush sequence within a threshold range; and flushing metadata corresponding to each group of metadata identifiers to the metadata repository.",4,claim 1,0,A
10606757,6,"6. A device for flushing metadata, comprising: at least one processor; and a memory coupled to the at least one processor and comprising instructions stored thereon, the instructions, when executed by the at least one processor, causing the device to perform acts comprising: removing a metadata identifier included in a sub-list of a first list to a corresponding sub-list of a second list, the sub-list of the first list and the corresponding sub-list of the second list being associated with the same processing unit; removing the metadata identifiers from the corresponding sub-list of the second list to a third list based on a storage position of the metadata identifier; and determining metadata to be flushed from the third list to a metadata repository; wherein removing the metadata identifiers from the corresponding sub-list of the second list to a third list comprises determining metadata identifiers to be removed to the third list based on at least one of a utilization efficiency of a cache associated with metadata and a predefined flush sequence of the metadata.",5,,0,A
10606757,7,"7. The device according to claim 6 , wherein removing a metadata identifier to a corresponding sub-list of a second list comprises: in response to at least one of a plurality of trigger conditions being satisfied, removing the metadata identifier included in a sub-list of a first list to a corresponding sub-list of a second list, the trigger conditions comprising: a utilization efficiency of a log system for recording metadata flushes exceeding a first threshold; a utilization efficiency of a cache associated with metadata exceeding a second threshold; and a predefined time interval being reached.",6,claim 6,0,A
10606757,8,"8. The device according to claim 6 , wherein removing the metadata identifier from the corresponding sub-list of the second list to a third list comprises: determining the a number of metadata identifiers to be removed to the third list according to a utilization efficiency of a cache associated with metadata; obtaining a predefined flush sequence of the metadata from a log system for recording metadata flushes; and determining the metadata identifier to be removed to the third list based on the predefined flush sequence of the metadata and the number.",7,claim 6,0,A
10606757,9,"9. The device according to claim 8 , wherein determining the metadata identifiers to be removed to the third list comprises: determining the number of metadata to be flushed first based on the predefined flush sequence of the metadata; and determining the metadata identifiers corresponding to the determined metadata as the metadata identifiers to be removed to the third list.",8,claim 8,0,A
10606757,10,"10. The device according to claim 6 , wherein determining metadata to be flushed from the third list to a metadata repository comprises: obtaining a predefined flush sequence of the metadata from a log system for recording metadata flushes; and grouping the metadata identifiers in the third list based on the predefined flush sequence of the metadata, each group of metadata identifiers comprising one or more metadata identifiers, metadata corresponding to the one or more metadata identifiers having a predefined flush sequence within a threshold range; and flushing metadata corresponding to each group of metadata identifiers to the metadata repository.",9,claim 6,0,A
10606757,11,"11. A computer program product being tangibly stored on a non-transient computer readable medium and comprising machine executable instructions which, when executed, cause a machine to perform steps of: removing a metadata identifier included in a sub-list of a first list to a corresponding sub-list of a second list, the sub-list of the first list and the corresponding sub-list of the second list being associated with the same processing unit; removing the metadata identifiers from the corresponding sub-list of the second list to a third list based on a storage position of the metadata identifier; and determining metadata to be flushed from the third list to a metadata repository; wherein removing the metadata identifiers from the corresponding sub-list of the second list to a third list comprises determining metadata identifiers to be removed to the third list based on at least one of a utilization efficiency of a cache associated with metadata and a predefined flush sequence of the metadata.",10,,0,A
10606757,12,"12. The computer program product according to claim 11 , wherein removing a metadata identifier to a corresponding sub-list of a second list comprises: in response to at least one of a plurality of trigger conditions being satisfied, removing the metadata identifier included in a sub-list of a first list to a corresponding sub-list of a second list, the trigger conditions comprising: a utilization efficiency of a log system for recording metadata flushes exceeding a first threshold; a utilization efficiency of a cache associated with metadata exceeding a second threshold; and a predefined time interval being reached.",11,claim 11,0,A
10606757,13,"13. The computer program product according to claim 11 , wherein removing the metadata identifiers from the corresponding sub-list of the second list to a third list comprises: determining a number of metadata identifiers to be removed to the third list according to a utilization efficiency of a cache associated with metadata; obtaining a predefined flush sequence of the metadata from a log system for recording metadata flushes; and determining the metadata identifiers to be removed to the third list based on the predefined flush sequence of the metadata and the number.",12,claim 11,0,A
10606757,14,"14. The computer program product according to claim 13 , wherein determining the metadata identifiers to be removed to the third list comprises: determining the number of metadata to be flushed first based on the predefined flush sequence of the metadata; and determining the metadata identifiers corresponding to the determined metadata as the metadata identifiers to be removed to the third list.",13,claim 13,0,A
10606757,15,"15. The computer program product according to claim 11 , wherein determining metadata to be flushed from the third list to a metadata repository comprises: obtaining a predefined flush sequence of the metadata from a log system for recording metadata flushes; and grouping the metadata identifiers in the third list based on the predefined flush sequence of the metadata, each group of metadata identifiers comprising one or more metadata identifiers, metadata corresponding to the one or more metadata identifiers having a predefined flush sequence within a threshold range; and flushing metadata corresponding to each group of metadata identifiers to the metadata repository.",14,claim 11,0,A
10606757,16,16. The computer program product of claim 11 wherein said same processing unit comprises a first one of a plurality of processing cores of a multi-core system and wherein each of one or more other processing units comprises a different one of the plurality of processing cores of the multi-core system.,15,claim 11,0,A
10606757,17,"17. The computer program product of claim 16 wherein the first list comprises a plurality of sub-lists corresponding to respective ones of the processing units that comprise respective processing cores of the multi-core system, and further wherein the second list comprises a plurality of sub-lists corresponding to respective ones of the sub-lists of the first list.",16,claim 16,0,A
10606757,18,18. The method of claim 1 wherein said same processing unit comprises a first one of a plurality of processing cores of a multi-core system and wherein each of one or more other processing units comprises a different one of the plurality of processing cores of the multi-core system.,17,claim 1,0,A
10606757,19,"19. The method of claim 18 wherein the first list comprises a plurality of sub-lists corresponding to respective ones of the processing units that comprise respective processing cores of the multi-core system, and further wherein the second list comprises a plurality of sub-lists corresponding to respective ones of the sub-lists of the first list.",18,claim 18,0,A
10606757,20,20. The device of claim 6 wherein said same processing unit comprises a first one of a plurality of processing cores of a multi-core system and wherein each of one or more other processing units comprises a different one of the plurality of processing cores of the multi-core system.,19,claim 6,0,A
10606758,1,"1. A method of operating a memory system, comprising: receiving an unmap command corresponding to logical addresses; setting a state of at least one unmap bit corresponding to the logical addresses among a plurality of unmap bits included in an unmap filter to an unmapped state in response to the unmap command; and updating first mapping information by maintaining logical-to-physical mapping information corresponding to the at least one unmap bit set to the unmapped state, among the logical addresses, and setting logical-to-physical mapping information about a logical address not corresponding to the at least one unmap bit, among the logical addresses, to the unmapped state.",0,,1,A
10606758,2,"2. The method according to claim 1 , wherein the unmap filter is stored in a nonvolatile memory device, and wherein the operation of setting a state of at least one unmap bit comprises writing the at least one unmap bit set to the unmapped state to the nonvolatile memory device.",1,claim 1,0,A
10606758,3,"3. The method according to claim 1 , wherein the logical-to-physical address mapping information is stored to the nonvolatile memory device, wherein the operation of setting a state of logical-to-physical address mapping information comprises: reading the logical-to-physical address mapping information from the nonvolatile memory device; modifying the state of the logical-to-physical address mapping information read from the nonvolatile memory device to the unmapped state; and writing the modified logical-to-physical address mapping information to the nonvolatile memory device.",2,claim 1,0,A
10606758,4,"4. The method according to claim 1 , wherein each of the plurality of unmap bits corresponds to a plurality of logical addresses.",3,claim 1,0,A
10606758,5,"5. The method according to claim 4 , wherein each of the plurality of unmap bits is set to the unmapped state when all of the corresponding logical addresses are unmapped.",4,claim 4,0,A
10606758,6,"6. The method according to claim 1 , further comprising setting a state of logical-to-physical address mapping information corresponding to the at least one unmap bit set to the unmapped state, to an unmapped state.",5,claim 1,0,A
10606758,7,"7. The method according to claim 6 , further comprising: receiving a write command for a first logical address among the logical addresses corresponding to the unmap command; and setting a state of an unmap bit, among the plurality of unmapped bits, corresponding to the first logical address to a mapped state.",6,claim 6,0,A
10606758,8,"8. The method according to claim 7 , further comprising: allocating a physical address corresponding to the first logical address in response to the write command; and updating a mapping relationship between the first logical address and the physical address to the logical-to-physical address mapping information corresponding to the unmap bit set to a mapped state.",7,claim 7,0,A
10606758,9,"9. The method according to claim 2 , wherein the writing comprises simultaneously writing all of the other plurality of unmap bits included in the unmap filter to the nonvolatile memory device.",8,claim 2,0,A
10606758,10,"10. The method according to claim 9 , wherein the unmap filter, before being set to the unmapped state, is stored to a first memory region of the nonvolatile memory device, and wherein the unmap filter set to the unmapped state is stored to a second memory region of the nonvolatile memory device.",9,claim 9,0,A
10606758,11,"11. A method of operating a memory system, comprising: checking an unmap bit set to an unmapped state, among a plurality of unmap bits included in an unmap filter stored in a first memory region of a nonvolatile memory; determining an unmapped first logical address based on the check of the unmap bit set to the unmapped state; determining an unmapped second logical address from logical-to-physical address mapping information stored in a second memory region of the nonvolatile memory; and determining an unmapped logical address region based on the first logical address and the second logical address.",10,,0,A
10606758,12,"12. The method according to claim 11 , further comprising loading logical-to-physical address mapping information to a buffer memory based on the unmapped logical address region.",11,claim 11,0,A
10606758,13,"13. The method according to claim 12 , further comprising performing at least one of a reading, modifying and writing operation on the logical-to-physical address mapping information loaded to the buffer memory to the second memory region.",12,claim 12,0,A
10606758,14,"14. The method according to claim 12 , further comprising: receiving a write command corresponding to the first logical address; and setting an unmap bit corresponding to the first logical address to a mapped state.",13,claim 12,0,A
10606758,15,"15. The method according to claim 14 , further comprising: allocating a physical address corresponding to the first logical address in response to the write command; and updating a mapping relationship between the first logical address and the physical address to the logical-to-physical address mapping information.",14,claim 14,0,A
10606758,16,"16. A memory system comprising: a nonvolatile memory device configured to store logical-to-physical address mapping information, and an unmap filter including a plurality of unmap bits; and a memory controller configured to receive an unmap command and logical addresses corresponding to the unmap command from a host, and control the nonvolatile memory device in response to the unmap command, wherein the memory controller is configured to: set at least one unmap bit corresponding to the logical addresses among the plurality of unmap bits to an unmapped state, and store the set at least one unmap bit to the nonvolatile memory device; and maintain logical-to-physical address mapping information corresponding to the at least one unmap bit set to the unmapped state among the logical addresses and modify logical-to-physical mapping information about a logical address not corresponding to the at least one unmap bit, among the logical addresses, to the unmapped state.",15,,0,A
10606758,17,"17. The memory system according to claim 16 , wherein the memory controller is configured to: read the logical-to-physical address mapping information from the nonvolatile memory device; temporarily store the logical-to-physical address mapping information read from the nonvolatile memory device to a buffer memory; modify the state of the logical-to-physical address mapping information temporarily stored in the buffer memory to the unmapped state; and write the modified logical-to-physical address mapping information to the nonvolatile memory device.",16,claim 16,0,A
10606758,18,"18. The memory system according to claim 16 , wherein each of the plurality of unmap bits corresponds to a plurality of logical addresses.",17,claim 16,0,A
10606758,19,"19. The memory system according to claim 18 , wherein each of the plurality unmap bits is set to the unmapped state when all of the corresponding logical addresses are unmapped.",18,claim 18,0,A
10606758,20,"20. The memory system according to claim 16 , wherein the memory controller comprises a buffer memory, and wherein the memory controller is configured to load the logical-to-physical address mapping information stored in the nonvolatile memory device to the buffer memory in response to a read command input from the host.",19,claim 16,0,A
10606759,1,"1. A method comprising: establishing a page table within a processing system which comprises an entry having a page table entry structure with a physical address field for a data block indicative of a physical address of the data block; providing access to a further data block in a device of the processing system, the device being connected to a processor of the processing system via an extension bus, the processing system also comprising a memory connected to the processor via a memory bus, the processing system further including one or more components for controlling access to the device, the processing system comprising an operating system, wherein the providing comprises: adding by the operating system for the further data block a special entry in the page table of the processing system, the added special entry representing the further data block and the added special entry having a special page table entry format with no physical address indication for the data block, the special page table entry format of the added special entry being a different format than a format of the page table entry structure of the entry in the page table; receiving by a memory management unit (MMU) of the processing system a request of the further data block; and based on the added special entry, instructing by the MMU one component of the one or more components to provide access to the further data block using the added special entry in the page table by generating an address where the further data block is stored in the device.",0,,1,A
10606759,2,"2. The method of claim 1 , further comprising upon receiving the request, checking by the MMU the page table for determining that the special entry represents the requested further data block.",1,claim 1,0,A
10606759,3,"3. The method of claim 2 , wherein the MMU comprises a translation lookaside buffer (TLB), and based on receiving the request, the providing further comprises determining whether an entry of the TLB corresponds to the further data block, and based on detecting a TLB miss for the requested further data block, performing the checking.",2,claim 2,0,A
10606759,4,"4. The method of claim 3 , further comprising controlling the MMU for preventing creation of an entry in the TLB indicating the further data block.",3,claim 3,0,A
10606759,5,"5. The method of claim 1 , further comprising upon receiving the request: determining whether the special entry represents the further data block; based on determining that the special entry represents the further data block creating a TLB entry comprising the special entry in a TLB of the MMU, triggering a repeating of the receiving; and wherein the instructing is performed based on identifying in the TLB the special entry that represents the further data block.",4,claim 1,0,A
10606759,6,"6. The method of claim 1 , wherein instructing the one or more components further comprises: using the special entry for generating the address where the further data block is stored in the device; performing a first reading of the further data block from the device using the generated address; loading the read data block into the memory; and performing a second reading of the further data block from the memory.",5,claim 1,0,A
10606759,7,"7. The method of claim 6 , wherein the first reading is performed via a PCI host bridge (PHB) of the processing system.",6,claim 6,0,A
10606759,8,"8. The method of claim 1 , wherein adding the special entry comprises: sending by the operating system a request to the one component for adding the special entry; and adding the special entry upon receiving an acknowledgment from the one component, wherein the added special entry comprises information on the sender of the acknowledgement.",7,claim 1,0,A
10606759,9,"9. The method of claim 1 , wherein adding the special entry comprises: registering by the operating system with the one component of the one or more components of the processing system the special entry to be added; adding the special entry upon receiving a confirmation from the one component of the one or more components.",8,claim 1,0,A
10606759,10,"10. The method of claim 1 , wherein the added entry indicates at least one of: the added special entry is a valid or invalid entry; the one component; the further data block being a read only data block; or storage characteristics for storing the further data block, the storage characteristics comprising at least one of storage technology for storing the further data block, copy on write, read/write/execute permissions, locking in the device.",9,claim 1,0,A
10606759,11,"11. The method of claim 10 , further comprising selecting the one component using the information stored in the added special entry.",10,claim 10,0,A
10606759,12,"12. The method of claim 1 , wherein the operating system comprises a hypervisor.",11,claim 1,0,A
10606759,13,"13. The method of claim 1 , wherein the one component comprises at least one hardware or firmware component of the one or more components.",12,claim 1,0,A
10606759,14,"14. A system for facilitating access to a data block, the system comprising: a memory; and a processor communicatively coupled with the memory, wherein the system performs a method comprising: establishing a page table within a processing system which comprises an entry having a page table entry structure with a physical address field for a data block indicative of a physical address of the data block; providing access to a further data block in a device of the processing system, the device being connected to a processor of the processing system via an extension bus, the processing system also comprising a memory connected to the processor via a memory bus, the processing system further including one or more components for controlling access to the device, the processing system comprising an operating system, wherein the providing comprises: adding by the operating system for the further data block a special entry in the page table of the processing system, the added special entry representing the further data block and the added special entry having a special page table entry format with no physical address indication for the data block, the special page table entry format of the added special entry being a different format than a format of the page table entry structure of the entry in the page table; receiving by a memory management unit (MMU) of the processing system a request of the further data block; and based on the added special entry, instructing by the MMU one component of the one or more components to provide access to the further data block using the added special entry in the page table by generating an address where the further data block is stored in the device.",13,,0,A
10606759,15,"15. The system of claim 14 , further comprising upon receiving the request, checking by the MMU the page table for determining that the special entry represents the requested further data block.",14,claim 14,0,A
10606759,16,"16. The system of claim 15 , wherein the MMU comprises a translation lookaside buffer (TLB), and based on receiving the request, the providing further comprises determining whether an entry of the TLB corresponds to the further data block, and based on detecting a TLB miss for the requested further data block, performing the checking.",15,claim 15,0,A
10606759,17,"17. The system of claim 16 , further comprising controlling the MMU for preventing creation of an entry in the TLB indicating the further data block.",16,claim 16,0,A
10606759,18,"18. The system of claim 14 , further comprising upon receiving the request: determining whether the special entry represents the further data block; based on determining that the special entry represents the further data block, creating a TLB entry comprising the special entry in a TLB of the MMU, triggering a repeating of the receiving; and wherein the instructing is performed based on identifying in the TLB the special entry that represents the further data block.",17,claim 14,0,A
10606759,19,"19. The system of claim 14 , wherein instructing the one or more components further comprises: using the special entry for generating the address where the further data block is stored in the device; performing a first reading of the further data block from the device using the generated address; loading the read data block into the memory; and performing a second reading of the further data block from the memory.",18,claim 14,0,A
10606759,20,"20. The system of claim 19 , wherein the first reading is performed via a PCI host bridge (PHB) of the processing system.",19,claim 19,0,A
10606760,1,"1. A method of writing data to a memory system comprising: receiving, by a memory controller, a sequence of N consecutive logical block addresses (LBAs) and logical sector data for each of the LBAs, from a host; compressing, by the memory controller, the logical sector data; executing, by the memory controller, a first one of a plurality of hash functions on a first LBA among the sequence to generate a first virtual address; determining, by the memory controller, whether the first virtual address is occupied; setting a destination address to the first virtual address when it is determined that the virtual address is not occupied; setting the destination address to a second other virtual address generated from executing a second other one of the hash functions on the first LBA when it is determined that the first virtual address is occupied; storing, the compressed data in a first physical sector of a nonvolatile memory associated with the destination address; updating, by the memory controller, a mapping table to include to include a 1 st entry corresponding to the first LBA and an index of the hash function that generated the destination address, and 2 nd though Nth consecutive entries respectively corresponding to the 2 nd through Nth LBAs each including the index and an offset to the 1 st entry, and where N is at least two.",0,,1,A
10606760,2,"2. The method of claim 1 , wherein each hash function is configured to generate a different pseudo-random number when operated on a same LBA.",1,claim 1,0,A
10606760,3,"3. The method of claim 1 , further comprising the memory controller storing information in spare region of the first physical sector indicating offsets and lengths of compressed logical sector data for each of the LBAs.",2,claim 1,0,A
10606760,4,"4. The method of claim 1 , further comprising the memory controller updating the entries to indicate that logical sector data associated with each of the LBAs has been compressed.",3,claim 1,0,A
10606760,5,"5. A memory system comprising: a nonvolatile memory device comprising a plurality of physical sectors; a mapping table; and a memory controller including a plurality of hash functions, the memory controller configured to access the physical sectors using the mapping table and the hash functions, wherein the memory controller is configured to receive a sequence of N consecutive logical block addresses (LBAs) from a host and logical sector data for each of the LBAs, compress the logical sector data to generate compressed data, execute a first one of the hash functions on a first logical block address (LBA) among the sequence to generate a first virtual address, determine whether the first virtual address is occupied, set a destination address to the first virtual address when it is determined that the first virtual address is not occupied, set the destination address to a second other virtual address generated from executing a second other one of the hash functions on the first LBA when it is determined that the first virtual address is occupied, and store the compressed data in a first physical sector among the physical sectors that is associated with the destination address, wherein the memory controller updates the mapping table to include a 1 st entry corresponding to the first LBA and an index of the hash function that generated the destination address, and 2 nd though Nth consecutive entries respectively corresponding to the 2 nd through Nth LBAs each including the index and an offset to the 1 st entry, and where N is at least two.",4,,0,A
10606760,6,"6. The memory system of claim 5 , wherein each hash function is configured to generate a different pseudo-random number when operated on a same LBA.",5,claim 5,0,A
10606760,7,"7. The memory system of claim 5 , wherein the controller is configured to receive an input LBA and a read command from the host, access an entry of the mapping table associated with the input LBA to retrieve an index and an offset, subtract the retrieved offset from the input LBA to generate a result, operate one of the hash functions identified by the retrieved index on the result to generate a third virtual address, and output data of one of the physical sectors associated with the third virtual address to the host.",6,claim 5,0,A
10606760,8,"8. The memory system of claim 5 , wherein the nonvolatile memory is flash memory.",7,claim 5,0,A
10606760,9,"9. The memory system of claim 5 , wherein the controller stores information in a spare region of the first physical sector indicating offsets and lengths of compressed logical sector data for each of the LBAs.",8,claim 5,0,A
10606760,10,"10. The memory system of claim 5 , wherein the controller is configured to update the entries to indicate that logical sector data associated with each of the LBAs has been compressed.",9,claim 5,0,A
10606760,11,"11. The memory system of claim 5 , wherein the controller is configured to receive an input LBA, store logical sector data associated with the input LBA in the memory device without compression in one of the physical sectors when the input LBA is received without at least one additional LBA sequential to the input LBA, and update an entry of the mapping table corresponding to the input LBA to indicate the stored logical sector data is uncompressed.",10,claim 5,0,A
10606760,12,"12. The memory system of claim 5 , wherein the controller stores the compressed data in the first physical sector and a second physical sector among the physical sectors.",11,claim 5,0,A
10606760,13,"13. The memory system of claim 12 , wherein the compressed data includes compressed data for one logical sector that is split across the first and second physical sectors.",12,claim 12,0,A
10606760,14,"14. The memory system of claim 13 , wherein the controller updates the mapping table to indicate that the one logical sector is split.",13,claim 13,0,A
10606760,15,"15. The memory system of claim 5 , further comprising a buffer temporarily storing the sequence of logical block addresses (LBAs) and the corresponding logical sector data.",14,claim 5,0,A
10606760,16,"16. A method of reading data from a memory system comprising: receiving, by a memory controller, a first logical block address (LBA) and a read command from a host; accessing, by the memory controller, an entry of a mapping table associated with the first LBA to retrieve an index and an offset, in response to receipt of the read command; generating, by the memory controller, a second LBA by subtracting the offset from the first LBA; selecting, by the memory controller, a hash function from among a plurality of different hash functions using the index; executing, by the memory controller, the selected hash function on the second LBA to generate a virtual address; and retrieving data from a physical sector of a nonvolatile memory associated with the virtual address, wherein the different hash functions generate a different virtual address when executed on a same value.",15,,0,A
10606760,17,"17. The method of claim 16 , further comprising: uncompressing, by the memory controller, the retrieved data to generate uncompressed data when the entry indicates a compression has been performed; sending, by the controller, the uncompressed data associated with the LBA to the host when the entry indicates the compression; and sending, by the controller, the retrieved data to the host when the entry indicates no compression has been performed.",16,claim 16,0,A
10606760,18,"18. The method of claim 16 , wherein the retrieving of the data comprises: determining, by the memory controller, an offset and a size of the data in the physical sector from a spare region in the physical sector; and extracting, by the memory controller, data from the physical sector at the offset and having the size.",17,claim 16,0,A
10606761,1,"1. A method for accessing a flash memory module, comprising: building a physical address to logical address (P2L) table within a buffer of a flash memory controller, which includes consecutive physical addresses and corresponding logical addresses; receiving a first read command requesting for a first data within the flash memory module, wherein the first read command comprises a first logical address; searching the P2L table to determine whether the P2L table includes information associated with the first logical address; if the P2L table does not include the information associated with the first logical address, reading a logical address to physical address (L2P) table having a range of logic addresses from the flash memory module, storing the L2P table in the buffer of the flash memory controller, and searching the L2P table for a first physical address corresponding to the first logical address, thereby to read the first data from the flash memory module; and using the P2L table to update content of the L2P table to generate an updated L2P table; receiving a second read command requesting for a second data within the flash memory module, wherein the second read command comprises a second logical address; if the P2L table and the updated L2P table are within the buffer of the flash memory controller when receiving the second read command, and if the second logical address falls within the range of the logical addresses, directly searching the L2P table for a second physical address corresponding to the second logical address without searching the P2L table, thereby to read the second data from the flash memory module.",0,,1,A
10606761,2,"2. The method of claim 1 , wherein the L2P table includes a range of logic addresses and the step of using the P2L table to update the content of the L2P table comprises: using at least one physical address in the P2L table that corresponds to the range of the logic addresses to update the L2P table.",1,claim 1,0,A
10606761,3,"3. The method of claim 1 , wherein the flash memory module comprises a plurality of flash memory chips, each flash memory chip comprises a plurality of block, each block comprises a plurality of pages, and the P2L table and the L2P table record information on a page basis.",2,claim 1,0,A
10606761,4,"4. The method of claim 1 , further comprising: if the second logical address does not fall within the range of the logical addresses, searching the P2L table to determine whether the P2L table includes information associated with the second logical address; if the P2L table does not include the information associated with the second logical address, reading another L2P table from the flash memory module, and searching the another L2P table for the second physical address, thereby to read the second data from the flash memory module; and using the P2L table to update content of the another L2P table.",3,claim 1,0,A
10606761,5,"5. The method of claim 1 , wherein the P2L table corresponds to a block of the flash memory module, and the method further comprises: receiving a write command comprising the logical addresses; writing data corresponding to the write command to pages having the consecutive physical addresses of the block, after the P2L table is built; wherein the step of receiving the first read command and the step of receiving the second read command are performed when the block is not fully written and has space for a next write command.",4,claim 1,0,A
10606761,6,"6. The method of claim 5 , further comprising: receiving a next write command after the step of receiving the second read command is executed; writing data corresponding to the next write command to the block; and once the data corresponding to the next write command is written to the block, the updated L2P table is marked as invalid or is deleted.",5,claim 5,0,A
10606761,7,"7. A flash memory controller, wherein the flash memory controller is arranged to access a flash memory module, the flash memory controller comprising: a read-only memory arranged to store a program code; a microprocessor arranged to execute the program code to control access to the flash memory module; and a buffer arranged to store a physical address to logical address (P2L) table, wherein the P2L table includes consecutive physical addresses and corresponding logical addresses; wherein when the microprocessor receives a first read command requesting for a first data within the flash memory module, the microprocessor searches the P2L table to determine whether the P2L table includes information associated with the first logical address; if the P2L table does not include the information associated with the first logical address, the microprocessor reads a logical address to physical address (L2P) table having a range of logic addresses from the flash memory module, stores the L2P table in the buffer, and searches the L2P table for a first physical address corresponding to the first logical address, thereby to read the first data from the flash memory module; and the microprocessor uses the P2L table to update content of the L2P table to generate an updated L2P table; wherein the microprocessor further receives a second read command requesting for a second data within the flash memory module, wherein the second read command comprises a second logical address; and if the P2L table and the updated L2P table are within the buffer of the flash memory controller when the microprocessor receives the second read command, and if the second logical address falls within the range of the logical addresses, the microprocessor directly searches the L2P table for a second physical address corresponding to the second logical address without searching the P2L table, thereby to read the second data from the flash memory module.",6,,0,A
10606761,8,"8. The flash memory controller of claim 7 , wherein the L2P table includes a range of logic addresses and the microprocessor uses at least one physical address in the P2L table that corresponds to the range of the logic addresses to update the L2P table.",7,claim 7,0,A
10606761,9,"9. The flash memory controller of claim 7 , wherein the flash memory module a plurality of flash memory chips, each flash memory chip comprises a plurality of block, each block comprises a plurality of pages, and the microprocessor uses the P2L table and the L2P table on a page basis.",8,claim 7,0,A
10606761,10,"10. The flash memory controller of claim 7 , wherein if the second logical address does not fall within the range of the logical addresses, the microprocessor searches the P2L table to determine whether the P2L table includes information associated with the second logical address; and if the P2L table does not include the information associated with the second logical address, the microprocessor reads another L2P table from the flash memory module, and searching the another L2P table for the second physical address, thereby to read the second data from the flash memory module; and the microprocessor uses the P2L table to update content of the another L2P table.",9,claim 7,0,A
10606761,11,"11. The flash memory controller of claim 7 , wherein the P2L table corresponds to a block of the flash memory module, and the microprocessor receives a write command comprising the logical addresses, writes data corresponding to the write command to pages having the consecutive physical addresses of the block after the P2L table is built, and the microprocessor receives the first read command and the second read command when the block is not fully written and has space for a next write command.",10,claim 7,0,A
10606761,12,"12. The flash memory controller of claim 11 , wherein the microprocessor receives a next write command after the second read command is executed, and writes data corresponding to the next write command to the block, and once the data corresponding to the next write command is written to the block, the updated L2P table is marked as invalid or is deleted.",11,claim 11,0,A
10606761,13,"13. An electronic device, comprising: a flash memory module; and a flash memory controller arranged to access the flash memory module and build a physical address to logical address (P2L) table within a buffer of a flash memory controller, which includes consecutive physical addresses and corresponding logical addresses; wherein when the flash memory controller receives a first read command requesting for a first data within the flash memory module, the flash memory controller searches the P2L table to determine whether the P2L table includes information associated with the first logical address; if the P2L table does not include the information associated with the first logical address, the flash memory controller reads a logical address to physical address (L2P) table having a range of logic addresses from the flash memory module, stores the L2P table in the buffer, and searches the L2P table for a first physical address corresponding to the first logical address, thereby to read the first data from the flash memory module; and the flash memory controller uses the P2L table to update content of the L2P table to generate an updated L2P table; wherein the flash memory controller further receives a second read command requesting for a second data within the flash memory module, wherein the second read command comprises a second logical address; and if the P2L table and the updated L2P table are within the buffer of the flash memory controller when the flash memory controller receives the second read command, and if the second logical address falls within the range of the logical addresses, the flash memory controller directly searches the L2P table for a second physical address corresponding to the second logical address without searching the P2L table, thereby to read the second data from the flash memory module.",12,,0,A
10606761,14,"14. The electronic device of claim 13 , wherein the L2P table includes a range of logic addresses and the flash memory controller uses at least one physical address in the P2L table that corresponds to the range of the logic addresses to update the L2P table.",13,claim 13,0,A
10606761,15,"15. The electronic device of claim 13 , wherein the flash memory module a plurality of flash memory chips, each flash memory chip comprises a plurality of block, each block comprises a plurality of pages, and the flash memory controller uses the P2L table and the L2P table on a page basis.",14,claim 13,0,A
10606761,16,"16. The electronic device of claim 13 , wherein the if the second logical address does not fall within the range of the logical addresses, the flash memory controller searches the P2L table to determine whether the P2L table includes information associated with the second logical address; and if the P2L table does not include the information associated with the second logical address, the flash memory controller reads another L2P table from the flash memory module, and searching the another L2P table for the second physical address, thereby to read the second data from the flash memory module; and the flash memory controller uses the P2L table to update content of the another L2P table.",15,claim 13,0,A
10606761,17,"17. The electronic device of claim 13 , wherein the P2L table corresponds to a block of the flash memory module, and the flash memory controller receives a write command comprising the logical addresses, writes data corresponding to the write command to pages having the consecutive physical addresses of the block after the P2L table is built, and the flash memory controller receives the first read command and the second read command when the block is not fully written and has space for a next write command.",16,claim 13,0,A
10606761,18,"18. The electronic device of claim 17 , wherein the flash memory controller receives a next write command after the second read command is executed, and writes data corresponding to the next write command to the block, and once the data corresponding to the next write command is written to the block, the updated L2P table is marked as invalid or is deleted.",17,claim 17,0,A
10606762,1,"1. A virtual cache directory, in a processor having virtual memory support, the virtual cache directory having a plurality of directory entries, each entry associated with a cache line, comprising: a tag associated with each of the plurality of directory entries, the tag comprising: a logical address; an address space identifier; a real address bit indicator; and a virtual address to real address indicator wherein the virtual address to real address indicator is calculated upon every lookup in a translation lookaside buffer.",0,,1,A
10606762,2,2. The virtual cache directory of claim 1 wherein the virtual address to real address indicator is a single bit.,1,claim 1,0,A
10606762,3,3. The virtual cache directory of claim 1 wherein the virtual address to real address indicator is set when the logical address is the same as the real address.,2,claim 1,0,A
10606762,4,"4. The virtual cache directory of claim 1 wherein when the virtual address to real address indicator is set, dynamic address translation is not performed.",3,claim 1,0,A
10606763,1,"1. A method, comprising: mapping a virtual disk to an application to allow access of at least one secure storage disk and at least one non-secure storage disk by the application; and accessing the at least one secure storage disk and the at least one non-secure storage disk based on the mapping of the virtual disk to the application, to write or read input data into a respective one of the at least one secure storage disk and the at least one non-secure storage disk, wherein the application determines whether the input data is confidential data or non-confidential data based on a plurality of predetermined rules of the input data and tags the confidential data, a determination to write or read the confidential and the non-confidential data to one of the at least one secure storage disk and the at least one non-secure storage disk is based on a read or write encryption command received from the application and a read or write non-encryption command received from the application, the read or write encryption command received from the application includes an encryption read capacity command to determine and return a size or capacity of the at least one secure storage disk, and the read or write non-encryption command received from the application includes a non-encryption read capacity command to determine and return the size or the capacity of the at least one non-secure storage disk.",0,,1,A
10606763,2,"2. The method of claim 1 , further comprising allocating the at least one secure storage disk and the at least non-secure storage disk with a predetermined percentage of segments of the at least one secure storage disk.",1,claim 1,0,A
10606763,3,"3. The method of claim 1 , further comprising allocating of the at least one secure storage disk and the at least non-secure storage disk with a predetermined number of segments of the at least one secure storage disk.",2,claim 1,0,A
10606763,4,"4. The method of claim 1 , wherein: the at least one secure storage disk comprises at least one encrypting storage disk operable to self-encrypt data written to the at least one encrypting storage disk; and the at least one non-secure storage disk comprises at least one non-encrypting storage disk.",3,claim 1,0,A
10606763,5,"5. The method of claim 1 , further comprising: reading the confidential data from at least one segment of the at least one secure storage disk based on an encryption read command received from the application; and forwarding the read confidential data to the application.",4,claim 1,0,A
10606763,6,"6. The method of claim 1 , further comprising reading the size of the at least one secure storage disk based on the encryption read capacity command received from the application; and forwarding the read size to the application.",5,claim 1,0,A
10606763,7,"7. The method of claim 1 , further comprising writing the confidential data to at least one segment of the at least one secure storage disk based on an encryption write command received from the application.",6,claim 1,0,A
10606763,8,"8. The method of claim 1 , further comprising: reading the non-confidential data from at least one segment of the at least one non-secure storage disk based on a non-encrypting read command received from the application; and forwarding the read non-confidential data to the application.",7,claim 1,0,A
10606763,9,"9. The method of claim 1 , further comprising writing the non-confidential data to at least one segment of the at least one non-secure storage disk based on a non-encrypting write command received from the application.",8,claim 1,0,A
10606763,10,"10. The method of claim 1 , further comprising allocating a predetermined percentage of the at least one storage disk and the at least one non-secure storage disk to the at least one secure encrypting storage disk.",9,claim 1,0,A
10606763,11,"11. The method of claim 10 , further comprising reading the confidential data from the at least one secure encrypting storage disk by decrypting confidential data with at least one key stored in a look-up table.",10,claim 10,0,A
10606763,12,"12. The method of claim 11 , further comprising outputting a disk full signal in response to a capacity of the at least one secure encrypting storage disk being full.",11,claim 11,0,A
10606763,13,"13. The method of claim 12 , further comprising preventing data from being written to the at least one secure encrypting storage disk in response to the disk full signal being output and maintaining the look-up table including a plurality of keys and a plurality of IP addresses for the at least one secure encrypting storage disk and the at least one non-encrypting storage disk, wherein the read or write encryption command received from the application includes a write encryption command which retrieves the input data from a data-out buffer of a user application via a logical block address of the input data in the data-out buffer.",12,claim 12,0,A
10606763,14,"14. A system comprising a computer hardware infrastructure which comprises a processor, a memory storing instructions, and the processor being coupled to the memory to execute the instructions to perform the functions of the computer hardware infrastructure comprising: associating a virtual disk to an application on a computing device, the virtual disk associated with at least one encrypting storage disk and at least one non-encrypting storage disk, and used by the application to access of the at least one encrypting storage disk and the at least one non-encrypting storage disk; accessing one of the at least one encrypting storage disk and the at least one non-encrypting storage disk based on the associating of the virtual disk to the application, to write or read confidential or non-confidential data associated with the application into a respective one of the at least one encrypting storage disk and the at least one non-encrypting storage disk; and outputting a disk full signal in response to a capacity of the at least one encrypting storage disk being full, wherein the application determines whether input data to the application is confidential data or non-confidential data based on a plurality of predetermined rules of the input data and tags the confidential data, a determination to write or read the confidential and the non-confidential data to one of the at least one encrypting storage disk and the at least one non-encrypting storage disk is based on a read or write encryption command received from the application and a read or write non-encryption command received from the application, the read or write encryption command received from the application includes an encryption read capacity command to determine and return a size or the capacity of the at least one encrypting storage disk, and the read or write non-encryption command received from the application includes a non-encryption read capacity command to determine and return the size or the capacity of the at least one non-secure storage disk.",13,,0,A
10606763,15,"15. A computer program product comprising a computer readable hardware storage device having readable program code stored on the computer readable hardware storage device, the program code comprising: program code to map a virtual disk to an application to allow access of at least one secure storage disk and at least one non-secure storage disk by the application; program code to access the at least one secure storage disk and the at least one non-secure storage disk based on the mapping of the virtual disk to the application, to write or read input data into a respective one of the at least one secure storage disk and the at least one non-secure storage disk, wherein the application determines whether the input data is confidential data or non-confidential data based on a plurality of predetermined rules of the input data and tags the confidential data, program code to determine to write or read the confidential and the non-confidential data to one of the at least one secure storage disk and the at least one non-secure storage disk is based on a read or write encryption command received from the application and a read or write non-encryption command received from the application, the read or write encryption command received from the application includes an encryption read capacity command to determine and return a size or capacity of the at least one secure storage disk, and the read or write non-encryption command received from the application includes a non-encryption read capacity command to determine and return the size or the capacity of the at least one non-secure storage disk.",14,,0,A
10606764,1,"1. A field programmable gate array (FPGA) including a root of trust architecture, said architecture comprising: a system controller providing system control commands for the architecture; a cryptography processor for performing a hash, symmetric and/or asymmetric key operation to provide a digital signature for authentication of controller-em bedded software that will be used in an external system processor; and a lock-step fault-tolerant processor being responsive to messages from the system controller, said fault-tolerant processor including a plurality of soft lock-step cores, each soft lock-step core including separate memory and resources, where each core receives the same instructions and data and performs the same operations in lock-step with the other soft lock-step cores using its resources and provides an output message determined by the operations, said fault-tolerant processor including processor logic that selects one of the output messages from all of the soft lock-step cores to be output to the cryptography processor.",0,,1,A
10606764,2,2. The FPGA according to claim 1 wherein the plurality of soft lock-step cores is two soft lock-step cores.,1,claim 1,0,A
10606764,3,3. The FPGA according to claim 2 wherein the processor logic is a comparator logic.,2,claim 2,0,A
10606764,4,4. The FPGA according to claim 1 wherein the plurality of soft lock-step cores is three or more soft lock-step cores.,3,claim 1,0,A
10606764,5,5. The FPGA according to claim 4 wherein the processor logic is a voting logic.,4,claim 4,0,A
10606764,6,6. The FPGA according to claim 1 wherein the architecture further comprises a non-volatile memory for storing keys for the cryptography processor.,5,claim 1,0,A
10606764,7,7. The FPGA according to claim 6 wherein the architecture further comprises a physically unclonable function for generating the keys and/or a memory provisioned with keys.,6,claim 6,0,A
10606764,8,8. The FPGA according to claim 6 wherein the architecture further comprises user logic that receives and authenticates the keys and provides authenticated keys to the fault-tolerant processor.,7,claim 6,0,A
10606764,9,9. The FPGA according to claim 1 wherein the FPGA is part of an aircraft system on an aircraft.,8,claim 1,0,A
10606764,10,10. The FPGA according to claim 9 wherein the aircraft system is a safety critical system.,9,claim 9,0,A
10606764,11,"11. A field programmable gate array (FPGA) including a root of trust architecture, said architecture comprising: a system controller providing system control commands for the architecture; a cryptography processor for providing authentication of controller-embedded software that will be used in an external system processor; and a lock-step fault-tolerant processor being responsive to messages from the system controller, said fault-tolerant processor including a plurality of soft lock-step cores, each soft lock-step core including separate memory and resources, where each core receives the same instructions and data and performs the same operations in lock-step with the other soft lock-step cores using its resources and provides an output message determined by the operations, said fault-tolerant processor including processor logic that selects one of the output messages from all of the soft lock-step cores to be output.",10,,0,A
10606764,12,12. The FPGA according to claim 11 wherein the plurality of soft lock-step cores is two soft lock-step cores.,11,claim 11,0,A
10606764,13,13. The FPGA according to claim 12 wherein the processor logic is a comparator logic.,12,claim 12,0,A
10606764,14,14. The FPGA according to claim 11 wherein the plurality of soft lock-step cores is three or more soft lock-step cores.,13,claim 11,0,A
10606764,15,15. The FPGA according to claim 14 wherein the processor logic is a voting logic.,14,claim 14,0,A
10606764,16,16. The FPGA according to claim 11 wherein the FPGA is part of an aircraft system on an aircraft.,15,claim 11,0,A
10606764,17,17. The FPGA according to claim 16 wherein the aircraft system is a safety critical system.,16,claim 16,0,A
10606764,18,"18. A field programmable gate array (FPGA) including a root of trust architecture, said architecture comprising: a system controller providing system control commands for the architecture; a cryptography processor for performing a hash, symmetric and/or asymmetric key operation to provide a digital signature for authentication of controller-em bedded software that will be used in an external system processor; a lock-step fault-tolerant processor being responsive to messages from the system controller, said fault-tolerant processor including a plurality of soft lock-step cores, each soft lock-step core including separate memory and resources, where each core receives the same instructions and data and performs the same operations in lock-step with the other soft lock-step cores using its resources and provides an output message determined by the operations, said fault-tolerant processor including processor logic that selects one of the output messages from all of the soft lock-step cores to be output to the cryptography processor; a non-volatile memory for storing keys for the cryptography processor; a physically unclonable function for generating the keys and/or a memory provisioned with keys; and user logic that receives and authenticates the keys and provides authenticated keys to the fault-tolerant processor.",17,,0,A
10606764,19,19. The FPGA according to claim 18 wherein the plurality of soft lock-step cores is two soft lock-step cores.,18,claim 18,0,A
10606764,20,20. The FPGA according to claim 18 wherein the plurality of soft lock-step cores is three or more soft lock-step cores.,19,claim 18,0,A
10606765,1,"1. A method comprising: identifying, by a cryptographic hardware accelerator, a mapped input bit sequence by applying a mapping transformation to an input bit sequence, which is retrieved from a memory and represented by a first element of a finite-prime field, wherein the mapped input bit sequence is represented by a first element of a composite field of the finite-prime field; identifying, by the cryptographic hardware accelerator, a mapped first key by applying the mapping transformation to an input key represented by a second element of the finite-prime field, wherein the mapped first key is represented by a second element of the composite field of the finite-prime field; performing, within the composite field by the cryptographic hardware accelerator, a plurality of cryptographic rounds on the mapped input bit sequence using the mapped first key during a first cryptographic round of the plurality of cryptographic rounds to generate a processed bit sequence; generating, by customized circuitry of the cryptographic hardware accelerator for each cryptographic round of the plurality of cryptographic rounds and using a mapped round-specific constant and a previous mapped key from a previous cryptographic round, a new mapped key within the composite field for encrypting a current processed bit sequence of the cryptographic round, wherein execution of a final round of the plurality of cryptographic rounds is to generate a final processed bit sequence; and determining, by the cryptographic hardware accelerator within the composite field, an output bit sequence to be stored back in the finite-prime field by applying an inverse mapping transformation to the final processed bit sequence.",0,,1,A
10606765,2,"2. The method of claim 1 , wherein identifying the mapped input bit sequence comprises employing a mapping matrix, wherein contents of the mapping matrix depends on a pair of reduction polynomials chosen for the composite field.",1,claim 1,0,A
10606765,3,"3. The method of claim 2 , wherein the pair of reduction polynomials comprises x 4 +x 3 +1 and x 2 +4x+2 for the composite field in an encryption design of the cryptographic hardware accelerator.",2,claim 2,0,A
10606765,4,"4. The method of claim 2 , wherein the pair of reduction polynomials comprises x 4 +x 3 +1 and x 2 +4x+6 for the composite field in a decryption design of the cryptographic hardware accelerator.",3,claim 2,0,A
10606765,5,"5. The method of claim 1 , wherein determining the output bit sequence comprises employing an inverse mapping matrix, wherein contents of the inverse mapping matrix depends on a pair of reduction polynomials chosen for the composite field.",4,claim 1,0,A
10606765,6,"6. The method of claim 1 , wherein the composite field includes 4-bit circuitry, and wherein the finite-prime field is represented by a GF(2 8 ) Galois field and the composite field is represented by a GF(2 4 ) 2 Galois field.",5,claim 1,0,A
10606765,7,"7. A processing system, comprising: a memory; and a cryptographic hardware accelerator, operatively coupled to the memory, to: identify a mapped input bit sequence by applying a mapping transformation to an input bit sequence, which is retrieved from the memory and represented by a first element of a finite-prime field, wherein the mapped input bit sequence is represented by a first element of a composite field of the finite-prime field; identify a mapped first key by applying the mapping transformation to an input key represented by a second element of the finite-prime field, wherein the mapped first key is represented by a second element of the composite field of the finite-prime field; and perform, within the composite field, a plurality of cryptographic rounds on the mapped input bit sequence, using the mapped first key during a first cryptographic round of the plurality of cryptographic rounds to generate a processed bit sequence, wherein the cryptographic hardware accelerator comprises logic circuitry that is, for each cryptographic round of the plurality of cryptographic rounds, customized to generate, using a mapped round-specific constant and a previous mapped key from a previous cryptographic round, a new mapped key within the composite field for encryption of a current processed bit sequence of the cryptographic round, and wherein execution of a final round of the plurality of cryptographic rounds is to generate a final processed bit sequence; and wherein the cryptographic hardware accelerator is further to determine, within the composite field, an output bit sequence to be stored back in the finite-prime field via application of an inverse mapping transformation to the final processed bit sequence.",6,,0,A
10606765,8,"8. The processing system of claim 7 , wherein, to identify the mapped input bit sequence, the cryptographic hardware accelerator is to employ a mapping matrix, wherein contents of the mapping matrix depends on a pair of reduction polynomials chosen for the composite field.",7,claim 7,0,A
10606765,9,"9. The processing system of claim 8 , wherein the pair of reduction polynomials comprises x 4 +x 3 +1 and x 2 +4x+2 for the composite field in an encryption design of the cryptographic hardware accelerator.",8,claim 8,0,A
10606765,10,"10. The processing system of claim 8 , wherein the pair of reduction polynomials comprises x 4 +x 3 +1 and x 2 +4x+6 for the composite field in a decryption design of the cryptographic hardware accelerator.",9,claim 8,0,A
10606765,11,"11. The processing system of claim 7 , wherein, to determine the output bit sequence, the cryptographic hardware accelerator is to employ an inverse mapping matrix, wherein contents of the inverse mapping matrix depends on a pair of reduction polynomials chosen for the composite field.",10,claim 7,0,A
10606765,12,"12. The processing system of claim 7 , wherein the composite field includes 4-bit circuitry, and wherein the finite-prime field is represented by a GF(2 8 ) Galois field and the composite field is represented by a GF(2 4 ) 2 Galois field.",11,claim 7,0,A
10606765,13,"13. The processing system of claim 7 , wherein the memory and the cryptographic hardware accelerator are integrated within a system-on-a-chip (SOC).",12,claim 7,0,A
10606765,14,"14. The processing system of claim 7 , wherein the cryptographic hardware accelerator is further to map, using the mapping transformation, each round-specific constant within the finite-prime field into the mapped round-specific constant in the composite field.",13,claim 7,0,A
10606765,15,"15. A non-transitory computer-readable storage medium storing instructions, which when executed by a processing device having a memory, cause the processing device to execute a plurality of operations comprising: identifying, by a cryptographic hardware accelerator, a mapped input bit sequence by applying a mapping transformation to an input bit sequence, which is retrieved from the memory and represented by a first element of a finite-prime field, wherein the mapped input bit sequence is represented by a first element of a composite field of the finite-prime field; identifying, by the cryptographic hardware accelerator, a mapped first key by applying the mapping transformation to an input key represented by a second element of the finite-prime field, wherein the mapped first key is represented by a second element of the composite field of the finite-prime field; performing, within the composite field by the cryptographic hardware accelerator, a plurality of cryptographic rounds on the mapped input bit sequence using the mapped first key during a first cryptographic round of the plurality of cryptographic rounds to generate a processed bit sequence; generating, by customized circuitry of the cryptographic hardware accelerator for each cryptographic round of the plurality of cryptographic rounds and using a mapped round-specific constant and a previous mapped key from a previous cryptographic round, a new mapped key within the composite field for encrypting a current processed bit sequence of the cryptographic round, wherein execution of a final round of the plurality of cryptographic rounds is to generate a final processed bit sequence; and determining, by the cryptographic hardware accelerator within the composite field, an output bit sequence to be stored back in the finite-prime field by applying an inverse mapping transformation to the final processed bit sequence.",14,,0,A
10606765,16,"16. The non-transitory computer-readable storage medium of claim 15 , wherein identifying the mapped input bit sequence comprises employing a mapping matrix, wherein contents of the mapping matrix depends on a pair of reduction polynomials chosen for the composite field.",15,claim 15,0,A
10606765,17,"17. The non-transitory computer-readable storage medium of claim 16 , wherein the pair of reduction polynomials comprises x 4 +x 3 +1 and x 2 +4x+2 for the composite field in an encryption design of the cryptographic hardware accelerator.",16,claim 16,0,A
10606765,18,"18. The non-transitory computer-readable storage medium of claim 16 , wherein the pair of reduction polynomials comprises x 4 +x 3 +1 and x 2 +4x+6 for the composite field in a decryption design of the cryptographic hardware accelerator.",17,claim 16,0,A
10606765,19,"19. The non-transitory computer-readable storage medium of claim 15 , wherein determining the output bit sequence comprises employing an inverse mapping matrix, wherein contents of the inverse mapping matrix depends on a pair of reduction polynomials chosen for the composite field.",18,claim 15,0,A
10606765,20,"20. The non-transitory computer-readable storage medium of claim 15 , wherein the composite field includes 4-bit circuitry, and wherein the finite-prime field is represented by a GF(2 8 ) Galois field and the composite field is represented by a GF(2 4 ) 2 Galois field.",19,claim 15,0,A
10606766,1,"1. A method, comprising: designating one or more files within a shadow copy with restricted shadow copy access based on a shadow copy access policy comprising a protected file list that indicates which files are to be monitored to prevent unauthorized shadow copy access, wherein the shadow copy access policy supplements default file access policies that are configured in an operating system of a computing device; monitoring a request to access the one or more files via the shadow copy on the computing device, wherein monitoring the request to access the shadow copy comprises using a filter driver to intercept a request for a previously created shadow copy, wherein upon receiving a request for a shadow copy, the filter driver: determines a user account that is making the request; determines what volume the shadow copy is for; and determines whether the user account has authorization to access a requested file or folder on the shadow copy based on the shadow copy access policy; and preventing unauthorized access to the shadow copy based on the shadow copy access policy.",0,,1,A
10606766,2,"2. The method of claim 1 , wherein the request to access the shadow copy comprises a request to create a shadow copy of one or more volumes or a request to access a previously created shadow copy.",1,claim 1,0,A
10606766,3,"3. The method of claim 1 , wherein preventing unauthorized access to the shadow copy comprises: preventing access to the one or more files on the shadow copy based on a specific user, group membership, file path and time of day.",2,claim 1,0,A
10606766,4,"4. The method of claim 1 , wherein preventing unauthorized access to the shadow copy further comprises: determining whether a user account associated with the request is authorized to access the shadow copy on the computing device.",3,claim 1,0,A
10606766,5,"5. The method of claim 1 , wherein preventing unauthorized access to the shadow copy comprises: determining that a user account is not authorized to access the shadow copy according to the shadow copy access policy.",4,claim 1,0,A
10606766,6,"6. The method of claim 1 , further comprising designating one or more protected files with restricted shadow copy access.",5,claim 1,0,A
10606766,7,"7. The method of claim 1 , wherein the filter driver comprises a file system filter or minifilter driver.",6,claim 1,0,A
10606766,8,"8. The method of claim 1 , further comprising: loading the filter driver in a kernel of the computing device; attaching the filter driver to a volume that is being monitored; and receiving the request for a previously created shadow copy in a stack of callers.",7,claim 1,0,A
10606766,9,"9. The method of claim 1 , wherein monitoring a request to access a shadow copy comprises invoking a filter driver to intercept a request to create a shadow copy.",8,claim 1,0,A
10606766,10,"10. The method of claim 9 , wherein a volume shadow copy service monitor accesses a current executing thread to determine the invoker of the request.",9,claim 9,0,A
10606766,11,"11. The method of claim 9 , wherein if a request to create a shadow copy is not authorized by the shadow copy access policy, the filter driver prevents the shadow copy from being made.",10,claim 9,0,A
10606766,12,"12. The method of claim 1 , further comprising configuring a filter driver to perform copy monitoring via region access.",11,claim 1,0,A
10606766,13,"13. The method of claim 12 , wherein copy monitoring via region access comprises: mapping regions in a sensitive file or shadow copy with bits of a bit array; observing seeks to read the sensitive file or shadow copy; marking bits associated with the seeks as dirty; determining that all of the bits are dirty before the sensitive file or shadow copy is closed; and generating a flag indicating a copy.",12,claim 12,0,A
10606766,14,"14. A computing device, comprising: a processor; a memory in electronic communication with the processor; and instructions stored in the memory, the instructions being executable to: designate one or more files within a shadow copy with restricted shadow copy access based on a shadow copy access policy comprising a protected file list that indicates which files are to be monitored to prevent unauthorized shadow copy access, wherein the shadow copy access policy supplements default file access policies that are configured in an operating system of the computing device; monitor a request to access the one or more files via the shadow copy on the computing device, wherein the instructions executable to monitor a request to access a shadow copy comprise instructions executable to use a filter driver to intercept a request for a previously created shadow copy, wherein upon receiving a request for a shadow copy, the filter driver: determines a user account that is making the request; determines what volume the shadow copy is for; and determines whether the user account has authorization to access a requested file or folder on the shadow copy based on the shadow copy access policy; and prevent unauthorized access to the shadow copy based on the shadow copy access policy.",13,,0,A
10606766,15,"15. The computing device of claim 14 , wherein the instructions executable to prevent unauthorized access to the shadow copy comprise instructions executable to: prevent access to the one or more files on the shadow copy based on a specific user, group membership, file path and time of day.",14,claim 14,0,A
10606766,16,"16. The computing device of claim 14 , wherein the instructions executable to monitor a request to access a shadow copy comprise instructions executable to invoke a filter driver to intercept a request to create a shadow copy.",15,claim 14,0,A
10606766,17,"17. The computing device of claim 16 , wherein if a request to create a shadow copy is made by a user account that is not authorized by the shadow copy access policy, the filter driver prevents the shadow copy from being made.",16,claim 16,0,A
10606767,1,"1. A data storage device comprising: a housing integrating a control logic, a data protection logic, and a non-volatile storage; and a network interface connector integrated to the housing and is configured to be connected to a network switch, wherein the data storage device is compatible with the NVMe-oF standard, wherein the control logic is configured to store a vehicle data in the non-volatile storage, wherein the vehicle data is received from one or more vehicle sensors that are connected to the network switch, and wherein the data protection logic is configured to detect a vehicle event and change an operating mode of the data storage device to a read-only mode.",0,,1,A
10606767,2,"2. The data storage device of claim 1 , wherein the vehicle event is one or more of an airbag deployment, a sensor trigger, a power loss due to water submersion, and a fire due to a crash.",1,claim 1,0,A
10606767,3,"3. The data storage device of claim 1 , wherein the control logic stores the vehicle data in the data storage device for a predetermined period of time after the vehicle event.",2,claim 1,0,A
10606767,4,"4. The data storage device of claim 1 , wherein the network interface connector has a small form-factor pluggable (SFP), quad small form-factor pluggable (QSFP), or modular connector form factor.",3,claim 1,0,A
10606767,5,"5. The data storage device of claim 1 , wherein the data storage device is an Ethernet-attached solid-state drive (SSD).",4,claim 1,0,A
10606767,6,"6. The data storage device of claim 1 , wherein the one or more vehicle sensors include a video camera that is connected to the network switch via an Ethernet connection, and wherein the video camera is configured to send a video stream to the network switch in Ethernet packets.",5,claim 1,0,A
10606767,7,"7. The data storage device of claim 1 , further comprising a reserve power and a beacon, wherein the beacon is triggered by the data protection logic after the vehicle event and is configured to generate a beacon signal using the reserve power.",6,claim 1,0,A
10606767,8,"8. The data storage device of claim 1 , further comprising an image processor disposed in the housing, wherein the image processor is configured to insert a time stamp and/or a coordinate stamp to the vehicle data.",7,claim 1,0,A
10606767,9,"9. A data storage and retention system comprising: a network switch comprising a plurality of switch ports and a CPU; one or more vehicle sensors configured to generate a vehicle data; and a data storage device comprising a housing that integrates a control logic, a data protection logic, and a non-volatile storage; and a network interface connector integrated to the housing, wherein the data storage device is compatible with the NVMe-oF standard, wherein the one or more vehicle sensors are connected to a first switch port of the network switch and the data storage device is connected to a second switch port of the network switch, wherein the control logic of the data storage device is configured to store the vehicle data generated by the one or more vehicle sensors in the non-volatile storage, and wherein the data protection logic of the data storage device is configured to detect a vehicle event and change an operating mode of the data storage device to a read-only mode.",8,,0,A
10606767,10,"10. The data storage and retention system of claim 9 , wherein the vehicle event is one or more of an airbag deployment, a sensor trigger, a power loss due to water submersion, and a fire due to a crash.",9,claim 9,0,A
10606767,11,"11. The data storage and retention system of claim 9 , wherein the control logic of the data storage device stores the vehicle data in the data storage device for a predetermined period of time after the vehicle event.",10,claim 9,0,A
10606767,12,"12. The data storage and retention system of claim 9 , wherein the network interface connector of the data storage device and at least one of the plurality of switch ports of the network switch have a small form-factor pluggable (SFP), quad small form-factor pluggable (QSFP), or modular connector form factor.",11,claim 9,0,A
10606767,13,"13. The data storage and retention system of claim 9 , wherein the data storage device is an Ethernet-attached solid-state drive (SSD).",12,claim 9,0,A
10606767,14,"14. The data storage and retention system of claim 9 , wherein the one or more vehicle sensors include a video camera that is connected to the first switch port of the network switch via an Ethernet connection, and wherein the video camera is configured to send a video stream to the network switch in Ethernet packets.",13,claim 9,0,A
10606767,15,"15. The data storage and retention system of claim 9 , wherein the data storage device further comprises a reserve power and a beacon, wherein the beacon is triggered by the data protection logic after the vehicle event and is configured to generate a beacon signal using the reserve power.",14,claim 9,0,A
10606767,16,"16. The data storage and retention system of claim 9 , wherein the data storage device further comprises an image processor disposed in the housing, wherein the image processor is configured to insert a time stamp and/or a coordinate stamp to a video stream.",15,claim 9,0,A
10606767,17,"17. The data storage and retention system of claim 9 , wherein the CPU of the network switch is configured to stitch multiple video streams generated by a plurality of video cameras connected to the plurality of switch ports of the network switch.",16,claim 9,0,A
10606767,18,"18. The data storage and retention system of claim 17 , wherein the CPU is configured to generate a spherical video stream using the multiple video streams.",17,claim 17,0,A
10606767,19,"19. The data storage and retention system of claim 9 , wherein the CPU is configured to insert a time stamp or a coordinate stamp to the vehicle data.",18,claim 9,0,A
10606768,1,"1. A computer system comprising: at least one CPU; a bus; at least one I/O module configured to connect to a network through the bus; at least one memory module, comprising: at least one memory address range for program code, configured by hardware circuitry, wherein the program code comprises computer-executable code; and at least one memory address range for other data, wherein the other data comprises data read from the network; wherein the at least one CPU is hardware-configured to execute only the computer-executable code in the memory address range for program code; wherein the computer system is configured to execute a pull command through the bus to read the other data from the network and write the other data only to the at least one memory address range for other data; wherein the computer system is configured to execute a push command through the bus to send data to the network; wherein the bus is configured not to accept a push command from the network or a pull command from the network; and wherein the hardware circuitry of the bus is configured to not permit the network to access the at least one memory module through the bus.",0,,1,A
10606768,2,"2. The computer system of claim 1 , wherein the bus is configured to connect to the network through a wired connection.",1,claim 1,0,A
10606768,3,"3. The computer system of claim 1 , wherein the bus is configured to connect to the network through a wireless connection.",2,claim 1,0,A
10606768,4,"4. The computer system of claim 1 , wherein the network is the Internet.",3,claim 1,0,A
10606768,5,"5. The computer system of claim 1 , wherein the network comprises one or more computers connected to the bus.",4,claim 1,0,A
10606768,6,"6. The computer system of claim 1 , wherein the bus is housed in a physically distinct unit connected to the at least one CPU.",5,claim 1,0,A
10606768,7,"7. The computer system of claim 1 , wherein the hardware circuitry comprises at least one field-programmable gate array.",6,claim 1,0,A
10606768,8,"8. The computer system of claim 1 , comprising: a physical switch configured to be turned on or off; wherein the first CPU is configured to modify data stored in the at least one memory address range for program code only when the physical switch is on.",7,claim 1,0,A
10606768,9,"9. The computer system of claim 8 , wherein the memory address range for program code comprises control data; and wherein the control data can be modified only when the at least one physical switch is on.",8,claim 8,0,A
10606768,10,"10. The computer system of claim 1 , comprising: a physical switch which can be turned on or off; wherein the first CPU is configured to modify data stored in the at least one memory address range for program code only when the physical switch is on; and wherein, while the physical switch is on, the system is disabled from executing a push command or a pull command.",9,claim 1,0,A
10606768,11,"11. The computer system of claim 10 , wherein the memory address range for program code comprises control data; and wherein the control data can be modified only when the at least one physical switch is on.",10,claim 10,0,A
10606768,12,"12. The computer system of claim 1 , wherein the first memory module comprises: a first memory unit comprising the at least one memory address range for program code; and a second memory unit for the other data.",11,claim 1,0,A
10606768,13,"13. The computer system of claim 12 , comprising: a physical switch configured to be turned on or off; wherein the first CPU is configured to modify data stored in the at least one memory address range for program code only when the physical switch is on.",12,claim 12,0,A
10606768,14,"14. The computer system of claim 12 , wherein the memory address range for program code comprises control data; and wherein the control data can be modified only when the at least one physical switch is on.",13,claim 12,0,A
10606768,15,"15. The computer system of claim 12 , comprising: a physical switch which can be turned on or off; wherein the first CPU is configured to modify data stored in the at least one memory address range for program code only when the physical switch is on; and wherein, while the physical switch is on, the system is disabled from executing a push command or a pull command.",14,claim 12,0,A
10606768,16,"16. The computer system of claim 12 , wherein the bus is housed in a physically distinct unit connected to the at least one CPU.",15,claim 12,0,A
10606768,17,"17. The computer system of claim 12 , wherein the hardware circuitry comprises at least one field-programmable gate array.",16,claim 12,0,A
10606768,18,"18. The computer system of claim 12 , wherein data in the at least one memory address range for program code is loaded in the process of manufacture.",17,claim 12,0,A
10606768,19,"19. The computer system of claim 18 , wherein the data in the at least one memory address range for program code is permanently restricted from alteration by hardware circuitry.",18,claim 18,0,A
10606768,20,"20. The computer system of claim 18 , wherein data in the at least one memory address range for program code can be modified only when a separate device is directly connected to the at least one CPU.",19,claim 18,0,A
10606768,21,"21. A computer system comprising: a first partition and a second partition communicatively coupled through a bus; the first partition comprising: a first CPU, and a first memory module, comprising: a first memory unit comprising at least one memory address range for program code, wherein the program code comprises computer-executable code, wherein the at least one memory address range for program code is configured by hardware circuitry, and wherein data in the at least one memory address range for program code is loaded in the process of manufacture and is permanently restricted from alteration by hardware circuitry; a second memory unit comprising at least one memory address range for other data, comprising data read from the second partition; and wherein the first CPU is hardware-configured to execute only the computer-executable code in the memory address range for program code; the second partition comprising: a second CPU, a second memory module, and at least one communication module configured to couple to a network; wherein the first CPU can read from the second memory module only into the at least one memory address range for other data; wherein the first CPU can write to the second memory module; and wherein the second CPU is restricted from accessing the first memory module.",20,,0,A
10606768,22,"22. A computer system comprising: a first partition and a second partition communicatively coupled through a bus; the first partition comprising: a first CPU, and a first memory module, comprising: a first memory unit comprising at least one memory address range for program code, wherein the program code comprises computer-executable code, wherein the at least one memory address range for program code is configured by hardware circuitry, and wherein data in the at least one memory address range for program code is loaded in the process of manufacture and can be modified only when a separate device is directly connected to the first partition; a second memory unit comprising at least one memory address range for other data, comprising data read from the second partition; and wherein the first CPU is hardware-configured to execute only the computer-executable code in the memory address range for program code; the second partition comprising: a second CPU, a second memory module, and at least one communication module configured to couple to a network; wherein the first CPU can read from the second memory module only into the at least one memory address range for other data; wherein the first CPU can write to the second memory module; and wherein the second CPU is restricted from accessing the first memory module.",21,,0,A
10606769,1,"1. A file data access method, applied to a computer system comprising a processor and a memory comprising a non-volatile memory (NVM), wherein an operating system runs on the processor, and wherein the file data access method comprises: accessing a page global directory (PGD) using PGD space when access information of accessing first file data by a process is obtained, wherein the operating system uses a file system to manage file data in the memory, wherein the process running on the operating system is allocated user space and kernel space during initialization of the process, wherein the user space of the process comprises file system space and the PGD space, wherein the PGD space comprises virtual address space of the PGD and is mapped to physical address space of the PGD in the memory, wherein the file system space comprises virtual address space of the file data and is mapped to physical space of the file data in the memory; determining, based on access to the PGD and according to a first virtual address of the first file data in the file system space, a first PGD entry in the PGD; creating a link between a base address of a file page table of the process to the first PGD entry, wherein the file page table points to a physical address of the file data; retrieving a first physical address of the first file data in the memory according to the first virtual address using the PGD and the file page table; accessing the first file data according to the first physical address; and disabling the link when access to the first file data ends.",0,,1,A
10606769,2,"2. The file data access method of claim 1 , wherein the link is a pointer.",1,claim 1,0,A
10606769,3,"3. The file data access method of claim 1 , further comprising recording a PGD page table pointing to a base address of the PGD, wherein accessing the PGD using the PGD space comprises: obtaining a preset address in the PGD space; retrieving a second PGD entry in the PGD according to the preset address; querying the PGD page table according to the second PGD entry; and accessing the PGD according to the base address, indicated by the PGD page table, of the PGD.",2,claim 1,0,A
10606769,4,"4. The file data access method of claim 1 , further comprising: obtaining a second virtual address of the first PGD entry in the kernel space and further disabling the link by operating the second virtual address when a process interrupt occurs during accessing the first file data by the process; and linking the base address of the file page table of the process to the first PGD entry by operating the second virtual address when the process interrupt ends.",3,claim 1,0,A
10606769,5,"5. The file data access method of claim 1 , further comprising: accessing the first file data, in a process to another thread, obtaining a second virtual address of the first PGD entry in the kernel space and further disabling the link by operating the second virtual address when a thread scheduler schedules a thread; and accessing the first file data, in the process, and linking the base address of the file page table of the process to the first PGD entry by operating the second virtual address when the thread scheduler schedules the other thread.",4,claim 1,0,A
10606769,6,"6. The file data access method of claim 1 , further comprising clearing a translation lookaside buffer (TLB) entry corresponding to the file page table in a TLB table when the link is disabled.",5,claim 1,0,A
10606769,7,"7. A computer system comprising: a memory comprising a non-volatile memory (NVM) and configured to store an operating system, wherein the operating system comprises programming instructions; and a processor coupled to the memory and configured to execute the programming instructions to: access a page global directory (PGD) using PGD space when access information of accessing first file data by a process is obtained, wherein the operating system uses a file system to manage file data in the memory, wherein the process running on the operating system is allocated user space and kernel space during initialization of the process, wherein the user space of the process comprises file system space and the PGD space, wherein the PGD space comprises virtual address space of the PGD and is mapped to physical address space of the PGD in the memory, wherein the file system space comprises virtual address space of the file data and is mapped to physical space of the file data in the memory; determine, based on access to the PGD and according to a first virtual address of the first file data in the file system space, a first PGD entry in the PGD; create a link between a base address of a file page table of the process to the first PGD entry, wherein the file page table points to a physical address of the file data; retrieve a first physical address of the first file data in the memory according to the first virtual address using the PGD and the file page table; access the first file data according to the first physical address; and disable the link when access to the first file data ends.",6,,0,A
10606769,8,"8. The computer system of claim 7 , wherein the link is a pointer.",7,claim 7,0,A
10606769,9,"9. The computer system of claim 7 , wherein the memory is further configured to record a PGD page table pointing to a base address of the PGD, and wherein the programming instructions further cause the processor to: obtain a preset address in the PGD space; retrieve a second PGD entry in the PGD according to the preset address; query the PGD page table according to the second PGD entry; and access the PGD according to the base address, indicated by the PGD page table, of the PGD.",8,claim 7,0,A
10606769,10,"10. The computer system of claim 7 , wherein the programming instructions further cause the processor to: obtain a second virtual address of the first PGD entry in the kernel space and further disable the link by operating the second virtual address when a process interrupt occurs during accessing the first file data by the process; and link the base address of the file page table of the process to the first PGD entry by operating the second virtual address when the process interrupt ends.",9,claim 7,0,A
10606769,11,"11. The computer system of claim 7 , wherein the operating system further comprises a thread scheduler, and wherein the programming instructions further cause the processor to: access the first file data, in a process to another thread, obtain a second virtual address of the first PGD entry in the kernel space and further disable the link by operating the second virtual address when scheduling a thread; and access the first file data, in the process, and link the base address of the file page table of the process to the first PGD entry by operating the second virtual address when scheduling the other thread.",10,claim 7,0,A
10606769,12,"12. The computer system of claim 7 , wherein the programming instructions further cause the processor to clear a translation lookaside buffer (TLB) entry corresponding to the file page table in a TLB table when the link is disabled.",11,claim 7,0,A
10606769,13,"13. A computer system comprising: a memory comprising a non-volatile memory (NVM) and configured to store a computer executable instruction; and a processor coupled to the memory and configured to execute the computer executable instruction to: run an operating system; access a page global directory (PGD) using PGD space when access information of accessing first file data by a process is obtained, wherein the operating system uses a file system to manage file data in the memory, wherein the process running on the operating system is allocated user space and kernel space during initialization of the process, wherein the user space of the process comprises file system space and the PGD space, wherein the PGD space comprises virtual address space of the PGD and is mapped to physical address space of the PGD in the memory, wherein the file system space comprises virtual address space of the file data and is mapped to physical space of the file data in the memory; determine, based on access to the PGD and according to a first virtual address of the first file data in the file system space, a first PGD entry in the PGD; create a link between a base address of a file page table of the process to the first PGD entry, wherein the file page table points to a physical address of the file data; retrieve a first physical address of the first file data in the memory according to the first virtual address using the PGD and the file page table; access the first file data according to the first physical address; and disable the link when access to the first file data ends.",12,,0,A
10606769,14,"14. A computer program product comprising computer-executable instructions for storage on a non-transitory computer-readable medium that, when executed by a processor cause a computer system to: run an operating system; access a page global directory (PGD) using PGD space when access information of accessing first file data by a process is obtained, wherein the operating system uses a file system to manage file data in a memory of the computer system, wherein the process running on the operating system is allocated user space and kernel space during initialization of the process, wherein the user space of the process comprises file system space and the PGD space, wherein the PGD space comprises virtual address space of the PGD and is mapped to physical address space of the PGD in the memory, wherein the file system space comprises virtual address space of the file data and is mapped to physical space of the file data in the memory; determine, based on access to the PGD and according to a first virtual address of the first file data in the file system space, a first PGD entry in the PGD; create a link between a base address of a file page table of the process to the first PGD entry, wherein the file page table points to a physical address of the file data; retrieve a first physical address of the first file data in the memory according to the first virtual address using the PGD and the file page table; access the first file data according to the first physical address; and disable the link when access to the first file data ends.",13,,0,A
10606769,15,"15. The computer program product of claim 14 , wherein the link is a pointer.",14,claim 14,0,A
10606769,16,"16. The computer program product of claim 14 , wherein the instructions further cause the computer system to: record a PGD page table pointing to a base address of the PGD; obtain a preset address in the PGD space; retrieve a second PGD entry in the PGD according to the preset address; query the PGD page table according to the second PGD entry; and access the PGD according to the base address, indicated by the PGD page table, of the PGD.",15,claim 14,0,A
10606769,17,"17. The computer program product of claim 14 , wherein the instructions further cause the computer system to: obtain a second virtual address of the first PGD entry in the kernel space and further disable the link by operating the second virtual address when a process interrupt occurs during accessing the first file data by the process; and link the base address of the file page table of the process to the first PGD entry by operating the second virtual address when the process interrupt ends.",16,claim 14,0,A
10606769,18,"18. The computer program product of claim 14 , wherein the operating system comprises a thread scheduler, and wherein the instructions further cause the computer system to: access the first file data, in a process to another thread, obtain a second virtual address of the first PGD entry in the kernel space and further disable the link by operating the second virtual address when a thread scheduler schedules a thread; and access the first file data, in the process, and link the base address of the file page table of the process to the first PGD entry by operating the second virtual address when the thread scheduler schedules the other thread.",17,claim 14,0,A
10606769,19,"19. The computer program product of claim 14 , wherein the instructions further cause the computer system to clear a translation lookaside buffer (TLB) entry corresponding to the file page table in a TLB table when the link is disabled.",18,claim 14,0,A
10606769,20,"20. The file data access method of claim 1 , further comprising maintaining the link only when the file data needs to be accessed.",19,claim 1,0,A
10606769,21,"21. The file data access method of claim 1 , wherein the access information indicates a status of access to the first file data by the process.",20,claim 1,0,A
10606770,1,"1. A microcontroller system comprising: a main core processor; a secondary core processor; a communication bus for transmitting data; a data memory for storing data, the data memory having a memory area for which the main core has write rights and the secondary core processor does not have any write rights; a memory access module; and a configuration memory area, wherein the main core processor configures and stores a configuration of access rights in the configuration memory area, the configuration of access rights is for authorizing writing of secondary data provided by the secondary core processor to the memory area of the data memory, and wherein the secondary data are written to the memory area of the data memory by the memory access module based on the configuration of access rights stored in the configuration memory area.",0,,1,A
10606770,2,"2. A microcontroller system as claimed in claim 1 , wherein the memory access module and the main core are assigned to the communication bus as master.",1,claim 1,0,A
10606770,3,"3. The microcontroller system as claimed in claim 1 , wherein the main core has unrestricted access rights and the secondary core has restricted write access rights to the configuration memory area.",2,claim 1,0,A
10606770,4,"4. The microcontroller system as claimed in claim 1 , wherein the configuration can be stored in the configuration memory area by the main core.",3,claim 1,0,A
10606770,5,"5. The microcontroller system as claimed in claim 1 , wherein the microcontroller system is configured in such a manner that the writing of the data to the memory area of the data memory can be initiated by virtue of the data being provided by the secondary core.",4,claim 1,0,A
10606770,6,"6. The microcontroller system as claimed in claim 1 , wherein the configuration memory area comprises at least one configuration segment for configuring the authorization of the secondary core.",5,claim 1,0,A
10606770,7,"7. The microcontroller system as claimed in claim 6 , wherein the configuration segment has an identifier field having an identifier for authorizing the secondary core having a matching identifier to write data to a data field included in the configuration segment, wherein the secondary core has write access rights for the data field and does not have any write access rights for the identifier field.",6,claim 6,0,A
10606770,8,"8. The microcontroller system as claimed in claim 7 , wherein, if the identifiers of the identifier field and of the secondary core do not match, the memory access module is configured to block write access to the data field.",7,claim 7,0,A
10606770,9,"9. The microcontroller system as claimed in claim 6 , wherein the configuration segment has a memory requirement field for storing a memory requirement of the data written to the data field by the secondary core, wherein the secondary core has write access rights for the memory requirement field.",8,claim 6,0,A
10606770,10,"10. The microcontroller system as claimed in claim 6 , wherein the configuration segment has an address field for storing an address of the memory area of the data memory, wherein the secondary core does not have any write access rights for the address field.",9,claim 6,0,A
10606770,11,"11. The microcontroller system as claimed in claim 6 , wherein the configuration segment has a mask field for storing a mask of the data provided by the secondary core, wherein the secondary core does not have any write access rights for the mask field.",10,claim 6,0,A
10606770,12,"12. The microcontroller system as claimed in claim 6 , wherein the writing of the data to the memory area of the data memory can be initiated by the secondary core authorized by the corresponding identifier by writing at least the data to the data field of the configuration segment.",11,claim 6,0,A
10606770,13,"13. The microcontroller system as claimed in claim 1 , wherein the main core is configured in such a manner that it stores the configuration during or after a restart of the microprocessor system.",12,claim 1,0,A
10606770,14,"14. A method for controlling memory access operations in a microcontroller system including a main core processor, a secondary core processor, a data memory having a memory area in which the main core processor has write rights and the secondary core processor does not have any write rights, a memory access module, and a configuration memory area, the method comprising: configure and store, by the main core processor, a configuration of access rights in the configuration memory area, the configuration of access rights is for authorizing writing of secondary data provided by the secondary core processor to the memory area of the data memory, and write, by the memory access module, the secondary data to the memory area of the data memory based on the configuration of access rights stored in the configuration memory area.",13,,0,A
10606770,15,"15. The microcontroller system as claimed in claim 2 , wherein the main core has unrestricted access rights and the secondary core has restricted write access rights to the configuration memory area.",14,claim 2,0,A
10606770,16,"16. The microcontroller system as claimed in claim 7 , wherein the configuration segment has a memory requirement field for storing a memory requirement of the data written to the data field by the secondary core, wherein the secondary core has write access rights for the memory requirement field.",15,claim 7,0,A
10606770,17,"17. The microcontroller system as claimed in claim 8 , wherein the configuration segment has a memory requirement field for storing a memory requirement of the data written to the data field by the secondary core, wherein the secondary core has write access rights for the memory requirement field.",16,claim 8,0,A
10606770,18,"18. The microcontroller system as claimed in claim 7 , wherein the configuration segment has an address field for storing an address of the memory area of the data memory, wherein the secondary core does not have any write access rights for the address field.",17,claim 7,0,A
10606770,19,"19. The microcontroller system as claimed in claim 8 , wherein the configuration segment has an address field for storing an address of the memory area of the data memory, wherein the secondary core does not have any write access rights for the address field.",18,claim 8,0,A
10606770,20,"20. The microcontroller system as claimed in claim 9 , wherein the configuration segment has an address field for storing an address of the memory area of the data memory, wherein the secondary core does not have any write access rights for the address field.",19,claim 9,0,A
10606771,1,"1. A stack protection circuitry configured to protect a stack, wherein the stack comprises a range of memory locations, wherein the stack includes a memory location storing a current topmost return address location corresponding to a return address for a most recently executed subroutine, the stack protection circuitry comprising: a memory configured to store a first identifier for the current topmost return address location and a first stack frame size; interface circuitry configured to receive a return instruction from a central processing unit (CPU), wherein the return instruction includes a second stack frame size; and computation circuitry configured to, in response to the return instruction: generate protection data based on the first stack frame size and the first identifier that i) identifies a new topmost return address location that is below the current topmost return address location and ii) specifies read only access for the new topmost return address location; store a second identifier for the new topmost return address location in place of the first identifier in the memory; and store the second stack frame size in place of the first stack frame size in the memory, wherein the interface circuitry is configured to provide the protection data to a memory protection unit to cause the memory protection unit to enforce a read only access restriction on the new topmost return address location.",0,,0,A
10606771,2,"2. The stack protection circuitry of claim 1 , wherein: the interface circuitry is further configured to receive, from the CPU, a call instruction that identifies a subsequent protected topmost return address location; and the computation circuitry is configured to, in response to the call instruction, generate protection data that identifies the subsequent protected topmost return address location; and wherein the interface circuitry is configured to provide the protection data to the memory protection unit to cause the memory protection unit to enforce a read only access restriction on the subsequent topmost return address location.",1,claim 1,0,A
10606771,3,"3. The stack protection circuitry of claim 1 , wherein: the interface circuitry is further configured to receive, from the central processing unit (CPU), a call instruction that includes a third identifier for a subsequent topmost return address location and a third stack frame size; and the computation circuitry is configured to, in response to the call instruction: generate protection data based on the third identifier; and update the memory to store the third stack frame size in place of the second stack frame size; and wherein the interface circuitry is configured to provide the protection data to the memory protection unit to cause the memory protection unit to enforce a read only access restriction on the subsequent topmost return address location.",2,claim 1,0,A
10606771,4,"4. The stack protection circuitry of claim 1 , wherein the interface circuitry is configured to store the protection data in special function registers in the memory protection unit.",3,claim 1,0,A
10606771,5,"5. The stack protection circuitry of claim 1 , further comprising the memory protection unit and a trap system, wherein the memory protection unit is configured to communicate an access violation to the trap system in response to an attempt to write access the new topmost return address location.",4,claim 1,0,A
10606771,6,"6. The stack protection circuitry of claim 5 , wherein the trap system is configured to generate a high priority interrupt for the CPU in response to receiving the access violation from the memory protection unit.",5,claim 5,0,A
10606771,7,"7. A method configured to protect a stack, wherein the stack comprises a range of memory locations, wherein the stack includes a memory location storing a current topmost return address location corresponding to a return address for a most recently executed subroutine, comprising: receiving a return instruction from a central processing unit (CPU), wherein the return instruction includes a second stack frame size; and in response to receiving the return instruction: generating protection data based on a first stack frame size and a first identifier for the current topmost return address location, wherein the protection data i) identifies a new topmost return address location that is below the current topmost return address location and ii) specifies read only access for the new topmost return address location; storing a second identifier for the new topmost return address location in place of the first identifier in a memory; and storing the second stack frame size in place of the first stack frame size in the memory; and providing the protection data to a memory protection unit to cause the memory protection unit to enforce a read only access restriction on the new topmost return address location.",6,,0,A
10606771,8,"8. The method of claim 7 , further comprising: receiving, from the CPU, a call instruction that identifies a subsequent protected topmost return address location; and in response to receiving the call instruction, generating protection data that identifies the subsequent protected topmost return address location; and providing the protection data to the memory protection unit to cause the memory protection unit to enforce a read only access restriction on the subsequent topmost return address location.",7,claim 7,0,A
10606771,9,"9. The method of claim 7 , further comprising: receiving, from the CPU, a call instruction that includes a third identifier for a subsequent topmost return address location and a third stack frame size; and in response to the call instruction: generating protection data based on the third identifier; updating the memory to store the third stack frame size in place of the second stack frame size; and providing the protection data to the memory protection unit to cause the memory protection unit to enforce a read only access restriction on the subsequent topmost return address location.",8,claim 7,0,A
10606771,10,"10. The method of claim 7 , further comprising storing the protection data in special function registers in the memory protection unit.",9,claim 7,0,A
10606771,11,"11. The method of claim 7 , further comprising: detecting an attempt to write access the new topmost return address location; and in response to the detecting, communicating an access violation to a trap system.",10,claim 7,0,A
10606771,12,"12. The method of claim 11 , further comprising, with the trap system, generating a high priority interrupt for the CPU in response to the access violation.",11,claim 11,0,A
10606771,13,"13. A stack protection system configured to protect a stack, wherein the stack comprises a range of memory locations, wherein the stack includes a memory location storing a current topmost return address location corresponding to a return address for a most recently executed subroutine, the stack protection system comprising: a trap system configured to generate an interrupt for a CPU in response to receiving a triggering input; a memory protection unit configured to: enforce a read only access limitation on a memory location; and provide a triggering input to the trap system in response to detecting an attempt to write to the memory location; stack protection circuitry, comprising: interface circuitry configured to receive a return instruction from a central processing unit (CPU); and computation circuitry configured to, in response to the return instruction, generate protection data that i) identifies a new topmost return address location that is below the current protected topmost return address location and ii) specifies read only access for the new topmost return address location; and wherein the interface circuitry is configured to provide the protection data to the memory protection unit to cause the memory protection unit to enforce a read only access restriction on the new topmost return address location.",12,,1,A
10606771,14,"14. The stack protection system of claim 13 , wherein the trap system is configured to generate a high priority interrupt for the CPU.",13,claim 13,0,A
10606771,15,"15. A method configured to protect a stack, wherein the stack comprises a range of memory locations, wherein the stack includes a memory location storing a current topmost return address location corresponding to a return address for a most recently executed subroutine, the method comprising: receiving a return instruction from a central processing unit (CPU); and in response to the return instruction, generating protection data that i) identifies a new topmost return address location that is below the current topmost return address location and ii) specifies read only access for the new topmost return address location; and providing the protection data to a memory protection unit to cause the memory protection unit to enforce a read only access restriction on the new topmost return address location; in response to an attempt to write to the new topmost return address location: generating, with the memory protection unit, a signal indicative of an access violation; providing the signal to a trap system configured to generate an interrupt for a CPU in response to receiving signal.",14,,0,A
10606771,16,"16. The method of claim 15 , further comprising generating a high priority interrupt for the CPU.",15,claim 15,0,A
10606772,1,"1. A universal serial bus (USB) controller comprising: at least one memory register to store one or more enumeration parameters for a USB connection with the USB controller; and logic, at least partially including hardware logic, to: detect a USB connection with a remote device via the USB connection; retrieve one or more connection enumeration parameters for the USB connection from the at least one memory register on the USB host controller, the connection enumeration parameters comprising one or more pre-negotiated timing parameters for a USB enumeration process between the USB controller and the remote device; and implement a connection enumeration process using the one or more connection enumeration parameters retrieved from the memory register on the USB controller, wherein the connection enumeration process is to bypass a USB chirp handshake process between the USB controller and the remote device.",0,,1,A
10606772,2,"2. The USB host controller of claim 1 , wherein the controller comprises: a control status register.",1,claim 1,0,A
10606772,3,"3. The USB controller of claim 1 , wherein the connection enumeration parameters comprise at least one of: a high speed enumeration mode parameter; a preconfigured port speed parameter; and a line termination enable time parameter.",2,claim 1,0,A
10606772,4,"4. The USB controller of claim 3 , wherein the line termination enable time parameter is programmable via a basic input/output system (BIOS).",3,claim 3,0,A
10606772,5,"5. The USB controller of claim 3 , wherein the logic is further configured to: issue a USB reset; and enable line termination after a time corresponding to the line termination enable time parameter elapses.",4,claim 3,0,A
10606772,6,"6. A universal serial bus (USB) subsystem for use with an electronic device, the subsystem comprising: at least one USB port; at least one memory register to store one or more enumeration parameters for a USB connection with the USB controller; and logic, at least partially including hardware logic, to: detect a USB connection with a remote device via the USB connection; retrieve one or more connection enumeration parameters for the USB connection from the at least one memory register on the USB host controller, the connection enumeration parameters comprising one or more pre-negotiated timing parameters for a USB enumeration process between the USB controller and the remote device; and implement a connection enumeration process using the one or more connection enumeration parameters retrieved from the memory register on the USB controller, wherein the connection enumeration process is to bypass a USB chirp handshake process between the USB controller and the remote device.",5,,0,A
10606772,7,"7. The USB subsystem of claim 6 , wherein the controller comprises: a control status register.",6,claim 6,0,A
10606772,8,"8. The USB subsystem of claim 6 , wherein the connection enumeration parameters comprise at least one of: a high speed enumeration mode parameter; a preconfigured port speed parameter; and a line termination enable time parameter.",7,claim 6,0,A
10606772,9,"9. The USB subsystem of claim 8 , wherein the line termination enable time parameter is programmable via a basic input/output system (BIOS).",8,claim 8,0,A
10606772,10,"10. The USB subsystem of claim 8 , wherein the logic is further configured to: issue a USB reset; and enable line termination after a time corresponding to the termination enable time parameter elapses.",9,claim 8,0,A
10606772,11,"11. An electronic device, comprising: a processor; and a universal serial bus (USB) host controller comprising: at least one memory register to store one or more enumeration parameters for a USB connection with the USB host controller; and logic, at least partially including hardware logic, to: detect a USB connection with a USB device controller; retrieve one or more connection enumeration parameters for a USB connection with the USB device controller from the at least one memory register on the USB host controller, the connection enumeration parameters comprising one or more pre-negotiated timing parameters for a USB enumeration process between the USB controller and the remote device; and implement a connection enumeration process with the USB device controller using the one or more connection enumeration parameters retrieved from the memory register on the USB host controller, wherein the connection enumeration process is to bypass a USB chirp handshake process between the USB controller and the remote device.",10,,0,A
10606772,12,"12. The electronic device of claim 11 , wherein the host controller comprises: a control status register.",11,claim 11,0,A
10606772,13,"13. The electronic device of claim 11 , wherein the connection enumeration parameters comprise at least one of: a high speed enumeration mode parameter; a preconfigured port speed parameter; and a line termination enable time parameter.",12,claim 11,0,A
10606772,14,"14. The electronic device of claim 13 , wherein the line termination enable time parameter is programmable via a basic input/output system (BIOS).",13,claim 13,0,A
10606772,15,"15. The electronic device of claim 13 , wherein the logic is further configured to: issue a USB reset; and enable line termination after a time corresponding to the termination enable time parameter elapses.",14,claim 13,0,A
10606772,16,"16. A method to initiate a universal serial bus (USB) connection with a USB controller comprising: detecting a USB connection with a remote device via the USB connection; retrieving one or more connection enumeration parameters for the USB connection from at least one memory register on the USB host controller, the connection enumeration parameters comprising one or more pre-negotiated timing parameters for a USB enumeration process between the USB controller and the remote device; and implementing a connection enumeration process using the one or more connection enumeration parameters retrieved from the memory register on the USB controller, wherein the connection enumeration process is to bypass a USB chirp handshake process between the USB controller and the remote device.",15,,0,A
10606772,17,"17. The method of claim 16 , wherein the controller comprises: a control status register.",16,claim 16,0,A
10606772,18,"18. The method of claim 16 , wherein the connection enumeration parameters comprise at least one of: a high speed enumeration mode parameter; a preconfigured port speed parameter; and a line termination enable time parameter.",17,claim 16,0,A
10606772,19,"19. The method of claim 18 , wherein the line termination enable time parameter is programmable via a basic input/output system (BIOS).",18,claim 18,0,A
10606772,20,"20. The method of claim 18 , further comprising: issuing a USB reset; and enabling line termination of the USB controller after a time corresponding to the termination enable time parameter elapses.",19,claim 18,0,A
10606773,1,"1. A method comprising: at a first computing device: receiving, from a second computing device, a memory access request including a starting offset within a specified range of memory, a predetermined size of data, a predetermined portion of memory, security key, and unique identifier generated by the first computing device; determining a difference between the offset and the predetermined size of data; determining that the specified range of memory is within a predetermined portion of memory based on whether the difference exceeds the predetermined portion of memory; verifying, based on the security key and the unique identifier, that the second computing device is authorized to access the specified range of memory; in response to verifying that the second computing device is authorized to access the specified range of memory, accessing, by the first computing device, the specified range of memory on behalf of the second computing device; in response to determining that the difference does not exceed the predetermined portion of memory, executing a command on the predetermined portion of memory to modify the specified range of memory at the received starting offset within the specified range of memory.",0,,1,A
10606773,2,"2. The method of claim 1 , wherein the command comprises a write command that is executable by the first computing device for one of modifying, saving, and transferring data to the specified range of memory.",1,claim 1,0,A
10606773,3,"3. The method of claim 1 , wherein the memory comprises non-volatile random access memory (NVRAM).",2,claim 1,0,A
10606773,4,"4. The method of claim 1 , wherein the method further comprises: determining whether the security key and unique identifier corresponds to the specified range of memory; and in response to determining that the security key and unique identifier does not correspond to the specified range of memory, returning a failure indicator.",3,claim 1,0,A
10606773,5,"5. The method of claim 1 , wherein the specified range of memory corresponds to a plurality of different defined portions of the memory, and wherein the method further comprises transferring a failure indicator back to the second computing device.",4,claim 1,0,A
10606773,6,"6. The method of claim 1 , wherein the command comprises a command for writing data of a predetermined size to the specified range of memory from the first computing device to the second computing device, and wherein the method further comprises: determining whether the predetermined size of data exceeds a predetermined amount of data; and in response to determining that the predetermined size exceeds the predetermined amount of data, transmitting the predetermined amount of data from the first computing device to the second computing device by buffering the data in separate portions.",5,claim 1,0,A
10606773,7,"7. The method of claim 1 , further comprising generating the security key and the unique identifier for the second computing device; associating the security key and the unique identifier with the specified range of memory; and communicating the security key and the unique identifier to the second computing device for use in accessing the specified range of memory.",6,claim 1,0,A
10606773,8,"8. A computing device comprising: a memory including a specified range; and a remote memory controller that: receives, from another computing device, a memory access request including a starting offset within a specified range of memory, a predetermined size of data, a predetermined portion of memory, security key, and unique identifier generated by the remote memory controller; determine a difference between the offset and the predetermined size of data; determine that the specified range of memory is within a predetermined portion of memory based on whether the difference exceeds the predetermined portion of memory; verify, based on the security key and the unique identifier, that the another computing device is authorized to access the specified range of memory; access, on behalf of the another computing device, the specified range of memory in response to verifying that the another computing device is authorized to access the specified range of memory; and in response to determining that the difference does not exceed the predetermined portion of memory, executing a command on the predetermined portion of memory to modify the specified range of memory at the received starting offset within the specified range of memory.",7,,0,A
10606773,9,"9. The computing device of claim 8 , wherein the remote memory controller includes a first port and a second port, wherein the first port establishes connection to the memory and a device driver and the second port establishes connection to the second computing device.",8,claim 8,0,A
10606773,10,"10. The computing device of claim 8 , wherein the command comprises a write command that is executable by the computing device for one of modifying, saving, and transferring data to the specified range of memory.",9,claim 8,0,A
10606773,11,"11. The computing device of claim 8 , wherein the memory comprises non-volatile random access memory (NVRAM).",10,claim 8,0,A
10606773,12,"12. The computing device of claim 8 , wherein the remote memory controller further: determines whether the security key and unique identifier corresponds to the specified range of memory; and in response to determining that the security key and unique identifier does not correspond to the specified range of memory, returns a failure indicator.",11,claim 8,0,A
10606773,13,"13. The computing device of claim 8 , wherein the specified range of memory corresponds to a plurality of different defined portions of the memory, and wherein the remote memory controller further transmits a failure indicator back to the another computing device.",12,claim 8,0,A
10606773,14,"14. The computing device of claim 8 , wherein the command comprises a command for writing data of a predetermined size to the specified range of memory from the another computing device to the computing device via the PCIe interconnect, and wherein the remote memory controller: determines whether the predetermined size of data exceeds a predetermined amount of data; and in response to determining that the predetermined size exceeds the predetermined amount of data, transmits the predetermined amount of data from the first computing device to the another computing device by buffering the data in separate portions.",13,claim 8,0,A
10606773,15,"15. The computing device of claim 8 , wherein the remote memory controller: generates the security key and unique identifier for the another computing device; associates the security key and unique identifier with the specified range of memory; and communicates the security key and unique identifier to the another computing device for use in accessing the predetermined portion of memory.",14,claim 8,0,A
10606773,16,"16. A computing device comprising: a communications device comprising at least one processor that communicates via a peripheral component interconnect express (PCIe) interconnect; and a memory manager comprising at least one processor and memory that: receives, from another computing device, a starting offset within a specified range of memory, a predetermined size of data, a predetermined portion of memory, security key and unique identifier for accessing the specified range of memory associated with the another computing device; determines a difference between the offset and the predetermined size of data; determines that the specified range of memory is within a predetermined portion of memory based on whether the difference exceeds the predetermined portion of memory; communicates, to the another computing device, a memory access request including the security key and unique identifier via the PCIe interconnect; accesses the specified range of memory upon receipt of permission from the another computing device; executes a command to modify the specified range of memory at the received starting offset within the specified range of memory.",15,,0,A
10606773,17,"17. The computing device of claim 16 , wherein the memory manager communicates, to the another computing device, an instruction to execute a command for modifying the specified range of memory.",16,claim 16,0,A
10606773,18,"18. The computing device of claim 17 , wherein the command comprises a write command that is executable by the another computing device for one of modifying, saving, and transferring data to the specified range of memory.",17,claim 17,0,A
10606774,1,"1. An apparatus comprising: a host processor device comprising a processor and link training logic, wherein the link training logic comprises data link layer logic, and the link training logic is to: send training data to another device during training of a link, wherein the training comprises a plurality of parts and the training data comprises: a pattern comprising a repeating sequence comprising xFF00; and one or more training sequences, wherein at least a portion of the one or more training sequences is scrambled, and the pattern is unscrambled; use the training data to perform lane-to-lane deskew of the link, wherein the link comprises at least eight lanes and is to connect the host processor device to the other device; and use the training data to configure the lanes of the communication link, wherein the training data comprises information to identify whether to apply lane swap to the link.",0,,1,A
10606774,2,"2. The apparatus of claim 1 , wherein the other device comprises another host processor device.",1,claim 1,0,A
10606774,3,"3. The apparatus of claim 1 , wherein the link supports a plurality of lane widths.",2,claim 1,0,A
10606774,4,"4. The apparatus of claim 3 , wherein the plurality of lane widths comprise a plurality of alternative lane widths selectable during training of the link.",3,claim 3,0,A
10606774,5,"5. The apparatus of claim 1 , wherein the link training logic further comprises a physical layer supersequence that is to be sent in alignment with a sync counter rollover of a system.",4,claim 1,0,A
10606774,6,"6. The apparatus of claim 5 , wherein the system comprises the host processor device.",5,claim 5,0,A
10606774,7,"7. The apparatus of claim 1 , wherein at least a first portion of the link training data is used in a first one of the plurality of parts and a different, second portion of the link training data is used in a second one of the plurality of parts.",6,claim 1,0,A
10606774,8,"8. The apparatus of claim 1 , wherein the lane swap causes a bus reversal of the link.",7,claim 1,0,A
10606774,9,"9. The apparatus of claim 1 , wherein the lanes of the link are assigned default lane numbers and lane swap causes the default lane numbers to be reversed for the lanes during operation of the link.",8,claim 1,0,A
10606774,10,"10. The apparatus of claim 1 , wherein xFF00 comprises the binary value ��111111110000000",9,claim 1,0,A
10606774,11,"11. The apparatus of claim 1 , wherein the link layer logic is compliant with a link layer defined in a particular protocol.",10,claim 1,0,A
10606774,12,"12. An apparatus comprising: a receiver to receive link training data from a host processor device over a link, wherein the link training data comprises: a pattern comprising a repeating sequence comprising xFF00; and one or more training sequences, wherein at least a portion of the one or more training sequences is scrambled, and the pattern is unscrambled; link training circuitry to: use the training data to perform lane-to-lane deskew of the link, wherein the link comprises at least eight lanes; and use the training data to configure the lanes of the communication link, wherein the training data comprises information to identify whether to apply lane swap to lane numbering of the link.",11,,0,A
10606774,13,"13. The apparatus of claim 12 , wherein the link supports a plurality of lane widths.",12,claim 12,0,A
10606774,14,"14. The apparatus of claim 13 , wherein the plurality of lane widths comprise a plurality of alternative lane widths selectable during training of the link.",13,claim 13,0,A
10606774,15,"15. The apparatus of claim 12 , wherein the link training logic further comprises a physical layer supersequence that is in alignment with a sync counter rollover of a system.",14,claim 12,0,A
10606774,16,"16. The apparatus of claim 12 , wherein at least a first portion of the link training data is used in a first one of the plurality of parts and a different, second portion of the link training data is used in a second one of the plurality of parts.",15,claim 12,0,A
10606774,17,"17. The apparatus of claim 12 , wherein the lane swap causes a bus reversal of the link.",16,claim 12,0,A
10606774,18,"18. The apparatus of claim 12 , wherein the lanes of the link are assigned default lane numbers and lane swap causes the default lane numbers to be reversed for the lanes during operation of the link.",17,claim 12,0,A
10606774,19,"19. A system comprising: a computing device; and a host processor device connected to the computing device, wherein the host processor device comprises a processor and link training logic, wherein the link training logic comprises data link layer logic, and the link training logic is to: send training data to the computing device during training of a link, wherein the training comprises a plurality of parts and the training data comprises: a pattern comprising a repeating sequence comprising xFF00; and one or more training sequences, wherein at least a portion of the one or more training sequences is scrambled, and the pattern is unscrambled; use the training data to perform lane-to-lane deskew of the link, wherein the link comprises at least eight lanes connects the host processor device to the computing device; and use the training data to configure the lanes of the communication link, wherein the training data comprises information to identify whether to apply lane swap to the link.",18,,0,A
10606774,20,"20. The system of claim 19 , wherein the computing device comprises another host processor device.",19,claim 19,0,A
10606774,21,"21. The system of claim 19 , wherein the system comprises a server.",20,claim 19,0,A
10606774,22,"22. The system of claim 21 , wherein the server comprises a server blade system.",21,claim 21,0,A
10606774,23,"23. A method comprising: sending training data from a host processor device to another computing device during training of a link, wherein the training comprises a plurality of parts, the link is to connect the host processor device and the other computing device, the link comprises at least eight lanes, and the training data comprises: a pattern comprising a repeating sequence comprising xFF00; and one or more training sequences, wherein at least a portion of the one or more training sequences is scrambled, and the pattern is unscrambled; using the training data to perform lane-to-lane deskew of the link, wherein the link comprises at least eight lanes connects the host processor device to the computing device; and using the training data to configure the lanes of the communication link, wherein the training data comprises information to identify whether to apply lane swap to the link.",22,,0,A
10606775,1,"1. An apparatus, comprising: a computing tile comprising a processing device and a memory resource, wherein the computing tile is configured to: receive a command to initiate an operation to reduce a size of a block of data from a first size to a second size; responsive to receipt of the command, receive a block of data comprising a plurality of columns of data from a memory device coupled to the apparatus; and responsive to receipt of the block of data, perform an operation on the block of data to extract predetermined data from the block of data by removing at least one column of data from among the plurality of columns of data to reduce a size of the block of data from a first size to a second size.",0,,1,A
10606775,2,"2. The apparatus of claim 1 , wherein the computing tile is configured to perform the operation on the block of data responsive to receipt of the block of data in the absence of an intervening command.",1,claim 1,0,A
10606775,3,"3. The apparatus of claim 1 , wherein the computing tile is further configured to receive an interrupt message as part of the command to initiate the operation.",2,claim 1,0,A
10606775,4,"4. The apparatus of claim 1 , wherein the computing tile is further configured to cause the reduced size block of data to be transferred to circuitry external to the computing tile.",3,claim 1,0,A
10606775,5,"5. The apparatus of claim 1 , wherein the computing tile further comprises a direct media access (DMA) buffer to receive a subsequent block of data during performance of the operation on the block of data, and wherein the computing tile is configured to perform a subsequent operation on the subsequent block of data to extract predetermined data from the subsequent block of data to reduce a size of the subsequent block of data from a first size to a second size in the absence of receipt of an intervening command to initiate the subsequent operation.",4,claim 1,0,A
10606775,6,"6. The apparatus of claim 5 , wherein the computing tile is configured to cause the reduced size subsequent block of data to be transferred to circuitry external to the computing tile in the absence of receipt of an intervening command by the computing tile.",5,claim 5,0,A
10606775,7,"7. The apparatus of claim 1 , wherein the processing device comprises a reduced instruction set computing device.",6,claim 1,0,A
10606775,8,"8. An apparatus, comprising: a memory resource coupled to the processing device and inbound buffering circuitry; and a processing device coupled to queuing circuitry and outbound buffering circuitry, wherein the processing resource is configured to: receive, via the queuing circuitry, a command to initiate an operation to reduce respective sizes of blocks of data by selectively removing at least one column of data from the blocks of data; cause a first block of data comprising a plurality of columns of data to be loaded into the memory resource from the inbound buffering circuitry; cause the memory resource to perform the operation on the first block of data; cause a second block of data to be loaded into the inbound buffering circuitry; cause the second block of data to be loaded into the memory resource from the inbound buffering circuitry; and responsive to a determination that the operation on the first block of data is complete, cause the memory resource to perform the operation on the second block of data.",7,,0,A
10606775,9,"9. The apparatus of claim 8 , wherein the processing device is further configured to cause the second block of data to be loaded into the inbound buffering circuitry, loaded into the memory resource, and cause the memory resource to perform the operation on the second block of data in the absence of an additional command separate from the command to initiate the operation.",8,claim 8,0,A
10606775,10,"10. The apparatus of claim 8 , wherein, as part of the operation, the memory resource is configured to: store the first block of data in a first partition of the memory resource; transfer a relevant portion of the first block of data to a second partition of the memory resource; and transfer the data stored in the second partition to the outbound buffering circuitry.",9,claim 8,0,A
10606775,11,"11. The apparatus of claim 8 , wherein the command to initiate the operation includes an interrupt message.",10,claim 8,0,A
10606775,12,"12. The apparatus of claim 8 , wherein the first block of data or the second block of data includes data corresponding to a database, and wherein the operation comprises a filtering operation to extract particular columns of data from the first block of data or the second block of data.",11,claim 8,0,A
10606775,13,"13. The apparatus of claim 8 , wherein the processing device is configured to cause, subsequent to performance of the operation, at least one of a first resultant block of data and a second resultant block of data to be: transferred to the outbound buffering circuitry; and transferred from the outbound buffering circuitry to circuitry external to the apparatus.",12,claim 8,0,A
10606775,14,"14. The apparatus of claim 13 , wherein the processing device is configured to cause the at least one of the first resultant block of data and the second resultant block of data to be: transferred to the outbound buffering circuitry; and transferred from the outbound buffering circuitry to circuitry external to the apparatus in the absence of an additional command separate from the command to initiate the operation.",13,claim 13,0,A
10606775,15,"15. A system, comprising: a plurality of computing tiles each comprising a respective memory resource and a respective reduced instruction set computing (RISC) device, wherein computing tiles among the plurality of computing tiles are configured to: receive respective streams of data comprising a plurality of blocks of data comprising respective columns of data; and perform operations on the blocks of data to remove at least one column of data from the plurality of blocks of data to extract requested portions of the blocks of data by transferring portions of the blocks of data between partitions of the respective memory resources.",14,,0,A
10606775,16,"16. The system of claim 15 , further comprising a communication subsystem coupled to the plurality of computing tiles, wherein the communication subsystem is configured to provide communications pathways between the plurality of computing tiles to allow a first computing tile among the plurality of computing tiles to access an address space associated with a second computing tile among the plurality of computing tiles.",15,claim 15,0,A
10606775,17,"17. The system of claim 15 , further comprising a controller coupled to the computing tiles, wherein the controller is configured to allocate particular computing tiles among the plurality of computing tiles to perform the operations on the blocks of data.",16,claim 15,0,A
10606775,18,"18. The system of claim 15 , wherein the computing tiles are configured to initiate the operations on the blocks of data in response to receipt of an initiation command, and wherein the computing tiles are configured to receive the respective streams of data and perform the operations on the blocks of data in the absence of a command subsequent to the initiation command.",17,claim 15,0,A
10606775,19,"19. The system of claim 15 , wherein the computing tiles are configured to transfer the blocks of data that include the extracted requested portions of data to circuitry external to the computing tiles in response to completion of the operation to extract the requested data.",18,claim 15,0,A
10606775,20,"20. The system of claim 15 , wherein the computing tiles further comprise respective direct media access (DMA) buffering components configured to: buffer subsequent blocks of data received as part of the respective streams of data while the operations are performed on preceding blocks of data; and cause the subsequent blocks of data to be transferred to the respective memory resources in response to completion of the operations on the preceding blocks of data.",19,claim 15,0,A
10606775,21,"21. A method, comprising: receiving, by a processing device, a command to initiate performance of an operation involving blocks of data comprising respective columns of data stored in a memory device coupled to the processing device; receiving, responsive to the initiation command, a first block of data from the memory device; performing, responsive to receipt of the block of data, a first operation to remove at least one column of data from the respective columns of data corresponding to the first block of data to extract data from the first block of data received from the memory device; receiving a second block of data from the memory device at the processing device while the processing device is performing the first operation; performing, responsive to completion of the first operation and before receiving an additional initiation command, a second operation to remove at least one column of data from the respective columns of data corresponding to the second block of data to extract data from the second block of data received by the processing device.",20,,0,A
10606775,22,"22. The method of claim 21 , further comprising buffering, by buffer circuitry coupled to the processing device, the second block of data prior to performance of the second operation such that the second block of data is available to processing device to perform the second operation upon completion of the first operation.",21,claim 21,0,A
10606775,23,"23. The method of claim 21 , further comprising: requesting, by the processing device, information stored in an address space of a processing device different than the processing device; transferring the requested information from the processing device different than the processing device to the processing device.",22,claim 21,0,A
10606775,24,"24. The method of claim 21 , wherein performing the first operation and the second operation includes performing the first operation and the second operation within a memory resource coupled to the processing device.",23,claim 21,0,A
10606775,25,"25. The method of claim 21 , further comprising transferring the data extracted from the first block of data to circuitry external to the processing device in response to completion of the operation to extract data from the first block of data.",24,claim 21,0,A
10606775,26,"26. The method of claim 21 , wherein performing the first operation to extract data from the first block of data further comprises: storing the first block of data in a first partition of a memory resource coupled to the processing device; and selectively transferring a portion of data associated with the first block of data to a second partition of the memory device, wherein the portion of data includes the data to be extracted from the block of data.",25,claim 21,0,A
10606775,27,"27. The method of claim 21 , further comprising: generating a logical record corresponding to at least one of the data extracted from the first block of data and the second block of data; and transferring the logical record to circuitry external to the processing device.",26,claim 21,0,A
10606776,1,"1. A computer program product for queuing requests to stage and destage data between a cache and a storage device processed by a controller, the computer program product comprising a computer readable storage medium having computer readable program code embodied therein that is executable to perform operations, the operations comprising: determining a priority for a request to stage a track from the storage device to the cache or to destage a track from the cache to the storage device, wherein the priority comprises a first priority or a second priority, wherein the first priority is higher than the second priority; in response to the request having the second priority, performing: determining whether a queue includes any dummy requests; adding a first number of dummy requests to the queue in response to determining that the queue does not include any dummy requests; and adding a second number of dummy requests to the queue in response to determining that the queue includes dummy requests, wherein the second number is less than the first number, wherein the controller, upon processing a dummy request in the queue, discards the dummy request without performing an operation with respect to the storage device; and adding an I/O request having the second priority to the queue, wherein the controller, upon processing the I/O request, stages or destages data between the cache and the storage device.",0,,1,A
10606776,2,"2. The computer program product of claim 1 , wherein the adding the I/O request to the queue comprises adding the I/O request to follow an added at least one dummy request in the queue.",1,claim 1,0,A
10606776,3,"3. The computer program product of claim 1 , wherein the operations further comprise: receiving a subsequent request to stage or destage data having the first priority; determining whether there is a dummy request in the queue; and replacing the dummy request in the queue with the subsequent request in response to determining that the queue includes the dummy request.",2,claim 1,0,A
10606776,4,"4. The computer program product of claim 3 , wherein the operations further comprise: adding an I/O request to the queue for the subsequent request in response to determining that there is no dummy request in the queue.",3,claim 3,0,A
10606776,5,"5. The computer program product of claim 4 , wherein the operations further comprise: writing to a doorbell register in the controller to indicate to process the queue in response to the replacing the dummy request or adding the I/O request to the queue.",4,claim 4,0,A
10606776,6,"6. The computer program product of claim 1 , wherein the second number is a function of the first number and a number of dummy requests in the queue.",5,claim 1,0,A
10606776,7,"7. The computer program product of claim 1 , wherein the first priority comprises a high priority, wherein the first number of dummy requests is for the first priority, wherein the second number of dummy requests are added to the queue indicating a medium priority in response to the I/O request to stage or destage data having a low priority, wherein the medium priority is greater than the low priority and less than the high priority.",6,claim 1,0,A
10606776,8,"8. The computer program product of claim 7 , wherein the operations further comprise: adding dummy requests to the queue indicating the high priority in response to the I/O request to stage or destage data having the medium priority.",7,claim 7,0,A
10606776,9,"9. The computer program product of claim 7 , wherein the operations further comprise: receiving a subsequent request to stage or destage data having the high or the medium priority; determining whether there is a dummy request in the queue for the high priority in response to the subsequent request having the high priority; replacing the dummy request in the queue having the high priority with an I/O request having the high priority in response to determining that the queue includes the dummy request having the high priority; determining whether there is a dummy request in the queue for the medium priority in response to the subsequent request having the medium priority; and replacing the dummy request in the queue with an I/O request having the medium priority in response to determining that the queue includes the dummy request having the medium priority.",8,claim 7,0,A
10606776,10,"10. A system for queuing requests to stage and destage data between a cache and a storage device processed by a controller, comprising: at least one processor; and a computer readable storage medium having computer readable program code embodied that when executed by the at least one processor performs operations, the operations comprising: determining a priority for a request to stage a track from the storage device to the cache or to destage a track from the cache to the storage device, wherein the priority comprises a first priority or a second priority, wherein the first priority is higher than the second priority; in response to the request having the second priority, performing: determining whether a queue includes any dummy requests; adding a first number of dummy requests to the queue in response to determining that the queue does not include any dummy requests; and adding a second number of dummy requests to the queue in response to determining that the queue includes dummy requests, wherein the second number is less than the first number, wherein the controller, upon processing a dummy request in the queue discards the dummy request without performing an operation with respect to the storage device; and adding an I/O request having the second priority to the queue, wherein the controller, upon processing the I/O request stages or destages data between the cache and the storage device.",9,,0,A
10606776,11,"11. The system of claim 10 , wherein the operations further comprise: receiving a subsequent request to stage or destage data having the first priority; determining whether there is a dummy request in the queue; and replacing the dummy request in the queue with the subsequent request in response to determining that the queue includes the dummy request.",10,claim 10,0,A
10606776,12,"12. The system of claim 10 , wherein the first priority comprises a high priority, wherein the first number of dummy requests is for the first priority, wherein the second number of dummy requests added to the queue indicating a medium priority in response to the I/O request to stage or destage data having a low priority, wherein the medium priority is greater than the low priority and less than the high priority, wherein the first number is greater than the second number.",11,claim 10,0,A
10606776,13,"13. The system of claim 12 , wherein the operations further comprise: receiving a subsequent request to stage or destage data having the high or the medium priority; determining whether there is a dummy request in the queue for the high priority in response to the subsequent request having the high priority; replacing the dummy request in the queue having the high priority with an I/O request having the high priority in response to determining that the queue includes the dummy request having the high priority; determining whether there is a dummy request in the queue for the medium priority in response to the subsequent request having the medium priority; and replacing the dummy request in the queue with an I/O request having the medium priority in response to determining that the queue includes the dummy request having the medium priority.",12,claim 12,0,A
10606776,14,"14. A method for queuing requests to stage and destage data between a cache and a storage device processed by a controller, comprising: determining a priority for a request to stage a track from the storage device to the cache or to destage a track from the cache to the storage device, wherein the priority comprises a first priority or a second priority, wherein the first priority is higher than the second priority; in response to the request having the second priority, performing: determining whether a queue includes any dummy requests; adding a first number of dummy requests to the queue in response to determining that the queue does not include any dummy requests; and adding a second number of dummy requests to the queue in response to determining that the queue includes dummy requests, wherein the second number is less than the first number, wherein the controller, upon processing a dummy request in the queue, discards the dummy request without performing an operation with respect to the storage device; and adding an I/O request having the second priority to the queue, wherein the controller, upon processing the I/O request, stages or destages data between the cache and the storage device.",13,,0,A
10606776,15,"15. The method of claim 14 , further comprising: receiving a subsequent request to stage or destage data having the first priority; determining whether there is a dummy request in the queue; and replacing the dummy request in the queue with the subsequent request in response to determining that the queue includes the dummy request.",14,claim 14,0,A
10606776,16,"16. The method of claim 14 , wherein the first priority comprises a high priority, wherein the first number of dummy requests is for the first priority, wherein the second number of dummy requests are added to the queue indicating a medium priority in response to the I/O request to stage or destage data having a low priority, wherein the medium priority is greater than the low priority and less than the high priority, wherein the first number is greater than the second number.",15,claim 14,0,A
10606776,17,"17. The method of claim 16 , further comprising: receiving a subsequent request to stage or destage data having the high or the medium priority; determining whether there is a dummy request in the queue for the high priority in response to the subsequent request having the high priority; replacing the dummy request in the queue having the high priority with an I/O request having the high priority in response to determining that the queue includes the dummy request having the high priority; determining whether there is a dummy request in the queue for the medium priority in response to the subsequent request having the medium priority; and replacing the dummy request in the queue with an I/O request having the medium priority in response to determining that the queue includes the dummy request having the medium priority.",16,claim 16,0,A
10606777,1,"1. A method of data processing in a data processing system including a plurality of processing nodes coupled by a communication link, the method comprising: receiving a first command from a first processing node; detecting, by a first link layer of the first processing node, a link stall of the communication link; receiving a stop command at a first transaction layer of the first processing node from the first link layer; truncating, by the first transaction layer, the first command into a first truncated command responsive to receiving the stop command; instructing a command arbiter to stop issuing new commands; and forwarding the first truncated command to an asynchronous crossing buffer of the first processing node.",0,,1,A
10606777,2,"2. The method of claim 1 , further comprising: queuing the first truncated command in the asynchronous crossing buffer.",1,claim 1,0,A
10606777,3,"3. The method of claim 2 , further comprising: detecting a recovery of the communication link; and forwarding the first truncated command to the link from the asynchronous crossing buffer responsive to the detecting of the recovery of the communication link.",2,claim 2,0,A
10606777,4,"4. The method of claim 3 , further comprising: receiving the first truncated command at a second transaction layer of a second processing node; detecting the first truncated command by the second transaction layer; and dropping the first truncated command by the second transaction layer.",3,claim 3,0,A
10606777,5,"5. The method of claim 4 , further comprising: sending, by the second transaction layer, a first response to the first transaction layer.",4,claim 4,0,A
10606777,6,"6. The method of claim 5 , further comprising: receiving a resume indication at the first transaction layer from the first link layer.",5,claim 5,0,A
10606777,7,"7. The method of claim 6 , further comprising; instructing, by the first transaction layer, the command arbiter to begin issuing new commands responsive to receiving the resume indication.",6,claim 6,0,A
10606777,8,"8. The method of claim 1 , wherein the data processing system includes a symmetric multiprocessor system.",7,claim 1,0,A
10606777,9,"9. A computer usable program product comprising one or more computer-readable storage devices, and program instructions stored on at least one of the one or more storage devices, the stored program instructions comprising: program instructions to receive a first command from a first processing node; program instructions to detect, by a first link layer of the first processing node, a link stall of the communication link; program instructions to receive a stop command at a first transaction layer of the first processing node from the first link layer; program instructions to truncate, by the first transaction layer, the first command into a first truncated command responsive to receiving the stop command; program instructions to instruct a command arbiter to stop issuing new commands; and program instructions to forward the first truncated command to an asynchronous crossing buffer of the first processing node.",8,,0,A
10606777,10,"10. The computer usable program product of claim 9 , further comprising: program instructions to queue the first truncated command in the asynchronous crossing buffer.",9,claim 9,0,A
10606777,11,"11. The computer usable program product of claim 10 , further comprising: program instructions to detect a recovery of the communication link; and program instructions to forward the first truncated command to the link from the asynchronous crossing buffer responsive to the detecting of the recovery of the communication link.",10,claim 10,0,A
10606777,12,"12. The computer usable program product of claim 11 , further comprising: program instructions to receive the first truncated command at a second transaction layer of a second processing node; program instructions to detect the first truncated command by the second transaction layer; and program instructions to drop the first truncated command by the second transaction layer.",11,claim 11,0,A
10606777,13,"13. The computer usable program product of claim 12 , further comprising: program instructions to send, by the second transaction layer, a first response to the first transaction layer.",12,claim 12,0,A
10606777,14,"14. The computer usable program product of claim 13 , further comprising: program instructions to receive a resume indication at the first transaction layer from the first link layer.",13,claim 13,0,A
10606777,15,"15. The computer usable program product of claim 14 , further comprising; program instructions to instruct, by the first transaction layer, the command arbiter to begin issuing new commands responsive to receiving the resume indication.",14,claim 14,0,A
10606777,16,"16. The computer usable program product of claim 9 , wherein the data processing system includes a symmetric multiprocessor system.",15,claim 9,0,A
10606777,17,"17. The computer usable program product of claim 9 , wherein the computer usable code is stored in a computer readable storage device in a data processing system, and wherein the computer usable code is transferred over a network from a remote data processing system.",16,claim 9,0,A
10606777,18,"18. The computer usable program product of claim 9 , wherein the computer usable code is stored in a computer readable storage device in a server data processing system, and wherein the computer usable code is downloaded over a network to a remote data processing system for use in a computer readable storage device associated with the remote data processing system.",17,claim 9,0,A
10606777,19,"19. A computer system comprising one or more processors, one or more computer-readable memories, and one or more computer-readable storage devices, and program instructions stored on at least one of the one or more storage devices for execution by at least one of the one or more processors via at least one of the one or more memories, the stored program instructions comprising: program instructions to receive a first command from a first processing node; program instructions to detect, by a first link layer of the first processing node, a link stall of the communication link; program instructions to receive a stop command at a first transaction layer of the first processing node from the first link layer; program instructions to truncate, by the first transaction layer, the first command into a first truncated command responsive to receiving the stop command; program instructions to instruct a command arbiter to stop issuing new commands; and program instructions to forward the first truncated command to an asynchronous crossing buffer of the first processing node.",18,,0,A
10606777,20,"20. The computer system of claim 19 , the stored program instructions further comprising: program instructions to queue the first truncated command in the asynchronous crossing buffer.",19,claim 19,0,A
10606778,1,"1. A bus system comprising: a master device; a bus comprising a chip select signal line and an input output signal line which are both connected to the master device; and a plurality of slave devices electrically connected to the master device through the bus and assigned to have a plurality address sections different from each other, and comprising only one primary slave device and at least one secondary slave device; wherein the master device is able to trigger the chip select signal line, to start a one-to-one communication through the input output signal line; wherein based on a control mechanism an event-alert slave device of the plurality of slave devices takes an authority to communicate with the master device; wherein when the master device triggers the chip select signal line to start the one-to-one communication through the input output signal line and none of the plurality of slave devices wants to actively communicate with the master device, the only one primary slave device is in charge of response to the master device, wherein each of the slave devices further comprises an alert handshake pin and the alert handshake pins of the plurality of slave devices are electrically connected to an alert handshake control line, wherein in the control mechanism, the master device and the plurality of slave devices perform steps of: switching the alert handshake pin from a first level voltage to a second level voltage to further switch the alert handshake control line from the first level voltage to the second level voltage, and transmitting an event-alert signal through the bus by the event-alert slave device, transmitting a status-retrieving signal through the bus by the master device according to the event-alert signal, receiving the status-retrieving signal and performing response to the master device through the bus by the event-alert slave device, transmitting an event-retrieving signal through the bus by the master device, and receiving the event-retrieving signal and performing response to the master device through the bus by the event-alert slave device.",0,,1,A
10606778,2,"2. The bus system of claim 1 , wherein the bus is an enhanced serial peripheral interface (eSPI) bus; wherein when the bus system is activated, the only one primary slave device is in charge of response to the master device in an initial state, and after the initial state, any one of the plurality of slave devices is able to actively communicate with the master device.",1,claim 1,0,A
10606778,3,"3. The bus system of claim 2 , wherein when the master device switches the chip select signal line from the first level voltage to the second level voltage to trigger the one-to-one communication, and transmits signals through the input output signal line, the one of the plurality of slave devices responds to the master device by making the other of the plurality of slave devices not respond to the master device according to the control mechanism.",2,claim 2,0,A
10606778,4,"4. The bus system of claim 3 , wherein after making the other of the plurality of slave devices not respond to the master device according to the control mechanism, the one of the plurality of slave devices transmits the event-alert signal to the master device through the input output signal line, to request communication.",3,claim 3,0,A
10606778,5,"5. The bus system of claim 1 , wherein each of the slave devices comprises a primary and secondary determination pin, wherein the slave device having the primary and secondary determination pin which receives the first level voltage is set to be the primary slave device; and the other slave device having the primary and secondary determination pin which receives the second level voltage different from the first level voltage is set to be the secondary slave device.",4,claim 1,0,A
10606778,6,"6. The bus system of claim 1 , wherein each of the slave devices comprises at least one address section selection pin and at least one address entry selection pin respectively receive one of the first level voltage and the second level voltage different from each other, the address sections are assigned according to a combination of the first level voltage and/or the second level voltage received by the address section selection pin and the address entry selection pin of the slave devices.",5,claim 1,0,A
10606778,7,"7. The bus system of claim 6 , wherein the response through the bus performed by the primary slave device to the configuration-retrieving signal at least comprises a data transmission format of the primary slave device and the secondary slave device.",6,claim 6,0,A
10606778,8,"8. The bus system of claim 1 , wherein the master device and the slave devices perform steps of: transmitting a reset signal through the bus by the master device; and performing reset by the primary slave device and the secondary slave device without performing response.",7,claim 1,0,A
10606778,9,"9. The bus system of claim 1 , wherein the master device and the slave devices perform steps of: transmitting a data access signal through the bus according to a target address by the master device; and decoding the data access signal by the primary slave device and the secondary slave device to determine a corresponding address section of the address sections corresponding to the target address and performing response to the master device through the bus by one of the primary slave device and the secondary slave device having the corresponding address section.",8,claim 1,0,A
10606778,10,"10. The bus system of claim 1 , further comprising a first basic input/output system (BIOS) electrically connected to the primary slave device, and the master device and the plurality of slave devices perform steps of: transmitting a first BIOS access signal through the bus by the master device; and decoding the first BIOS access signal by the primary slave device and the secondary slave device, accessing the first BIOS by the primary slave device and performing response to the master device through the bus by the primary slave device.",9,claim 1,0,A
10606778,11,"11. The bus system of claim 10 , further comprising a second BIOS electrically connected to the master device, wherein the primary slave device accesses the second BIOS through the bus and the master device.",10,claim 10,0,A
10606778,12,"12. The bus system of claim 11 , wherein the primary slave device writes the data in the first BIOS to the second BIOS through the bus and the master device.",11,claim 11,0,A
10606778,13,"13. The bus system of claim 1 , wherein the master device and the plurality of slave devices perform steps of: transmitting a system event signal through the bus by the master device; and receiving the system event signal by the primary slave device and the secondary slave device and performing response to the master device through the bus by the primary slave device.",12,claim 1,0,A
10606778,14,"14. The bus system of claim 1 , wherein when the bus system is activated, the master device and the slave devices perform steps of: transmitting the status-retrieving signal through the bus by the master device to confirm whether the slave devices exist; receiving the status-retrieving signal by the primary slave device and the secondary slave device, and transmitting a status-response signal in response to the status-retrieving signal through the bus only by the primary slave device; transmitting a configuration-retrieving signal through the bus by the master device; receiving the configuration-retrieving signal by the primary slave device and the secondary slave device, and performing response to the configuration-retrieving signal through the bus only by the primary slave device; transmitting a configuration-setting signal through the bus by the master device; and receiving the configuration-setting signal by the primary slave device and the secondary slave device, performing a configuration setting according to the configuration-setting signal by the primary slave device and the secondary slave device and performing response to the configuration-retrieving signal through the bus only by the primary slave device.",13,claim 1,0,A
10606778,15,"15. The bus system of claim 14 , wherein after receiving the status-retrieving signal and performing response to the master device through the bus by the event-alert slave device, the master device and the plurality of slave devices further perform steps of: transmitting a data access confirming signal through the bus by the master device; receiving the data access confirming signal and performing response to the master device through the bus by the event-alert slave device; transmitting a data signal through the bus by the master device; and receiving the data signal and performing response to the master device through the bus by the event-alert slave device.",14,claim 14,0,A
10606779,1,"1. An integrated circuit, comprising: a first processing node; a second processing node; a third processing node; and a bus switch having outputs coupled to the first and second processing nodes in a hybrid shared-pipelined topology, wherein the bus switch is configured to receive a packet from the third processing node and to route the received packet to at most one of the first and second processing nodes, and wherein the bus switch is configured to route the received packet to the first processing node in response to determining that the second processing node is undergoing partial reconfiguration.",0,,1,A
10606779,2,"2. The integrated circuit of claim 1 , further comprising: an additional bus switch that receives the packet from a selected one of the first and second processing nodes, wherein the bus switch and the additional bus switch are part of a pipeline, and wherein the additional bus switch follows the bus switch in the pipeline.",1,claim 1,0,A
10606779,3,"3. The integrated circuit of claim 2 , further comprising: a bypass path that bypasses the first and second processing nodes and connects the bus switch directly to the additional bus switch.",2,claim 2,0,A
10606779,4,"4. The integrated circuit of claim 2 , further comprising: a fourth processing node that is connected to the additional bus switch; and a fifth processing node that is connected to the additional bus switch, wherein the additional bus switch is operable to route the packet to a selected one of the fourth and fifth processing nodes.",3,claim 2,0,A
10606779,5,"5. The integrated circuit of claim 1 , wherein the second processing node is temporarily inactive when the second processing node is undergoing partial reconfiguration.",4,claim 1,0,A
10606779,6,"6. The integrated circuit of claim 1 , wherein the bus switch comprises: a first input; a second input; a first multiplexer that receives signals from the first and second inputs and that has an output that is connected to the first processing node; and a second multiplexer that receives signals from the first and second inputs and that has an output that is connected to the second processing node.",5,claim 1,0,A
10606779,7,"7. The integrated circuit of claim 1 , further comprising: a first configuration register that stores an address of the first processing node; and a second configuration register that stores an address of the second processing node.",6,claim 1,0,A
10606779,8,"8. The integrated circuit of claim 7 , further comprising: a third configuration register that stores a bit that indicates whether the first processing node is active; and a fourth configuration register that stores a bit that indicates whether the second processing node is active.",7,claim 7,0,A
10606779,9,"9. A method of operating a system that includes a host processor and a coprocessor, the method comprising: initializing the coprocessor, wherein the coprocessor includes a plurality of processing nodes connected in a hybrid shared-pipelined topology; after initializing the coprocessor, performing partial reconfiguration on a selected processing node in the plurality of processing nodes; and while the selected processing node is undergoing partial reconfiguration, sending packets from the coprocessor to the host processor.",8,,0,A
10606779,10,"10. The method of claim 9 , further comprising: with the host processor, quiescing traffic to the selected processing node while the selected processing node is undergoing partial reconfiguration.",9,claim 9,0,A
10606779,11,"11. The method of claim 9 , wherein initializing the coprocessor comprises assigning a respective address to each processing node in the plurality of processing nodes.",10,claim 9,0,A
10606779,12,"12. The method of claim 11 , wherein the coprocessor includes a plurality of bus switches coupled in series with the plurality of processing nodes, wherein initializing the coprocessor comprises: for a given bus switch in the plurality of bus switches, assigning a first outbound address to the address of a first processing node in the plurality of processing nodes that is connected to the given bus switch; and for the given bus switch, assigning a second outbound address to the address of a second processing node in the plurality of processing nodes that is connected to the given bus switch.",11,claim 11,0,A
10606779,13,"13. The method of claim 12 , wherein initializing the coprocessor further comprises: for the given bus switch, asserting a first active state that indicates whether the first processing node is ready to receive data from the host processor; and for the given bus switch, asserting a second active state that indicates whether the second processing node is ready to receive data from the host processor.",12,claim 12,0,A
10606779,14,"14. The method of claim 13 , further comprising: sending a given packet from the host processor to the coprocessor; and comparing address information in the given packet to the first outbound address and the second outbound address to determine whether the given bus switch should route the given packet to the first processing node or the second processing node.",13,claim 13,0,A
10606779,15,"15. The method of claim 14 , further comprising: deasserting the first active state whenever the first processing node is undergoing partial reconfiguration; deasserting the second active state whenever the second processing node is undergoing partial reconfiguration; checking to see whether the first active state is asserted before sending the given packet to the first processing node; and checking to see whether the second active state is asserted before sending the given packet to the second processing node.",14,claim 14,0,A
10606779,16,"16. A system, comprising: a host processor; and a coprocessor that serves as a hardware accelerator for the host processor, wherein the coprocessor comprises: a first bus switch; a second bus switch coupled in series with the first bus switch; a third bus switch coupled in series with the second bus switch; first and second accelerator blocks coupled in parallel between the first and second bus switches; and third and fourth accelerator blocks coupled in parallel between the second and third bus switches.",15,,0,A
10606779,17,"17. The system of claim 16 , wherein the second bus switch is configured to receive information from the first bus switch via no more than one of the first and second accelerator blocks during normal operation, and wherein partial reconfiguration is performed on the first accelerator block while the host processor continues to pass data through the second accelerator block.",16,claim 16,0,A
10606779,18,"18. The system of claim 16 , wherein the coprocessor further comprises: a first bypass path connecting the first bus switch directly to the second bus switch; and a second bypass path connecting the second bus switch directly to the third bus switch.",17,claim 16,0,A
10606779,19,"19. The system of claim 16 , wherein the first, second, and third bus switches are controlled by the host processor.",18,claim 16,0,A
10606779,20,"20. The system of claim 16 , wherein the first bus switch determines whether to route an incoming packet to the first accelerator block or the second accelerator block based on address information and active state information associated with the first and second accelerator blocks.",19,claim 16,0,A
10606780,1,"1. A method performed by a driver of a host bus adapter of a storage controller, the method comprising: in response to determining that an error has occurred in the storage controller, transmitting a first set of commands to an embedded port of the host bus adapter to cause the embedded port to enter into a first period of quiescing of I/O operations, wherein hardware resets of buses and other logic to which the embedded port is connected are performed during the first period; restoring configuration space registers of the buses and other logic to a state prior to performing of the hardware resets and subsequently transmitting, by the driver, one or more commands to the embedded port to resume selected I/O operations in the embedded port, wherein the one or more commands to resume selected I/O operations in the embedded port include requests to: resume processing of received frames from a link; enable detection and processing of link transitions; requeue any held messages to the driver; and send a notification message to each response queue indicating completion of the selected I/O operations; subsequent to resumption and completion of the selected I/O operations, transmitting a second set of commands to the embedded port to cause the embedded port to enter into a second period of quiescing of I/O operations; and performing reinitialization of the driver during the second period of quiescing of I/O operations in the embedded port.",0,,1,A
10606780,2,"2. The method of claim 1 , wherein the transmitted first set of commands comprises requests to perform operations in the embedded port including: quiescing processing of received frames from a link; latching states of selected hardware inputs; completing active direct memory access into driver memory; deferring processing of link transitions; stopping all accesses to driver memory; and dequeing any messages to be sent to the driver.",1,claim 1,0,A
10606780,3,"3. The method of claim 1 , wherein the second set of commands comprise options to allow partial direct memory access (DMA) activity to driver memory and to synchronize queue pointers, and wherein the second set of commands requests the embedded port to: stop processing of received frames from a link; complete active DMA into driver memory; defer processing link transitions; stop a majority of accesses to driver memory, while allowing access to memory extensions provided to the embedded port by the driver; and synchronize queue pointers on request queues by discarding any messages on the request queues and updating the request queue out pointers.",2,claim 1,0,A
10606780,4,"4. The method of claim 1 , wherein the second set of commands further comprises sending a message to the embedded port to terminate any remaining exchanges including operations to: send an abort sequence (ABTS) for every open exchange without sending response messages to the driver; not send any ABTS to host systems that have been indicated in port control block to not receive any ABTS; access host memory for offloaded exchanges to determine state information; and relinquish control of all buffer and I/O control block (IOCB) resources associated with the driver.",3,claim 1,0,A
10606780,5,"5. A system, comprising: a memory; and a processor coupled to the memory, wherein the processor performs operations, the operations comprising: in response to determining that an error has occurred, transmitting, by a driver, a first set of commands to an embedded port of a host bus adapter to cause the embedded port to enter into a first period of quiescing of I/O operations, wherein hardware resets of buses and other logic to which the embedded port is connected are performed during the first period; restoring configuration space registers of the buses and other logic to a state prior to performing of the hardware resets and subsequently transmitting, by the driver, one or more commands to the embedded port to resume selected I/O operations in the embedded port, wherein the one or more commands to resume selected I/O operations in the embedded port include requests to: resume processing of received frames from a link; enable detection and processing of link transitions; requeue any held messages to the driver; and send a notification message to each response queue indicating completion of the selected I/O operations; and subsequent to resumption and completion of the selected I/O operations, transmitting a second set of commands to the embedded port to cause the embedded port to enter into a second period of quiescing of I/O operations; and performing reinitialization of the driver during the second period of quiescing of I/O operations in the embedded port.",4,,0,A
10606780,6,"6. The system of claim 5 , wherein the transmitted first set of commands comprises requests to perform operations in the embedded port including: quiescing processing of received frames from a link; latching states of selected hardware inputs; completing active direct memory access into driver memory; deferring processing of link transitions; stopping all accesses to driver memory; and dequeing any messages to be sent to the driver.",5,claim 5,0,A
10606780,7,"7. The system of claim 5 , wherein the second set of commands comprise options to allow partial direct memory access (DMA) activity to driver memory and to synchronize queue pointers, wherein the second set of commands requests the embedded port to: stop processing of received frames from a link; complete active DMA into driver memory; defer processing link transitions; stop a majority of accesses to driver memory, while allowing access to memory extensions provided to the embedded port by the driver; and synchronize queue pointers on request queues by discarding any messages on the request queues and updating the request queue out pointers.",6,claim 5,0,A
10606780,8,"8. The system of claim 5 , wherein the second set of commands further comprises sending a message to the embedded port to terminate any remaining exchanges including operations to: send an abort sequence (ABTS) for every open exchange without sending response messages to the driver; not send any ABTS to host systems that have been indicated in port control block to not receive any ABTS; access host memory for offloaded exchanges to determine state information; and relinquish control of all buffer and I/O control block (IOCB) resources associated with the driver.",7,claim 5,0,A
10606780,9,"9. A computer program product, the computer program product comprising a computer readable storage medium having computer readable program code embodied therewith, the computer readable program code configured to perform operations, the operations comprising: in response to determining that an error has occurred in s storage controller, transmitting, by a driver, a first set of commands to an embedded port of a host bus adapter to cause the embedded port to enter into a first period of quiescing of I/O operations, wherein hardware resets of buses and other logic to which the embedded port is connected are performed during the first period; restoring configuration space registers of the buses and other logic to a state prior to performing of the hardware resets and subsequently transmitting, by the driver, one or more commands to the embedded port to resume selected I/O operations in the embedded port, wherein the one or more commands to resume selected I/O operations in the embedded port include requests to: resume processing of received frames from a link; enable detection and processing of link transitions; requeue any held messages to the driver; and send a notification message to each response queue indicating completion of the selected I/O operations; and subsequent to resumption and completion of the selected I/O operations, transmitting a second set of commands to the embedded port to cause the embedded port to enter into a second period of quiescing of I/O operations; and performing reinitialization of the driver during the second period of quiescing of I/O operations in the embedded port.",8,,0,A
10606780,10,"10. The computer program product of claim 9 , wherein the transmitted first set of commands comprises requests to perform operations in the embedded port including: quiescing processing of received frames from a link; latching states of selected hardware inputs; completing active direct memory access into driver memory; deferring processing of link transitions; stopping all accesses to driver memory; and dequeing any messages to be sent to the driver.",9,claim 9,0,A
10606780,11,"11. The computer program product of claim 9 , wherein the second set of commands comprise options to allow partial direct memory access (DMA) activity to driver memory and to synchronize queue pointers, wherein the second set of commands requests the embedded port to: stop processing of received frames from a link; complete active DMA into driver memory; defer processing link transitions; stop a majority of accesses to driver memory, while allowing access to memory extensions provided to the embedded port by the driver; and synchronize queue pointers on request queues by discarding any messages on the request queues and updating the request queue out pointers.",10,claim 9,0,A
10606780,12,"12. The computer program product of claim 9 , wherein the second set of commands further comprises sending a message to the embedded port to terminate any remaining exchanges including operations to: send an abort sequence (ABTS) for every open exchange without sending response messages to the driver; not send any ABTS to host systems that have been indicated in port control block to not receive any ABTS; access host memory for offloaded exchanges to determine state information; and relinquish control of all buffer and I/O control block (IOCB) resources associated with the driver.",11,claim 9,0,A
10606781,1,"1. A data transmission system that transmits data between a first external apparatus and a second external apparatus, the data transmission system comprising: a first apparatus that is connected to the first external apparatus using a first transmission scheme and a second apparatus that is connected to the second external apparatus using the first transmission scheme, wherein said first apparatus is connected to said second apparatus using a second transmission scheme that is different from the first transmission scheme, and when an operation mode of said first apparatus in the first transmission scheme and an operation mode of said second apparatus in the first transmission scheme are different, data in the first external apparatus or the second external apparatus is transmitted to the second external apparatus or the first external apparatus, respectively, via said first apparatus and said second apparatus; wherein said first apparatus includes a first communication part that connects to the first external apparatus and/or said second apparatus, and a setting signal output part that outputs a first setting signal, that indicates the operation mode of the first communication part in the first transmission scheme, to the first communication part, said second apparatus includes a second communication part that connects to the second external apparatus and/or said first apparatus, and a controller that sets the operation mode of the second communication part in the first transmission scheme, the first communication part generates a second setting signal that corresponds to the operation mode set in the second communication part and transmits the second setting signal to the second communication part, and the controller sets the operation mode of the second communication part according to the second setting signal received via the second communication part.",0,,1,A
10606781,2,"2. The data transmission system according to claim 1 , wherein the data in the first external apparatus or the second external apparatus is transmitted between said first apparatus and said second apparatus according to the second transmission scheme.",1,claim 1,0,A
10606781,3,"3. The data transmission system according to claim 1 , wherein the operation modes comprise a first operation mode and a second operation mode.",2,claim 1,0,A
10606781,4,"4. The data transmission system according to claim 3 , wherein said first apparatus further includes: a first terminal that is associated with the first operation mode and a second terminal that is associated with the second operation mode; and a first terminal selector that makes available a terminal from among the first terminal and the second terminal that is associated with the operation mode set in the first communication part, and said second apparatus further includes: a third terminal that is associated with the first operation mode and a fourth terminal that is associated with the second operation mode; and a second terminal selector that makes available a terminal from among the third terminal and the fourth terminal that is associated with the operation mode set in the second communication part.",3,claim 3,0,A
10606781,5,"5. The data transmission system according to claim 3 , wherein the first operation mode comprises a mode to operate as an USB HOST device, and the second operation mode comprises a mode to operate as an USB DEVICE device.",4,claim 3,0,A
10606781,6,"6. The data transmission system according to claim 1 , wherein said first apparatus and said second apparatus are connected to each other by an LAN cable.",5,claim 1,0,A
10606781,7,"7. The data transmission system according to claim 1 , wherein the second transmission scheme comprises HDBaseT, one of the first communication part and the second communication part serves as a transmitter part, and the other serves as a receiver part.",6,claim 1,0,A
10606781,8,"8. The data transmission system according to claim 7 , wherein the first setting signal and the second setting signal comprise the same signal, the second communication part comprises the receiver part, and the controller receives the second setting signal via a GPIO terminal of the receiver part and sets the second communication part in an operation mode in the first transmission scheme that is different from the operation mode indicated by the second setting signal.",7,claim 7,0,A
10606781,9,9. An electronic equipment that incorporates at least one of the first apparatus and the second apparatus of the data transmission system according to claim 1 .,8,claim 1,0,A
10606781,10,"10. The electronic equipment according to claim 9 , wherein said electronic equipment comprises a projector.",9,claim 9,0,A
10606781,11,"11. A data transmission method for transmitting data between a first external apparatus and a second external apparatus, the data transmission method comprising: connecting the first external apparatus and a first apparatus to each other using a first transmission scheme; connecting the second external apparatus and a second apparatus to each other using the first transmission scheme; connecting the first apparatus and the second apparatus to each other using a second transmission scheme that is different from the first transmission scheme; and transmitting data in the first external apparatus or the second external apparatus to the second external apparatus or the first external apparatus, respectively, via the first apparatus and the second apparatus when an operation mode of the first apparatus in the first transmission scheme and an operation mode of the second apparatus in the first transmission scheme are different, wherein said first apparatus includes a first communication part that connects to the first external apparatus and/or said second apparatus, and a setting signal output part that outputs a first setting signal, that indicates the operation mode of the first communication part in the first transmission scheme, to the first communication part, said second apparatus includes a second communication part that connects to the second external apparatus and/or said first apparatus, and a controller that sets the operation mode of the second communication part in the first transmission scheme, the first communication part generates a second setting signal that corresponds to the operation mode set in the second communication part and transmits the second setting signal to the second communication part, and the controller sets the operation mode of the second communication part according to the second setting signal received via the second communication part.",10,,0,A
10606782,1,"1. A method of aligning received bad data indicators (BDIs) with received data on a cross-chip link, the method comprising: receiving, by a transaction layer from the cross-chip link, a control flit of a frame, the control flit comprising incoming data flit information for a plurality of incoming data flits; adding the incoming data flit information to a control structure in the transaction layer; receiving, from the cross-chip link, the plurality of incoming data flits in the frame; directing each of the plurality of incoming data flits to virtual channel queues based on the incoming data flit information at a first read pointer in the control structure; after receiving all of the plurality of incoming data flits of the frame, receiving a bookend flit for the frame, the bookend flit comprising a plurality of BDIs for the plurality of data flits in the frame; and associating, by the transaction layer, each of the BDIs with the plurality of data flits based on the incoming data flit information at a second read pointer in the control structure.",0,,1,A
10606782,2,"2. The method of claim 1 , further comprising: providing, from the transaction layer, the plurality of data flits and BDIs for the plurality of data flits to a host processing unit.",1,claim 1,0,A
10606782,3,"3. The method of claim 2 , wherein associating each of the BDIs with the plurality of data flits based on the incoming data flit information at the second read pointer in the control structure comprises: processing, by a state machine, each BDI based on a clock cycle of the host processing unit.",2,claim 2,0,A
10606782,4,"4. The method of claim 1 , wherein directing each of the plurality of incoming data flits to virtual channel queues based on the incoming data flit information at the first read pointer in the control structure comprises, for each incoming data flit: retrieving, from the control structure at the first read pointer, a virtual channel identifier; selecting a virtual channel queue based on the virtual channel identifier; and storing the incoming data flit in an entry in the selected virtual channel queue.",3,claim 1,0,A
10606782,5,"5. The method of claim 1 , wherein associating each of the BDIs with the plurality of data flits based on the incoming data flit information at the second read pointer in the control structure comprises, for each BDI: retrieving, from the control structure at the second read pointer, a virtual channel identifier; selecting a BDI array based on the virtual channel identifier; and storing the BDI in an entry in the selected BDI array.",4,claim 1,0,A
10606782,6,"6. The method of claim 1 , wherein directing each of the plurality of incoming data flits to virtual channel queues based on the incoming data flit information at the first read pointer in the control structure comprises: storing each of the plurality of incoming data flits in the virtual channel queues based on a location of a write pointer into the virtual channel queues.",5,claim 1,0,A
10606782,7,"7. The method of claim 1 , wherein the incoming data flit information comprises a virtual channel identifier and a length of each of the plurality of incoming data flits.",6,claim 1,0,A
10606784,1,"1. A method for filtering communications received from a plurality of managed devices of an IHS (Information Handling System) by a remote access controller, the method comprising: configuring a sideband management connection with each of the plurality of managed devices via a first bus connection; receiving, via the first bus connection, PCIe (PCI Express) VDM (Vendor Defined Message) MCTP (Management Component Transport Protocol) messages from the plurality of managed devices; storing the MCTP messages to a circular buffer beginning at a write pointer location; and filtering a first MCTP message at a read pointer location of the circular buffer based on an identification of an organization associated with the managed device associated with the first MCTP message.",0,,1,A
10606784,2,"2. The method of claim 1 , further comprising: incrementing the write pointer location to the next location in the circular buffer after the stored MCTP messages.",1,claim 1,0,A
10606784,3,"3. The method of claim 1 , further comprising: if messages for the organization associated with the managed device are being processed, copying the PCIe VDM MCTP response message from the circular buffer to a buffer designated for messages from the managed device.",2,claim 1,0,A
10606784,4,"4. The method of claim 3 , further comprising: incrementing the read pointer to the address of the next message in the circular buffer.",3,claim 3,0,A
10606784,5,"5. A remote access controller configured for managing a plurality of devices of an IHS (Information Handling System), the remote access controller comprising: one or more processors; and a memory device coupled to the one or more processors, the memory device storing computer-readable instructions that, upon execution by the one or more processors, cause the system to: configure a first sideband management connection with a first managed device via a primary bus connection; transmit a message to the first managed device via the primary bus, wherein the message is encoded using a first symmetric key; configure a second sideband management connection via a secondary bus connection; and transmit the first symmetric key to the managed device via the secondary bus connection, wherein the first symmetric key is utilized to decode the message.",4,,0,A
10606784,6,"6. The remote access controller of claim 5 , further comprising: a hardware multiplexer for coupling the remote access controller to the first managed device via the secondary bus connection.",5,claim 5,0,A
10606784,7,"7. The remote access controller of claim 6 , wherein the hardware multiplexer establishes a secondary bus connection with the first managed device, wherein the secondary bus connection cannot be monitorable by any of the plurality of managed devices other than the first managed device.",6,claim 6,0,A
10606784,8,"8. The remote access controller of claim 7 , wherein all of the plurality of managed devices can monitor transmissions on the primary bus connection.",7,claim 7,0,A
10606784,9,"9. The remote access controller of claim 8 , wherein the primary bus connection is a PCIe (PCI Express) VDM (Vendor Defined Message) bus connection.",8,claim 8,0,A
10606784,10,"10. The remote access controller of claim 9 , wherein the secondary bus connection is an I2C bus connection.",9,claim 9,0,A
10606784,11,"11. A system for filtering PCIe (PCI Express) VDM (Vendor Defined Message) MCTP (Management Component Transport Protocol) messages received from a plurality of managed devices, the system comprising: the volatile memory of an IHS (Information Handling System), wherein the volatile memory supports DMA (Direct Memory Access) operations, and wherein the volatile memory comprises a circular buffer; a remote access controller configured to manage the plurality of managed devices of an IHS and further configured to: receive PCIe VDM MCTP messages from the plurality of managed devices; store the received PCIe VDM MCTP messages to a receive FIFO (First-In-First-Out) data structure; transfer, using a DMA operation, the PCIe VDM MCTP messages stored in the receive FIFO to the circular buffer, beginning at a write pointer location of the circular buffer; increment the write pointer location to the next location in the circular buffer after the transferred PCIe VDM MCTP messages; and filter the PCIe VDM MCTP message at a read pointer location in the circular buffer based on identification of the PCIe VDM MCTP message as associated with an organization managing the plurality of managed devices.",10,,0,A
10606784,12,"12. The system of claim 11 , wherein the remote access controller is further configured to determine the organization of the PCIe VDM MCTP message at the read pointer location based on a vendor identification provided in the PCIe VDM MCTP message.",11,claim 11,0,A
10606784,13,"13. The system of claim 11 , wherein the remote access controller is further configured to copy the filtered PCIe VDM MCTP message from the circular buffer to an endpoint buffer designated for filtered PCIe VDM MCTP messages from the managed device that generated the PCIe VDM MCTP message.",12,claim 11,0,A
10606784,14,"14. The system of claim 13 , wherein the remote access controller is further configured to increment the read pointer location to the address of the next PCIe VDM MCTP message in the circular buffer regardless of whether the MCTP message is filtered and copied to the endpoint buffer.",13,claim 13,0,A
10606784,15,"15. The system of claim 11 , wherein the MCTP messages are received via a PCIe VDM bus connection with the plurality of managed devices.",14,claim 11,0,A
10606784,16,"16. The system of claim 11 , wherein the endpoint buffer is a storage location in the volatile memory of the IHS.",15,claim 11,0,A
10606785,1,"1. An apparatus comprising: a fabric that supports multiple interconnect protocols; a link coupled to the fabric; and interconnect protocol logic comprising: multiplexing logic to select one of a Peripheral Component Interconnect Express (PCIe) upper layer mode, or an accelerator link protocol upper layer mode, the PCIe upper layer mode or the accelerator link protocol upper layer mode to communicate over the link, and physical layer logic to determine one or more low latency features associated with one or both of the PCIe upper layer mode or the accelerator link protocol upper layer mode; wherein the physical layer logic receives modified Training Set 1/Training Set 2 (TS1/TS2) ordered sets to enable one or more low latency features or one or more low latency features settings.",0,,1,A
10606785,2,"2. The apparatus of claim 1 , wherein the multiplexing logic is to select one of the PCIe upper layer mode or the accelerator link protocol upper layer mode during link initialization.",1,claim 1,0,A
10606785,3,"3. The apparatus of claim 1 , wherein if the accelerator link protocol upper layer mode is selected, the multiplexing logic is further to enable accelerator link protocols, the accelerator link protocols comprising either a single protocol or multiple protocols.",2,claim 1,0,A
10606785,4,"4. The apparatus of claim 3 , wherein the accelerator link protocols comprise one or more of an accelerator link input/output protocol, an accelerator link device-attached memory protocol, or an accelerator link cache protocol.",3,claim 3,0,A
10606785,5,"5. The apparatus of claim 1 , wherein if the accelerator link protocol upper layer mode is selected, the physical layer logic is to activate low latency features settings associated with the accelerator link mode.",4,claim 1,0,A
10606785,6,"6. The apparatus of claim 1 , wherein the physical layer logic is determine one or more low latency features associated with the accelerator link upper layer mode to activate based on the received modified PCIe TS1/TS2 ordered sets.",5,claim 1,0,A
10606785,7,"7. The apparatus of claim 1 , wherein the low latency features comprise one or more of sync header suppression, skip (SKP) ordered set suppression, and drift buffer mode.",6,claim 1,0,A
10606785,8,"8. The apparatus of claim 1 , wherein the apparatus comprises a root complex, compliant with a PCIe-based interconnect protocol, the root complex comprising hardware and software to determine a protocol to be used on the link by a two phase process to occur while in PCIe 5.0 Configuration.Lanenum.Wait, Configuration.Lanenum.Accept, and Configuration.Complete stages, and before entering L0 at Gen1 Speed.",7,claim 1,0,A
10606785,9,"9. The apparatus of claim 8 , wherein the two phase process comprises a first phase, during the first phase, the physical layer logic to: receive, from the root complex, a set of modified TS1 Ordered Sets providing low latency features, and send, by the physical layer logic, to the root complex, a set of modified TS1 Ordered Sets indicating which low latency features to enable.",8,claim 8,0,A
10606785,10,"10. The apparatus of claim 9 , wherein the first phase is to occur during PCIe 5.0 Configuration.Lanenum.Wait or Configuration.Lanenum.Accept stages.",9,claim 9,0,A
10606785,11,"11. The apparatus of claim 9 , wherein the two phase process comprises a second phase, during the second phase, the physical layer logic to: receive, from the root complex, an enable request including a set of modified TS2 Ordered Sets indicating whether the link is to operate in PCIe upper layer mode or an accelerator link protocol upper layer mode, send, by the physical layer logic, to the root complex, a set of modified TS2 Ordered Sets with an enable response to acknowledge the enable request.",10,claim 9,0,A
10606785,12,"12. The apparatus of claim 11 , wherein the second phase is to occur during PCIe 5.0 Configuration.Complete.",11,claim 11,0,A
10606785,13,"13. A non-transitory computer-readable storage media comprising a plurality of instructions that in response to being executed cause multiplexing logic to select either Peripheral Component Interconnect Express (PCIe)-based upper layer mode, or an accelerator link protocol upper layer mode; and cause physical layer logic coupled to a link to determine one or more low latency features associated with one or both of the PCIe upper layer mode or the accelerator link protocol upper layer mode; wherein the instructions use modified PCIe 5.0 Training Set 1/Training Set 2 (TS1/TS2) ordered sets (OS) to negotiate which accelerator link protocols are to be enabled.",12,,0,A
10606785,14,"14. The non-transitory computer-readable storage media of claim 13 , further comprising instructions that in response to being executed cause multiplexing logic is to select one of the PCIe upper layer mode or the accelerator link protocol upper layer mode during link initialization.",13,claim 13,0,A
10606785,15,"15. The non-transitory computer-readable storage media of claim 13 , further comprising instructions that in response to being executed cause multiplexing logic, if the accelerator link mode was selected, to enable either a single protocol, or multiple protocols.",14,claim 13,0,A
10606785,16,"16. The non-transitory computer-readable storage media of claim 13 , further comprising instructions that in response to being executed cause the physical layer logic, if the accelerator link mode was selected, to enable low latency features associated with the accelerator link mode.",15,claim 13,0,A
10606785,17,"17. The non-transitory computer-readable storage media of claim 13 , wherein the instructions use modified PCIe TS1/TS2 ordered sets to negotiate which accelerator link low latency features are to be activated.",16,claim 13,0,A
10606785,18,"18. The non-transitory computer-readable storage media of claim 13 , wherein the accelerator link protocol upper layer mode comprises one or more protocols, the one or more protocols comprising an accelerator link input/output protocol, an accelerator link device-attached memory protocol, or an accelerator link cache protocol.",17,claim 13,0,A
10606785,19,"19. The non-transitory computer-readable storage media of claim 13 , wherein the low latency features include one or more of sync header suppression, skip (SKP) ordered set suppression, and drift buffer mode.",18,claim 13,0,A
10606785,20,"20. A system comprising: a host device, the host device comprising: a root complex; a fabric that supports multiple interconnect protocols; and a link coupled to the fabric; an interconnect protocol stack that supports multiple interconnect protocols, the interconnect protocol stack coupled to the link, the interconnect protocol stack comprising: multiplexing logic to select one of a Peripheral Component Interconnect Express (PCIe) upper layer mode, or an accelerator link protocol upper layer mode, the PCIe upper layer mode or the accelerator link protocol upper layer mode to communicate over the link, and physical layer logic to determine one or more low latency features associated with one or both of the PCIe upper layer mode or the accelerator link protocol upper layer mode; and an endpoint device, the endpoint device coupled to the host device across the link; wherein the root complex is to: transmit to the endpoint device a first set of modified training set (TS) 1 ordered sets, the first set of modified TS1 ordered sets comprising an advertisement of one or more low latency features to activate; and receive, from the endpoint device, a second set of modified TS1 ordered sets, the second set of modified TS1 ordered sets identifying one or more low latency features to activate.",19,,0,A
10606785,21,"21. The system of claim 20 , wherein the root complex is to: transmit a first set of modified TS2 ordered sets to the endpoint device, the first set of modified TS2 ordered sets indicating whether the endpoint device should operate in PCIe upper layer mode or accelerator link upper layer mode; and receive a second set of modified TS2 ordered sets from the endpoint device, the second set of modified TS2 ordered sets indicating a PCIe upper layer mode or an accelerator link upper layer mode.",20,claim 20,0,A
10606785,22,"22. The system of claim 21 , wherein the received second set of modified TS2 ordered sets indicates the accelerator link mode is selected by the endpoint device, and wherein the physical layer logic is to activate low latency features settings associated with the accelerator link mode, the low latency features settings indicating one or more low latency features comprising one or more of sync header suppression, skip (SKP) ordered set suppression, and drift buffer mode.",21,claim 21,0,A
10606786,1,"1. An apparatus for upgradable vehicular computing, comprising: an interconnect to mate a pluggable compute module with an in-vehicle compute hub disposed in a vehicle to form an upgradable vehicle compute system for the vehicle, the interconnect having a fixed section and a configurable section; wherein the fixed section includes a dynamic power delivery interface to deliver power from the in-vehicle compute hub to the pluggable compute module, and a management channel to facilitate a system management controller of the in-vehicle compute hub in managing the pluggable compute module; and wherein the configurable section includes a plurality of configurable input/output (I/O) interfaces to couple and facilitate inputs from one or more peripherals of the in-vehicle compute hub to one or more compute elements of the pluggable compute module, and outputs from the one or more compute elements of the pluggable compute module to the one or more peripherals of the in-vehicle compute hub.",0,,0,B
10606786,2,"2. The apparatus of claim 1 , wherein the management channel comprises a selected one of a Universal Asynchronous Receiver/Transmitter interface or a Universal Serial Bus interface.",1,claim 1,0,B
10606786,3,"3. The apparatus of claim 1 , wherein the plurality of configurable I/O interfaces include one or more serial I/O interfaces.",2,claim 1,0,B
10606786,4,"4. The apparatus of claim 3 , wherein the one or more serial I/O interfaces include a Peripheral Component Interconnect Express (PCIe) interface.",3,claim 3,0,B
10606786,5,"5. An apparatus for upgradable vehicular computing, comprising: a pluggable compute module having a central processing unit (CPU), one or more other compute elements, power input and supply circuitry, a housekeeping controller, and a configurable input/output (CIO) multiplexor, wherein the pluggable compute module is arranged to mate with an in-vehicle compute hub disposed in a vehicle, through an interconnect, to form an upgradable vehicle compute system for the vehicle; wherein the power input and supply circuitry is to receive power from the in-vehicle compute hub, through the interconnect; the housekeeping controller is to communicate with the in-vehicle compute hub, through the interconnect, to enable the in-vehicle compute hub to manage the pluggable compute module; and the CIO multiplexor is configurable to multiplex inputs from the in-vehicle compute hub or to multiplex outputs to the in-vehicle compute hub, through the interconnect in accordance with one or more I/O protocols.",4,,1,B
10606786,6,"6. The apparatus of claim 5 , wherein the housekeeping controller is arranged to negotiate with the in-vehicle compute hub, via the interconnect, during an initial pairing of the pluggable compute module and the in-vehicle compute hub, a power delivery contract.",5,claim 5,0,B
10606786,7,"7. The apparatus of claim 6 , wherein the power input and supply circuitry includes a power monitor to monitor the power received from the in-vehicle compute hub, through the interconnect, and forward results of the monitoring to the housekeeping controller.",6,claim 6,0,B
10606786,8,"8. The apparatus of claim 6 , wherein the housekeeping controller is to further regulate delivery of the received power to the CPU and the one or more other compute elements or power consumption by the CPU and the one or more other compute elements, based at least in part on the negotiated power delivery contract and results of monitoring the received power.",7,claim 6,0,B
10606786,9,"9. The apparatus of claim 6 , wherein the housekeeping controller is to further regulate delivery of the received power to the CPU and the one or more other compute elements or power consumption by the CPU and the one or more other compute elements, based at least in part on an operational context of the vehicle.",8,claim 6,0,B
10606786,10,"10. The apparatus of claim 6 , wherein the housekeeping controller is to regulate power consumption by the CPU and the one or more other compute elements by selectively initiating sleep states, lowering clock frequencies, or powering off the CPU or the one or more other compute elements.",9,claim 6,0,B
10606786,11,"11. The apparatus of claim 5 , wherein the housekeeping controller is arranged to abstract power and sleep management related signals of the CPU and the one or more other compute elements, and communicate power and sleep management related information of the CPU and the one or more other compute elements to the in-vehicle compute hub, through the interconnect, in a form independent of the CPU and the one or more other compute elements included with the pluggable compute module.",10,claim 5,0,B
10606786,12,"12. The apparatus of claim 5 , wherein the housekeeping controller is arranged to channel sideband signals from the CPU or the one or more other compute elements to peripherals of the in-vehicle compute hub, through the interconnect.",11,claim 5,0,B
10606786,13,"13. The apparatus of claim 5 , wherein the housekeeping controller is arranged to facilitate authentication of the pluggable compute module and the in-vehicle compute hub to each other, through the interconnect.",12,claim 5,0,B
10606786,14,"14. The apparatus of claim 5 , wherein the housekeeping controller is arranged to facilitate an implementation of a vehicle functional safety protocol between the pluggable compute module and the in-vehicle compute hub, through the interconnect.",13,claim 5,0,B
10606786,15,"15. The apparatus of claim 5 , wherein the one or more I/O protocols includes one or more I/O protocols selected from a Universal Serial Bus protocol, a Peripheral Component Interface Express protocol, a High Definition Multi-Media Interface protocol, or a Display Port protocol.",14,claim 5,0,B
10606786,16,"16. The apparatus of claim 5 , wherein the pluggable compute module further comprises memory, a hardware accelerator, mass storage, or a communication unit.",15,claim 5,0,B
10606786,17,"17. An apparatus for upgradable vehicular computing, comprising: an in-vehicle compute hub to be disposed in a vehicle, and having a power supply, a system management controller, and a plurality of peripheral components, wherein the in-vehicle compute hub is arranged to mate with a pluggable compute module having one or more processors, through an interconnect, to form an upgradable vehicle compute system for the vehicle, to execute one or more vehicular applications with the one or more processors in the pluggable compute module; wherein the power supply is to supply power to the pluggable compute module, through the interconnect; the system management controller is to communicate with the pluggable compute module, through the interconnect, to manage the pluggable compute module; and the plurality of peripheral components are to provide inputs to the pluggable compute module or to receive outputs from the pluggable compute module, through the interconnect.",16,,0,B
10606786,18,"18. The apparatus of claim 17 , wherein the in-vehicle compute hub further includes reverse polarity protection or spike suppression circuitry to regulate the supply of power to the pluggable compute module, through the interconnect.",17,claim 17,0,B
10606786,19,"19. The apparatus of claim 17 , wherein the system management controller is arranged to receive communication on power and sleep management related information for compute elements of the pluggable compute module, from the pluggable compute module, through the interconnect, in an abstracted form, independent of the specific compute elements included with the pluggable compute module.",18,claim 17,0,B
10606786,20,"20. The apparatus of claim 17 , wherein the system management controller is arranged to receive channel sideband signals for the peripheral components, from compute elements of the pluggable compute module, through the interconnect.",19,claim 17,0,B
10606786,21,"21. The apparatus of claim 17 , wherein the system management controller is arranged to facilitate authentication of the pluggable compute module and the in-vehicle compute hub to each other, through the interconnect.",20,claim 17,0,B
10606786,22,"22. The apparatus of claim 17 , wherein the system management controller is arranged to facilitate an implementation of a vehicle functional safety protocol between the pluggable compute module and the in-vehicle compute hub, through the interconnect.",21,claim 17,0,B
10606786,23,"23. The apparatus of claim 17 , wherein the peripheral components include one or more audio amplifiers, cameras, network interfaces, display interfaces, or communication interfaces.",22,claim 17,0,B
10606786,24,"24. A method for upgradeable vehicular computing, comprising: disposing an in-vehicle compute hub in a vehicle; and providing an interconnect to the in-vehicle compute hub to removably receive a pluggable compute module to form an upgradeable vehicle compute system for the vehicle, the interconnect having a fixed section and a configurable section; wherein the fixed section includes a dynamic power delivery interface to deliver power from the in-vehicle compute hub to the pluggable compute module, and a management channel to facilitate a system management controller of the in-vehicle compute hub in managing the pluggable compute module; and wherein the configurable section includes a plurality of configurable input/output (I/O) interfaces to couple and facilitate inputs from one or more peripherals of the in-vehicle compute hub to one or more compute elements of the pluggable compute module, and outputs from the one or more compute elements of the pluggable compute module to the one or more peripherals of the in-vehicle compute hub.",23,,0,B
10606786,25,"25. The method of claim 24 , further comprising: providing, and mating the pluggable compute module with the in-vehicle compute hub via the interconnect to form the upgradeable vehicle compute system; and configuring a configurable I/O multiplexor to selectively establish one or more I/O channels of one or more I/O protocols between the one or more compute elements of the pluggable compute module and the one or more peripherals of the in-vehicle compute hub.",24,claim 24,0,B
10606787,1,"1. A system comprising: a processor; and a rank of state machine engines, wherein the state machine engines of the rank are coupled together by an inter-rank bus, and wherein the rank of state machine engines is configurable to be one logical group, and wherein the rank of state machine engines is also configurable to be multiple logical groups.",0,,1,B
10606787,2,"2. The system of claim 1 , wherein the processor is configured to assign a number to each state machine engine of the rank.",1,claim 1,0,B
10606787,3,"3. The system of claim 1 , wherein the rank of state machine engines comprises a module including the rank.",2,claim 1,0,B
10606787,4,"4. The system of claim 3 , wherein the processor is configured to assign the number during initialization of the module.",3,claim 3,0,B
10606787,5,"5. The system of claim 1 , wherein the processor is configured to provide data to a particular state machine engine of the rank to configure the particular state machine engine as a master device.",4,claim 1,0,B
10606787,6,"6. The system of claim 5 , wherein the master device is configured to coordinate synchronization of the state machine engines of the rank.",5,claim 5,0,B
10606787,7,"7. The system of claim 1 , wherein the processor is configured to provide data to each state machine engine of the rank to indicate a total number of state machine engines that are part of the rank.",6,claim 1,0,B
10606787,8,"8. The system of claim 1 , wherein the processor is configured to provide data to each state machine engine of the rank to indicate a logical group to which the respective state machine engine belongs.",7,claim 1,0,B
10606787,9,"9. The system of claim 1 , wherein the processor is configured to provide data to each state machine engine of the rank to indicate a number of logical groups that are part of the rank.",8,claim 1,0,B
10606787,10,"10. The system of claim 1 , wherein the inter-rank bus enables each state machine engine of the rank to analyze all bytes of data collectively received for analysis by the state machine engines of the rank when the rank is configured as one logical group.",9,claim 1,0,B
10606787,11,"11. The system of claim 10 , wherein each of the state machine engines of the rank is configured to process an entire data stream received for analysis by the rank.",10,claim 10,0,B
10606787,12,"12. The system of claim 1 , wherein the inter-rank bus enables each state machine engine of the rank to receive an assigned portion of a data stream to be analyzed when the rank is configured as multiple logical groups.",11,claim 1,0,B
10606787,13,"13. The system of claim 12 , wherein the system implements a data-slicing scheme to assign the portions of the data stream to the state machine engines.",12,claim 12,0,B
10606787,14,"14. The system of claim 12 , wherein the processor is configured to sequentially provide data intended for each logical group of the multiple logical groups and wherein the state machine engines of the rank store the data in an offset manner.",13,claim 12,0,B
10606787,15,"15. The system of claim 1 , wherein the state machine engines of the rank are coupled to data lines of the processor.",14,claim 1,0,B
10606787,16,"16. The system of claim 1 , wherein the inter-rank bus is configured to allow data to be exchanged between the state machine engines of the rank.",15,claim 1,0,B
10606787,17,"17. A system comprising: a processor; and a plurality of state machine engines, wherein the plurality of state machine engines is configurable to be one logical group.",16,,0,B
10606787,18,"18. The system of claim 17 , wherein each of the plurality of state machine engines is configured to analyze a same portion of a data stream.",17,claim 17,0,B
10606787,19,"19. The system of claim 18 , wherein the processor is configured to provide the data stream to each of the plurality of state machine engines.",18,claim 18,0,B
10606787,20,"20. The system of claim 18 , wherein each state machine engine includes a data buffer to store the portion of data stream.",19,claim 18,0,B
10606787,21,"21. The system of claim 17 , wherein the plurality of state machine engines comprises eight state machine engines configured to be one logical group.",20,claim 17,0,B
10606787,22,"22. The system of claim 17 , wherein the plurality of state machine engines is configurable to be multiple logical groups.",21,claim 17,0,B
10606787,23,"23. A system comprising: a processor; and a plurality of state machine engines, wherein the plurality of state machine engines is configurable to be multiple logical groups.",22,,0,B
10606787,24,"24. The system of claim 23 , wherein a first number of the plurality of state machine engines is part of a first logical group, a second number of the plurality of state machine engines is part of a second logical group, and wherein the first and second logical groups are configured to analyze different portions of a data stream.",23,claim 23,0,B
10606787,25,"25. The system of claim 23 , wherein the plurality of state machine engines comprises a first state machine engine and a second state machine engine, wherein the first state machine engine is part of a first logical group, the second state machine engine is part of a second logical group, and at least one of the first logical group and the second logical group comprises a plurality of state machine engines.",24,claim 23,0,B
10606787,26,"26. The system of claim 25 , wherein the first logical group comprises a greater number of state machine engines than the second logical group.",25,claim 25,0,B
10606788,1,"1. A USB chipset comprising: a data processing unit generating a plurality of transmission information according to first information provided by a first device; a transmitting unit processing the transmission information to generate an output signal; a first pin set configured only to transmit the output signal to a second device; a second pin set configured only to transmit the output signal to the second device; a third pin set coupled to the second device; a fourth pin set coupled to the second device and configured only to receive a first input signal; and a fifth pin set coupled to the second device and configured only to receive a second input signal, wherein responsive to the first pin set transmitting the output signal to the second device, the second pin set does not transmit the output signal to the second device, and responsive to the second pin set transmitting the output signal to the second device, the first pin set does not transmit the output signal to the second device, and responsive to the fourth pin set receiving the first input signal, the fifth pin set does not receive the second input signal, and responsive to the fifth pin set receiving the second input signal, the fourth pin set does not receive the first input signal.",0,,1,B
10606788,2,"2. The USB chipset as claimed in claim 1 , further comprising: a detection unit detecting a level of a voltage received by the third pin set to generate a detection signal, wherein the transmitting unit utilizes the first or second pin set to transmit the output signal according to the detection signal.",1,claim 1,0,B
10606788,3,"3. The USB chipset as claimed in claim 2 , further comprising: a receiving unit processing the first or second input signal according to the detection signal to generate a processed result and providing the processed result to the data processing unit.",2,claim 2,0,B
10606788,4,"4. The USB chipset as claimed in claim 3 , wherein the transmitting unit comprises a de-multiplexer, and the receiving unit comprises a multiplexer.",3,claim 3,0,B
10606788,5,"5. The USB chipset as claimed in claim 3 , wherein the receiving unit comprises: a receiving-terminal selecting module coupled to the fourth pin set and the fifth pin set to selectively output signals received by the fourth or fifth pin set according to the detection signal; and a level-adjustment module configured to adjust a level of a common voltage of the output signal of the receiving-terminal selecting module.",4,claim 3,0,B
10606788,6,"6. The USB chipset as claimed in claim 5 , wherein the level-adjustment module is a high pass filter.",5,claim 5,0,B
10606788,7,"7. The USB chipset as claimed in claim 5 , further comprising: a variable gain tuning module adjusting the outputs of the level-adjustment module to generate the processed signal.",6,claim 5,0,B
10606788,8,"8. The USB chipset as claimed in claim 7 , wherein the variable gain tuning module is an equalizer.",7,claim 7,0,B
10606788,9,"9. The USB chipset as claimed in claim 7 , wherein the variable gain tuning module is a variable gain amplifier.",8,claim 7,0,B
10606788,10,"10. The USB chipset as claimed in claim 3 , wherein the receiving unit comprises: a level-adjustment module coupled to the fourth pin set and the fifth pin set, adjusting levels of common voltages of signals received by the fourth pin set to generate a first differential signal, and adjusting levels of common voltages of signals received by the fifth pin set to generate a second differential signal; and a receiving-terminal selecting module selectively providing the first or second differential signal to a variable gain tuning module according to the detection signal.",9,claim 3,0,B
10606788,11,"11. The USB chipset as claimed in claim 3 , wherein the receiving unit comprises: a first level-adjustment module coupled to the fourth pin set and adjusting levels of common voltages of signals received by the fourth pin set according to a first setting value to generate a first differential signal; a second level-adjustment module coupled to the fifth pin set and adjusting levels of common voltages of signals received by the fifth pin set according to a second setting value to generate a second differential signal; and a receiving-terminal selecting module coupled to the first and second level-adjustment modules to provide the first setting value to the first level-adjustment module and provide the second setting value to the second level-adjustment module according to the detection signal.",10,claim 3,0,B
10606788,12,"12. The USB chipset as claimed in claim 11 , further comprising: a variable gain tuning module coupled to the first and second level-adjustment modules, wherein when a level of a common voltage of the first differential signal is equal to a pre-determined value, the variable gain tuning module does not adjust the first differential signal, and when the level of the common voltage of the first differential signal is not equal to the pre-determined value, the variable gain tuning module adjusts the first differential signal.",11,claim 11,0,B
10606788,13,"13. The USB chipset as claimed in claim 12 , wherein first level-adjustment module uses the first setting value as the level of the common voltage of the first differential signal.",12,claim 12,0,B
10606788,14,"14. The USB chipset as claimed in claim 3 , wherein the receiving unit comprises: a level-adjustment module coupled to the fourth pin set and the fifth pin set, adjusting levels of common voltages of signals received by the fourth pin set to generate a first differential signal, and adjusting levels of common voltages of signals received by the fifth pin set to generate a second differential signal; and a variable gain tuning module selectively adjusting the first or second differential signal to generate the processed result.",13,claim 3,0,B
10606788,15,"15. The USB chipset as claimed in claim 14 , wherein the variable gain tuning module comprises: a first differential pair coupled to the level-adjustment module to receive and process the first differential signal and generate a first output signal set; a first current module coupled between the first differential pair and a first operation voltage; a first variable resistor unit coupled to the first differential pair and the first current module; a first current-to-voltage converter coupled between a second operation voltage and a receiving-terminal selecting module and converting the first output signal set to generate a first processed signal; a second differential pair coupled to the level-adjustment module to receive the second differential signal and generate a second output signal set; a second current module coupled between the second differential pair and the first operation voltage; a second variable resistor unit coupled to the second differential pair and the second current module; and a second current-to-voltage converter coupled between the second operation voltage and the receiving-terminal selecting module and converting the second output signal set to generate a second processed signal, wherein the receiving-terminal selecting module is configured to direct the first current-to-voltage converter to convert the first output signal set according to the detection signal or direct the second current-to-voltage converter to convert the second output signal set according to the detection signal.",14,claim 14,0,B
10606788,16,"16. The USB chipset as claimed in claim 15 , wherein the data processing unit generates receiving information to the second device according to the first or second processed signal.",15,claim 15,0,B
10606788,17,"17. The USB chipset as claimed in claim 15 , wherein the first variable resistor unit has a resistance which is changed according to the frequency of the first output signal set.",16,claim 15,0,B
10606788,18,"18. The USB chipset as claimed in claim 3 , wherein the receiving unit comprises: a level-adjustment module coupled to the fourth pin set and the fifth pin set, adjusting levels of common voltages of signals received by the fourth pin set to generate a first differential signal, and adjusting levels of common voltages of signals received by the fifth pin set to generate a second differential signal; a plurality of variable gain tuning modules adjusting the first and second differentials to generate a first processed signal and a second processed signal; and a receiving-terminal selecting module transmitting the first or second processed signal to the data processing unit according to the detection signal.",17,claim 3,0,B
10606788,19,"19. The USB chipset as claimed in claim 18 , wherein the data processing unit generates receiving information to the second device according to the first or second processed signal.",18,claim 18,0,B
10606789,1,"1. An application module, comprising: a first plurality of data transceiving interfaces transceiving data from an application module data control device, each of the first plurality of data transceiving interfaces being a different type of interface than the remaining interfaces of the plurality of data transceiving interfaces; a second plurality of call interfaces configured to call one or more service modules, each of the second plurality of call interfaces being a different type of interface than the remaining interfaces of the second plurality of call interfaces; and an analog to digital converter input interface capable of receiving an analog to digital measurement value, wherein the first plurality of data transceiving interfaces comprises a filter interface, a diagnosis interface and a communication interface, wherein the second plurality of call interfaces comprises a system service interface, a communication service interface, an input/output service interface, and a memory service interface, wherein the first plurality of data transceiving interfaces connect the application module and the application module data control device so as to write the data in a separate memory included in the application module data control device or read the data written in the memory, wherein the first plurality of data transceiving interfaces include a write/read interface that allows the data to be written in the memory or the written data to be read, wherein the second plurality of call interfaces allow a hardware device connected with a plurality of service modules to be executed by calling the plurality of service modules, wherein each of the first plurality of data transceiving interfaces are configured to: transceive data from a second application module via the application module data control device, transmit data to the second application module via the application module data control device, and execute a function of the application module data control device, wherein the first application module and the second application module are hardware and software, and wherein each call interface calls one or more respective service modules included in the basic software (BSW) for operating a battery management system (BMS) and allow a hardware device connected with one or more service modules to be executed.",0,,1,B
10606789,2,"2. The application module of claim 1 , wherein the first plurality of data transceiving interfaces include an address value receiving interface receiving an address value for the data written in the memory.",1,claim 1,0,B
10606789,3,"3. The application module of claim 1 , wherein the system service call interface calls a system service module among the plurality of service modules.",2,claim 1,0,B
10606789,4,"4. The application module of claim 1 , wherein the communication service call interface calls a communication service module among the plurality of service modules.",3,claim 1,0,B
10606789,5,"5. The application module of claim 1 , wherein the input/output service call interface calls an input/output service module among the plurality of service modules.",4,claim 1,0,B
10606789,6,"6. The application module of claim 1 , wherein the memory service call interface calls a memory service module among the plurality of service modules.",5,claim 1,0,B
10606789,7,"7. The application module of claim 1 , wherein any of the second plurality of call interfaces among the second plurality of call interfaces are configured to be changed to an additional service call interface calling a remaining service module other than the system service module, the communication service module, the input/output service module, and the memory service module among one or more service modules.",6,claim 1,0,B
10606789,8,"8. The application module of claim 1 , wherein the application module transceives the data with the other application module connected with the application module data control device through the first plurality of data transceiving interfaces.",7,claim 1,0,B
10606789,9,"9. The application module of claim 1 , wherein the data transceiving interfaces transceive data to measure current, voltage and temperature of a battery.",8,claim 1,0,B
10606790,1,"1. An apparatus for serial communication, comprising: a transceiver, to receive a precoding request from a downlink receiver across a serial communication link, and to transmit data bits to the downlink receiver over the serial communication link; and a precoder, coupled to the transceiver, to: receive scrambled data bits of a subset of the data bits to be transmitted, from a coupled scrambler; and in response to the request from the downlink receiver, precode the scrambled data bits; and output the precoded scrambled data bits to the transceiver, for transmission to the downlink receiver across the serial communication link together with other unscrambled data bits.",0,,1,B
10606790,2,"2. The apparatus of claim 1 , wherein the precoding request is sent from the downlink receiver during back-channel based transmitter equalization.",1,claim 1,0,B
10606790,3,"3. The apparatus of claim 1 , wherein, upon receipt of the precoding request, the transceiver is further to indicate, via a bit in a transmitted training ordered set, that precoding has been turned on.",2,claim 1,0,B
10606790,4,"4. The apparatus of claim 1 , wherein to precode the scrambled data bits includes to XOR each transmitted data bit with another data bit transmitted just before it.",3,claim 1,0,B
10606790,5,"5. The apparatus of claim 1 , further comprising the scrambler to scramble the subset of the data bits to be transmitted to generate the scrambled data bits.",4,claim 1,0,B
10606790,6,"6. The apparatus of claim 1 , wherein the transceiver transmits the precoded scrambled bits and the other unscrambled bits in a 128:2 ratio.",5,claim 1,0,B
10606790,7,"7. The apparatus of claim 1 , wherein the serial communication link comprises multiple lanes connecting the apparatus and the downlink receiver, and wherein the precoder is further to selectively implement or not implement precoding as to each lane of the serial communication link, in response to either receipt, or no receipt, by the transceiver, as the case may be, of a precoding request from the downlink receiver as to that lane.",6,claim 1,0,B
10606790,8,"8. The apparatus of claim 1 , wherein the precoder, once precoding has been requested for the serial communication link, is to continue to precode the scrambled data bits for that serial communication link, until receipt of a reset signal, from the downlink receiver, by the transceiver.",7,claim 1,0,B
10606790,9,"9. The apparatus of claim 8 , wherein the reset signal is an electric idle exit ordered set (EIEOS) signal.",8,claim 8,0,B
10606790,10,"10. The apparatus of claim 1 , wherein the precoding request indicates that precoding is to begin prior to the transceiver entering a predetermined data rate.",9,claim 1,0,B
10606790,11,"11. The apparatus of claim 1 , wherein the serial communication link is a peripheral component interconnect-express link.",10,claim 1,0,B
10606790,12,"12. A circuit card for computing, comprising: a transceiver to receive a precoding request from a downlink receiver external to the circuit card, across a peripheral component interconnect-express (PCIe) link; and a scrambler, to scramble a subset of a plurality of data bits to be transmitted to the downlink receiver over the PCIe link, wherein the transceiver, in response to the request from the downlink receiver, is to further: precode the scrambled data bits, and transmit the precoded scrambled data bits to the downlink receiver together with unscrambled data bits.",11,,0,B
10606790,13,"13. The circuit card of claim 12 , wherein the precoding request is sent from the downlink receiver during back-channel based transmitter equalization.",12,claim 12,0,B
10606790,14,"14. The circuit card claim 12 , wherein the transceiver is further to indicate, via a bit in a transmitted PCIe training ordered set, that precoding has been turned on.",13,claim 12,0,B
10606790,15,"15. The circuit card of claim 12 , wherein to precode the scrambled data bits includes to XOR each transmitted data bit with another bit transmitted just before it.",14,claim 12,0,B
10606790,16,"16. The circuit card of claim 12 , wherein the transceiver transmits the precoded scrambled bits and the other unscrambled bits in a 128:2 ratio.",15,claim 12,0,B
10606790,17,"17. The circuit card of claim 12 , wherein the PCIe link comprises multiple lanes connecting the transceiver and the downlink receiver, and wherein the transceiver is further to selectively implement or not implement precoding as to each lane of the PCIe link, in response to either receipt, or no receipt, by the transceiver, as the case may be, of a precoding request from the downlink receiver as to that lane.",16,claim 12,0,B
10606790,18,"18. The circuit card of claim 12 , wherein the transceiver, once precoding has been requested for the PCIe link, is to continue to precode the scrambled data bits for that PCIe link, until receipt of a reset signal from the downlink receiver by the transceiver.",17,claim 12,0,B
10606790,19,"19. The circuit card of claim 18 , wherein the reset signal is an electric idle exit ordered set (EIEOS) signal.",18,claim 18,0,B
10606790,20,"20. The circuit card of claim 12 , wherein the precoding request indicates that precoding is to begin prior to the transceiver entering a predetermined data rate.",19,claim 12,0,B
10606790,21,"21. A system, comprising: first circuit component having a downlink receiver to send a precoding request to an uplink transmitter of a second circuit component across a serial communication link during back-channel based transmitter equalization; and the second circuit component having the uplink transmitter, to receive the precoding request from, and transmit data bits to, the downlink receiver, across the serial communication link, wherein the transmitter scrambles a subset of data bits to be transmitted, of a pre-defined type, and wherein, in response to the request from the downlink receiver, the transmitter precodes the scrambled data bits, and transmits them to the downlink receiver, together with other unscrambled data bits, across the serial communication link.",20,,0,B
10606790,22,"22. The system of claim 21 , wherein the serial communication link comprises multiple lanes connecting the uplink transmitter and the downlink receiver, and wherein the uplink transmitter is further to selectively implement or not implement precoding as to each lane of the serial communication link, in response to either receipt, or no receipt, by the uplink transmitter, as the case may be, of a precoding request from the downlink receiver as to that lane.",21,claim 21,0,B
10606790,23,"23. The system of claim 22 , wherein the downlink receiver makes a request for precoding as to a lane, or as to the entire link, based, at least in part, on its decision feedback equalization setup.",22,claim 22,0,B
10606790,24,"24. The system of claim 21 , wherein to precode the scrambled data bits includes to XOR each transmitted data bit with another data bit transmitted just before it.",23,claim 21,0,B
10606790,25,"25. The system of claim 21 , wherein the precoding request indicates that the uplink transmitter is to begin precoding prior to transmitting at a predetermined data rate.",24,claim 21,0,B
10606791,1,"1. A computer-implemented method for adaptation of a bus bridge transfer protocol in a bus bridge system that uses a tag based transfer protocol to identify discrete transactions, comprising: configuring a bus bridge to receive a protocol request from a non-tag conforming initiator that does not use the tag based transfer protocol by assigning a designated tag consistent with the tag based transfer protocol for use in protocol requests from a non-tag conforming initiator; in response to receiving a protocol request from the non-tag conforming initiator, setting an initiator flag that indicates that the designated tag is being used in a request from the non-tag conforming initiator and that a response should be forwarded to the non-tag conforming initiator; and in response to receiving a protocol request with the designated tag from a tag conforming initiator, setting the initiator flag to indicate that the designated tag is being used in the tag conforming initiator request from the tag conforming initiator and that a response should be forwarded to the tag conforming initiator.",0,,1,B
10606791,2,"2. The method of claim 1 , further comprising: in response to receiving a protocol request from the non-tag conforming initiator or the tag conforming initiator using the designated tag, setting an order flag for the requests using the designated tag to indicate an order of the requests from initiators.",1,claim 1,0,B
10606791,3,"3. The method of claim 2 , wherein the order flag is set dependent on whether there is an outstanding request using the designated tag and indicating a request to be handled first.",2,claim 2,0,B
10606791,4,"4. The method of claim 2 , further comprising applying an arbitrating process when more than one protocol request is received simultaneously and setting an order flag indicating the arbitrated protocol request order.",3,claim 2,0,B
10606791,5,"5. The method of claim 2 , further comprising: setting or clearing an order flag when a status response from a target is received.",4,claim 2,0,B
10606791,6,"6. The method of claim 1 , further comprising: forwarding the received protocol requests to an attached target using the tag based protocol and receiving request responses back from the target; and returning a request response to a non-tag conforming initiator by identifying the assigned tag and initiator flag.",5,claim 1,0,B
10606791,7,"7. The method of claim 1 , further comprising: clearing an initiator flag once a response to the request is forwarded to one of the non-tag conforming initiator or the tag conforming initiator.",6,claim 1,0,B
10606791,8,"8. The method of claim 1 , further comprising determining if a received request from a tag conforming initiator uses a designated tag assigned to a non-tag conforming initiator and, if not, allowing the request to proceed with no initiator flag set.",7,claim 1,0,B
10606791,9,"9. The method of claim 1 , wherein the non-tag conforming initiator is capable of issuing multiple outstanding transactions with multiple tags assigned for the non-tag conforming initiator.",8,claim 1,0,B
10606791,10,"10. The method of claim 1 , wherein the tag based protocol is one of: Peripheral Component Interconnect (PCI) or Open Coherent Accelerator Processor Interface (OpenCAPI), and the non-tag based protocol is a request-acknowledge protocol.",9,claim 1,0,B
10606791,11,"11. A system for adaptation of a bus bridge transfer protocol in a bus bridge system that uses a tag based transfer protocol to identify discrete transactions, comprising: a processor and a memory configured to provide computer program instructions to the processor; a configuration component for configuring a bus bridge to receive a protocol request from a non-tag conforming initiator that does not use the tag based transfer protocol including a tag assigning component for assigning a designated tag consistent with the tag based transfer protocol for use in protocol requests from a non-tag conforming initiator; a non-tag request receiving component for receiving a protocol request from the non-tag conforming initiator, and an initiator flag component for setting an initiator flag that indicates that the designated tag is being used in a request from the non-tag conforming initiator and that a response should be forwarded to the non-tag conforming initiator; and a tag request receiving component with a tag reading component for receiving a protocol request with the designated tag from a tag conforming initiator, wherein the initiator flag component is additionally for setting the initiator flag to indicate that the designated tag is being used in the tag conforming initiator request from the tag conforming initiator and that a response should be forwarded to the tag conforming initiator.",10,,0,B
10606791,12,"12. The system of claim 11 , further comprising: an order flag component for, when receiving a protocol request from the non-tag conforming initiator or the tag conforming initiator using the designated tag, setting an order flag for the requests using the designated tag to indicate an order of the requests from initiators.",11,claim 11,0,B
10606791,13,"13. The system of claim 12 , wherein the order flag component sets the order flag dependent on whether there is an outstanding request using the designated tag and indicating a request to be handled first.",12,claim 12,0,B
10606791,14,"14. The system of claim 12 , further comprising an arbitrating component for applying an arbitrating process when more than one protocol request is received simultaneously and the order flag components sets an order flag indicating the arbitrated protocol request order.",13,claim 12,0,B
10606791,15,"15. The system of claim 12 , further comprising an order flag clearing component for clearing an order flag when a status response is received from a target and an order flag setting component for setting an order flag when a status response is received from a target.",14,claim 12,0,B
10606791,16,"16. The system of claim 11 , further comprising: a forwarding component for forwarding the received protocol requests to an attached target using the tag based protocol and receiving a request response back from the target; and a request response returning component for returning a request response to a non-tag conforming initiator by identifying the assigned tag and initiator flag.",15,claim 11,0,B
10606791,17,"17. The system of claim 11 , further comprising an initiator flag clearing component for clearing an initiator flag once a response to the request is forwarded to one of the non-tag conforming initiator or the tag conforming initiator.",16,claim 11,0,B
10606791,18,"18. The system of claim 11 , wherein the tag reading component is for determining if a received request from a tag conforming initiator uses a designated tag assigned to a non-tag conforming initiator and, if not, allowing the request to proceed with no initiator flag set.",17,claim 11,0,B
10606791,19,"19. The system of claim 11 , wherein the tag assigning component is capable of assigning multiple designated tags for multiple transactions from the non-tag conforming initiator.",18,claim 11,0,B
10606791,20,"20. A computer program product for adaptation of a bus bridge transfer protocol in a bus bridge system that uses a tag based transfer protocol to identify discrete transactions, the computer program product comprising a computer readable storage medium having program instructions embodied therewith, the program instructions executable by a processor to cause the processor to: configure a bus bridge to receive a protocol request from a non-tag conforming initiator that does not use the tag based transfer protocol by assigning a designated tag consistent with the tag based transfer protocol for use in protocol requests from the non-tag conforming initiator; in response to receiving a protocol request from the non-tag conforming initiator, setting an initiator flag that indicates that the designated tag is being used in a request from the non-tag conforming initiator and that a response should be forwarded to the non-tag conforming initiator; and in response to receiving a protocol request with the designated tag from a tag conforming initiator, setting an initiator flag that indicates that the designated tag is being used in the tag conforming initiator request from the tag conforming initiator and that a response should be forwarded to the tag conforming initiator.",19,,0,B
10606792,1,"1. An interface arrangement on a system board comprising: at least two data lines for a differential signal transmission via the interface arrangement, at least one first mounting location for at least one first connector and at least one second mounting location for at least one second connector, a third mounting location for an integrated circuit, and a host controller that supports a signal transmission with a first data transmission rate or a second data transmission rate, wherein at the at least one first mounting location the data lines are divided into a first path and a second path, at the at least one second mounting location, the second path and the first path are joined, the third mounting location for the integrated circuit is arranged in the first path, the at least one first connector and the at least one second connector can be mounted at the at least one first and at least one second mounting location in a first or a second position, respectively, so that signals in the data lines run via the first path or via the second path, and in support of the first data transmission rate by the host controller, the third mounting location is unpopulated, and in support of the second data transmission rate by the host controller, an integrated circuit is fitted at the third mounting location, wherein the second data transmission rate is higher than the first data transmission rate.",0,,1,B
10606792,2,"2. The interface arrangement according to claim 1 , wherein the interface arrangement is a USB interface arrangement and the host controller is a USB host controller that supports the signal transmission at the first data transmission rate according to standard USB 3.1 Gen. 1 and the signal transmission at the second data transmission rate according to standard USB 3.1 Gen. 2, and in support of the standard USB 3.1 Gen. 1 by the USB host controller, the third mounting location is unpopulated and in support of the standard USB 3.1 Gen. 2 by the USB host controller, an integrated circuit is fitted at the third mounting location.",1,claim 1,0,B
10606792,3,"3. The interface arrangement according to claim 1 , wherein the at least one first connector and/or the at least one second connector comprises at least one surface-mounted component.",2,claim 1,0,B
10606792,4,"4. The interface arrangement according to claim 1 , wherein the at least one first connector and/or the at least one second connector comprises two zero-ohm resistors that are combined to produce a chip resistor array.",3,claim 1,0,B
10606792,5,"5. The interface arrangement according to claim 1 , wherein the at least one first connector and/or the at least one second connector comprises two capacitors.",4,claim 1,0,B
10606792,6,"6. The interface arrangement according to claim 1 , wherein the at least one first connector and the at least one second connector are soldered in the first or the second position on the system board depending on whether an integrated circuit is fitted at the third mounting location or whether the third mounting location is unpopulated.",5,claim 1,0,B
10606792,7,"7. The interface arrangement according to claim 1 , wherein the system board on which the interface arrangement is arranged is configured as a multilayer system board, the first path runs on an upper side of the system board on which side the system board is fitted with components, and the second path and a common portion of the data lines run at least predominantly on a lower side of the system board facing away from the upper side or along an intermediate layer of the system board.",6,claim 1,0,B
10606792,8,"8. The interface arrangement according to claim 1 , wherein the at least one first mounting location and/or the at least one second mounting location comprise six pads, the six pads are arranged in two rows of three pads each running parallel to one another of which two central pads are electrically connected to a common portion of the data lines, and two pads on a first side are electrically connected to the data lines of the first path and two pads on a second side are electrically connected to the data lines of the second path.",7,claim 1,0,B
10606792,9,"9. The interface arrangement according to claim 1 , wherein the integrated circuit is a retimer or a redriver.",8,claim 1,0,B
10606792,10,10. A computer system comprising at least one system board with the at least one interface arrangement according to claim 1 .,9,claim 1,0,B
10606792,11,"11. The computer system according to claim 10 , wherein the at least one interface arrangement further comprises at least one port adapted to connect a peripheral device to the computer system.",10,claim 10,0,B
10606793,1,"1. An apparatus for performing retiming between first and second devices according to a plurality of protocols, the apparatus comprising: a receiver operable to receive data; a transmitter to transmit data; a first data path coupled to the receiver and the transmitter and operable to transfer data received from the receiver to the transmitter during protocol specific training; and a second data path coupled to the receiver and the transmitter, the second data path for use in transferring data received from the receiver to the transmitter after protocol specific training; and control circuitry to control protocol specific training of one or both of the transmitter and receiver in response to an indication of one protocol of the plurality of protocols.",0,,1,B
10606793,2,2. The apparatus defined in claim 1 wherein the protocol specific training comprises performing an equalization process.,1,claim 1,0,B
10606793,3,3. The apparatus defined in claim 2 wherein the equalization process generates transmitter equalization coefficients to control equalization performed by the transmitter.,2,claim 2,0,B
10606793,4,4. The apparatus defined in claim 1 wherein the second data path is used during common clock mode and the first data path is for use during non-common clock mode and during training.,3,claim 1,0,B
10606793,5,5. The apparatus defined in claim 1 wherein a switch occurs from using the second data path to the first data path in response to receiving a predefined training set.,4,claim 1,0,B
10606793,6,6. The apparatus defined in claim 1 further comprising a circuit to provide the indication in response to determining the physical layer (PHY) for transferring data from the receiver to the transmitter.,5,claim 1,0,B
10606793,7,7. The apparatus defined in claim 6 wherein the circuit is operable to determine the PHY based on a strap option.,6,claim 6,0,B
10606793,8,8. The apparatus defined in claim 6 wherein the circuit is operable to determine the PHY based on a sideband signal.,7,claim 6,0,B
10606793,9,9. The apparatus defined in claim 6 wherein the circuit is operable to determine the PHY based on a training set modification.,8,claim 6,0,B
10606793,10,10. The apparatus defined in claim 1 further comprising a multiplexer having a first input coupled to the first data path and a second input coupled to the second data path and an output coupled to the transmitter.,9,claim 1,0,B
10606793,11,"11. The apparatus defined in claim 1 wherein the first data path further comprises one or more link training state machines for the plurality of protocols, the one or more link training state machines being used by the control circuitry to perform link training according to the one protocol specified by the indication.",10,claim 1,0,B
10606793,12,12. The apparatus defined in claim 11 wherein the control circuitry is operable to perform ordered set generation for link training associated with each of the plurality of protocols.,11,claim 11,0,B
10606793,13,"13. The apparatus defined in claim 1 wherein the first data path further comprises: a serial to parallel (S2P) converter coupled to convert first serial data received by the receiver to first parallel data; first logic coupled to the S2P converter to perform alignment, decoding and descrambling if necessary; an elastic buffer coupled to the first logic to store data after any alignment, decoding and descrambling; staging buffer circuitry coupled to the elastic buffer and the control circuitry, the staging buffer circuitry comprising a multiplexer responsive to one or more control signals to provide data from the elastic buffer or training data to the transmitter; and parallel to serial (P2S) converter coupled and operable to receive second parallel data from the staging buffer circuitry and convert the second parallel data to second serial data.",12,claim 1,0,B
10606793,14,"14. A method comprising: receiving data with a receiver of a multi-protocol retimer, where the data has been transferred according to one of a plurality of protocols; controlling, via control circuitry, protocol specific training of one or both of the transmitter and receiver in response to an indication of one protocol of the plurality of protocols; and transmitting data between the receiver and a transmitter of the retimer using a first data path coupled to the receiver and the transmitter if transfer of the data received by the receiver occurs during or before protocol specific training of one or both of the transmitter and receiver via the control circuitry in response to the indication of the one protocol of the plurality of protocols, or a second data path coupled to the receiver and the transmitter if transfer of the data received by the receiver occurs after the protocol specific training.",13,,0,B
10606793,15,15. The method defined in claim 14 wherein the protocol specific training includes comprises performing an equalization process.,14,claim 14,0,B
10606793,16,16. The method defined in claim 15 wherein performing the equalization process comprises generating transmitter equalization coefficients to control equalization performed by the transmitter.,15,claim 15,0,B
10606793,17,17. The method defined in claim 14 wherein the second data path is used during common clock mode and the first data path is for use during non-common clock mode and during protocol specific training.,16,claim 14,0,B
10606793,18,18. The method defined in claim 14 further comprising switching from use of the second data path to the first data path in response to receiving a predefined training set.,17,claim 14,0,B
10606793,19,19. The method defined in claim 14 further comprising providing the indication in response to determining the physical layer (PHY) type for transferring data from the receiver to the transmitter.,18,claim 14,0,B
10606793,20,20. The method defined in claim 19 wherein determining the PHY type is based on a strap option.,19,claim 19,0,B
10606794,1,"1. A method, comprising: receiving, by a slave device, a clock signal, wherein the clock signal is received from a master device via a bus; detecting, by the slave device, a first clock pulse of the clock signal, wherein the first clock pulse indicates that a bit is to be written to or written from a slave shift register of the slave device; monitoring, by the slave device and based on detecting the first clock pulse, the clock signal for a second clock pulse; identifying, by the slave device, a timeout threshold associated with the clock signal, wherein the timeout threshold is a threshold length of time between two clock pulses; determining, by the slave device and based on monitoring the clock signal, that the timeout threshold expired before detecting the second clock pulse; and resetting, by the slave device and based on the timeout threshold expiring, the slave shift register to synchronize the slave shift register with a master shift register of the master device.",0,,1,B
10606794,2,"2. The method of claim 1 , wherein a duration of the timeout threshold is preconfigured based on a period of the clock signal.",1,claim 1,0,B
10606794,3,"3. The method of claim 1 , wherein resetting the slave shift register comprises: clearing all entries from the slave shift register.",2,claim 1,0,B
10606794,4,"4. The method of claim 1 , further comprising: identifying a word length associated with a data communication on the bus; determining, based on the timeout threshold expiring, that a number of bits in the slave shift register does not match the word length; and sending a notification to the master device that an error occurred based on determining that the number of bits in the slave shift register does not match the word length.",3,claim 1,0,B
10606794,5,"5. The method of claim 1 , further comprising: enabling, based on receiving a read command from the master device and before resetting the slave shift register, a bit value of the slave shift register to be read by the master device to permit the master device to detect an error associated with a data communication on the bus.",4,claim 1,0,B
10606794,6,"6. The method of claim 5 , wherein the data communication comprises a most recently received word of a plurality of words communicated via the bus.",5,claim 5,0,B
10606794,7,"7. The method of claim 1 , further comprising: setting, based on resetting the slave shift register, a flag to indicate to the master device that the slave shift register has been reset.",6,claim 1,0,B
10606794,8,"8. The method of claim 1 , wherein the slave device communicates with the master device via a serial peripheral interface (SPI) communication protocol.",7,claim 1,0,B
10606794,9,"9. The method of claim 1 , wherein the slave shift register is reset using a retriggerable monostable multivibrator.",8,claim 1,0,B
10606794,10,"10. A device, comprising: a shift register; and a timeout monitor, communicatively coupled to the shift register, configured to: monitor a clock signal associated with a bus, wherein the clock signal is used to store, in the shift register, bits of a data communication, and wherein the data communication is received, via the bus, from a master device; detect a first clock pulse of the clock signal; monitor, based on detecting the first clock pulse, the clock signal for a second clock pulse; determine, based on monitoring the clock signal, whether a timeout threshold expires before the second clock pulse is detected or whether the second clock pulse is detected before the timeout threshold is determined to be expired, wherein the timeout threshold is a threshold length of time between two clock pulses; and when the second clock pulse is detected before the timeout threshold is determined to be expired, reset a timeout timer associated with the clock signal, or when the timeout threshold expires before the second clock pulse is detected, reset the shift register to synchronize the shift register with a master shift register of the master device.",9,,0,B
10606794,11,"11. The device of claim 10 , wherein, after the timeout timer is reset based on the second clock pulse being detected before the timeout threshold is determined to be expired, the timeout monitor is further configured to: determine whether the timeout threshold expires before a third clock pulse is detected or whether the third clock pulse is detected before the timeout threshold is determined to be expired; and when the third clock pulse is detected before the timeout threshold is determined to be expired, reset the timeout timer associated with the clock signal, or when the timeout threshold expires before the third clock pulse is detected, reset the shift register to synchronize the shift register with the master shift register of the master device.",10,claim 10,0,B
10606794,12,"12. The device of claim 10 , wherein, when the second clock pulse is detected before the timeout threshold is determined to be expired, the timeout monitor is further configured to: determine that the second clock pulse is associated with a last bit of the data communication based on the shift register being full; write, to a data structure and based on the shift register being full, a value associated with the shift register; and reset the shift register after the value is written to the data structure.",11,claim 10,0,B
10606794,13,"13. The device of claim 10 , wherein, when the timeout threshold expires before the second clock pulse is detected and before the shift register is reset, the timeout monitor is configured to at least one of: send, to the master device and based on a number of bits in the shift register not matching a word length for the data communication, a notification to indicate an error associated with the clock signal; provide a value in the shift register to the master device, wherein the value indicates that the error associated with the clock signal may have occurred when receiving the data communication; or set a flag to indicate, to the master device, that the shift register has been reset.",12,claim 10,0,B
10606794,14,"14. The device of claim 10 , further comprising a sensor element, wherein the bits of the data communication are to cause the device to perform an action in association with the sensor element.",13,claim 10,0,B
10606794,15,"15. The device of claim 10 , wherein the device includes a serial peripheral interface device without a dedicated chip select wire connection to synchronize the shift register with the master shift register.",14,claim 10,0,B
10606794,16,"16. A system that includes a bus and a master device configured to transmit a data communication via the bus, the system comprising: a slave device configured to: monitor a clock signal received from the master device via the bus, wherein the slave device is to store bits of the data communication in a slave shift register based on the clock signal; detect a first clock pulse of the clock signal; monitor, based on detecting the first clock pulse, the clock signal for a second clock pulse; determine, based on monitoring the clock signal, that a timeout threshold has expired before detecting the second clock pulse, wherein the timeout threshold is a threshold length of time between two clock pulses; and reset the slave shift register to synchronize the slave shift register with a master shift register of the master device based on determining that the timeout threshold has expired.",15,,0,B
10606794,17,"17. The system of claim 16 , wherein the first clock pulse comprises at least one of: an erroneous clock pulse of the clock signal, or a clock pulse for a last bit of the data communication.",16,claim 16,0,B
10606794,18,"18. The system of claim 16 , wherein the slave device is further configured to: determine that the first clock pulse is associated with a last bit of the data communication based on the slave shift register being full; write, to a data structure and based on the slave shift register being full, a value associated with the slave shift register; and reset the slave shift register after the value is written to the data structure.",17,claim 16,0,B
10606794,19,"19. The system of claim 16 , wherein the master device and the slave device are communicatively coupled via only the bus and a clock line, wherein the bus is for the data communication and the clock line is for communication of the clock signal.",18,claim 16,0,B
10606794,20,"20. The system of claim 16 , wherein the master device is a sensor device or the slave device is a sensor device.",19,claim 16,0,B
10606795,1,"1. A method, comprising: identifying, by a data storage computing device, a first global recycle queue in a set of global recycle queues based on a buffer priority to store data obtained by the data storage computing device, the buffer priority based on data type, wherein the global recycle queues are arranged within a circular data structure such that a head pointer points to a lowest priority global recycle queue and a position of each global recycle queue within the circular data structure is indicative of a priority level of each global recycle queue; wherein the circular data structure includes an insertion window having a subset of the set of the global recycle queues for randomly accepting buffers of same priority; wherein the head pointer is moved within the circular data structure from lower priority to higher priority, to promote and demote, the set of global recycle queues without evaluating an age of each global recycle queue; inserting, by the data storage computing device, the buffer and metadata associated with the buffer into the first global recycle queue using the insertion window, based on the buffer priority, wherein the metadata includes a thread identifier corresponding to a first thread from a plurality of threads executed by a plurality of processors of the data storage computing device, the first thread associated with the data, and the metadata indicates whether the buffer is eligible for scavenging; determining, by the data storage computing device, that the first global recycle queue has become a lowest priority queue of the set of global recycle queues, based on the head pointer location, and when the buffer is a least recently used buffer in the first global recycle queue; determining, by the data storage computing device, whether the buffer is scavengable, based on the metadata; wherein the buffer is moved to a holding queue, when the buffer is not scavengable, and when the buffer is scavengable, the buffer is moved to a first pre-flush recycle queue of a per-thread recycle queue set of the first thread; moving, by the data storage computing device, the head pointer to a next global recycle queue, when the first global recycle queue is determined to be empty; and scavenging, by the data storage computing device, the buffer from the first pre-flush recycle queue, when the buffer has a lowest priority in the first pre-flush recycle queue, wherein the buffer is scavenged by removing the buffer from the first pre-flush recycle queue to a first flush queue of the per-thread recycle queue set of the first thread, and placing the buffer in a free pool, when the buffer has a lowest priority in the first flush queue.",0,,1,B
10606795,2,"2. The method of claim 1 , wherein the buffer has a lowest priority in the first pre-flush recycle queue when the buffer is least recently used.",1,claim 1,0,B
10606795,3,"3. The method of claim 1 , further comprises: determining, by the data storage computing device, whether the buffer is requested by a victim cache; and removing, by the data storage computing device, the buffer from either the first global recycle queue or the first pre-flush recycle queue, prior to the scavenging, and moving the buffer to the victim cache, when the determining indicates the buffer is requested by the victim cache.",2,claim 1,0,B
10606795,4,"4. The method of claim 1 , wherein prior to the scavenging, the buffer is moved from the holding queue to a victim cache, when the buffer is requested by the victim cache.",3,claim 1,0,B
10606795,5,"5. The method of claim 1 , further comprising: promoting, by the data storage computing device, the buffer to a higher priority in response to a determination that the buffer has been accessed a threshold number of times; wherein to promote the buffer, the first thread takes a lock on a second global recycle queue of a higher priority than the first global recycle queue indicated by a position of the second global recycle queue within the circular data structure.",4,claim 1,0,B
10606795,6,"6. The method of claim 1 , wherein the buffer from the holding queue is released for scavenging when the buffer becomes eligible for scavenging.",5,claim 1,0,B
10606795,7,"7. The method of claim 1 , wherein the per-thread recycle queue set of the first thread includes a once queue with buffers that are expected to be accessed only once and then scheduled for scavenging after being accessed once.",6,claim 1,0,B
10606795,8,"8. A non-transitory computer readable medium having stored thereon instructions comprising executable code, which when executed by a processor, causes the processor to perform a method comprising: identifying a first global recycle queue in a set of global recycle queues based on a buffer priority to store data obtained by a data storage computing device, the buffer priority based on data type, wherein the global recycle queues are arranged within a circular data structure such that a head pointer points to a lowest priority global recycle queue and a position of each global recycle queue within the circular data structure is indicative of a priority level of each global recycle queue; wherein the circular data structure includes an insertion window having a subset of the set of the global recycle queues for randomly accepting buffers of same priority; wherein the head pointer is moved within the circular data structure from lower priority to higher priority, to promote and demote, the set of global recycle queues without evaluating an age of each global recycle queue; inserting the buffer and metadata associated with the buffer into the first global recycle queue using the insertion window, based on the buffer priority, wherein the metadata includes a thread identifier corresponding to a first thread from a plurality of threads executed by a plurality of processors of the data storage computing device, the first thread associated with the data, and the metadata indicates whether the buffer is eligible for scavenging; determining that the first global recycle queue has become a lowest priority queue of the set of global recycle queues, based on the head pointer location, and when the buffer is a least recently used buffer in the first global recycle queue; determining whether the buffer is scavengable, based on the metadata; wherein the buffer is moved to a holding queue, when the buffer is not scavengable; and when the buffer is scavengable, the buffer is moved to a first pre-flush recycle queue of a per-thread recycle queue set of the first thread; moving the head pointer to a next global recycle queue, when the first global recycle queue is determined to be empty; and scavenging the buffer from the first pre-flush recycle queue when the buffer has a lowest priority in the first pre-flush recycle queue, wherein the buffer is scavenged by removing the buffer from the first pre-flush recycle queue to a first flush queue of the per-thread recycle queue set of the first thread, and placing the buffer in a free pool, when the buffer has a lowest priority in the first flush queue.",7,,0,B
10606795,9,"9. The non-transitory computer readable medium of claim 8 , wherein the buffer has a lowest priority in the first pre-flush recycle queue when the buffer is least recently used.",8,claim 8,0,B
10606795,10,"10. The non-transitory computer readable medium of claim 8 , wherein the method further comprising: determining whether the buffer is requested by a victim cache; and removing the buffer from either the first global recycle queue or the first pre-flush recycle queue, prior to the scavenging, and moving the buffer to the victim cache, when the determining indicates the buffer is requested by the victim cache.",9,claim 8,0,B
10606795,11,"11. The non-transitory computer readable medium of claim 8 , wherein prior to the scavenging, the buffer is moved from the holding queue to a victim cache, when the buffer is requested by the victim cache.",10,claim 8,0,B
10606795,12,"12. The non-transitory computer readable medium of claim 8 , wherein the method further comprising: promoting the buffer to a higher priority in response to a determination that the buffer has been accessed a threshold number of times; wherein to promote the buffer, the first thread takes a lock on a second global recycle queue of a higher priority than the first global recycle queue indicated by a position of the second global recycle queue within the circular data structure.",11,claim 8,0,B
10606795,13,"13. The non-transitory computer readable medium of claim 8 , wherein the buffer from the holding queue is released for scavenging when the buffer becomes eligible for scavenging.",12,claim 8,0,B
10606795,14,"14. The non-transitory computer readable medium of claim 8 , wherein the per-thread recycle queue set of the first thread includes a once queue with buffers that are expected to be accessed only once and then scheduled for scavenging after being accessed once.",13,claim 8,0,B
10606795,15,"15. A data storage computing device, comprising a memory containing machine readable medium comprising machine executable code having stored thereon instructions; and a processor coupled to the memory, the processor configured to execute the machine executable code to: identify a first global recycle queue in a set of global recycle queues based on a buffer priority to store data obtained by a data storage computing device, the buffer priority based on data type, wherein the global recycle queues are arranged within a circular data structure such that a head pointer points to a lowest priority global recycle queue and a position of each global recycle queue within the circular data structure is indicative of a priority level of each global recycle queue; wherein the circular data structure includes an insertion window having a subset of the set of the global recycle queues for randomly accepting buffers of same priority; wherein the head pointer is moved within the circular data structure from lower priority to higher priority, to promote and demote, the set of global recycle queues without evaluating an age of each global recycle queue; insert the buffer and metadata associated with the buffer into the first global recycle queue using the insertion window, based on the buffer priority, wherein the metadata includes a thread identifier corresponding to a first thread from a plurality of threads executed by a plurality of processors of the data storage computing device, the first thread associated with the data, and the metadata indicates whether the buffer is eligible for scavenging; determine that the first global recycle queue has become a lowest priority queue of the set of global recycle queues, based on the head pointer location, and when the buffer is a least recently used buffer in the first global recycle queue; determine whether the buffer is scavengable, based on the metadata; wherein the buffer is moved to a holding queue, when the buffer is not scavengable; and when the buffer is scavengable, the buffer is moved to a first pre-flush recycle queue of a per-thread recycle queue set of the first thread; move the head pointer to a next global recycle queue, when the first global recycle queue is determined to be empty; and scavenge the buffer from the first pre-flush recycle queue when the buffer has a lowest priority in the first pre-flush recycle queue, wherein the buffer is scavenged by removing the buffer from the first pre-flush recycle queue to a first flush queue of the per-thread recycle queue set of the first thread, and placing the buffer in a free pool, when the buffer has a lowest priority in the first flush queue.",14,,0,B
10606795,16,"16. The data storage computing device of claim 15 , wherein the buffer has a lowest priority in the first pre-flush recycle queue when the buffer is least recently used.",15,claim 15,0,B
10606795,17,"17. The data storage computing device of claim 15 , wherein the processor further causes the machine executable code to: determine whether the buffer is requested by a victim cache; and remove the buffer from either the first global recycle queue or the first pre-flush recycle queue, prior to the scavenging, and moving the buffer to the victim cache, when the determining indicates the buffer is requested by the victim cache.",16,claim 15,0,B
10606795,18,"18. The data storage computing device of claim 15 , wherein prior to the scavenging, the buffer is moved from the holding queue to a victim cache, when the buffer is requested by the victim cache.",17,claim 15,0,B
10606795,19,"19. The data storage computing device of claim 15 , wherein the processor further causes the machine executable code to: promote the buffer to a higher priority in response to a determination that the buffer has been accessed a threshold number of times; wherein to promote the buffer, the first thread takes a lock on a second global recycle queue of a higher priority than the first global recycle queue indicated by a position of the second global recycle queue within the circular data structure.",18,claim 15,0,B
10606795,20,"20. The data storage computing device of claim 15 , wherein the buffer from the holding queue is released for scavenging when the buffer becomes eligible for scavenging.",19,claim 15,0,B
10606796,1,"1. An on-board network system comprising: a control area network (CAN) that uses a first data frame (CAN-FD) and a second data frame (CAN frame), the CAN having a first bus and a second bus; a plurality of first controllers connected to the first bus; a plurality of second controllers connected to the second bus; and a relay device configured to relay data from the first bus to the second bus or from the second bus to the first bus, the relay device including a central gateway electronic control unit (CGW-ECU), the CGW-ECU having a computer including a processor for executing programs stored in memory thereof, the relay device configured to: detect an error that occurs in the first bus, measure a degree of error occurrence detected by the error detecting unit, and reduce a communication speed and a communication data amount of at least one of the plurality of first controllers from a first communication speed and a first communication data amount to a second communication speed and a second communication data amount, when the degree of error occurrence becomes equal to or larger than a first degree such that a first communication time it takes for data to be transmitted at the first communication speed in the first communication data amount is longer than a second communication time it takes for data to be transmitted at the second communication speed in the second communication data amount, wherein the CAN-FD is used for data communication at the first communication speed and the first data communication amount, wherein the CAN frame is used for data communication at the second communication speed and the second data communication amount, and wherein the CGW-ECU is configured to switch between the CAN-FC and CAN frame by changing a flexible data format value of the CAN-FD and CAN frame.",0,,1,B
10606796,2,"2. The on-board network system according to claim 1 , wherein the CGW-ECU further configured to transmit first data at the second communication speed in the second communication data amount, to said at least one of the plurality of first controllers; and the first controller that has received the first data outputs second data to the first bus at the second communication speed in the second communication data amount.",1,claim 1,0,B
10606796,3,"3. The on-board network system according to claim 1 , wherein the CGW-ECU further configured to reduce the degree of error occurrence in the first bus, according to a degree by which the error is not detected in the first bus; and wherein the CGW-ECU further configured to return the communication speed and the communication data amount of the first controller of which the communication speed and communication data amount have been reduced to the second communication speed and the second communication data amount, to the first communication speed and the first communication data amount, when the degree of error occurrence in the first bus becomes equal to zero.",2,claim 1,0,B
10606796,4,"4. The on-board network system according to claim 3 , wherein the CGW-ECU further configured to transmit third data at the first communication speed in the first communication data amount, to the first controller of which the communication speed and the communication data amount have been reduced to the second communication speed and the second communication data amount, and the first controller that has received the third data outputs fourth data to the first bus at the first communication speed in the first communication data amount.",3,claim 3,0,B
10606796,5,"5. The on-board network system according to claim 1 , wherein when the degree of error occurrence in the first bus becomes equal to or larger than a second degree that is larger than the first degree, the CGW-ECU further configured to reduce the communication speed and the communication data amount of the second controller, from the first communication speed and the first communication data amount to the second communication speed and the second communication data amount, such that the first communication time is longer than the second communication time.",4,claim 1,0,B
10606796,6,"6. The on-board network system according to claim 5 , wherein when the degree of error occurrence in the first bus becomes equal to or larger than the second degree, the CGW-ECU further configured to transmit fifth data to the second controller at the second communication speed in the second communication data amount, and the second controller that has received the fifth data outputs sixth data to the first bus at the second communication speed in the second communication data amount.",5,claim 5,0,B
10606796,7,"7. The on-board network system according to claim 5 , the CGW-ECU further configured to reduce the degree of error occurrence in the first bus, according to a degree by which the error is not detected in the first bus, and the CGW-ECU further configured to return the communication speed and the communication data amount of the second controller from the second communication speed and the second communication data amount to the first communication speed and the first communication data amount, when the degree of error occurrence in the first bus becomes equal to zero.",6,claim 5,0,B
10606796,8,"8. The on-board network system according to claim 7 , wherein when the degree of error occurrence in the first bus becomes equal to zero, the CGW-ECU further configured to transmit seventh data to the second controller at the first communication speed in the first communication data amount, and the second controller that has received the seventh data outputs eighth data to the first bus at the first communication speed in the first communication data amount.",7,claim 7,0,B
10606796,9,"9. The on-board network system according to claim 1 , wherein when the degree of error occurrence in the second bus becomes equal to or larger than a second degree that is larger than the first degree, the CGW-ECU further configured to reduce the communication speed and the communication data amount of the second controller from the first communication speed and the first communication data amount to the second communication speed and the second communication data amount, such that the first communication time is longer than the second communication time.",8,claim 1,0,B
10606796,10,"10. The on-board network system according to claim 9 , wherein when the degree of error occurrence in the second bus becomes equal to or larger than the second degree, the CGW-ECU further configured to transmit fifth data to the second controller at the second communication speed in the second communication data amount, and the second controller that has received the fifth data outputs sixth data to the second bus at the second communication speed in the second communication data amount.",9,claim 9,0,B
10606796,11,"11. The on-board network system according to claim 9 , wherein the CGW-ECU further configured to reduce the degree of error occurrence in the second bus, according to a degree by which the error is not detected in the second bus; and when the degree of error occurrence in the second bus becomes equal to zero, the communication controller returns the CGW-ECU further configured to the communication speed and the communication data amount of the second controller, from the second communication speed and the second communication data amount to the first communication speed and the first communication data amount.",10,claim 9,0,B
10606796,12,"12. The on-board network system according to claim 11 , wherein when the degree of error occurrence in the second bus becomes equal to zero, the CGW-ECU further configured to transmit seventh data to the second controller at the first communication speed in the first communication data amount, and the second controller that has received the seventh data outputs eighth data to the second bus at the first communication speed in the first communication data amount.",11,claim 11,0,B
10606796,13,"13. The on-board network system according to claim 9 , wherein the relay device being configured to connect the first bus and the second bus in parallel with each other.",12,claim 9,0,B
10606796,14,"14. The on-board network system according to claim 1 , wherein the CGW-ECU further configured to reduce the first communication data amount from approximately 32 bytes to the second communication data amount of approximately 8 bytes.",13,claim 1,0,B
10606796,15,"15. The on-board network system according to claim 1 , wherein the CGW-ECU further configured to reduce the first communication speed from approximately 2 Mbps to the second communication speed of approximately 500 kbps.",14,claim 1,0,B
10606796,16,"16. A communication control method of controlling communications in an on-board network system including a control area network (CAN) that uses a first data frame (CAN-FD) and a second data frame (CAN-frame), the CAN having a first and a second bus, a plurality of first controllers connected to the first bus, a plurality of second controllers connected to the second bus, and a relay device configured to relay data from the first bus to the second bus or from the second bus to the first bus, the relay device including a central gateway electronic control unit (CGW-ECU), the CGW-ECU having a computer including a processor for executing programs stored in memory thereof, the method comprising the steps of: detecting an error that occurs in the first bus; measuring a degree of error occurrence detected; and reducing a communication speed and a communication data amount of at least one of the plurality of first controllers, from a first communication speed and a first communication data amount to a second communication speed and a second communication data amount, when the degree of error occurrence becomes equal to or larger than a first degree, wherein a first communication time it takes for data to be transmitted at the first communication speed in the first communication data amount is longer than a second communication time it takes for data to be transmitted at the second communication speed in the second communication data amount, wherein the CAN-FD is used for data communication at the first communication speed and the first data communication amount, wherein the CAN frame is used for data communication at the second communication speed and the second data communication amount, and wherein the CGW-ECU is configured to switch between the CAN-FC and CAN frame by changing a flexible data format value of the CAN-FD and CAN frame.",15,,0,B
10606797,1,"1. A method of implementing a token-controlled process within an integrated circuit, the method comprising: at a primary data buffer of an integrated circuit, collecting input data from one or more input data sources; implementing a data processing pipeline, wherein the data processing pipeline is defined by at least: one or more matrix multiply accelerators; one or more local data buffers; implementing by the integrated circuit one or more flow scoreboard modules, wherein implementing the one or more flow scoreboard modules includes: (i) implementing a token-count table that tracks one or more tokens within the integrated circuit; (ii) implementing a program control table that monitors one or more program execution conditions based on the one or more tokens; generating state data for each of the one or more of the local data buffer and each of the one or more matrix multiply accelerators, wherein the state data indicates a level of utilization of each of the one or more of the local data buffer and each of the one or more matrix multiply accelerators; generating by the integrated circuit one or more tokens based on the state data for each of the one or more local data buffers and each of the one or more matrix multiply accelerators; tracking the one or more tokens generated by the integrated circuit; and (a) updating an internal state of the token count table based on the tracking or (b) updating an internal state of the program control table based on the tracking; and automatically propagating one or more portions of the input data from the primary data buffer along the data processing pipeline based on the implementation of the token count table and the implementation of the program control table.",0,,0,B
10606797,2,"2. The method according to claim 1 , further comprising: automatically executing one or more programs or one or more applications at one or more of the one or more matrix multiply accelerators of the data processing pipeline based on a state of the program control table.",1,claim 1,0,B
10606797,3,"3. The method according to claim 1 , wherein the token count table: is indexed according to a plurality of distinct token identifiers; includes an entry for each of the plurality of distinct token identifiers that stores a running count of a number of one distinct token having one of the plurality of distinct token identifiers; and each entry stores software-programmable configuration bits that set a respective counter trigger condition.",2,claim 1,0,B
10606797,4,"4. The method according to claim 3 , wherein the token count table is configured with at least one pointer that points to an entry in the program control table when a counter trigger condition is satisfied based on a count value for a distinct token within the token control table.",3,claim 3,0,B
10606797,5,"5. The method according to claim 1 , wherein the program control table: is indexed according to a plurality of distinct program identifiers of a plurality of distinct programs; each entry of the program table includes a counter that stores a counter value for one or more distinct tokens associated with one or more distinct token identifiers; and each entry of the program table stores a software-programmable configuration bits that set a program execution condition based on the counter value for the one or more distinct tokens.",4,claim 1,0,B
10606797,6,"6. The method according to claim 1 , wherein when an update to a token count of the token count table results in a token counter condition transitioning from not satisfied to satisfied, a corresponding entry in the program control table is accessed and a count of a counter value of the program control table is incremented or decremented.",5,claim 1,0,B
10606797,7,"7. The method according to claim 6 , wherein when an update to the program table entry counter value causes the program trigger condition to transition from not satisfied to satisfied, a notification interface is updated to reflect the transition.",6,claim 6,0,B
10606797,8,"8. The method according to claim 1 , further comprising: identifying a state of the at least one local data buffer; generating one or more tokens based on the identified state; and triggering a notification to an upstream component or a downstream component within the data processing pipeline of the integrated circuit based on the one or more tokens.",7,claim 1,0,B
10606797,9,"9. The method according to claim 8 , further comprising: in response to the notification, automatically loading one or more portions of the input data to the at least one local data buffer, or automatically loading the one or more portions of the input data from the at least one local data buffer into one of the one or more matrix multiply accelerators.",8,claim 8,0,B
10606797,10,"10. The method according to claim 1 , wherein the integrated circuit comprises: a plurality of computing tiles, wherein each of the plurality of computing tiles includes: a matrix multiply accelerator of the one or more matrix multiply accelerators, a computing processing circuit; and a flow scoreboard module of the one or more flow scoreboard modules; a local data buffer of the one or more local data buffers, wherein the plurality of computing tiles together define an intelligence processing array; a network on chip system comprising: a plurality of network-on-chip routers establishing a communication network between each of the plurality of computing tiles, wherein each network-on-chip router is in operable communication connection with at least one of the plurality of computing tiles and a distinct network-on-chip router of the plurality of network-on-chip routers; and the main buffer that is arranged remotely from each of the plurality of computing tiles, wherein the main buffer stores raw input data and/or data received from an upstream process or upstream device.",9,claim 1,0,B
10606797,11,"11. A method of implementing a token-controlled process within an integrated circuit, the method comprising: at a primary data buffer of an integrated circuit, collecting input data from one or more input data sources; implementing a data processing pipeline, wherein the data processing pipeline is defined by at least: one or more matrix multiply accelerators; one or more local data buffers; implementing by the integrated circuit one or more flow scoreboard modules, wherein implementing the one or more flow scoreboard modules includes: (i) implementing a token-count table that tracks one or more tokens within the integrated circuit; (ii) implementing a program control table that monitors one or more program execution conditions based on the one or more tokens; automatically propagating one or more portions of the input data from the primary data buffer along the data processing pipeline based on the implementation of the token count table and the implementation of the program control table, wherein: when an update to a token count of the token count table results in a token counter condition transitioning from not satisfied to satisfied, a corresponding entry in the program control table is accessed and a count of a counter value of the program control table is incremented or decremented, and when an update to the program table entry counter value causes the program trigger condition to transition from not satisfied to satisfied, a notification interface is updated to reflect the transition.",10,,1,B
10606797,12,"12. A method of implementing a token-controlled process within an integrated circuit, the method comprising: at a primary data buffer of an integrated circuit, collecting input data from one or more input data sources; implementing a data processing pipeline, wherein the data processing pipeline is defined by at least: one or more matrix multiply accelerators; one or more local data buffers; implementing by the integrated circuit one or more flow scoreboard modules, wherein implementing the one or more flow scoreboard modules includes: (i) implementing a token-count table that tracks one or more tokens within the integrated circuit; (ii) implementing a program control table that monitors one or more program execution conditions based on the one or more tokens; identifying a state of the at least one local data buffer; generating one or more tokens based on the identified state; triggering a notification to an upstream component or a downstream component within the data processing pipeline of the integrated circuit based on the one or more tokens; in response to the notification: (a) automatically loading one or more portions of the input data to the at least one local data buffer, or (b) automatically loading the one or more portions of the input data from the at least one local data buffer into one of the one or more matrix multiply accelerators; automatically propagating one or more portions of the input data from the primary data buffer along the data processing pipeline based on the implementation of the token count table and the implementation of the program control table.",11,,0,B
10606798,1,"1. A method for configuring an address table, the method being applied to a field-programmable gate array (FPGA), and the method comprising: obtaining a key, the key being generated based on a first packet of a data stream, a length of the key being equal to a key bit width of the FPGA, the FPGA comprising k storage blocks, and the k being greater than or equal to two; obtaining an index number corresponding to the key, the index number being used to search for a forwarding entry of the data stream; dividing the key into k sub-keys, each of the k sub-keys corresponding to one of the k storage blocks; determining an address entry of each of the k sub-keys in a corresponding storage block; and writing a storage address to the address entry based on the index number.",0,,1,B
10606798,2,"2. The method of claim 1 , wherein before obtaining the key, the method further comprises: obtaining the key bit width of the FPGA; obtaining an address bit width of the FPGA, wherein the address bit width is used to determine a maximum quantity of entries of an address table in each storage block of the FPGA; and determining the k storage blocks based on the key bit width and the address bit width.",1,claim 1,0,B
10606798,3,"3. The method of claim 2 , wherein determining the k storage blocks based on the key bit width and the address bit width comprises: determining a storage block quantity k corresponding to the key bit width and the address bit width; and determining the k storage blocks from a storage area of the FPGA based on the address bit width and the storage block quantity k.",2,claim 2,0,B
10606798,4,"4. The method of claim 1 , wherein writing the storage address to the address entry based on the index number comprises: setting a bit corresponding to the index number in the address entry to one; and keeping values of other bits in the address entry unchanged.",3,claim 1,0,B
10606798,5,"5. The method of claim 1 , further comprising: receiving a search request, wherein the search request is generated based on a second packet of the data stream, and wherein the search request comprises the key; dividing the key into the k sub-keys; reading, using each of the k sub-keys as an address, a storage address in an address entry in a storage block corresponding to a sub-key to obtain k storage addresses; performing an AND operation on the k storage addresses to obtain a target storage address; and generating the index number based on the target storage address.",4,claim 1,0,B
10606798,6,"6. A field-programmable gate array (FPGA) comprising: k storage blocks, wherein k is greater than or equal to two; and a calculation circuit coupled to the k storage blocks and configured to: obtain a key, wherein the key is generated based on a first packet of a data stream, and wherein a length of the key is equal to a key bit width of the FPGA; obtain an index number corresponding to the key, wherein the index number is used to search for a forwarding entry of the data stream; divide the key into k sub-keys, wherein each of the k sub-keys corresponds to one of the k storage blocks; determine an address entry of each of the k sub-keys in a corresponding storage block; and write a storage address to the address entry based on the index number, wherein each of the k storage blocks being configured to store the storage address written by the calculation circuit.",5,,0,B
10606798,7,"7. The FPGA of claim 6 , wherein before obtaining the key, the calculation circuit is further configured to: obtain the key bit width; obtain an address bit width of the FPGA, wherein the address bit width is used to determine a maximum quantity of entries of an address table in each storage block of the FPGA; and determine the k storage blocks based on the key bit width and the address bit width.",6,claim 6,0,B
10606798,8,"8. The FPGA of claim 7 , wherein when determining the k storage blocks, the calculation circuit is configured to: determine a storage block quantity k corresponding to the key bit width and the address bit width; and determine the k storage blocks from a storage area of the FPGA based on the address bit width and the storage block quantity k.",7,claim 7,0,B
10606798,9,"9. The FPGA of claim 8 , wherein when writing the storage address to the address entry based on the index number, the calculation circuit is configured to: determine the address entry of each of the k sub-keys in the corresponding storage block; set a bit corresponding to the index number in the address entry to one; and keep values of other bits in the address entry unchanged.",8,claim 8,0,B
10606798,10,"10. The FPGA of claim 9 , wherein the calculation circuit is further configured to: receive a search request, wherein the search request being generated based on a second packet of the data stream, and wherein the search request comprises the key; divide the key into the k sub-keys; read, using each of the k sub-keys as an address, a storage address in an address entry in a storage block corresponding to a sub-key to obtain k storage addresses; perform an AND operation on the k storage addresses to obtain a target storage address; and generate the index number based on the target storage address.",9,claim 9,0,B
10606798,11,"11. The FPGA of claim 6 , wherein when writing the storage address to the address entry based on the index number, the calculation circuit is configured to: determine the address entry of each of the k sub-keys in the corresponding storage block; set a bit corresponding to the index number in the address entry to one; and keep values of other bits in the address entry unchanged.",10,claim 6,0,B
10606798,12,"12. The FPGA of claim 6 , wherein the calculation circuit is further configured to: receive a search request, wherein the search request is generated based on a second packet of the data stream, and wherein the search request comprises the key; divide the key into the k sub-keys; read, using each of the k sub-keys as an address, a storage address in an address entry in a storage block corresponding to a sub-key to obtain k storage addresses; perform an AND operation on the k storage addresses to obtain a target storage address; and generate the index number based on the target storage address.",11,claim 6,0,B
10606798,13,"13. A network device comprising: a field-programmable gate array (FPGA) comprising k storage blocks, wherein k is greater than or equal to two; and a processor coupled to the FPGA and configured to: receive a first packet of a data stream; generate a key and an index number based on the first packet, wherein a length of the key is equal to a key bit width of the FPGA, and wherein the index number is used to search for a forwarding entry of the data stream; and send the key and the index number to the FPGA, wherein the FPGA is configured to: receive the key and the index number; divide the key into k sub-keys, wherein each of the k sub-keys corresponds to one of the k storage blocks; determine an address entry of each of the k sub-keys in a corresponding storage block; and write a storage address to the address entry based on the index number.",12,,0,B
10606798,14,"14. The network device of claim 13 , wherein the FPGA is further configured to: obtain the key bit width of the FPGA; obtain an address bit width of the FPGA, wherein the address bit width is used to determine a maximum quantity of entries of an address table in each storage block of the FPGA; and determine the k storage blocks based on the key bit width and the address bit width.",13,claim 13,0,B
10606798,15,"15. The network device of claim 14 , wherein when determining the k storage blocks, the FPGA is further configured to: determine a storage block quantity k corresponding to the key bit width and the address bit width; and determine the k storage blocks from a storage area of the FPGA based on the address bit width and the storage block quantity k.",14,claim 14,0,B
10606798,16,"16. The network device of claim 15 , wherein when writing the storage address to the address entry based on the index number, the FPGA is further configured to: determine the address entry of each of the k sub-keys in the corresponding storage block; set a bit corresponding to the index number in the address entry to one; and keep values of other bits in the address entry unchanged.",15,claim 15,0,B
10606798,17,"17. The network device of claim 16 , wherein when generating the index number based on the first packet, the processor is further configured to: generate the forwarding entry for the data stream based on the first packet; write the forwarding entry to a forwarding table; and set a sequence number of the forwarding entry in the forwarding table as the index number.",16,claim 16,0,B
10606798,18,"18. The network device of claim 17 , wherein the processor is further configured to: receive a second packet of the data stream, wherein the second packet is a subsequent packet of the first packet; generate the key based on the second packet; and send a search request to the FPGA, the search request comprising the key, and wherein the FPGA is further configured to: receive the search request; divide the key into the k sub-keys; read, using each of the k sub-keys as an address, a storage address in an address entry in a storage block corresponding to a sub-key to obtain k storage addresses; perform an AND operation on the k storage addresses to obtain a target storage address; and generate the index number based on the target storage address.",17,claim 17,0,B
10606798,19,"19. The network device of claim 18 , wherein the FPGA is further configured to send the index number to the processor, and wherein the processor is further configured to: receive the index number; obtain the forwarding entry based on the index number; and forward the second packet based on the forwarding entry.",18,claim 18,0,B
10606798,20,"20. The network device of claim 13 , wherein the processor is further configured to: receive a second packet of the data stream, the second packet being a subsequent packet of the first packet; generate the key based on the second packet; and send a search request to the FPGA, wherein the search request comprises the key, and wherein the FPGA is further configured to: receive the search request; divide the key into the k sub-keys; read, using each of the k sub-keys as an address, a storage address in an address entry in a storage block corresponding to a sub-key to obtain k storage addresses; perform an AND operation on the k storage addresses to obtain a target storage address; and generate the index number based on the target storage address.",19,claim 13,0,B
10606799,1,"1. A computer implemented method for transferring data between computer language layers, the method comprising: receiving a first data bridge structure in a first data format from a first computer language layer that includes a first set of computer code, wherein the first data bridge structure includes a number of character fields including a request field indicating a function to be performed for the first set of computer code by a second computer language layer that includes a second set of computer code, wherein the first and second sets of computer code use different computer languages; transforming the first data bridge structure from the first data format to a second data format that is being used by the second set of computer code, wherein the transforming includes transforming data in the character fields from a defined first character set to a defined second character set; and transferring data between the first and second computer language layers by sending, to the second set of computer code, the first data bridge structure in the second data format.",0,,1,B
10606799,2,"2. The method of claim 1 , wherein the first data bridge structure further comprises numeric fields.",1,claim 1,0,B
10606799,3,"3. The method of claim 2 , wherein the transforming further comprises transforming the numeric fields of the first data bridge structure to a different endian state.",2,claim 2,0,B
10606799,4,"4. The method of claim 1 , wherein the first data bridge structure includes: an argument field comprising characters designating arguments to the function indicated by the request field.",3,claim 1,0,B
10606799,5,"5. The method of claim 1 , wherein the first data bridge structure comprises: a character buffer to transfer character data between the first set of computer code and the second set of computer code; and a data buffer to transfer computer data between the first set of computer code and the second set of computer code.",4,claim 1,0,B
10606799,6,"6. The method of claim 5 , further comprising: placing a boundary data pattern adjacent to the character buffer of the first data bridge structure; and verifying that the boundary data pattern is adjacent to the character buffer of a second data bridge structure that is received from the second set of computer code.",5,claim 5,0,B
10606799,7,"7. The method of claim 5 , further comprising: placing a boundary data pattern adjacent to the data buffer of the first data bridge structure that is received from the first set of computer code; and verifying that the boundary data pattern is adjacent to the data buffer of a second data bridge structure that is received from the second set of computer code.",6,claim 5,0,B
10606799,8,"8. The method of claim 1 , further comprising: accepting a second data bridge structure in a second data format from the second set of computer code; converting the second data bridge structure from the second data format to the first data format; and communicating the second data bridge structure in the first data format to the first set of computer code.",7,claim 1,0,B
10606799,9,"9. The method of claim 8 , wherein the first data bridge structure and the second data bridge structure occupy the same memory location.",8,claim 8,0,B
10606799,10,"10. The method of claim 1 , wherein transforming the first data bridge structure from the first data format to the second data format comprises transforming at least one of the request field, an argument field, and a character buffer from a first character set to a second character set.",9,claim 1,0,B
10606799,11,"11. A system for transferring data between a first computer language layer and a second computer language layer, the system comprising: a processor; memory communicatively connected to the processor; and a data communication system comprising: a receiving module to receive a first data bridge structure in a first data format from a first computer language layer that includes a first set of computer code, wherein the first data bridge structure includes a number of character fields including a request field indicating a function to be performed for the first set of computer code by a second computer language layer that includes a second set of computer code, wherein the first and second sets of computer code use different computer languages; a transforming module to transform the first data bridge structure from the first data format to a second data format that is being used by the second set of computer code, wherein the transforming includes comprising transforming data in the character fields from a defined first character set to a defined second character set; and a transferring module to transfer data between the first and second computer language layers by sending, to the second set of computer code, the first data bridge structure in the second data format.",10,,0,B
10606799,12,"12. The system of claim 11 , wherein the first data bridge structure further comprises numeric fields.",11,claim 11,0,B
10606799,13,"13. The system of claim 12 , wherein the transforming module is to transform the numeric fields of the first data bridge structure to a different endian state.",12,claim 12,0,B
10606799,14,"14. The system of claim 11 , wherein the first data bridge structure includes: an argument field comprising characters designating arguments to the function indicated by the request field.",13,claim 11,0,B
10606799,15,"15. The system of claim 11 , wherein the first data bridge structure comprises: a character buffer to transfer character data between the first set of computer code and the second set of computer code; and a data buffer to transfer computer data between the first set of computer code and the second set of computer code.",14,claim 11,0,B
10606799,16,"16. The system of claim 15 , further comprising: a placing module to place a boundary data pattern adjacent to the character buffer of the first data bridge structure; and a verifying module to verify that the boundary data pattern is adjacent to the character buffer of a second data bridge structure that is received from the second set of computer code.",15,claim 15,0,B
10606799,17,"17. The system of claim 15 , further comprising: a placing module to place a boundary data pattern adjacent to the data buffer of the first data bridge structure that is received from the first set of computer code; and a verifying module to verify that the boundary data pattern is adjacent to the data buffer of a second data bridge structure that is received from the second set of computer code.",16,claim 15,0,B
10606799,18,"18. A computer implemented method for transferring data between computer language layers, the method comprising: receiving data in different formats from a plurality of different modules of first computer language layer that includes a first set of computer code; combining the data received from the different modules in a first data bridge structure corresponding to the first computer language layer, wherein the first data bridge structure includes a request field indicating a function to be performed for the first set of computer code by a second computer language layer that includes a second set of computer code, wherein the first and second sets of computer code use different computer languages; transforming the first data bridge structure from a first data format to a second data format that is being used by the second set of computer code; and transferring data between the first and second computer language layers by sending, to the second set of computer code, the first data bridge structure in the second data format.",17,,0,B
10606799,19,"19. The method of claim 18 , wherein the first data bridge structure includes: an argument field comprising characters designating arguments to the function indicated by the request field.",18,claim 18,0,B
10606799,20,"20. The method of claim 18 , wherein the first data bridge structure comprises: a character buffer to transfer character data between computer code and the second set of computer code; and a data buffer to transfer computer data between the first set of computer code using the first computer language layer and the second set of computer code.",19,claim 18,0,B
10606800,1,"1. A computer-implemented method for performing operations on a layered filesystem, comprising: receiving a policy for the layered filesystem, wherein system data critical to execution of a virtual computing environment is stored in at least one layer and user-specific data associated with user changes to the virtual computing environment is stored in at least one other layer; and receiving an input/output (I/O) operation involving a file, wherein at least two different versions of the file having different contents exist on two or more layers of the layered filesystem, wherein the at least two different versions of the file are associated with the same user; wherein the policy is used to maintain separation between the system data and user-specific data in the virtual computer environment.",0,,1,B
10606800,2,"2. The computer-implemented method of claim 1 , wherein the policy comprises the set of layer assignments, and wherein said directing comprises determining a layer assignment that matches the I/O operation.",1,claim 1,0,B
10606800,3,"3. The computer-implemented method of claim 2 , wherein said determining involves matching a path specified in the set of layer assignments with a path specified in the I/O operation.",2,claim 2,0,B
10606800,4,"4. The computer-implemented method of claim 2 , wherein said determining involves matching a filename extension specified in the set of layer assignments with a filename extension specified in the I/O operation.",3,claim 2,0,B
10606800,5,"5. The computer-implemented method of claim 2 , wherein said determining involves matching a registry key specified in the set of layer assignments with a registry key specified in the I/O operation.",4,claim 2,0,B
10606800,6,"6. The computer-implemented method of claim 2 , wherein if no layer assignment matches the I/O operation, said directing comprises directing the I/O operation to a default layer.",5,claim 2,0,B
10606800,7,"7. A non-transitory computer-readable storage medium storing instructions that, when executed by a computer, cause the computer to perform a method for performing operations on a layered filesystem, the method comprising: receiving a policy for the layered filesystem, wherein system data critical to execution of a virtual computing environment is stored in at least one layer and user-specific data associated with user changes to the virtual computing environment is stored in at least one other layer; and receiving an input/output (I/O) operation involving a file, wherein at least two different versions of the file having different contents exist on two or more layers of the layered filesystem, wherein the at least two different versions of the file are associated with the same user; wherein the policy is used to maintain separation between the system data and the user-specific data in the virtual computer environment.",6,,0,B
10606800,8,"8. The non-transitory computer-readable storage medium of claim 7 , wherein the policy comprises the set of layer assignments, and wherein said directing comprises determining a layer assignment that matches the I/O operation.",7,claim 7,0,B
10606800,9,"9. The non-transitory computer-readable storage medium of claim 8 , wherein said determining involves matching a path specified in the set of layer assignments with a path specified in the I/O operation.",8,claim 8,0,B
10606800,10,"10. The non-transitory computer-readable storage medium of claim 8 , wherein said determining involves matching a filename extension specified in the set of layer assignments with a filename extension specified in the I/O operation.",9,claim 8,0,B
10606800,11,"11. The non-transitory computer-readable storage medium of claim 8 , wherein said determining involves matching a registry key specified in the set of layer assignments with a registry key specified in the I/O operation.",10,claim 8,0,B
10606800,12,"12. The non-transitory computer-readable storage medium of claim 8 , wherein if no layer assignment matches the I/O operation, said directing comprises directing the I/O operation to a default layer.",11,claim 8,0,B
10606800,13,"13. A computer system, comprising: a processor; and a memory storing instructions that, when executed by the processor, cause the computer system to: receive a policy for the layered filesystem, wherein system data critical to execution of a virtual computing environment is stored in at least one layer and user-specific data associated with user changes to the virtual computing environment is stored in at least one other layer; and receive an input/output (I/O) operation involving a file, wherein at least two different versions of the file have different contents exist on two or more layers of the layered filesystem, wherein the at least two different versions of the file are associated with the same user; wherein the policy is used to maintain separation between the system data and the user-specific data in the virtual computer environment.",12,,0,B
10606800,14,"14. The computer system of claim 13 , wherein the policy comprises the set of layer assignments, and wherein said computer system determines a layer assignment that matches the I/O operation.",13,claim 13,0,B
10606800,15,"15. The computer system of claim 14 , wherein said determines involves a match of a path specified in the set of layer assignments with a path specified in the I/O operation.",14,claim 14,0,B
10606800,16,"16. The computer system of claim 14 , wherein said determines involves a match of a filename extension specified in the set of layer assignments with a filename extension specified in the I/O operation.",15,claim 14,0,B
10606800,17,"17. The computer system of claim 14 , wherein said determines involves a match of a registry key specified in the set of layer assignments with a registry key specified in the I/O operation.",16,claim 14,0,B
10606800,18,"18. The computer system of claim 14 , wherein if no layer assignment matches the I/O operation, said computer system directs the I/O operation to a default layer.",17,claim 14,0,B
10606800,19,"19. A computer-implemented method for performing operations on a layered registry system, comprising: receiving a policy for the layered registry system, wherein the policy comprises a set of layer assignments, wherein system data critical to execution of a virtual computing environment is stored in at least one layer and user-specific data associated with user changes to the virtual computing environment is stored in at least one other layer; receiving an input/output (I/O) operation that specifies a registry key, wherein at least two different versions of the registry key having different contents exist on two or more layers of the layered registry system, wherein the at least two different versions of the registry key are associated with the same user; and determining a layer assignment that matches the I/O operation, wherein said determining involves matching a registry key specified in the set of layer assignments with the registry key specified in the I/O operation; wherein the policy is used to maintain separation between system data and the user-specific data in the virtual computer environment.",18,,0,B
10606800,20,"20. The computer-implemented method of claim 19 further comprising: generating another I/O operation based on the received I/O operation; directing the generated I/O operation to a layer in the layered filesystem, wherein the received I/O operation and the generated I/O operation are different; and temporarily disabling at least a layer in the layered filesystem, thereby facilitating management of the virtual computing environment, wherein each layer in the layered filesystem comprises at least a component of the virtual computing environment.",19,claim 19,0,B
10606801,1,"1. A method of requesting information from a server, the method being implemented by one or more processors configured to execute instructions, which, when executed, cause the one or more processors to: send, by a client to a server, a hypertext transfer protocol (HTTP) GET request to retrieve at least a portion of at least one derived data file, wherein the at least one derived data file is dynamically generated by the server in response to the request using a data file virtualization policy and at least a portion of a data file, the data file virtualization policy and the data file being stored in a storage accessible by the server, and wherein the dynamic generation comprises an aligned unbuffered direct read operation from the stored data file of a data size that is aligned to an integer multiple of the storage's block size; and receive, by the client from the server, at least the portion of the at least one derived data file.",0,,1,B
10606801,2,"2. The method according to claim 1 , wherein the stored data file is stored in the storage among one or more other data files, the stored data file and the one or more other data files being of a same type, and wherein the at least one derived data file is not stored in the storage.",1,claim 1,0,B
10606801,3,"3. The method according to claim 2 , wherein the data file virtualization policy is associated in a one-to-many relationship with the stored data file and the one or more other data files.",2,claim 2,0,B
10606801,4,"4. The method according to claim 1 , wherein the one or more processors are further caused to: send, by the client to the server, a request for a list of supported derived data types and a list of supported parameters for each of the supported derived data types, wherein the parameters allow a client to control an output of the at least one derived data file; receive, by the client from the server, the list of supported parameters; and send, by the client, an intent to request data of at least a subset of the supported derived data types.",3,claim 1,0,B
10606801,5,"5. The method according to claim 1 , wherein the data file virtualization policy comprises: a name of the stored data file, a data type of the stored data file, a Boolean flag set to either True or False, True indicating an intent of the client to request for derived data, and a list of derived data types that the client intends to retrieve.",4,claim 1,0,B
10606801,6,"6. The method according to claim 5 , wherein the at least one derived data file comprises a plurality of dynamically generated derived data files, a number of the plurality of derived data files being based on the intent of the client to retrieve them.",5,claim 5,0,B
10606801,7,"7. The method according to claim 1 , wherein the stored data file comprises Wide-Area Motion Imagery (WAMI) data, a type of the stored data file being a WAMI Frame.",6,claim 1,0,B
10606801,8,"8. The method according to claim 1 , wherein the one or more processors are further caused to: send, by the client to the server, a request for a list of supported derived data types; receive, by the client, the list of supported derived data types; and generate, by the client, the data file virtualization policy using the list of supported derived data types.",7,claim 1,0,B
10606801,9,"9. The method according to claim 1 , wherein the at least one derived data file is listed in a directory listing generated by the server, and wherein the directory listing is accessible to the client such that the at least one derived data file is presented to the client as if the at least one derived data file is stored in the storage.",8,claim 1,0,B
10606801,10,"10. The method according to claim 9 , wherein the one or more processors are further caused to: send, by the client to the server, an HTTP 1.1 WebDAV PROPFIND request for the directory listing.",9,claim 9,0,B
10606801,11,"11. A system, comprising: a client computer system comprising one or more processors and a network connection to a server computer system, the client computer system being configured to: send, to a server computer system, a hypertext transfer protocol (HTTP) GET request to retrieve at least a portion of at least one derived data file, wherein the at least one derived data file is dynamically generated by the server computer system in response to the request using a data file virtualization policy and at least a portion of a data file, the data file virtualization policy and the data file being stored in a storage accessible by the server computer system, and wherein the dynamic generation comprises an aligned unbuffered direct read operation from the stored data file of a data size that is aligned to an integer multiple of the storage's block size; and receive, from the server computer system, at least the portion of the at least one derived data file.",10,,0,B
10606801,12,"12. The system according to claim 11 , wherein the stored data file is stored in the storage among one or more other data files, the stored data file and the one or more other data files being of a same type, and wherein the at least one derived data file is not stored in the storage.",11,claim 11,0,B
10606801,13,"13. The system according to claim 12 , wherein the data file virtualization policy is associated in a one-to-many relationship with the stored data file and the one or more other data files.",12,claim 12,0,B
10606801,14,"14. The system according to claim 11 , wherein the client computer system is further configured to: send, to the server computer system, a request for a list of supported derived data types and a list of supported parameters for each of the supported derived data types, wherein the parameters allow a client to control an output of the at least one derived data file; receive, from the server computer system, the list of supported parameters; and send an intent to request data of at least a subset of the supported derived data types.",13,claim 11,0,B
10606801,15,"15. The system according to claim 11 , wherein the data file virtualization policy comprises: a name of the stored data file, a data type of the stored data file, a Boolean flag set to either True or False, True indicating an intent of the client computer system to request for derived data, and a list of derived data types that the client computer system intends to retrieve.",14,claim 11,0,B
10606801,16,"16. The system according to claim 15 , wherein the at least one derived data file comprises a plurality of dynamically generated derived data files, a number of the plurality of derived data files being based on the intent of the client computer system to retrieve them.",15,claim 15,0,B
10606801,17,"17. The system according to claim 11 , wherein the stored data file comprises Wide-Area Motion Imagery (WAMI) data, a type of the stored data file being a WAMI Frame.",16,claim 11,0,B
10606801,18,"18. The system according to claim 11 , wherein the client computer system is further configured to: send, to the server computer system, a request for a list of supported derived data types; receive the list of supported derived data types; and generate the data file virtualization policy using the list of supported derived data types.",17,claim 11,0,B
10606801,19,"19. The system according to claim 11 , wherein the at least one derived data file is listed in a directory listing generated by the server computer system, and wherein the directory listing is accessible to the client computer system such that the at least one derived data file is presented to the client computer system as if the at least one derived data file is stored in the storage.",18,claim 11,0,B
10606801,20,"20. The system according to claim 19 , wherein the client computer system is further configured to: send, to the server computer system, an HTTP 1.1 WebDAV PROPFIND request for the directory listing.",19,claim 19,0,B
10606802,1,"1. A computer-implemented method, comprising: intercepting one or more updates made to a catalog data set, where: each of the one or more updates includes a system management facility (SMF) record, and the one or more updates are intercepted utilizing a program hook that retrieves the one or more updates from an SMF Exit routine; storing the one or more updates sequentially within an update buffer; retrieving the one or more updates from the update buffer, including sequentially reading the one or more updates from the update buffer; sequentially applying the one or more updates to a backup catalog data set, the backup catalog data set including a logically mirrored copy of a catalog data set; identifying a request to replace the catalog data set; and replacing the catalog data set with the backup catalog data set, in response to the request including: scanning the backup catalog data set to confirm an integrity of the backup catalog data set, in response to a confirmation of the integrity of the backup catalog data set, modifying one or more control blocks within a catalog address space of a mainframe computing system to change references from the catalog data set to the backup catalog data set; wherein replacing the catalog data set with the backup catalog data set utilizes a dynamic device reconfiguration (DDR) Swap interface for mirrored volume switching to direct updates to the backup catalog data set.",0,,1,B
10606802,2,"2. The computer-implemented method of claim 1 , wherein the catalog data includes a plurality of basic catalog structure (BCS) catalogs within the mainframe computing system.",1,claim 1,0,B
10606802,3,"3. The computer-implemented method of claim 1 , wherein the catalog data set includes a set of files used by the mainframe computing system to describe one or more data set attributes and indicate volumes on which a data set is located, the data set including a set of data that is used by an application.",2,claim 1,0,B
10606802,4,"4. The computer-implemented method of claim 1 , wherein the SMF record includes an insert action recorded in a 61 type.",3,claim 1,0,B
10606802,5,"5. The computer-implemented method of claim 1 , wherein the SMF record includes a delete action recorded in a 65 type.",4,claim 1,0,B
10606802,6,"6. The computer-implemented method of claim 1 , wherein the SMF record includes an alter action recorded in a 66 type.",5,claim 1,0,B
10606802,7,"7. The computer-implemented method of claim 1 , wherein the request to replace the catalog data set is sent in response to a determination that the catalog data set is not available or is corrupt.",6,claim 1,0,B
10606802,8,"8. The computer-implemented method of claim 1 , wherein: the catalog data includes a plurality of basic catalog structure (BCS) catalogs within the mainframe computing system, the catalog data set includes a set of files used by the mainframe computing system to describe one or more data set attributes and indicate volumes on which a data set is located, the data set including a set of data that is used by an application, the request to replace the catalog data set is sent in response to a determination that the catalog data set is not available or is corrupt, and the SMF record includes an insert action recorded in a 61 type.",7,claim 1,0,B
10606802,9,"9. A computer program product for catalog backup and recovery using logical mirroring, the computer program product comprising a computer readable storage medium having program instructions embodied therewith, wherein the computer readable storage medium is not a transitory signal per se, the program instructions executable by a processor to cause the processor to perform a method comprising: intercepting one or more updates made to a catalog data set, utilizing the processor, where: each of the one or more updates includes a system management facility (SMF) record, and the one or more updates are intercepted utilizing a program hook that retrieves the one or more updates from an SMF Exit routine; storing the one or more updates sequentially within an update buffer, utilizing the processor; retrieving the one or more updates from the update buffer, utilizing the processor including sequentially reading the one or more updates from the update buffer; sequentially applying the one or more updates to a backup catalog data set, utilizing the processor, the backup catalog data set including a logically mirrored copy of a catalog data set; identifying a request to replace the catalog data set, utilizing the processor; and replacing the catalog data set with the backup catalog data set, in response to the request, utilizing the processor, including: scanning the backup catalog data set to confirm an integrity of the backup catalog data set, in response to a confirmation of the integrity of the backup catalog data set, modifying one or more control blocks within a catalog address space of a mainframe computing system to change references from the catalog data set to the backup catalog data set; wherein replacing the catalog data set with the backup catalog data set utilizes a dynamic device reconfiguration (DDR) Swap interface for mirrored volume switching to direct updates to the backup catalog data set.",8,,0,B
10606802,10,"10. The computer program product of claim 9 , wherein the catalog data includes a plurality of basic catalog structure (BCS) catalogs within the mainframe computing system.",9,claim 9,0,B
10606802,11,"11. The computer program product of claim 9 , wherein the catalog data set includes a set of files used by the mainframe computing system to describe one or more data set attributes and indicate volumes on which a data set is located, the data set including a set of data that is used by an application.",10,claim 9,0,B
10606802,12,"12. The computer program product of claim 9 , wherein the SMF record includes an insert action recorded in a 61 type.",11,claim 9,0,B
10606802,13,"13. The computer program product of claim 9 , wherein the SMF record includes a delete action recorded in a 65 type.",12,claim 9,0,B
10606802,14,"14. The computer program product of claim 9 , wherein the SMF record includes an alter action recorded in a 66 type.",13,claim 9,0,B
10606802,15,"15. The computer program product of claim 9 , wherein the request to replace the catalog data set is sent in response to a determination that the catalog data set is not available or is corrupt.",14,claim 9,0,B
10606802,16,"16. The computer program product of claim 9 , wherein: the catalog data includes a plurality of basic catalog structure (BCS) catalogs within a mainframe computing system, the catalog data set includes a set of files used by the mainframe computing system to describe one or more data set attributes and indicate volumes on which a data set is located, the data set including a set of data that is used by an application, the request to replace the catalog data set is sent in response to a determination that the catalog data set is not available or is corrupt, and the SMF record includes an insert action recorded in a 61 type.",15,claim 9,0,B
10606802,17,"17. A system, comprising: a processor; and logic integrated with the processor, executable by the processor, or integrated with and executable by the processor, the logic being configured to: intercept one or more updates made to a catalog data set, where: each of the one or more updates includes a system management facility (SMF) record, and the one or more updates are intercepted utilizing a program hook that retrieves the one or more updates from an SMF Exit routine; store the one or more updates sequentially within an update buffer; retrieve the one or more updates from the update buffer, including sequentially reading the one or more updates from the update buffer; sequentially apply the one or more updates to a backup catalog data set, the backup catalog data set including a logically mirrored copy of a catalog data set; identify a request to replace the catalog data set; and replace the catalog data set with the backup catalog data set, in response to the request including: scanning the backup catalog data set to confirm an integrity of the backup catalog data set, in response to a confirmation of the integrity of the backup catalog data set, modifying one or more control blocks within a catalog address space of a mainframe computing system to change references from the catalog data set to the backup catalog data set; wherein replacing the catalog data set with the backup catalog data set utilizes a dynamic device reconfiguration (DDR) Swap interface for mirrored volume switching to direct updates to the backup catalog data set.",16,,0,B
10606803,1,"1. A computer program product comprising: a non-transitory computer readable storage medium retaining program instructions for implementing a file system, wherein content of an object of the file system is retained in data units, a portion of the data units stored at a persistent memory that stores the file system, wherein the object is represented by a tree structure stored at the persistent memory with tree nodes and leaf nodes, the file system mapped to an address space of the persistent memory to directly access the tree structure and the portion of the data units; wherein each tree node points to another node of the tree structure and one of the leaf nodes points to at least one data unit used to retain content for the object; wherein the file system utilizes a volatile resource usage collection and volatile reference counters for tracking usage of each node of the tree structure; wherein said program instructions when executed by a processor, cause the processor to: in response to mounting the file system, scan the mapped address space of the persistent memory retaining file system metadata to compile the volatile resource usage collection indicating data units that are available for use and data units that are allocated by the file system to store content for the object, and the volatile reference counters associated with each used node of the tree structure indicating a number of nodes that reference each used node; and in response to a determination to reuse a pointed node of the tree structure by a pointing node: update a volatile reference counter of the pointed node in a single instruction without a lock; upon update of the volatile reference counter of the pointed node, atomically set, using a single instruction to point to the pointed node by the pointing node, without employing a lock and without using a transaction log by the file system; and free a node of the tree structure based on the reuse.",0,,1,B
10606803,2,"2. An apparatus comprising: a persistent storage retaining data units for storing content for an object used by a file system, wherein the object is represented by a tree structure with tree nodes and leaf nodes; wherein each tree node points to another node of the tree structure and one of the leaf nodes points to at least one data unit used to retain content for the object wherein said persistent storage comprising a Byte-addressable persistent memory, wherein said Byte-addressable persistent memory is configured to retain at least a portion of the data units used by the file system, wherein said Byte-addressable persistent memory retaining the tree structure; a processor, wherein said processor is configured to scan said Byte-addressable persistent memory to compile a volatile resource usage collection indicating data units that are available for use and data units that are allocated by the file system to store content for the object, and volatile reference counters of the nodes that track usage of each node of the tree structure; wherein said processor is configured, in response to a determination to reuse a pointed node of the tree structure of the object by a pointing node, to: update a volatile reference counter of the pointed node in a single instruction without a lock; upon update of the volatile reference counter of the pointed node, atomically set, by a single instruction, the pointing node to point to the pointed node, without employing a lock and without using a transaction log by the file system; and free a node of the tree structure based on the reuse.",1,,0,B
10606803,3,"3. A method, comprising: representing an object of a file system by a tree structure with tree nodes and leaf nodes stored at a persistent memory; wherein content of an object used by the file system is retained in data units, a portion of the data units stored at the persistent memory with the file system; wherein each tree node points to another node of the tree structure and one of the leaf nodes points to at least one data unit associated with the object; wherein the file system is mapped to an address space of the persistent memory to directly access the tree structure and the portion of the data units wherein the file system utilizes a volatile resource usage collection and volatile reference counters for tracking usage of each node of the tree structure; in response to mounting the file system, scanning the mapped address space of the persistent memory retaining file system metadata to compile the volatile resource usage collection for indicating data units that are available for use and data units that are allocated by the file system to store content for the object, and the volatile reference counters associated with each used node of the tree structure indicating a number of nodes that reference each used node; and in response to a determination to reuse a pointed node of the tree structure by a pointing node: updating a volatile reference counter of the pointed node; upon updating a volatile reference counter, atomically setting, using a single instruction to point to the pointed node by the pointing node, without employing a lock and without using a transaction log by the file system; freeing a node of the tree structure based on the reuse.",2,,0,B
10606803,4,"4. The computer program product of claim 1 , wherein at least a portion of the data units are memory pages retained in the persistent memory that is Byte-addressable.",3,claim 1,0,B
10606803,5,"5. The computer program product of claim 1 , wherein the volatile resource usage collection comprises a list of data units associated with the file system that are unallocated and allocated.",4,claim 1,0,B
10606803,6,"6. The computer program product of claim 1 , wherein said program instruction, further cause the processor to: in response to an instruction to modify a content of a second object of the file system: compute a path in the tree structure of the second object to update the content; identify a second pointed node in the path having a volatile reference counter with a value greater than one, wherein a second pointing node points to the second pointed node, whereby identifying a sub-tree rooted at the second pointed node; create a clone sub-tree of the sub-tree; upon creating the clone sub-tree, atomically modify, using a single instruction, the second pointing node to point to a first node of the clone sub-tree instead of pointing to the second pointed node; and update the volatile reference counter of the second pointed node to decrease by one.",5,claim 1,0,B
10606803,7,"7. The computer program product of claim 1 , wherein said updating the volatile reference counter and said atomically setting the pointing node are executed separately in separate atomic operations.",6,claim 1,0,B
10606803,8,"8. The apparatus of claim 2 , wherein said atomically setting is performed using a single atomic instruction in an instruction set of said processor.",7,claim 2,0,B
10606803,9,"9. The apparatus of claim 2 , wherein said persistent storage comprises a second storage device, wherein the file system is a multi-tier file system comprising a first tier and a second tier, wherein the first tier is retained in said Byte-addressable persistent memory, wherein the second tier is retained in said second storage device.",8,claim 2,0,B
10606803,10,"10. The apparatus of claim 2 , wherein the volatile resource usage collection comprises a list of data units or nodes associated with the file system that are unallocated.",9,claim 2,0,B
10606803,11,"11. The apparatus of claim 2 , wherein the volatile resource usage collection comprises a list of data units or nodes associated with the file system that are allocated.",10,claim 2,0,B
10606803,12,"12. The apparatus of claim 2 , wherein said processor is configured, in response to an instruction to modify a content of a second object, to: compute a path in the tree structure of the second object to update the content; identify a second pointed node in the path having a volatile reference counter with a value greater than one, wherein a second pointing node points to the second pointed node, and a sub-tree rooted at the second pointed is identified; create a clone sub-tree of the sub-tree; upon creating the clone sub-tree, atomically modify, using a single instruction, the second pointing node to point to a first node of the clone sub-tree instead of pointing to the second pointed node; and update the volatile reference counter of the second pointed node to decrease by one.",11,claim 2,0,B
10606803,13,"13. The method of claim 3 , wherein at least a portion of the data units are memory pages retained in the persistent memory that is Byte-addressable.",12,claim 3,0,B
10606803,14,"14. The computer program product of claim 4 , wherein the file system is a multi-tier file system comprising a first tier and a second tier, wherein the first tier is retained in the Byte-addressable persistent memory, wherein the second tier is a different storage from the Byte-addressable persistent memory.",13,claim 4,0,B
10606803,15,"15. The apparatus of claim 9 , wherein said second storage device is a block-based storage device.",14,claim 9,0,B
10606803,16,"16. The method of claim 13 , wherein the file system is a multi-tier file system comprising a first tier and a second tier, wherein the first tier is retained in the Byte-addressable persistent memory, wherein the second tier is retained in a different storage from the Byte-addressable persistent memory.",15,claim 13,0,B
10606803,17,"17. The method of claim 13 , wherein the volatile resource usage collection comprises a list of data units associated with the file system that are unallocated and allocated to store content for the object.",16,claim 13,0,B
10606803,18,"18. The method of claim 13 , further comprising: in response to an instruction to modify a content of a second object of the file system: computing a path in the tree structure of the second object to update the content; identifying a second pointed node in the path having a volatile reference counter with a value greater than one, wherein a second pointing node points to the second pointed node for identifying a sub-tree rooted at the second pointed node; creating a clone sub-tree of the sub-tree; upon creating the clone sub-tree, atomically modifying using a single instruction, the second pointing node to point to a first node of the clone sub-tree instead of pointing to the second pointed node; and updating the volatile reference counter of the second pointed node to decrease by one.",17,claim 13,0,B
10606803,19,"19. The method of claim 13 , wherein the tree structure is an inode data structure stored at the persistent memory with the file system.",18,claim 13,0,B
10606803,20,"20. The method of claim 16 , wherein the different storage is a block-based storage device.",19,claim 16,0,B
10606804,1,"1. A system for updating distributed file collection systems for logging types of online user events without shutdown, the system comprising: a producer system that is associated with an online content server and comprises a first memory that stores a first set of instructions and a first processor in communication with the first memory and configured to execute the first set of instructions to: detect a producer configuration file that specifies a log file type, wherein the log file type is selected, based on a producer system type associated with the producer system, from a group consisting of an impression log type, a click log type, an action log type, and a bid log type, the impression log type corresponding to a log of consumer impressions of online content, the click log type corresponding to a log of consumer interaction with online content, the bid log type corresponding to a log of bids submitted for online content; identify at least one file of the specified log file type, wherein the at least one file identifies data associated with a user event, the user event being one of at least one of an impression event, a click event, an action event, or a bid event; send the at least one file to a collector system; automatically detect a file associated with a new file type on the producer system, the new file type not being a listed type in the producer configuration file; in response to detecting the new file type, automatically generate and transmit a message to a conductor system, the message to the conductor system comprising information regarding the new file type; receive instructions from the conductor system to automatically update the producer configuration file based on the new file type; and update the producer configuration file, based on the received instructions from the conductor system, to include the new file type without shutting down the producer system; the conductor system comprising a second memory that stores a second set of instructions and a second processor in communication with the second memory and configured to execute the second set of instructions to: receive a request from a consumer associated with a consumer system, the request identifying a requested file type; allocate the at least one file to the consumer system based on the requested file type; receive, at the conductor system from the producer system, a notification of the producer configuration file; in response to receiving the notification, track events associated with the producer configuration file; receive the message, at the conductor system from the producer system, comprising information regarding the new file type; determine, at the conductor system, whether to change the producer configuration file to include the new file type based the new file type not being a listed type in the producer configuration file; and upon determining to change the producer configuration file to include the new file type, transmit instructions to the producer system to update the producer configuration file to include the new file type; the collector system comprising a third memory that stores a third set of instructions and a third processor in communication with the third memory and configured to execute the third set of instructions to receive the at least one identified file from the producer system; and the consumer system comprising a fourth memory that stores a fourth set of instructions and a fourth processor in communication with the fourth memory and configured to execute the fourth set of instructions to: receive the request from the consumer associated with the consumer system; send the request to the conductor system; pull the at least one file from the collector system; and provide the at least one file to the consumer.",0,,1,B
10606804,2,"2. The system of claim 1 , wherein the first processor is configured to execute the first set of instructions to receive a producer application configuration file from an application running on the first memory, and wherein detecting a producer configuration file comprises detecting the received producer application configuration file.",1,claim 1,0,B
10606804,3,"3. The system of claim 1 , wherein the first processor is configured to execute the first set of instructions to identify at least one file of the specified log file type by scanning the first memory for files of the specified log file type.",2,claim 1,0,B
10606804,4,"4. The system of claim 1 , wherein the first processor is configured to execute the first set of instructions to send the at least one file to the collector system using FTP.",3,claim 1,0,B
10606804,5,"5. The system of claim 1 , wherein the first processor is configured to execute the first set of instructions to send the at least one file to the collector system using UDT.",4,claim 1,0,B
10606804,6,"6. The system of claim 1 , wherein the request from the consumer system identifies a requested log file type.",5,claim 1,0,B
10606804,7,"7. The system of claim 6 , wherein the second processor is configured to execute the second set of instructions to determine whether the producer system has any files of the requested log file type.",6,claim 6,0,B
10606804,8,"8. The system of claim 1 , wherein: the third processor is configured to execute the third set of instructions to notify the conductor system that the at least one file has been received from the producer system; and the second processor is configured to execute the second set of instructions to track events associated with the at least one file.",7,claim 1,0,B
10606804,9,"9. The system of claim 1 , wherein: the second processor is configured to execute the second set of instructions to send a configuration file to the producer system; and the first processor is configured to execute the first set of instructions to: receive the configuration file from the conductor system; and configure the producer system based on the received configuration file.",8,claim 1,0,B
10606804,10,"10. The system of claim 1 , wherein: the second processor is configured to execute the second set of instructions to send a configuration file to the collector system; and the third processor is configured to execute the third set of instructions to: receive the configuration file from the conductor system; and configure the collector system based on the received configuration file.",9,claim 1,0,B
10606804,11,"11. The system of claim 1 , wherein: the first processor is configured to execute the first set of instructions to: send a request to the conductor system for a list of files that need to be resent to the collector system; and send files identified in the list of files to the collector system; and the second processor is configured to execute the second set of instructions to: determine the list of files for the producer system to resend to the collector system; and send the list of files to the producer system.",10,claim 1,0,B
10606804,12,"12. The system of claim 1 , wherein: the first processor is configured to execute the first set of instructions to: send a request to the conductor system for a list of files to delete; and delete the files identified in the list of files; and the second processor is configured to execute the second set of instructions to: determine the list of files for the producer system to delete; and send the list of files to the producer system.",11,claim 1,0,B
10606804,13,"13. The system of claim 1 , wherein: the third processor is configured to execute the third set of instructions to: send a request to the conductor system for a list of files to delete; and delete the files identified in the list of files; and the second processor is configured to execute the second set of instructions to: determine the list of files for the collector system to delete; and send the list of files to the collector system.",12,claim 1,0,B
10606804,14,"14. A method for updating distributed file collection systems for logging types of online user events without shutdown, the method comprising the following operations performed by one or more processors: detecting a configuration file that specifies a log file type, wherein the log file type is selected, based on a producer system type associated with a producer system, from a group consisting of an impression log type, a click log type, an action log type, and a bid log type, the impression log type corresponding to a log of consumer impressions of online content, the click log type corresponding to a log of consumer interaction with online content, the bid log type corresponding to a log of bids submitted for online content; identifying at least one file of the specified log file type, wherein the at least one file identifies data associated with a user event, the user event being one of an impression event, a click event, an action event, or a bid event; sending the at least one file to a collector system; automatically detecting a file associated with a new file type, the new file type not being a listed type in the producer configuration file; in response to detecting the new file type, automatically generating and transmitting a message to a conductor system, the message to the conductor system comprising information regarding the new file type; receiving instructions from the conductor system to automatically update the configuration file based on the new file type; updating the configuration file to include the new file type without shutting down; receiving a request from a consumer associated with a consumer system, the request identifying a requested file type; allocating, based on the requested file type, the at least one identified file to the consumer system; providing a notification of the producer configuration file; in response to receiving the notification, tracking events associated with the producer configuration file; receiving the request from the consumer associated with the consumer system; pulling the at least one identified file from the collector system to the consumer system; and providing the at least one identified file to the consumer.",13,,0,B
10606804,15,"15. The method of claim 14 , further comprising: sending a request to the conductor system for a list of files to delete; receiving, from the conductor system, the list of files; and deleting the files identified in the list of files.",14,claim 14,0,B
10606804,16,"16. The method of claim 14 , further comprising: sending a request to the conductor system for a list of files that need to be resent to the collector system; receiving, from the conductor system, the list of files; and sending files identified in the list of files to the collector system.",15,claim 14,0,B
10606804,17,"17. A computer-readable medium that stores a set of instructions executable by at least one processor to configure the at least one processor to perform operations for updating distributed file collection systems for logging types of online user events without shutdown, the operations comprising: detecting a configuration file that specifies a log file type, wherein the log file type is selected, based on a producer system type associated with a producer system, from a group consisting of an impression log type, a click log type, an action log type, and a bid log type, the impression loci type corresponding to a log of consumer impressions of online content, the click loci type corresponding to a log of consumer interaction with online content, the bid loci type corresponding to a log of bids submitted for online content; identifying at least one file of the specified log file type, wherein the at least one file identifies data associated with a user event, the user event being one of an impression event, a click event, an action event, or a bid event; sending the at least one file to a collector system; automatically detecting a file associated with a new file type, the new file type not being a listed type in the producer configuration file; in response to detecting the new file type, automatically generating and transmitting a message to a conductor system, the message to the conductor system comprising information regarding the new file type; receiving instructions from the conductor system to automatically update the configuration file based on the new file type; updating the configuration file to include the new file type without shutting down; receiving a request from a consumer associated with a consumer system, the request identifying a requested file type; allocating, based on the requested file type, the at least one identified file to the consumer system; providing a notification of the producer configuration file; in response to receiving the notification, tracking events associated with the producer configuration file; receiving the request from the consumer associated with the consumer system; pulling the at least one identified file from the collector system to the consumer system; and providing the at least one identified file to the consumer.",16,,0,B
10606804,18,"18. The computer-readable medium of claim 17 , wherein the set of instructions further configure the at least one processor to perform operations comprising: sending a request to the conductor system for a list of files to delete; receiving, from the conductor system, the list of files; and deleting the files identified in the list of files.",17,claim 17,0,B
10606804,19,"19. The computer-readable medium of claim 17 , wherein the set of instructions further configure the at least one processor to perform operations comprising: sending a request to the conductor system for a list of files that need to be resent to the collector system; receiving, from the conductor system, the list of files; and sending files identified in the list of files to the collector system.",18,claim 17,0,B
10606805,1,"1. A system comprising: a non-transitory memory; and one or more hardware processors coupled to the non-transitory memory to execute instructions from the non-transitory memory to perform operations comprising: requesting an image from a registry provided via a network; receiving, from the registry, an address for the requested image; receiving from the registry a directory structure corresponding to the requested image at the address, the directory structure providing identifiers of one or more layers of the requested image and identifiers of one or more objects that are included within the one or more layers; traversing a local copy of the directory structure included in a persistent local mirror overlay file system (PLMO FS) to access a first object of the one or more objects from a local storage; traversing the local copy of the directory structure included in the PLMO FS to determine an input/output (I/O) miss corresponding to a second object of the one or more objects; responsive to determining the I/O miss, retrieving the second object from the registry and storing the second object to the local storage; and building a local copy of the requested image from the local storage, the local copy including the first object from the local storage and the retrieved second object.",0,,1,B
10606805,2,"2. The system of claim 1 , wherein the one or more layers are organized into a hierarchy.",1,claim 1,0,B
10606805,3,"3. The system of claim 1 , wherein each layer of the one or more layers is structured as an archived and/or a compressed file.",2,claim 1,0,B
10606805,4,"4. The system of claim 1 , wherein the directory structure received from the registry includes metadata describing amounts of the one or more objects stored in each layer of the one or more layers, modification times corresponding to the one or more objects, last access times corresponding to the one or more objects, hashes corresponding to the one or more objects, and sizes corresponding to the one or more objects.",3,claim 1,0,B
10606805,5,"5. The system of claim 1 , wherein the first and second objects are structured as archived and/or compressed files, and building the local copy of the requested image includes dearchiving and/or decompressing the archived and/or compressed files to extract their contents.",4,claim 1,0,B
10606805,6,"6. The system of claim 1 , further comprising updating the PLMO FS to indicate the presence of the second object in the local storage.",5,claim 1,0,B
10606805,7,"7. The system of claim 1 , further comprising matching a hash corresponding to the first object on the local storage with a hash retrieved from the registry.",6,claim 1,0,B
10606805,8,"8. A computer-implemented method comprising: requesting an image from a registry provided via a network; receiving, from the registry, an address for the requested image; receiving from the registry a directory structure corresponding to the requested image at the address, the directory structure providing identifiers of one or more layers of the requested image and identifiers of one or more objects that are included within the one or more layers; traversing a local copy of the directory structure included in a persistent local mirror overlay file system (PLMO FS) to access an object of the one or more objects from a local storage; determining an input/output (I/O) hit or miss corresponding to the traversed object of the one or more objects; responsive to determining the I/O miss, retrieving from the registry an I/O-missed object and storing the I/O-missed object to the local storage; and building a local copy of the requested image from the local storage, the local copy including an I/O-hit object and the retrieved I/O-missed object.",7,,0,B
10606805,9,"9. The method of claim 8 , wherein the one or more layers are organized into a hierarchy.",8,claim 8,0,B
10606805,10,"10. The method of claim 8 , wherein each layer of the one or more layers is structured an archived and/or a compressed file.",9,claim 8,0,B
10606805,11,"11. The method of claim 8 , wherein the directory structure received from the registry includes metadata describing amounts of the one or more objects stored in each layer of the one or more layers, modification times corresponding to the one or more objects, last access times corresponding to the one or more objects, hashes corresponding to the one or more objects, and sizes corresponding to the one or more objects.",10,claim 8,0,B
10606805,12,"12. The method of claim 8 , wherein the I/O-hit and I/O-missed objects are structured as archived and/or compressed files, and building the local copy of the requested image includes dearchiving and/or decompressing the archived and/or compressed files to extract their contents.",11,claim 8,0,B
10606805,13,"13. The method of claim 8 , further comprising updating the PLMO FS to indicate the presence of the I/O-missed object in the local storage.",12,claim 8,0,B
10606805,14,"14. The method of claim 8 , further comprising matching a hash corresponding to the traversed object with a hash retrieved from the registry.",13,claim 8,0,B
10606805,15,"15. A non-transitory machine-readable medium having stored thereon machine-readable instructions executable to cause at least one machine to perform operations comprising: requesting an image from a registry provided via a network; receiving, from the registry, an address for the requested image; receiving from the registry a directory structure corresponding to the requested image at the address, the directory structure providing identifiers of one or more layers of the requested image and identifiers of one or more objects that are included within the one or more layers; traversing a local copy of the directory structure included in a persistent local mirror overlay file system (PLMO FS) to access a first object of the one or more objects from a local storage; traversing the local copy of the directory structure included in the PLMO FS to determine an input/output (I/O) miss corresponding to a second object of the one or more objects; responsive to determining the I/O miss, retrieving the second object from the registry and storing the second object to the local storage; and building a local copy of the requested image from the local storage, the local copy including the first object from the local storage and the retrieved second object.",14,,0,B
10606805,16,"16. The non-transitory machine-readable medium of claim 15 , wherein the one or more layers are organized into a hierarchy.",15,claim 15,0,B
10606805,17,"17. The non-transitory machine-readable medium of claim 15 , wherein each layer of the one or more layers is structured as an archived and/or compressed file.",16,claim 15,0,B
10606805,18,"18. The non-transitory machine-readable medium of claim 15 , wherein the directory structure received from the registry includes metadata describing amounts of the one or more objects stored in each layer of the one or more layers, modification times corresponding to the one or more objects, last access times corresponding to the one or more objects, hashes corresponding to the one or more objects, and sizes corresponding to the one or more objects.",17,claim 15,0,B
10606805,19,"19. The non-transitory machine-readable medium of claim 15 , wherein the first and second objects are structured as archived and/or compressed files, and building the local copy of the requested image includes dearchiving and/or decompressing the archived and/or compressed files to extract their contents.",18,claim 15,0,B
10606805,20,"20. The non-transitory machine-readable medium of claim 15 , further comprising updating the PLMO FS to indicate the presence of the second object in the local storage.",19,claim 15,0,B
10606806,1,"1. A method for storing time series data, comprising: saving an index value of time series data to a time interval data table according to a time point of the time series data, wherein the time series data comprises following information: a time point and an index value associated with the time point, each data row in the time interval data table records index values associated with at least one time point within a time interval of a predetermined length, the time points in the at least one time point are spaced by a predetermined time length, each time point occupies one storage area of a memory, each storage area comprises a predetermined quantity of bytes, and the index value associated with the each time point is filled in the storage area occupied by the time point; performing data compression processing on a storage area having no written data, to obtain compressed time interval data; and writing the compressed time interval data to a magnetic disk.",0,,1,B
10606806,2,"2. The method according to claim 1 , wherein the time interval data table comprises a primary key column, and the primary key value of the each data row in the time interval data table comprises a starting time point value indicating the starting point of the time interval corresponding to the data row.",1,claim 1,0,B
10606806,3,"3. The method according to claim 2 , wherein the saving an index value of time series data to a time interval data table according to a time point of the time series data comprises: searching, in the time interval data table according to the time point of the time series data, for a data row corresponding to the time interval comprising the time point of the time series data; if a corresponding data row is found, writing the index value of the time series data to the storage area in the data row corresponding to the time point; and if the data row is not found, adding a new data row, wherein a primary key value of the new data row comprises the time point of the time series data, and data written to the first storage area of the new data row is the index value of the time series data.",2,claim 2,0,B
10606806,4,"4. The method according to claim 3 , wherein the time series data further comprises data source subject identification code information, wherein the data source subject identification code information is an identification code of a source subject of the time series data.",3,claim 3,0,B
10606806,5,"5. The method according to claim 4 , wherein the primary key value of the each data row further comprises a data source subject identification code, wherein the data source subject identification code is an identification code of a source subject of index value data of the data row.",4,claim 4,0,B
10606806,6,"6. The method according to claim 5 , wherein the searching, in the time interval data table according to the time point of the time series data, for a data row corresponding to a time interval comprising the time point of the time series data comprises: searching, in the time interval data table, according to the time point and the data source subject identification code of the time series data, for the data row corresponding to the time interval comprising the time point of the time series data, and of which the primary key value comprises the data source subject identification code of the time series data.",5,claim 5,0,B
10606806,7,"7. The method according to claim 5 , wherein the primary key value of the new data row further comprises the data source subject identification code of the time series data.",6,claim 5,0,B
10606806,8,"8. The method according to claim 5 , wherein the time series data further comprises information about an index identification code, wherein the index identification code is an identification code of an index corresponding to the index value of the time series data.",7,claim 5,0,B
10606806,9,"9. The method according to claim 8 , wherein the primary key value of the each data row further comprises a index identification code, wherein the index identification code is an identification code of an index corresponding to the index value recorded in the data row.",8,claim 8,0,B
10606806,10,"10. The method according to claim 9 , wherein the searching, in the time interval data table according to the time point of the time series data, for a data row corresponding to a time interval comprising the time point of the time series data comprises: searching, in the time interval data table according to the time point, the data source subject identification code and the index identification code of the time series data, for the data row corresponding to the time interval comprising the time point of the time series data, and of which the primary key value comprises the data source subject identification code and the index identification code of the time series data.",9,claim 9,0,B
10606806,11,"11. The method according to claim 9 , wherein the primary key value of the new data row further comprises the index identification code of the time series data.",10,claim 9,0,B
10606806,12,"12. The method according to claim 2 , wherein the time interval data table further comprises an index value data set column used for recording the index values of the at least one time point.",11,claim 2,0,B
10606806,13,"13. The method according to claim 12 , wherein the index value data set column is further used for recording storage area status information, wherein the storage area status information in each data row in the time interval data table comprises an occupation status of each storage area in the data row, and the occupation status indicates whether there is data written to the storage area; and the performing data compression processing on a storage area having no written data comprises: performing data compression processing on a storage area that is in an idle state.",12,claim 12,0,B
10606806,14,"14. A device comprising: a processor; and a memory storing computer readable instructions that can be executed by the processor, the computer readable instructions when executed by the processor, causing the processor to: save an index value of time series data to a time interval data table according to a time point of the time series data, wherein the time series data comprises the following information: a time point and an index value associated with the time point, each data row in the time interval data table records index values associated with at least one time point within a time interval of a predetermined length, the time points in the at least one time point are spaced by a predetermined time length, each time point occupies one storage area of a memory, each storage area comprises a predetermined quantity of bytes, and the index value associated with each time point is filled in the storage area occupied by the time point; perform data compression processing on a storage area having no written data, to obtain compressed time interval data; and write the compressed time interval data to a magnetic disk.",13,,0,B
10606806,15,"15. The device according to claim 14 , wherein the time interval data table comprises a primary key column, and the primary key value of the each data row in the time interval data table comprises a starting time point value indicating the starting point of the time interval corresponding to the data row.",14,claim 14,0,B
10606806,16,"16. The device according to claim 15 , wherein the saving of an index value of time series data to a time interval data table according to a time point of the time series data comprises: searching, in the time interval data table according to the time point of the time series data, for a data row corresponding to the time interval comprising the time point of the time series data; if a corresponding data row is found, writing the index value of the time series data to the storage area in the data row corresponding to the time point; and if the data row is not found, adding a new data row, wherein a primary key value of the new data row comprises the time point of the time series data, and data written to the first storage area of the new data row is the index value of the time series data.",15,claim 15,0,B
10606806,17,"17. The device according to claim 16 , wherein the time series data further comprises data source subject identification code information, wherein the data source subject identification code information is an identification code of a source subject of the time series data.",16,claim 16,0,B
10606806,18,"18. The device according to claim 17 , wherein the primary key value of the each data row further comprises a data source subject identification code, wherein the data source subject identification code is an identification code of a source subject of index value data of the data row.",17,claim 17,0,B
10606806,19,"19. The device according to claim 18 , wherein the searching, in the time interval data table according to the time point of the time series data, for a data row corresponding to a time interval comprising the time point of the time series data comprises: searching, in the time interval data table, according to the time point and the data source subject identification code of the time series data, for the data row corresponding to the time interval comprising the time point of the time series data, and of which the primary key value comprises the data source subject identification code of the time series data.",18,claim 18,0,B
10606806,20,"20. The device according to claim 18 , wherein the primary key value of the new data row further comprises the data source subject identification code of the time series data.",19,claim 18,0,B
10606806,21,"21. The device according to claim 18 , wherein the time series data further comprises information about an index identification code, wherein the index identification code is an identification code of an index corresponding to the index value of the time series data.",20,claim 18,0,B
10606806,22,"22. The device according to claim 21 , wherein the primary key value of the each data row further comprises a index identification code, wherein the index identification code is an identification code of an index corresponding to the index value recorded in the data row.",21,claim 21,0,B
10606806,23,"23. The device according to claim 22 , wherein the searching, in the time interval data table according to the time point of the time series data, for a data row corresponding to a time interval comprising the time point of the time series data comprises: searching, in the time interval data table according to the time point, the data source subject identification code and the index identification code of the time series data, for the data row corresponding to the time interval comprising the time point of the time series data, and of which the primary key value comprises the data source subject identification code and the index identification code of the time series data.",22,claim 22,0,B
10606806,24,"24. The device according to claim 22 , wherein the primary key value of the new data row further comprises the index identification code of the time series data.",23,claim 22,0,B
10606806,25,"25. The device according to claim 15 , wherein the time interval data table further comprises an index value data set column used for recording the index values of the at least one time point.",24,claim 15,0,B
10606806,26,"26. The device according to claim 25 , wherein the index value data set column is further used for recording storage area status information, wherein the storage area status information in each data row in the time interval data table comprises an occupation status of each storage area in the data row, and the occupation status indicates whether there is data written to the storage area; and the performing of data compression processing on a storage area having no written data comprises: performing data compression processing on a storage area that is in an idle state.",25,claim 25,0,B
10606806,27,"27. A non-transitory computer storage medium storing computer readable instructions that can be executed by a processor, the computer readable instructions when executed by the processor, causing the processor to: save an index value of time series data to a time interval data table according to a time point of the time series data, wherein the time series data comprises the following information: a time point and an index value associated with the time point, each data row in the time interval data table records index values associated with at least one time point within a time interval of a predetermined length, the time points in the at least one time point are spaced by a predetermined time length, each time point occupies one storage area of a memory, each storage area comprises a predetermined quantity of bytes, and the index value associated with each time point is filled in the storage area occupied by the time point; perform data compression processing on a storage area having no written data, to obtain compressed time interval data; and write the compressed time interval data to a magnetic disk.",26,,0,B
10606807,1,"1. A method for deduplicating data, the method comprising: determining whether one or more chunks are represented in a local index of a client, wherein the local index is a distributed portion of a fast index maintained by a server, wherein the local index associates partial identifiers with version numbers; determining partial identifier for each of the one or more chunks, wherein the local index allows a version number to be determined from the partial identifier; uploading a hint for each of the one or more chunks that is represented in the local index to a server that maintains a fast index and a main index, wherein the hint includes the version number from the local index and wherein the server determines whether the one or more chunks associated with each of the hints are already stored by the server based on the version number, wherein the version number is unique for each of the one or more chunks represented in the local index and allows the server to determine whether the one or more chunks associated with the hints are stored by the server from the main index without accessing the fast index for the one or more chunks associated with the hints; and updating the local index for each of the one or more chunks that is not a duplicate of a chunk already stored at the server.",0,,1,B
10606807,2,"2. The method of claim 1 , further comprising dividing a file into the one or more chunks.",1,claim 1,0,B
10606807,3,"3. The method of claim 1 , wherein determining whether the one or more chunks are represented in a local index of a client includes hashing each of the one or more chunks to generate the identifier, wherein the identifier includes a hash or a partial hash.",2,claim 1,0,B
10606807,4,"4. The method of claim 3 , further comprising accessing the local index based on the hashes the partial hashes.",3,claim 3,0,B
10606807,5,"5. The method of claim 4 , further comprising returning at least the version number of the chunks that are represented in the local index.",4,claim 4,0,B
10606807,6,"6. The method of claim 5 , wherein the hint for each chunk represented in the local index includes the chunk and a version number of a chunk that may be a duplicate of the chunk.",5,claim 5,0,B
10606807,7,"7. The method of claim 1 , further comprising receiving version numbers for each of the one or more chunks that is unique and not previously stored by the server and updating the local index with the version numbers.",6,claim 1,0,B
10606807,8,"8. The method of claim 1 , wherein the local index comprises a portion of the fast index maintained at the server.",7,claim 1,0,B
10606807,9,"9. The method of claim 1 , further comprising storing the local index in a fast memory.",8,claim 1,0,B
10606807,10,"10. A method for deduplicating data using a distributed index, the method comprising: receiving hints that are associated with a-specific chunks identified by a client at a server, each of the hints including a version number; receiving identifiers for chunks that are not associated with the hints; checking a fast index maintained by the server for the chunks identified by the client that are not associated with the hints to identify version numbers of the chunks, wherein the fast index associates partial identifiers to version numbers such that the fast index is checked for the chunks based on the partial identifiers of the chunks that are not associated with the hints; checking a main index based on the version number identified from the fast index and received from the client to confirm deduplication of the chunks that are not associated with the hints, wherein the chunks that are not associated with the hints are uploaded when not present in the fast index or not present in the main index; and confirming deduplication for the specific chunk using the main index without accessing the fast index for the chunks associated with the hints using the version numbers received from the client for the specific chunks.",9,,0,B
10606807,11,"11. The method of claim 10 , further comprising receiving the chunks to be added to the server and assigning a version number to all of the chunks that are not confirmed as deduplicated in the main index.",10,claim 10,0,B
10606807,12,"12. The method of claim 11 , further comprising adding all of the chunks that are not confirmed as deduplicated to the main index and to the fast index.",11,claim 11,0,B
10606807,13,"13. The method of claim 12 , further comprising assigning a version number to each of the chunks that are not confirmed as deduplicated and entering the version number and hash into the main index and entering a partial hash and the version number into the fast index.",12,claim 12,0,B
10606807,14,"14. The method of claim 11 , further comprising providing the version numbers of all of the chunks that are not confirmed to a client that submitted the chunks, wherein the client maintains a local index that includes a portion of the fast index.",13,claim 11,0,B
10606807,15,"15. The method of claim 14 , further comprising seeding the local index of the client.",14,claim 14,0,B
10606807,16,"16. The method of claim 11 , wherein chunks not found in the main index are new chunks that are added to storage, wherein chunks that are represented in the main index are deduplicated and are not added to the storage.",15,claim 11,0,B
10606807,17,"17. The method of claim 10 , further comprising, when multiple matches are present in the fast index, determining a correct match from the main index based on a whole hash and/or the version number.",16,claim 10,0,B
10606807,18,"18. The method of claim 10 , further comprising distributing the fast index to a plurality of clients including the client.",17,claim 10,0,B
10606807,19,"19. The method of claim 18 , wherein the plurality of clients are each associated with a local index and wherein the hints provided from one client are determined from the local indexes of more than one of the plurality of clients.",18,claim 18,0,B
10606807,20,"20. The method of claim 10 , further comprising generating a hash for each of the chunks by the server or by the client.",19,claim 10,0,B
10606808,1,"1. A system for suggesting another user with whom to share an electronic file, the system comprising: a computer comprising a processor and a memory having computer-executable instructions stored thereupon which, when executed by the processor, cause the computer to: during editing of the electronic file, infer an intent of a user to share the electronic file; in response to the inferred intent, for each particular other user of a plurality of other users, calculate a probability indicative of a likelihood that the user would like to share the electronic file with the particular other user based, at least in part, upon which stage of a plurality of stages in an editing lifecycle the electronic file is in; based upon the calculated probabilities, identify at least one other user to suggest to the user for sharing of the electronic file; and, display information regarding the identified at least one other user.",0,,1,B
10606808,2,"2. The system of claim 1 , wherein the intent of the user to share the electronic file is inferred based upon a file management event comprising at least one of creating the electronic file, moving of the electronic file or renaming of the electronic file.",1,claim 1,0,B
10606808,3,"3. The system of claim 1 , wherein the intent of the user to share the electronic file is inferred based upon expiration of a predetermined period of time.",2,claim 1,0,B
10606808,4,"4. The system of claim 1 , the memory having further computer-executable instructions stored thereupon which, when executed by the processor, cause the computer to: receive user input regarding a selected other user with whom to share the electronic file; and share the electronic file with the selected other user.",3,claim 1,0,B
10606808,5,"5. The system of claim 4 , the memory having further computer-executable instructions stored thereupon which, when executed by the processor, cause the computer to: update an algorithm used to calculate the probabilities based upon the received user input.",4,claim 4,0,B
10606808,6,"6. The system of claim 1 , wherein the probabilities are calculated based upon at least one of contacts stored on the computer, information stored on a directory of other users, or historical information regarding file sharing of the user.",5,claim 1,0,B
10606808,7,"7. The system of claim 1 , wherein the probabilities are calculated using an algorithm comprising at least one of a linear regression algorithm, a logistic regression algorithm, a decision tree algorithm, a support vector machine (SVM) algorithm, a Naive Bayes algorithm, a K-nearest neighbors (KNN) algorithm, a K-means algorithm, a random forest algorithm, a dimensionality reduction algorithm, or a Gradient Boost & Adaboost algorithm.",6,claim 1,0,B
10606808,8,"8. The system of claim 1 , wherein the probabilities are calculated based upon at least one of an analysis of content of the electronic file, or metadata associated with the electronic file.",7,claim 1,0,B
10606808,9,"9. The system of claim 1 , wherein the probabilities are calculated based upon at least one of information about the user or information about the other users.",8,claim 1,0,B
10606808,10,"10. The system of claim 1 , wherein the probabilities are calculated based upon at least one of individual other users who have worked on similar electronic files, or a skill set similar to content of the electronic file.",9,claim 1,0,B
10606808,11,"11. The system of claim 1 , wherein the probabilities are calculated based upon a previous interaction of the user external to the electronic file with at least one of the plurality of other users.",10,claim 1,0,B
10606808,12,"12. The system of claim 1 , wherein the probabilities are calculated based upon an analysis of content of other files.",11,claim 1,0,B
10606808,13,"13. A method of suggesting another user with whom to share an electronic file, the method comprising: during editing of the electronic file, inferring an intent of a user to share the electronic file; in response to the inferred intent, for each particular other user of a plurality of other users, calculating a probability indicative of a likelihood that the user would like to share the electronic file with the particular other user based, at least in part, upon which stage of a plurality of stages in an editing lifecycle the electronic file is in; based upon the calculated probabilities, identifying at least one other user to suggest to the user for sharing of the electronic file; and, displaying information regarding the identified at least one other user.",12,,0,B
10606808,14,"14. The method of claim 13 , wherein inferring the intent of the user to share the electronic file is based upon a file management event comprising at least one of creating the electronic file, moving of the electronic file or renaming of the electronic file.",13,claim 13,0,B
10606808,15,"15. The method of claim 13 , further comprising: receiving user input regarding a selected other user with whom to share the electronic file; sharing the electronic file with the selected other user; and updating an algorithm used to calculate the probabilities based upon the received user input.",14,claim 13,0,B
10606808,16,"16. The method of claim 13 , wherein the probabilities are calculated using an algorithm comprising at least one of a linear regression algorithm, a logistic regression algorithm, a decision tree algorithm, a support vector machine (SVM) algorithm, a Naive Bayes algorithm, a K-nearest neighbors (KNN) algorithm, a K-means algorithm, a random forest algorithm, a dimensionality reduction algorithm, or a Gradient Boost & Adaboost algorithm.",15,claim 13,0,B
10606808,17,"17. The method of claim 13 , wherein the probabilities are calculated based upon a previous interaction of the user external to the electronic file with at least one of the plurality of other users.",16,claim 13,0,B
10606808,18,"18. The method of claim 13 , wherein the probabilities are calculated based upon at least one of an analysis of content of the electronic file, or metadata associated with the electronic file.",17,claim 13,0,B
10606808,19,"19. A computer storage media storing computer-readable instructions that when executed cause a computing device to: during editing of an electronic file, infer an intent of a user to share the electronic file; in response to the inferred intent, for each particular other user of a plurality of other users, calculate a probability indicative of a likelihood that the user would like to share the electronic file with the particular other user based, at least in part, upon which stage of a plurality of stages in an editing lifecycle the electronic file is in; based upon the calculated probabilities, identify at least one other user to suggest to the user for sharing of the electronic file; and, display information regarding the identified at least one other user.",18,,0,B
10606808,20,"20. The computer storage media of claim 19 , wherein the probabilities are calculated using an algorithm comprising at least one of a linear regression algorithm, a logistic regression algorithm, a decision tree algorithm, a support vector machine (SVM) algorithm, a Naive Bayes algorithm, a K-nearest neighbors (KNN) algorithm, a K-means algorithm, a random forest algorithm, a dimensionality reduction algorithm, or a Gradient Boost & Adaboost algorithm.",19,claim 19,0,B
10606809,1,"1. A system comprising: at least one processor; and memory coupled to the at least one processor, the memory having computer-executable instructions for resolving conflicts to co-edited text that, when executed by the at least one processor, performs a method comprising: receiving, at a server, a first notification from a first client, wherein the first notification indicates a difference between a first client version of a co-edited text accessed by the first client and a master version of the co-edited text accessed by the server; receiving, at the server, a second notification from a second client, wherein the second notification indicates a second difference between a second client version of the co-edited text accessed by the second client and the master version of the co-edited text; in response to receiving the first notification and the second notification, selecting a policy to determine a difference notification, wherein the difference notification comprises one of the first notification or the second notification; selecting the difference notification to process based on the selected policy; updating the master version of the co-edited text with the selected difference notification to provide an updated master version of the co-edited text; and sending an update notification reflecting the selected text change to the first client and the second client.",0,,1,B
10606809,2,"2. The system of claim 1 , wherein the policy is a first person wins policy that selects a first text change received.",1,claim 1,0,B
10606809,3,"3. The system of claim 1 , wherein the server selects a single text change and ignores any other text changes.",2,claim 1,0,B
10606809,4,"4. The system of claim 1 , wherein the updated notification sent to the clients comprises deltas to the current version of the text.",3,claim 1,0,B
10606809,5,"5. The system of claim 1 , wherein the conflict resolution procedure is performed by clients and not performed by the server.",4,claim 1,0,B
10606809,6,"6. The system of claim 1 , wherein the conflict resolution policy comprises merging text of the non-selected text change with the update to the current version of the text.",5,claim 1,0,B
10606809,7,"7. A method for resolving conflicts to co-edited text, comprising: receiving, at a server, a first notification from a first client, wherein the first notification indicates a difference between a first client version of a co-edited text accessed by the first client and a master version of the co-edited text accessed by the server; receiving, at the server, a second notification from a second client, wherein the second notification indicates a second difference between a second client version of the co-edited text accessed by the second client and the master version of the co-edited text; in response to receiving the first notification and the second notification, selecting a policy to determine a difference notification, wherein the difference notification comprises one of the first notification or the second notification; selecting the difference notification to process based on the selected policy; updating the master version of the co-edited text with the selected difference notification to provide an updated master version of the co-edited text; and sending an update notification reflecting the selected text change to the first client and the second client.",6,,0,B
10606809,8,"8. The method of claim 7 , wherein the policy is a first person wins policy that selects a first text change received.",7,claim 7,0,B
10606809,9,"9. The method of claim 7 , wherein the server selects a single text change and ignores any other text changes.",8,claim 7,0,B
10606809,10,"10. The method of claim 7 , wherein the updated notification sent to the clients comprises deltas to the current version of the text.",9,claim 7,0,B
10606809,11,"11. The method of claim 7 , wherein the conflict resolution procedure is performed by clients and not performed by the server.",10,claim 7,0,B
10606809,12,"12. The method of claim 7 , wherein the conflict resolution policy comprises merging text of the non-selected text change with the update to the current version of the text.",11,claim 7,0,B
10606809,13,"13. The method of claim 7 , wherein the conflict resolution procedure is performed by the client when it is determined that the client has a non-selected text change.",12,claim 7,0,B
10606809,14,"14. A computer storage device comprising: a processor; and memory coupled to the processor, the memory having computer-executable instructions that, when executed by the processor, performs a method comprising: receiving, at a server, a first notification from a first client, wherein the first notification indicates a difference between a first client version of a co-edited text accessed by the first client and a master version of the co-edited text accessed by the server; receiving, at the server, a second notification from a second client, wherein the second notification indicates a second difference between a second client version of the co-edited text accessed by the second client and the master version of the co-edited text; in response to receiving the first notification and the second notification, selecting a policy to determine a difference notification, wherein the difference notification comprises one of the first notification or the second notification; selecting the difference notification to process based on the selected policy; updating the master version of the co-edited text with the selected difference notification to provide an updated master version of the co-edited text; and sending an update notification reflecting the selected text change to the first client and the second client.",13,,0,B
10606809,15,"15. The computer storage device of claim 14 , wherein the policy is a first person wins policy that selects a first text change received.",14,claim 14,0,B
10606809,16,"16. The computer storage device of claim 14 , wherein the server selects a single text change and ignores any other text changes.",15,claim 14,0,B
10606809,17,"17. The computer storage device of claim 14 , wherein the updated notification sent to the clients comprises deltas to the current version of the text.",16,claim 14,0,B
10606809,18,"18. The computer storage device of claim 14 , wherein the conflict resolution procedure is performed by clients and not performed by the server.",17,claim 14,0,B
10606809,19,"19. The computer storage device of claim 14 , wherein the conflict resolution policy comprises merging text of the non-selected text change with the update to the current version of the text.",18,claim 14,0,B
10606809,20,"20. The computer storage device of claim 14 , wherein the conflict resolution procedure is performed by the client when it is determined that the client has a non-selected text change.",19,claim 14,0,B
10606810,1,"1. A method comprising: accessing, by one or more processing devices corresponding to a first search head of a cluster comprising a plurality of search heads of a data aggregation and analysis system, a first list of knowledge object customizations corresponding to the first search head; generating a digest of the first list of knowledge object customizations corresponding to the first search head, wherein the digest is a reduced size representation of the first list of knowledge object customizations; propagating the digest to a second search head of the cluster; receiving an indication of a first divergence point determined between the first list of knowledge object customizations and a second list of knowledge object customizations corresponding to the second search head based on a comparison of the digest with the second list of knowledge object customizations, the first divergence point corresponding to a first position in the first list of knowledge object customizations where the first list of knowledge object customizations diverges from the second list of knowledge object customizations; and sending a first set of knowledge object customizations from the first list of knowledge object customizations to the second search head, wherein the first set of knowledge object customizations comprises at least one knowledge object customization from the first list of knowledge object customizations relative to a position in the first list of knowledge object customizations corresponding to the first divergence point.",0,,1,B
10606810,2,"2. The method of claim 1 , wherein the first list of knowledge object customizations comprises a journal of knowledge object customizations locally stored with respect to at least one processing device of the one or more processing devices corresponding to the first search head.",1,claim 1,0,B
10606810,3,"3. The method of claim 1 , wherein the second list of knowledge object customizations corresponding to the second search head comprises a journal of knowledge object customizations locally stored with respect to at least one processing device of one or more processing devices corresponding to the second search head.",2,claim 1,0,B
10606810,4,"4. The method of claim 1 , wherein the generating the digest comprises applying a Bloom filter to the first list of knowledge object customizations.",3,claim 1,0,B
10606810,5,"5. The method of claim 1 , wherein the first list of knowledge object customizations comprises a list of global unique identifiers (GUIDs), each knowledge object customization of the first list of knowledge object customizations corresponding specifically to a respective GUID of the list of GUIDs.",4,claim 1,0,B
10606810,6,"6. The method of claim 1 , wherein the digest comprises a bitmask generated by applying a Bloom filter to a list of global unique identifiers (GUID) values corresponding to the first list of knowledge object customizations.",5,claim 1,0,B
10606810,7,"7. The method of claim 1 , wherein the sending the first set of knowledge object customizations comprises: sending a first set of knowledge object customizations comprising at least one knowledge object customization positioned in the first list of knowledge object customizations relative to the first divergence point to the second search head; and updating, in the second search head, the second list of knowledge object customizations with the first set of knowledge object customizations.",6,claim 1,0,B
10606810,8,"8. The method of claim 1 , further comprising: propagating the digest to a third search head of the cluster; receiving an indication of a second divergence point determined between the digest and a third list of knowledge object customizations corresponding to the third search head, the second divergence point corresponding to a second position in the digest; and sending a second set of knowledge object customizations from the first list of knowledge object customizations to the third search head, wherein the second set of knowledge object customizations comprises knowledge object customizations from the first list of configurations after a position in the first list of configurations corresponding to the second divergence point.",7,claim 1,0,B
10606810,9,"9. The method of claim 1 , wherein the generating the digest comprises: receiving an update list of knowledge object customizations from the second search head, the update list comprising at least one knowledge object customization from the second list of knowledge object customizations absent from the digest; comparing a current size of the digest with a pre-determined threshold size; updating the digest and the first list of knowledge object customizations to include the knowledge object customizations comprised in the update list when the current size of the digest is less than a pre-determined threshold size; and generating a second digest based on the update list when the size of the digest meets or exceeds the pre-determined threshold size.",8,claim 1,0,B
10606810,10,"10. The method of claim 1 , wherein the first divergence point is determined by: applying one or more hash functions to a first global unique identifier (GUID) corresponding to a first knowledge object customization of the second list of knowledge object customizations to determine a corresponding one or more hash values; referencing one or more addresses in the digest corresponding to the one or more hash values to determine one or more corresponding address values, wherein the one or more address values are indicative of the presence or absence of the first GUID in the digest; determining a presence or absence of the first GUID in the digest based on the one or more address values; and calculating the divergence point to be a position in the second list of knowledge object customizations corresponding to a position of the first GUID if the first GUID is absent from the digest.",9,claim 1,0,B
10606810,11,"11. The method of claim 1 , wherein the first divergence point is determined by: applying, to a set of global unique identifiers (GUIDs) corresponding to a pre-determined number of knowledge object customizations of the second list of knowledge object customizations, one or more hash functions to each of the set of GUIDs to determine a corresponding one or more hash values for each GUID of the set of GUIDs; referencing one or more addresses in the digest corresponding to the one or more hash values to determine a corresponding one or more address values for each GUID of the set of GUIDs, wherein the one or more address values is indicative of the presence or absence of the corresponding GUID in the digest; determining a presence of each GUID of the set of GUIDs in the digest based on the one or more address values; iteratively repeating the applying, the referencing, and the determining for remaining GUIDs in the set of GUIDs until an absence of a GUID in the digest is determined; and when a GUID is determined to be absent in the digest, identifying the divergence point as a position in the second list of knowledge object customizations corresponding to the GUID of the set of GUIDs that is absent from the digest.",10,claim 1,0,B
10606810,12,"12. The method of claim 1 , wherein the first divergence point is determined by: applying, to a set of global unique identifiers (GUIDs) comprising a sequence of consecutive GUIDs corresponding to a pre-determined number of knowledge object customizations of the second list of knowledge object customizations, one or more hash functions to each of the set of GUIDs to determine a corresponding one or more hash values for each GUID of the set of GUIDs; referencing one or more addresses in the digest corresponding to the one or more hash values to determine a corresponding one or more address values, wherein the one or more address values is indicative of the presence or absence of the corresponding GUID in the digest; determining a presence of each GUID of the set of GUIDs in the digest based on the one or more address values; iteratively repeating the applying, the referencing, and the determining for remaining GUIDs in the set of GUIDs until an absence of a GUID in the digest is determined; and when a GUID is determined to be absent in the digest, comparing the set of GUIDs to a corresponding sequence of GUIDs in the first list of knowledge object customizations to identify the divergence point, wherein the iteratively repeating comprises, for each iteration, adding a GUID corresponding to a next knowledge object customization of the second list of knowledge object customizations to the set of GUIDs and performing the iteratively repeating for the sequence of consecutive GUIDs.",11,claim 1,0,B
10606810,13,"13. The method of claim 1 , wherein the first divergence point is determined by: applying, to a set of global unique identifiers (GUIDs) comprising a sequence of consecutive GUIDs corresponding to a pre-determined number of knowledge object customizations of the second list of knowledge object customizations, one or more hash functions to each of the set of GUIDs to determine a corresponding one or more hash values for each GUID of the set of GUIDs; referencing one or more addresses in the digest corresponding to the one or more hash values to determine a corresponding one or more address values, wherein the one or more address values is indicative of the presence or absence of the corresponding GUID in the digest; determining a presence of each GUID of the set of GUIDs in the digest based on the one or more address values; removing the first GUID in the set of GUIDS and appending the set of GUIDs with a GUID corresponding to a next knowledge object customization of the second list of knowledge object customizations when all GUIDS in the set of GUIDs are determined to be present in the digest; iteratively repeating the applying, the referencing, and the determining for remaining GUIDs in the one or more GUIDs until an absence of a GUID in the digest is determined; and when a GUID is determined to be absent in the digest, comparing the set of GUIDs to a corresponding sequence of GUIDs in the first list of knowledge object customizations to identify the divergence point.",12,claim 1,0,B
10606810,14,"14. The method of claim 1 , wherein the first divergence point is determined by: applying, to a set of global unique identifiers (GUIDs) comprising a sequence of consecutive GUIDs corresponding to a pre-determined number of knowledge object customizations of the second list of knowledge object customizations, one or more hash functions to each of the set of GUIDs to determine a corresponding one or more hash values for each GUID of the set of GUIDs; referencing one or more addresses in the digest corresponding to the one or more hash values to determine a corresponding one or more address values, wherein the one or more address values is indicative of the presence or absence of the corresponding GUID in the digest; determining a presence of all GUIDs of the set of GUIDs in the digest based on the one or more address values; removing the first GUID in the set of GUIDs and appending the set of GUIDs with a GUID corresponding to a next knowledge object customization of the second list of knowledge object customizations when all GUIDS in the set of GUIDs are present in the digest; iteratively repeating the applying, the referencing, and the determining for remaining GUIDs in the one or more GUIDs until an absence of a GUID in the digest is determined; and when a GUID is determined to be absent in the digest, comparing the set of GUIDs to a corresponding sequence of GUIDs in the first list of knowledge object customizations to identify the divergence point, wherein a size of the set of GUIDs is configurable.",13,claim 1,0,B
10606810,15,"15. The method of claim 1 , wherein the digest comprises a one dimensional array of values, the one dimensional array having a configurable size.",14,claim 1,0,B
10606810,16,"16. The method of claim 1 , wherein the data aggregation and analysis system employs a late-binding schema for searching data.",15,claim 1,0,B
10606810,17,"17. A system comprising: a local data store comprising a first list of knowledge object customizations received from at least one client computing device; and a processing device coupled with the local data store, the processing device being configured to: access, by a first search head of a cluster comprising a plurality of search heads, the first list of knowledge object customizations from the local data store; generate a digest of the first list of knowledge object customizations corresponding to the first search head, the digest being stored in the local data store, wherein the digest is a reduced size representation of the first list of knowledge object customizations; propagate the digest to a second search head of the cluster; and receive an indication of a first divergence point determined between the first list of knowledge object customizations and a second list of knowledge object customizations corresponding to the second search head based on a comparison of the digest and the second list of knowledge object customizations, the first divergence point corresponding to a first position in the first list of knowledge object customizations where the first list of knowledge object customizations diverges from the second list of knowledge object customizations; and send a first set of knowledge object customizations from the first list of knowledge object customizations to the second search head, wherein the first set of knowledge object customizations comprises at least one knowledge object customization from the first list of knowledge object customizations relative to a position in the first list of knowledge object customizations corresponding to the first divergence point.",16,,0,B
10606810,18,"18. The system of claim 17 , wherein the first list of knowledge object customizations corresponding to the first search head comprises a journal of knowledge object customizations stored in the local data store corresponding to the first search head.",17,claim 17,0,B
10606810,19,"19. The system of claim 17 , wherein the processing device is configured to generate the digest of the first list of knowledge object customizations by applying a Bloom filter to the first list of knowledge object customizations in the local data store.",18,claim 17,0,B
10606810,20,"20. The system of claim 17 , wherein the first list of knowledge object customizations comprises a list of global unique identifiers (GUIDs), each knowledge object customization of the first list of knowledge object customizations corresponding specifically to a respective GUID of the list of GUIDs.",19,claim 17,0,B
10606810,21,"21. The system of claim 17 , wherein the digest comprises a bitmask generated by the processing device by applying a Bloom filter to a list of global unique identifiers (GUID) values corresponding to the first list of knowledge object customizations.",20,claim 17,0,B
10606810,22,"22. The system of claim 17 , wherein the processor is configured to send the first set of knowledge object customizations by sending at least one knowledge object customization positioned in the first list of knowledge object customizations after the first divergence point to the second search head, wherein the second list of knowledge object customizations is updated in the second search head based on the first set of knowledge object customizations.",21,claim 17,0,B
10606810,23,"23. The system of claim 17 , wherein the processing device is further configured to: propagate the digest to a third search head of the cluster; receive an indication of a second divergence point determined between the digest and a third list of knowledge object customizations corresponding to the third search head, the second divergence point corresponding to a second position in the digest; and send a second set of knowledge object customizations from the first list of knowledge object customizations to the third search head, wherein the second set of knowledge object customizations comprises knowledge object customizations from the first list of configurations after a position in the first list of configurations corresponding to the second divergence point.",22,claim 17,0,B
10606810,24,"24. The system of claim 17 , wherein the processing device is further configured to: receive an update list of knowledge object customizations from the second search head, the update list comprising at least one knowledge object customization from the second list of knowledge object customizations absent from the digest; compare a current size of the digest with a pre-determined threshold size; update the digest and the first list of knowledge object customizations to include the knowledge object customizations comprised in the update list when the current size of the digest is less than a pre-determined threshold size; and generate a second digest based on the update list when the size of the digest meets or exceeds the pre-determined threshold size.",23,claim 17,0,B
10606810,25,"25. The system of claim 17 , wherein the first divergence point is determined by: applying, to a set of global unique identifiers (GUIDs) corresponding to a pre-determined number of knowledge object customizations of the second list of knowledge object customizations, one or more hash functions to each of the set of GUIDs to determine a corresponding one or more hash values for each GUID of the set of GUIDs; referencing one or more addresses in the digest corresponding to the one or more hash values to determine a corresponding one or more address values, wherein the one or more address values is indicative of the presence or absence of the corresponding GUID in the digest; determining a presence or absence of each GUID of the set of GUIDs in the digest based on the one or more address values; iteratively repeating the applying, the referencing, and the determining for remaining GUIDs in the set of GUIDs until an absence of a GUID in the digest is determined; and when a GUID is determined to be absent in the digest, identifying the divergence point as a position in the second list of knowledge object customizations corresponding to the GUID of the set of GUIDs that is absent from the digest.",24,claim 17,0,B
10606810,26,"26. The system of claim 17 , wherein the first divergence point is determined by: applying, to a set of global unique identifiers (GUIDs) corresponding to a pre-determined number of knowledge object customizations of the second list of knowledge object customizations, one or more hash functions to each of the set of GUIDs to determine a corresponding one or more hash values for each GUID of the set of GUIDs; referencing one or more addresses in the digest corresponding to the one or more hash values to determine a corresponding one or more address values, wherein the one or more address values is indicative of the presence or absence of the corresponding GUID in the digest; determining a presence or absence of each GUID of the set of GUIDs in the digest based on the one or more address values; iteratively repeating the applying, the referencing, and the determining for remaining GUIDs in the set of GUIDs until an absence of a GUID in the digest is determined; and when a GUID is determined to be absent in the digest, comparing the set of GUIDs to a corresponding sequence of GUIDs in the first list of knowledge object customizations to identify the divergence point, wherein the iteratively repeating comprises, for each iteration, adding a GUID corresponding to a next knowledge object customization of the second list of knowledge object customizations to the set of GUIDs and performing the iteratively repeating for the sequence of consecutive GUIDs.",25,claim 17,0,B
10606810,27,"27. The system of claim 17 , wherein the first divergence point is determined by: applying, to a set of global unique identifiers (GUIDs) corresponding to a pre-determined number of knowledge object customizations of the second list of knowledge object customizations, one or more hash functions to each of the set of GUIDs to determine a corresponding one or more hash values for each GUID of the set of GUIDs; referencing one or more addresses in the digest corresponding to the one or more hash values to determine a corresponding one or more address values, wherein the one or more address values is indicative of the presence or absence of the corresponding GUID in the digest; determining a presence or absence of all GUIDs of the set of GUIDs in the digest based on the one or more address values; removing the first GUID in the set of GUIDS and appending the set of GUIDs with a GUID corresponding to a next knowledge object customization of the second list of knowledge object customizations when all GUIDS in the set of GUIDs are determined to be present in the digest; iteratively repeating the applying, the referencing, and the determining for remaining GUIDs in the one or more GUIDs until an absence of a GUID in the digest is determined; and when a GUID is determined to be absent in the digest, comparing the set of GUIDs to a corresponding sequence of GUIDs in the first list of knowledge object customizations to identify the divergence point.",26,claim 17,0,B
10606810,28,"28. A non-transitory computer readable medium having instructions stored thereon which, when executed by a processing device, causes the processing device to perform configuration propagation, the instructions comprising: instructions to access, by one or more processing devices corresponding to a first search head of a cluster comprising a plurality of search heads of a data aggregation and analysis system, a first list of knowledge object customizations corresponding to the first search head; instructions to generate a digest of the first list of knowledge object customizations corresponding to the first search head, wherein the digest is a reduced size representation of the first list of knowledge object customizations; instructions to propagate the digest to a second search head of the cluster; instructions to receive an indication of a first divergence point determined between the first list of knowledge object customizations and a second list of knowledge object customizations corresponding to the second search head based on a comparison of the digest and the second list of knowledge object customizations, the first divergence point corresponding to a first position in the first list of knowledge object customizations where the first list of knowledge object customizations diverges from the second list of knowledge object customizations; and instructions to send a first set of knowledge object customizations from the first list of knowledge object customizations to the second search head, wherein the first set of knowledge object customizations comprises at least one knowledge object customization from the first list of knowledge object customizations relative to a position in the first list of knowledge object customizations corresponding to the first divergence point.",27,,0,B
10606810,29,"29. The non-transitory computer readable medium of claim 28 , further comprising: instructions to receive an update list of knowledge object customizations from the second search head, the update list comprising at least one knowledge object customization from the second list of knowledge object customizations absent from the digest; instructions to compare a current size of the digest with a pre-determined threshold size; instructions to update the digest and the first list of knowledge object customizations to include the knowledge object customizations comprised in the update list when the current size of the digest is less than a pre-determined threshold size; and instructions to generate a second digest based on the update list when the size of the digest meets or exceeds the pre-determined threshold size.",28,claim 28,0,B
10606810,30,"30. The non-transitory computer readable medium of claim 28 , further comprising: instructions to apply, to a set of global unique identifiers (GUIDs) corresponding to a pre-determined number of knowledge object customizations of the second list of knowledge object customizations, one or more hash functions to each of the set of GUIDs to determine a corresponding one or more hash values for each GUID of the set of GUIDs; instructions to reference one or more addresses in the digest corresponding to the one or more hash values to determine a corresponding one or more address values, wherein the one or more address values is indicative of the presence or absence of the corresponding GUID in the digest; instructions to determine a presence or absence of all GUIDs of the set of GUIDs in the digest based on the one or more address values; instructions to iteratively repeat the applying, the referencing, and the determining for remaining GUIDs in the set of GUIDs until an absence of a GUID in the digest is determined; and instructions to compare, when a GUID is determined to be absent in the digest, the set of GUIDs to a corresponding sequence of GUIDs in the first list of knowledge object customizations to identify the divergence point, wherein the instructions to iteratively repeat comprises, instructions to add, for each iteration, a GUID corresponding to a next knowledge object customization of the second list of knowledge object customizations to the set of GUIDs and instructions to perform the iteratively repeating for the sequence of consecutive GUIDs.",29,claim 28,0,B
10606811,1,"1. A method for synchronizing directory structures, comprising: responsive to a change in a first file of a first directory structure of a first computing device, causing, by a processor, an offer to select between at least two options to be presented to a second computing device, wherein the at least two options include: a copying option to copy the first file to a second directory structure of the second computing device and a link creating option to create a link to the first file in the second directory structure of the second computing device; wherein, based on an indication of selection of the copying option, the first file is copied by the processor to the second directory structure of the second computing device by populating first fields of the second directory structure of the second computing device with data from the first file corresponding to second fields of the first directory structure; and wherein, based on an indication of selection of the link creating option, the link to the first file is created by the processor in the second directory structure the second computing device.",0,,1,B
10606811,2,"2. The method of claim 1 , wherein the first fields of the second directory structure to be populated are selected in response to a user input.",1,claim 1,0,B
10606811,3,"3. The method of claim 1 , wherein the first fields include one or more of: a FROM field, a SUBJECT field, a SIZE field, a RECEIVED field, a TO field, a FILE TYPE field, a NAME field, a DATE MODIFIED field, a TYPE field, or a SIZE field.",2,claim 1,0,B
10606811,4,"4. The method of claim 1 , wherein the first directory structure corresponds to a messaging application, and the second directory structure corresponds to a personal file manager application.",3,claim 1,0,B
10606811,5,"5. The method of claim 1 , wherein responsive to the selection of the link creating option, the first fields of the second directory structure are populated in accordance with the second fields of the first directory structure.",4,claim 1,0,B
10606811,6,"6. The method of claim 1 , wherein the change in the first directory structure includes at least one of addition of a sub-directory comprising directory contents and creation of a folder.",5,claim 1,0,B
10606811,7,"7. The method of claim 1 , further comprising: receiving, by the processor, a third directory structure residing on a third computing device; and associating, by the processor, the third directory structure with the first directory structure residing on the first computing device.",6,claim 1,0,B
10606811,8,"8. A computer-readable storage device having a first application, the computer-readable storage device comprising computer-readable instructions that, when executed by a processor, cause the processor to perform operations comprising: responsive to a change in a first file of a first directory structure, causing, by the processor, an offer to select between at least two options to be presented via a second computing device, wherein the at least two options include: a copying option to copy the first file to a second directory structure residing on the second computing device and a link creating option to create a link to the first file in the second directory structure of the second computing device; wherein the first directory structure corresponds to a messaging application, and the second directory structure corresponds to a personal file manager application; wherein, based on a selection of the copying option, the first file is copied to the second directory structure; and wherein, based on a selection of the link creating option, the link to the first file is created in the second directory structure.",7,,0,B
10606811,9,"9. The computer-readable storage device of claim 8 , wherein the operations further comprise: responsive to a change in the second directory structure, the change including a change in a second file of the second directory structure, causing another offer to select between at least two other options, wherein the at least two other options include: another copying option to copy the second file to the first directory structure and another link creating option to create a link to the second file in the first directory structure; wherein responsive to selection of the other copying option, the second file is copied to the first directory structure; and wherein responsive to selection of the other link creating option, the link to the second file is created in the first directory structure.",8,claim 8,0,B
10606811,10,"10. The computer-readable storage device of claim 8 , wherein the first directory structure is distinct from the second directory structure.",9,claim 8,0,B
10606811,11,"11. The computer-readable storage device of claim 10 , wherein, responsive to the selection of the copying option, the first file is copied to the second directory structure by populating first fields of the second directory structure with data from the first file corresponding to second fields of the first directory structure.",10,claim 10,0,B
10606811,12,"12. The computer-readable storage device of claim 11 , wherein the first fields of the second directory structure to be populated are selected in response to a user input.",11,claim 11,0,B
10606811,13,"13. The computer-readable storage device of claim 11 , wherein the first fields include one or more of: a FROM field, a SUBJECT field, a SIZE field, a RECEIVED field, a TO field, a FILE TYPE field, a NAME field, a DATE MODIFIED field, a TYPE field, or a SIZE field.",12,claim 11,0,B
10606811,14,"14. The computer-readable storage device of claim 8 , wherein the operations further comprise: receiving a third directory structure; and associating the third directory structure with the first directory structure.",13,claim 8,0,B
10606811,15,"15. A computing device comprising: a hardware processor; and a hardware memory having stored thereon a first directory structure and instructions which, when executed by the hardware processor of the computing device, cause the hardware processor to perform operations for synchronizing directory structures, comprising: responsive to a change in a first file of the first directory structure, causing, by the processor, an offer to select between at least two options to be presented via a second computing device, wherein the at least two options include: a copying option to copy the first file to a second directory structure of the second computing device and a link creating option to create a link to the first file in the second directory structure of the second computing device; wherein, based on a selection of the copying option, the first file is copied to the second directory structure; and wherein, based on a selection of the link creating option, the link to the first file is created in the second directory structure; wherein the first directory structure includes one or more of: a FROM field, a SUBJECT field, a SIZE field, a RECEIVED field, a TO field, a FILE TYPE field, a NAME field, a DATE MODIFIED field, a TYPE field, or a SIZE field.",14,,0,B
10606811,16,"16. The computing device of claim 15 , wherein the operations further comprise: responsive to a change in the second directory structure, the change including a change in a second file of the second directory structure, causing another offer to select between at least two other options, wherein the at least two other options include: i) another copying option to copy the second file to the first directory structure and ii) another link creating option to create a link to the second file in the first directory structure; wherein based on a selection of the other copying option, the second file is copied to the first directory structure; and wherein based on a selection of the other link creating option, the link to the second file is created in the first directory structure.",15,claim 15,0,B
10606811,17,"17. The computing device of claim 16 , wherein the change in the second directory structure includes at least one of addition of a sub-directory comprising directory contents and creation of a folder.",16,claim 16,0,B
10606811,18,"18. The computing device of claim 15 , wherein the first directory structure is distinct from the second directory structure.",17,claim 15,0,B
10606811,19,"19. The computing device of claim 15 , wherein the first directory structure corresponds to a messaging application, and the second directory structure corresponds to a personal file manager application.",18,claim 15,0,B
10606811,20,"20. The computing device of claim 15 , wherein the change in the first directory structure includes at least one of addition of a sub-directory comprising directory contents and creation of a folder.",19,claim 15,0,B
10606812,1,"1. A method for managing data in a file system over a network using one or more processors that execute instructions to perform actions, comprising: employing one or more messages to establish a secure communication channel between a first file system and a second file system, wherein a secret based on entropy information is shared with the first file system and the second file system to verify source authentication information and target authentication information included in the one or more messages; employing one or more changes to the first file system to determine a replication job that communicates the one or more changes to the second file system, and wherein a minimum delay is provided for execution of the replication job based on an age of the one or more changes; employing one or more subsequent changes to either the first file system or the second file to execute a next replication job that communicates the one or more subsequent changes between the first file system and the second file system; delaying execution of the replication job based on a size of the one or more changes; employing an amount of the one or more changes to the first file system to trigger generating a new snapshot of the first file system; and employing a difference between the new snapshot and a last generated snapshot to trigger collecting the one or more changes to the first file system.",0,,1,B
10606812,2,"2. The method of claim 1 , wherein the actions further comprise: providing a snapshot of the first file system that is associated with a current state of the second file system; and restricting the one or more changes of the first file system to include those changes that are associated with the snapshot.",1,claim 1,0,B
10606812,3,"3. The method of claim 1 , wherein establishing the secure communication channel further comprises: verifying the target authentication information stored at the first file system; verifying the source authentication information stored at the second file system; and employing the second file system to verify an acknowledgement message communicated from the first file system to the second file system.",2,claim 1,0,B
10606812,4,"4. The method of claim 1 , wherein the actions further comprise: modifying the execution of the replication job based on one or more metrics that include one or more of a processor utilization value, a network utilization value, a network quality value, a number of the one or more changes, or a size of the one or more changes, wherein modifying the execution includes one or more of delaying the execution of the replication job until the expiry of a black-out period, skipping a replication cycle, or modifying an amount of one or more resources that are allocated to the replication job.",3,claim 1,0,B
10606812,5,"5. The method of claim 1 , further comprising: continuously executing replication jobs that communicate one or more subsequent changes of the first file system to the second file system.",4,claim 1,0,B
10606812,6,"6. A system for managing data in a file system comprising: a network computer, comprising: a transceiver that communicates over the network; a memory that stores at least instructions; and one or more processors that execute instructions that perform actions, including: employing one or more messages to establish a secure communication channel between a first file system and a second file system, wherein a secret based on entropy information is shared with the first file system and the second file system to verify source authentication information and target authentication information included in the one or more messages; employing one or more changes to the first file system to determine one or more characteristics of a replication job that communicates the one or more changes to the second file system, and wherein a minimum delay is provided for execution of the replication job based on an age of the one or more changes; employing one or more subsequent changes to either the first file system or the second file to execute a next replication job that communicates the one or more subsequent changes between the first file system and the second file system delaying execution of the replication job based on a size of the one or more changes; employing an amount of the one or more changes to the first file system to trigger generating a new snapshot of the first file system; and employing a difference between the new snapshot and a last generated snapshot to trigger collecting the one or more changes to the first file system.",5,,0,B
10606812,7,"7. The system of claim 6 , wherein the actions further comprise: providing a snapshot of the first file system that is associated with a current state of the second file system; and restricting the one or more changes to include just those changes that are associated with the snapshot.",6,claim 6,0,B
10606812,8,"8. The system of claim 6 , wherein establishing the secure communication channel further comprises: verifying the target authentication information stored at the first file system; verifying the source authentication information stored at the second file system; and employing the second file system to verify an acknowledgement message communicated from the first file system to the second file system.",7,claim 6,0,B
10606812,9,"9. The system of claim 6 , wherein the actions further comprise: modifying the execution of the replication job based on one or more metrics that include one or more of a processor utilization value, a network utilization value, a network quality value, a number of the one or more changes, or a size of the one or more changes, wherein modifying the execution includes one or more of delaying the execution of the replication job until the expiry of a black-out period, skipping a replication cycle, or modifying an amount of one or more resources that are allocated to the replication job.",8,claim 6,0,B
10606812,10,"10. The system of claim 6 , further comprising: continuously executing replication jobs that communicate one or more subsequent changes of the first file system to the second file system.",9,claim 6,0,B
10606812,11,"11. A processor readable non-transitory storage media that includes instructions for managing data in a file system over a network, wherein execution of the instructions by one or more processors on one or more network computers performs actions, comprising: employing one or more messages to establish a secure communication channel between a first file system and a second file system, wherein a secret based on entropy information is shared with the first file system and the second file system to verify source authentication information and target authentication information included in the one or more messages; employing one or more changes to the first file system to determine a replication job that communicates the one or more changes to the second file system, and wherein a minimum delay is provided for execution of the replication job based on an age of the one or more changes; employing one or more subsequent changes to either the first file system or the second file to execute a next replication job that communicates the one or more subsequent changes between the first file system and the second file system; delaying execution of the replication job based on a size of the one or more changes; employing an amount of the one or more changes to the first file system to trigger generating a new snapshot of the first file system; and employing a difference between the new snapshot and a last generated snapshot to trigger collecting the one or more changes to the first file system.",10,,0,B
10606812,12,"12. The media of claim 11 , wherein the actions further comprise: providing a snapshot of the first file system that is associated with a current state of the second file system; and restricting the one or more changes of the first file system to include those changes that are associated with the snapshot.",11,claim 11,0,B
10606812,13,"13. The media of claim 11 , wherein establishing the secure communication channel further comprises: verifying the target authentication information stored at the first file system; verifying the source authentication information stored at the second file system; and employing the second file system to verify an acknowledgement message communicated from the first file system to the second file system.",12,claim 11,0,B
10606812,14,"14. The media of claim 11 , wherein the actions further comprise: modifying the execution of the replication job based on one or more metrics that include one or more of a processor utilization value, a network utilization value, a network quality value, a number of the one or more changes, or a size of the one or more changes, wherein modifying the execution includes one or more of delaying the execution of the replication job until the expiry of a black-out period, skipping a replication cycle, or modifying an amount of one or more resources that are allocated to the replication job.",13,claim 11,0,B
10606813,1,"1. A system comprising: a file system stored in a storage device, the file system comprising a plurality of files and a plurality of file system data structures individually corresponding to a respective one of the plurality of files, individual ones of the plurality of file system data structures comprising a respective user space accessible data portion and a respective kernel level only accessible portion; and at least one computing device configured to perform a boot of an operating system, wherein the at least one computing device is further configured to at least: modify, from a default value, a subset of a respective plurality of flags in the respective kernel level only accessible portion for each of the plurality of files, wherein the subset of the respective plurality of flags are unused by the file system; receive a configuration request to change a subset of a plurality of flags associated with a particular file of the plurality of files; determine a hardware address corresponding to an origin of the configuration request matches a predetermined hardware address; in response to determining that the hardware address matches the predetermined hardware address, update the subset of the plurality of flags based at least in part on the configuration request; receive an execution request to execute a requested program corresponding to the particular file of the plurality of files stored in the file system, the plurality of flags being stored in the respective kernel level only accessible portion; load a file system data structure of the plurality of file system data structures corresponding to the particular file; determine an action to take based at least in part on the subset of the plurality of flags stored in the respective kernel level only accessible portion of the file system data structure, the file system being configured to set the action to not executing the requested program when the subset of the plurality of flags for the particular file has been set to the default value as a result of at least one of: modification, creation, or copying; and perform the action.",0,,1,B
10606813,2,"2. The system of claim 1 , wherein the at least one computing device is configured to at least determine that the execution request originated from user space based at least in part on a data structure existing in memory, wherein the action to take is further based at least in part on the execution request originating from user space.",1,claim 1,0,B
10606813,3,"3. The system of claim 1 , wherein code that determines the action to take based at least in part on the plurality of flags stored is contained in a kernel add-on module.",2,claim 1,0,B
10606813,4,"4. The system of claim 1 , wherein a respective at least two bits from the respective kernel level only accessible portion from the individual ones of the plurality of file system data structures are tested to determine which action to perform, the action to perform being one of: do not run the requested program, run the requested program only if requested from kernel space, run the requested program only if requested from user space, or run the requested program.",3,claim 1,0,B
10606813,5,"5. The system of claim 1 , wherein the at least one computing device is configured to at least: query a plurality of global memory flags embedded within the operating system during the boot of the operating system to determine a current stage in the boot of the operating system; identify at least one operating system tool available based at least in part on the current stage in the boot of the operating system; determine at least one required operating system tool necessary to execute the requested program; and determine whether the at least one required operating system tool is available based at least in part on the at least one operating system tool, wherein the action is further based at least in part on whether the at least one operating system tool is available.",4,claim 1,0,B
10606813,6,"6. The system of claim 1 , wherein the default value is zero.",5,claim 1,0,B
10606813,7,"7. A non-transitory computer readable medium embodying a program that, when executed by at least one computing device, causes the at least one computing device to at least: modify, from a default value, a subset of a respective plurality of flags in a respective kernel level only accessible portion for a particular program, wherein the subset of the respective plurality of flags are unused by the file system; receive a configuration request to change a subset of a plurality of flags associated with the particular program; determine a hardware address corresponding to an origin of the configuration request matches a predetermined hardware address; in response to determining that the hardware address matches the predetermined hardware address, update the subset of the plurality of flags based at least in part on the configuration request; receive an execution request to execute the particular program stored in the file system; receive a file system data structure corresponding to the particular program, the file system data structure comprising a user space accessible data portion and a kernel level only accessible portion, the plurality of flags being stored in the kernel level only accessible portion; determine an action to take based at least in part on the subset of the plurality of flags stored in the kernel level only accessible portion, the plurality of flags defaulting to the action being not executing the particular program when the subset of the respective plurality of flags of the particular program has been set to the default value; and perform the action.",6,,0,B
10606813,8,"8. The non-transitory computer readable medium of claim 7 , wherein the program further causes the at least one computing device to at least: determine that the execution request originates from user space, wherein the action corresponds to not executing the particular program; receive a second execution request to execute the particular program stored in the file system; determine that the second execution request originates from kernel space; and determine to execute the particular program based at least in part on the plurality of flags stored in the kernel level only accessible portion and the second execution request originating from kernel space.",7,claim 7,0,B
10606813,9,"9. The non-transitory computer readable medium of claim 7 , wherein the hardware address associated with the configuration request matches the predetermined hardware address when the configuration request originates from a secured application and a device is physically connected to the at least one computing device via a non-networked connection.",8,claim 7,0,B
10606813,10,"10. The non-transitory computer readable medium of claim 7 , wherein the configuration request is configured to enable two step authentication for program execution for a number of minutes, wherein the number of minutes is determined based at least in part on data included in the configuration request.",9,claim 7,0,B
10606813,11,"11. The non-transitory computer readable medium of claim 7 , wherein the file system data structure is an Mode object.",10,claim 7,0,B
10606813,12,"12. The non-transitory computer readable medium of claim 7 , wherein the program further causes the at least one computing device to at least determine that the configuration request originated from a secured application based at least in part on determining that the hardware address corresponding to the origin of the configuration request matches the predetermined hardware address.",11,claim 7,0,B
10606813,13,"13. A method comprising: modifying, from a default value, a subset of a respective plurality of flags in a respective kernel level only accessible portion for a particular program, wherein the subset of the respective plurality of flags are unused by the file system; receiving, by at least one computing device via an operating system, a configuration request to change a subset of a plurality of flags associated with the particular program; determining, by the at least one computing device, a hardware address corresponding to an origin of the configuration request matches a predetermined hardware address; in response to determining that the hardware address matches the predetermined hardware address, updating, by the at least one computing device, the subset of the plurality of flags based at least in part on the configuration request; receiving, by the at least one computing device, an execution request to execute the particular program stored in a file system; receiving, by the at least one computing device, a file system data structure corresponding to the particular program, the file system data structure comprising a user space accessible data portion and a kernel level only accessible portion; determining, by the at least one computing device, an action to take based at least in part on a plurality of flags stored in the kernel level only accessible portion, the plurality of flags defaulting to the action being not executing the particular program when any of the subset of the plurality of flags of the particular program have been set to the default value; and performing, by the at least one computing device, the action.",12,,0,B
10606813,14,"14. The method of claim 13 , further comprising determining, by the at least one computing device, that a plurality of services required to execute the particular program are available based at least in part on a first plurality of kernel flags, wherein performing the action occurs in response to determining that the plurality of services required to execute the particular program are available.",13,claim 13,0,B
10606813,15,"15. The method of claim 13 , further comprising: determining, by the at least one computing device, that the execution request originated from user space; and in response to determining that the execution request originated from user space, determining; by the at least one computing device, whether the execution request originated from a secure user space application.",14,claim 13,0,B
10606813,16,"16. The method of claim 13 , wherein the file system automatically sets the plurality of flags for a modified program to a default action of never executing the modified program whenever a change occurs to the modified program.",15,claim 13,0,B
10606813,17,"17. The method of claim 13 , further comprising: enabling, by the at least one computing device, a configuration mode of the operating system by modifying a configuration setting; booting, by the at least one computing device, the operating system in the configuration mode; receiving, by the at least one computing device, a plurality of additional execution request to execute a plurality of programs stored in the file system; receiving, by the at least one computing device, a plurality of additional file system data structures individually corresponding to a respective one of the plurality of programs, the plurality of additional file system data structures comprising a respective user space accessible data portion and a respective kernel level only accessible portion; and executing, by the at least one computing device; the plurality of programs.",16,claim 13,0,B
10606813,18,"18. The method of claim 17 , further comprising logging, by the at least one computing device, information associated with the plurality of additional execution requests.",17,claim 17,0,B
10606813,19,"19. The method of claim 17 , further comprising updating, by the at least one computing device, a respective additional plurality of flags in the respective kernel level only accessible portion for each of the plurality of programs to enable execution of the plurality of programs when the configuration mode of the operating system is disabled.",18,claim 17,0,B
10606813,20,"20. The method of claim 13 , further comprising determining, by the at least one computing device, a location of the at least one computing device, wherein determining the action to take is further based at least on part on the location of the at least one computing device being within a predefined geographical area.",19,claim 13,0,B
10606814,1,"1. A computing system comprising: one or more processors; one or more computer-readable media having thereon computer-executable instructions that are structured such that, when executed by the one or more processors, cause the computing system to perform a method for tracking physical entities within time and space, the method comprising: creating a space-time data structure, the space-time data structure corresponding to a physical space; storing the space-time data structure in a data store; tracking one or more physical entities within the physical space, the tracking comprising one or more sensors detecting signals from the one or more physical entities within the physical space at each of a plurality of times; based on patterns in the detected sensor signals, identifying the one or more physical entities and one or more features of each of the one or more entities at each of the plurality of times; and modifying the space-time data structure to include the identified one or more physical entities and one or more features and, for each of the one or more features, an associated signal segment, the associated signal segment being a portion of the detected signals that was used to identify the each of the one or more features, each of the identified one or more physical entities and one or more features associated in the space-time data structure with a corresponding time, the space-time data structure being queryable and enabled to trigger one or more actions upon a particular state being achieved.",0,,1,B
10606814,2,"2. The computing system in accordance with claim 1 , the modifying of the space-time data structure comprising the following for at least a particular physical entity that is at least temporarily within the physical space: sensing the particular physical entity at a first time; at least approximately representing the first time within an entity data structure that corresponds to the particular physical entity and that is computing-associated with the space-time data structure; sensing at least one physical feature of the particular physical entity in which the particular physical entity exists at a second time, the second time being after the first time; representing the sensed at least one physical feature of the particular physical entity at the second time within the entity data structure; and representing an at least approximation of the second time in the entity data structure in a manner computer-associated with the sensed at least one physical feature of the particular physical entity at the second time.",1,claim 1,0,B
10606814,3,"3. The computing system in accordance with claim 2 , the sensed at least one physical feature of the particular physical entity comprising an at least estimated absence of the physical entity from the location.",2,claim 2,0,B
10606814,4,"4. The computing system in accordance with claim 2 , the sensed at least one physical feature of the particular physical entity comprising at least an estimated presence of the physical entity within the location.",3,claim 2,0,B
10606814,5,"5. The computing system in accordance with claim 2 , the sensed at least one physical feature of the particular physical entity comprising at least an estimated position of the physical entity within the location.",4,claim 2,0,B
10606814,6,"6. The computing system in accordance with claim 2 , the sensed at least one physical feature of the particular physical entity comprising at least an estimated orientation of the physical entity within the location.",5,claim 2,0,B
10606814,7,"7. The computing system in accordance with claim 2 , the sensed at least one physical feature of the particular physical entity comprising at least an estimated pose of the physical entity within the location.",6,claim 2,0,B
10606814,8,"8. The computing system in accordance with claim 2 , the sensed at least one physical feature of the particular physical entity including a confidence level for the sensed physical feature.",7,claim 2,0,B
10606814,9,"9. The computing system in accordance with claim 2 , the sensed at least one physical feature of the particular physical entity comprising a sensed plurality of physical features of the particular physical entity, and including a confidence level for at least one of the plurality of physical features.",8,claim 2,0,B
10606814,10,"10. The computing system in accordance with claim 2 , the method further comprising the following: based on the sensing of the particular physical entity at the first time, sensing at least one physical feature of the particular physical entity in which the particular physical entity exists at the first time.",9,claim 2,0,B
10606814,11,"11. The computing system in accordance with claim 10 , the sensed at least one physical feature of the particular physical entity in which the particular physical entity exists at the first time comprising at least estimated presence of the physical entity in the location.",10,claim 10,0,B
10606814,12,"12. The computing system in accordance with claim 10 , the sensed at least one physical feature of the particular physical entity in which the particular physical entity exists at the first time comprising at least first recent appearance of the physical entity in the location.",11,claim 10,0,B
10606814,13,"13. The computing system in accordance with claim 10 , further comprising: representing the sensed at least one physical feature of the particular physical entity in which the particular physical entity existed at the first time in the entity data structure in a manner computer-associated with the at least approximation of the first time.",12,claim 10,0,B
10606814,14,"14. The computing system in accordance with claim 10 , further comprising: sensing a feature change in the particular physical entity based on a comparison of the sensed feature of the particular physical entity at the first and second times.",13,claim 10,0,B
10606814,15,"15. The computing system in accordance with claim 14 , further comprising: representing the sensed feature change in the entity data structure.",14,claim 14,0,B
10606814,16,"16. The computing system in accordance with claim 2 , the particular physical entity being a person.",15,claim 2,0,B
10606814,17,"17. The computing system in accordance with claim 2 , the particular physical entity being a first physical entity, the entity data structure being a first entity data structure, the method further comprising: sensing a second physical entity in the location; sensing at least one physical feature of the second physical entity in which the second physical entity exists at the time the second physical entity was sensed; representing the sensed at least one physical feature of the particular physical entity at the second time within a second entity data structure that is also computing-associated with the space-time data structure.",16,claim 2,0,B
10606814,18,"18. The computing system in accordance with claim 17 , further comprising: sensing a physical relationship between the first physical entity and the second physical entity at the first time based on a comparison of the sensed features of the first physical entity and the second physical entity.",17,claim 17,0,B
10606814,19,"19. A method for tracking physical entities within a location: creating a space-time data structure, the space-time data structure corresponding to a physical space; storing the space-time data structure in a data store; tracking one or more physical entities within the physical space, the tracking comprising one or more sensors detecting signals from the one or more physical entities within the physical space at each of a plurality of times; based on patterns in the detected sensor signals, identifying the one or more physical entities and one or more features of each of the one or more entities at each of the plurality of times; and modifying the space-time data structure to include the identified one or more physical entities and one or more features and, for each of the one or more features, an associated signal segment, the associated signal segment being a portion of the detected signals that was used to identify the each of the one or more features, each of the identified one or more physical entities and one or more features associated in the space-time data structure with a corresponding time, the space-time data structure being queryable and able to trigger one or more actions upon a particular state being achieved.",18,,0,B
10606814,20,"20. A computer program product comprising one or more computer-readable storage media that have thereon computer-executable instructions that are structured such that, when executed by one or more processors of a computing system, cause the computing system to perform a method for tracking physical entities within a location, the method comprising: creating a space-time data structure, the space-time data structure corresponding to a physical space; storing the space-time data structure in a data store; tracking one or more physical entities within the physical space, the tracking comprising one or more sensors detecting signals from the one or more physical entities within the physical space at each of a plurality of times; based on patterns in the detected sensor signals, identifying the one or more physical entities and one or more features of each of the one or more entities at each of the plurality of times; and modifying the space-time data structure to include the identified one or more physical entities and one or more features and, for each of the one or more features, an associated signal segment, the associated signal segment being a portion of the detected signals that was used to identify the each of the one or more features, each of the identified one or more physical entities and one or more features associated in the space-time data structure with a corresponding time, the space-time data structure being queryable and able to trigger one or more actions upon a particular state being achieved.",19,,0,B
10606815,1,"1. A computer-implemented method for creating one or more indexes for information retrieval, the method comprising: reading a document having embedded hinting information into a computer memory, the hinting information including one or more tags, wherein the document includes text; identifying, using the hinting information, a unique expression in the text of the document, wherein the hinting information is associated with the unique expression; creating a first set of indexes for the unique expression in the document using a first analysis method, wherein the first analysis method is an n-gram analysis, wherein a size of the n-gram analysis for a particular unique expression is based on a value found in the tag associated with the particular unique expression; creating a second set of indexes for one or more sequences of words in the document using a second analysis method, wherein the second analysis method is a morphological analysis, and wherein the one or more sequences of words include words in the text that are not in the unique expression; and storing the created first and second sets of indexes in the memory for use in information retrieval.",0,,1,B
10606815,2,"2. The method according to claim 1 , wherein creating the first and second sets of indexes comprises: creating one or more indexes of the second set of indexes using the second analysis method until the hinting information is found in the document; creating, in response to finding hinting information in the document, the first set of indexes for each sequence in the unique expression associated with the found hinting information using the first analysis method instead of the second analysis method; and executing, after the first set of indexes for each sequence is created, the second analysis method instead of the first analysis method to create one or more additional indexes of the second set of indexes.",1,claim 1,0,B
10606815,3,"3. The method according to claim 2 , wherein a switching between the first analysis method and the second analysis method is executed by a preprocessor.",2,claim 2,0,B
10606815,4,"4. The method according to claim 1 , the method further comprising: searching the document for hinting information, wherein: the creating the first set of indexes for the unique expression is performed in response to finding the hinting information, and the creating the second set of indexes for the one or more sequences of words is performed in response to not finding the hinting information.",3,claim 1,0,B
10606815,5,"5. The method according to claim 1 , wherein the hinting information is inserted before and after or only before each unique expression in the document.",4,claim 1,0,B
10606815,6,"6. The method according to claim 1 , wherein the unique expression is identified according to at least one of using an engine for inferring existence of a unique expression, in response to a unique expression being stored in a storage, using a software application, or manually.",5,claim 1,0,B
10606815,7,"7. The method according to claim 1 , wherein the unique expression is selected from a group consisting of a proper noun, an abbreviation, a coined word, a new word, and a word or phrase which is described in a language different from a base language used in the document.",6,claim 1,0,B
10606815,8,"8. The method according to claim 1 , wherein the one or more tags include at least one of a set of a start tag and an end tag, or a tag having information on the number of words or letters or on the number of bytes in a unique expression for which the first analysis method is used.",7,claim 1,0,B
10606815,9,"9. The method according to claim 1 , wherein the hinting information includes information on an attribute of the unique expression, and the first set of indexes for each sequence in the unique expression with which the hinting information is associated is created by executing the first analysis method using the attribute information.",8,claim 1,0,B
10606815,10,"10. The method according to claim 1 , wherein the reading of the document and the creation of the first and second sets of indexes from the document which is now read into memory are repeatedly carried out, and wherein the repetition is carried out according to at least one of a fixed interval, a set time, manually, in response to the document being updated, or in response to generation of a new document having hinting information.",9,claim 1,0,B
10606815,11,"11. The method according to claim 1 , wherein the first analysis method is a method for generating a contiguous sequence of items from the unique expression, and wherein the second analysis method is a method for dividing the text other than the unique expression into a plurality of meaningful units.",10,claim 1,0,B
10606815,12,"12. The method according to claim 1 , wherein the document having embedded hinting information corresponds to an original document, the method further comprising: retrieving the original document from a storage; identifying the unique expression in the original document; embedding the hinting information into the original document, wherein the one or more tags indicate a location of the unique expression in the original document; and storing the original document with the embedded one or more tags as the document having embedded hinting information in the storage.",11,claim 1,0,B
10606815,13,"13. The method according to claim 1 , wherein the document includes text in a first language and text in a second language, wherein the first language is a base language of the document, and wherein the unique expression is the text in the second language.",12,claim 1,0,B
10606815,14,"14. A computer-implemented method for creating one or more indexes for information retrieval, the method comprising: identifying, by a processor and using hinting information embedded in a document that includes text, a unique expression in the text of the document; creating, by the processor, a first set of indexes for the unique expression by performing an n-gram analysis on the unique expression, wherein a size of the n-gram analysis for the unique expression is based on a value found in a tag associated with the unique expression; creating, by the processor, a second set of indexes for one or more sequences of words in the document by performing a morphological analysis on each word in the text in the document other than the unique expression; and storing, by the processor, the first and second sets of indexes for use in information retrieval.",13,,0,B
10606815,15,"15. The method according to claim 14 , wherein the hinting information includes the tag, wherein the tag is located directly before the unique expression, and wherein the tag includes a first parameter and a second parameter, the first parameter indicating the number of words in the unique expression, and the second parameter indicating the number of words in each index of the first set of indexes.",14,claim 14,0,B
10606815,16,"16. A computer-implemented method for creating one or more indexes for information retrieval, the method comprising: reading a document into a computer memory, wherein the document includes text; analyzing, by a processor, the document to identify one or more tags embedded in the document, each tag being associated with a unique expression found in the text; determining, by the processor and based on the one or more tags, that an n-gram analysis is to be performed to create indexes for each unique expression in the text; creating, by the processor, a first set of indexes for each unique expression by performing the n-gram analysis on each unique expression in the text, wherein a size of the n-gram analysis for a particular unique expression is based on a value found in the tag associated with the particular unique expression; creating, by the processor, a second set of indexes for one or more sequences of words in the document by performing a morphological analysis on each word in the text in the document other than the unique expression; and storing, by the processor, the first and second sets of indexes in the computer memory.",15,,0,B
10606816,1,"1. A computer-implemented method of sorting data records comprising: generating a plurality of data structures, each of which is associated with a different corresponding record field used to sort the data records, and inserting values of the record fields into the corresponding data structures, the values of the record fields being received in a plurality of streams, each of the plurality of streams corresponding to a different respective record field and including a sequence of chunks, each of the chunks including values of a record field corresponding to the stream including the chunk; inserting values of the record fields into corresponding data structures, the values being inserted such that the values are in an order in the corresponding data structures, the inserting comprising: for each respective value of each chunk of each stream of the plurality of streams, performing: receiving a respective value and an instruction for a respective entry of a respective stream, updating the data structure for the respective stream according to the respective value and the instruction, and generating an instruction for a corresponding entry of a next stream; and emitting a top predetermined number of the sorted data records, the emitting including reading out the inserted values stored in the plurality of data structures, wherein: each of the data structures comprises one or more ordered parts; each inserted value is inserted into a corresponding ordered part of the corresponding data structure, the corresponding ordered part further including a count of occurrences of the value; and each ordered part of a data structure corresponding to a record field having a sort priority immediately below another record field corresponds to a distinct value inserted into an ordered part of the data structure corresponding to the another record field.",0,,1,B
10606816,2,"2. The computer-implemented method of claim 1 , wherein the generating an instruction is for inserting a value of another field of the same record into an ordered part of a partitioned data structure corresponding to the another field.",1,claim 1,0,B
10606816,3,"3. The computer-implemented method of claim 2 , wherein inserting a value of a record field into the corresponding data structure is an O(log(m)+log(n)) operation, where n is a number of ordered parts of the data structure, and m is a number of elements in the ordered part of the data structure the value is inserted into.",2,claim 2,0,B
10606816,4,"4. The computer-implemented method of claim 1 , further comprising determining a predetermined quantity of the sorted data records.",3,claim 1,0,B
10606816,5,"5. The computer-implemented method of claim 4 , further including: compressing the data records indicated by the data structure based on the count of occurrences of the field values of the corresponding record fields.",4,claim 4,0,B
10606816,6,"6. The computer-implemented method of claim 1 , wherein the data records are compressed, and inserting the values of the record fields further comprises: decompressing selected fields of the data records.",5,claim 1,0,B
10606816,7,"7. The computer-implemented method of claim 1 , wherein the data records include streaming column data from a database table.",6,claim 1,0,B
10606817,1,"1. A method for capturing data originating from at least one device, comprising the steps of: retrieving, via an application programming interface (API) and by at least one hot server, the data from at least one network element corresponding to a network, wherein the data was sent over the network by the at least one device, the data was received at the at least one network element, the data was copied by the at least one network element, and the data was transmitted to its intended destination by the at least one network element, and wherein the at least one network element made the copied data available via the API and the data is routed through a firewall and a load balancer to the at least one hot server; archiving, via the at least one hot server, the copied data in at least one database; analyzing the archived data to determine the presence of one or more key words in the archived data and/or one or more key phrases in the archived data; and sending an alert based on the determination of the presence of at least one of the one or more key words in the archived data and/or the one or more key phrases in the archived data.",0,,1,B
10606817,2,"2. The method of claim 1 , wherein the data comprises text messages, short message service (SMS) messages, multimedia messaging service (MMS) messages, voicemail messages, voice data, web browsing data, social media data, email data, location data, global positioning system (GPS) data, mobile payment data, automobile statistics data, call logs, or metadata.",1,claim 1,0,B
10606817,3,"3. The method of claim 1 , wherein the step of retrieving the data further comprises the step of receiving, via the API, the copied data from the at least one network element.",2,claim 1,0,B
10606817,4,"4. The method of claim 3 , wherein the step of retrieving the data further comprises the step of, prior to receiving the copied data, transmitting, via the API, a request for the data to the at least one network element.",3,claim 3,0,B
10606817,5,"5. The method of claim 4 , wherein the request comprises an identifier for the at least one device, one more type identifiers for the data, and a date range for the data.",4,claim 4,0,B
10606817,6,"6. The method of claim 4 , wherein the at least one network element copies the data in response to the request.",5,claim 4,0,B
10606817,7,"7. The method of claim 4 , wherein the at least one network element copies the data before receiving the request.",6,claim 4,0,B
10606817,8,"8. The method of claim 4 , wherein the request establishes a connection with the at least one network element via the API, wherein the at least one network element is configured to continuously make the copied data available via the API without further requests.",7,claim 4,0,B
10606817,9,"9. The method of claim 1 , wherein the at least one device comprises a mobile phone and the network comprises a carrier network.",8,claim 1,0,B
10606817,10,"10. The method of claim 1 , wherein the at least one network element transmits a message to the at least one device with a notification that the data is being monitored.",9,claim 1,0,B
10606817,11,"11. A system for capturing data originating from at least one device, comprising: at least one database; and at least one processor of at least one hot server operatively coupled to the at least one database, wherein the at least one processor is operative to: retrieve, via an application programming interface (API), the data from at least one network element corresponding to a network, wherein the data was sent over the network by the at least one device, the data was received at the at least one network element, the data was copied by the at least one network element, and the data was transmitted to its intended destination by the at least one network element, and wherein the at least one network element made the copied data available via the API and the data is routed through a firewall and a load balancer to the at least one hot server; archive the copied data in the at least one database; analyze the archived data to determine the presence of one or more key words in the archived data and/or one or more key phrases in the archived data; and send an alert based on the determination of the presence of at least one of the one or more key words in the archived data and/or the one or more key phrases in the archived data.",10,,0,B
10606817,12,"12. The system of claim 11 , wherein the data comprises text messages, short message service (SMS) messages, multimedia messaging service (MMS) messages, voicemail messages, voice data, web browsing data, social media data, email data, location data, global positioning system (GPS) data, mobile payment data, automobile statistics data, call logs, or metadata.",11,claim 11,0,B
10606817,13,"13. The system of claim 11 , wherein to retrieve the data, the at least one processor is further operative to receive, via the API, the copied data from the at least one network element.",12,claim 11,0,B
10606817,14,"14. The system of claim 13 , wherein to retrieve the data, the at least one processor is further operative to, prior to receiving the copied data, transmit, via the API, a request for the data to the at least one network element.",13,claim 13,0,B
10606817,15,"15. The system of claim 14 , wherein the request comprises an identifier for the at least one device, one more type identifiers for the data, and a date range for the data.",14,claim 14,0,B
10606817,16,"16. The system of claim 14 , wherein the at least one network element copies the data in response to the request.",15,claim 14,0,B
10606817,17,"17. The system of claim 14 , wherein the at least one network element copies the data before receiving the request.",16,claim 14,0,B
10606817,18,"18. The system of claim 14 , wherein the request establishes a connection between the at least one processor and the at least one network element via the API, wherein the at least one processor is an endpoint and the at least one network element continuously makes the copied data available via the API without further requests.",17,claim 14,0,B
10606817,19,"19. The system of claim 11 , wherein the at least one network element transmits a message to the at least one device with a notification that the data is being monitored.",18,claim 11,0,B
10606817,20,"20. A method for capturing data originating from at least one device, comprising the steps of: retrieving, via a virtual private network (VPN) and by at least one hot server, the data from at least one network element corresponding to a network, wherein the data was sent over the network by the at least one device, the data was received at the at least one network element, the data was copied by the at least one network element, and the data was transmitted to its intended destination by the at least one network element, and wherein the at least one network element made the copied data available via the VPN and the data is routed through a firewall and a load balancer to the at least one hot server; archiving the copied data in at least one database; analyzing the archived data to determine the presence of one or more key words in the archived data and/or one or more key phrases in the archived data; and sending an alert based on the determination of the presence of at least one of the one or more key words in the archived data and/or the one or more key phrases in the archived data.",19,,0,B
10606817,21,"21. The method of claim 20 , wherein the VPN comprises a transmission control protocol (TCP)-based VPN operating a short message peer-to-peer (SMPP), MM3, or MM7 protocol.",20,claim 20,0,B
10606817,22,"22. The method of claim 20 , wherein the data comprises text messages, short message service (SMS) messages, multimedia messaging service (MMS) messages, voicemail messages, voice data, web browsing data, social media data, email data, location data, global positioning system (GPS) data, mobile payment data, automobile statistics data, call logs, or metadata.",21,claim 20,0,B
10606817,23,"23. The method of claim 20 , wherein the step of retrieving the data further comprises the step of receiving, via the VPN, the copied data from the at least one network element.",22,claim 20,0,B
10606817,24,"24. The method of claim 23 , wherein the step of retrieving the data further comprises the step of, prior to receiving the copied data, transmitting, via the VPN, a request for the data to the at least one network element.",23,claim 23,0,B
10606817,25,"25. The method of claim 24 , wherein the request comprises an identifier for the at least one device, one more type identifiers for the data, and a date range for the data.",24,claim 24,0,B
10606817,26,"26. The method of claim 24 , wherein the at least one network element copies the data in response to the request.",25,claim 24,0,B
10606817,27,"27. The method of claim 24 , wherein the at least one network element copies the data before receiving the request.",26,claim 24,0,B
10606817,28,"28. The method of claim 24 , wherein the request establishes a connection with the at least one network element via the VPN, wherein the at least one network element continuously makes the copied data available via the VPN without further requests.",27,claim 24,0,B
10606817,29,"29. The method of claim 20 , wherein the at least one device comprises a mobile phone and the network comprises a carrier network.",28,claim 20,0,B
10606817,30,"30. The method of claim 20 , wherein the at least one network element transmits a message to the at least one device with a notification that the data is being monitored.",29,claim 20,0,B
10606817,31,"31. A system for capturing data originating from at least one device, comprising: at least one database; and at least one hot server comprising at least one processor operatively coupled to the at least one database, wherein the at least one processor is operative to: retrieve, via a virtual private network (VPN), the data from at least one network element corresponding to a network, wherein the data was sent over the network by the at least one device, the data was received at the at least one network element, the data was copied by the at least one network element, and the data was transmitted to its intended destination by the at least one network element, and wherein the at least one network element made the copied data available via the VPN and the data is routed through a firewall and a load balancer to the at least one processor; archive the copied data in the at least one database; analyze the archived data to determine the presence of one or more key words in the archived data and/or one or more key phrases in the archived data; and send an alert based on the determination of the presence of at least one of the one or more key words in the archived data and/or the one or more key phrases in the archived data.",30,,0,B
10606817,32,"32. The system of claim 31 , wherein the VPN comprises a transmission control protocol (TCP)-based VPN operating a short message peer-to-peer (SMPP), MM3, or MM7 protocol.",31,claim 31,0,B
10606817,33,"33. The system of claim 31 , wherein the data comprises text messages, short message service (SMS) messages, multimedia messaging service (MMS) messages, voicemail messages, voice data, web browsing data, social media data, email data, location data, global positioning system (GPS) data, mobile payment data, automobile statistics data, call logs, or metadata.",32,claim 31,0,B
10606817,34,"34. The system of claim 31 , wherein to retrieve the data, the at least one processor is further operative to receive, via the VPN, the copied data from the at least one network element.",33,claim 31,0,B
10606817,35,"35. The system of claim 34 , wherein to retrieve the data, the at least one processor is further operative to, prior to receiving the copied data, transmit, via the VPN, a request for the data to the at least one network element.",34,claim 34,0,B
10606817,36,"36. The system of claim 35 , wherein the request comprises an identifier for the at least one device, one more type identifiers for the data, and a date range for the data.",35,claim 35,0,B
10606817,37,"37. The system of claim 35 , wherein the at least one network element copies the data in response to the request.",36,claim 35,0,B
10606817,38,"38. The system of claim 35 , wherein the at least one network element copies the data before receiving the request.",37,claim 35,0,B
10606817,39,"39. The system of claim 35 , wherein the request establishes a connection between the at least one processor and the at least one network element via the VPN, wherein the at least one processor is an endpoint and the at least one network element continuously makes the copied data available via the VPN without further requests.",38,claim 35,0,B
10606817,40,"40. The system of claim 31 , wherein the at least one device comprises a mobile phone and the network comprises a carrier network.",39,claim 31,0,B
10606817,41,"41. The system of claim 31 , wherein the at least one network element transmits a message to the at least one device with a notification that the data is being monitored.",40,claim 31,0,B
10606817,42,"42. The system of claim 11 , wherein the at least one processor is further operative to provision, via the API, the at least one network element with a plurality of rules, the at least one network element configured to apply the plurality of rules to the data prior to transmitting the data to its intended destination.",41,claim 11,0,B
10606818,1,"1. A method for providing a framework to register a sensor module and manifest the capability the sensor module supports, the method comprising: receiving, by one or more processors, a request to register a first sensor operably connected to an edge gateway, wherein the request to register the first sensor includes a sensor module and metadata; determining, by one or more processors, that the request to register the first sensor is compatible with a second sensor connected to the edge gateway by comparing data stored in a database, wherein: the database includes sensors registered under the edge gateway; and the first sensor and the second sensor are components of different devices; updating, by one or more processors, the database with the sensor module and the metadata of the first sensor; generating, by one or more processors, a module delegate, wherein the module delegate provides data access and interaction interfaces based on the metadata; and generating, by one or more processors, a custom configuration component, wherein the custom configuration component configures parameters and settings.",0,,1,B
10606818,2,"2. The method of claim 1 , wherein: the metadata includes status and capabilities provided by the sensor module and information on how to address the sensor module; and the information is based on a hierarchical naming scheme wherein a second sensor module under a similar name space root as the sensor module is organized and accessed in a hierarchical manner.",1,claim 1,0,B
10606818,3,"3. The method of claim 1 , wherein the module delegate is hosted by the edge gateway, and wherein the edge gateway provides access control based on a security requirement within the metadata.",2,claim 1,0,B
10606818,4,"4. The method of claim 1 , wherein the module delegate automatically generates: (i) status charts, (ii) access API, and (iii) configuration components, necessary to interact with other applications.",3,claim 1,0,B
10606818,5,"5. The method of claim 4 , wherein the configuration components include: a user interface for showing a trend of sensor data, which is exposed as a digital video format element; a local persistent storage for sensor module data; a configuration setting for configuration properties, which is exported as a stand-alone component for a flow editor; and a command setting for actions that are triggered by other components, which is accessed via RESTful API and publish-subscribe protocol.",4,claim 4,0,B
10606818,6,"6. The method of claim 1 , wherein: a wrapper is generated for the sensor module that allows the sensor module to be consumed by a higher level application and flow editor; the wrapper is an http-based component that supports both REST interface and web socket connection, operable to allow the higher level application to use RESTful API and WebSocket publish-subscribe to communicate with new modules; and a configuration interface of the sensor module is embedded using a digital video format element.",5,claim 1,0,B
10606818,7,"7. The method of claim 1 , wherein the sensor module defines a manifest describing: which event will be generated, which command will be received, what module status information will be sent, and which configuration properties are provided.",6,claim 1,0,B
10606818,8,"8. A computer program product for providing a framework to register a sensor module and manifest the capability the sensor module supports, the computer program product comprising: one or more computer readable storage media and program instructions stored on the one or more computer readable storage media, the program instructions comprising: program instructions to receive a request to register a first sensor operably connected to an edge gateway, wherein the request to register the first sensor includes a sensor module and metadata; program instructions to determine that the request to register the first sensor is compatible with a second sensor connected to the edge gateway by comparing data stored in a database, wherein: the database includes sensors registered under the edge gateway; and the first sensor and the second sensor are components of different devices; program instructions to update database with the sensor module and the metadata of the first sensor; program instructions to generate a module delegate, wherein the module delegate provides data access and interaction interfaces based on the metadata; and program instructions to generate a custom configuration component, wherein the custom configuration component configures parameters and settings.",7,,0,B
10606818,9,"9. The computer program product of claim 8 , wherein: the metadata includes status and capabilities provided by the sensor module and information on how to address the sensor module; and the information is based on a hierarchical naming scheme wherein a second sensor module under a similar name space root as the sensor module is organized and accessed in a hierarchical manner.",8,claim 8,0,B
10606818,10,"10. The computer program product of claim 8 , wherein the module delegate is hosted by the edge gateway, and wherein the edge gateway provides access control based on a security requirement within the metadata.",9,claim 8,0,B
10606818,11,"11. The computer program product of claim 8 , wherein the module delegate automatically generates: (i) status charts, (ii) access API, and (iii) configuration components, necessary to interact with other applications.",10,claim 8,0,B
10606818,12,"12. The computer program product of claim 11 , wherein the configuration components include: a user interface for showing a trend of sensor data, which is exposed as a digital video format element; a local persistent storage for sensor module data; a configuration setting for configuration properties, which is exported as a stand-alone component for a flow editor; and a command setting for actions that are triggered by other components, which is accessed via RESTful API and publish-subscribe protocol.",11,claim 11,0,B
10606818,13,"13. The computer program product of claim 8 , wherein: a wrapper is generated for the sensor module that allows the sensor module to be consumed by a higher level application and flow editor; the wrapper is an http-based component that supports both REST interface and web socket connection, operable to allow the higher level application to use RESTful API and WebSocket publish-subscribe to communicate with new modules; and a configuration interface of the sensor module is embedded using a digital video format element.",12,claim 8,0,B
10606818,14,"14. The computer program product of claim 8 , wherein the sensor module defines a manifest describing: which event will be generated, which command will be received, what module status information will be sent, and which configuration properties are provided.",13,claim 8,0,B
10606818,15,"15. A computer system for providing a framework to register a sensor module and manifest the capability the sensor module supports, the computer system comprising: one or more computer processors, one or more computer readable storage media, and program instructions stored on the computer readable storage media for execution by at least one of the one or more processors, the program instructions comprising: program instructions to receive a request to register a first sensor operably connected to an edge gateway, wherein the request to register the first sensor includes a sensor module and metadata; program instructions to determine that the request to register the first sensor is compatible with a second sensor connected to the edge gateway by comparing data stored in a database, wherein: the database includes sensors registered under the edge gateway; and the first sensor and the second sensor are components of different devices; program instructions to update database with the sensor module and the metadata of the first sensor; program instructions to generate a module delegate, wherein the module delegate provides data access and interaction interfaces based on the metadata; and program instructions to generate a custom configuration component, wherein the custom configuration component configures parameters and settings.",14,,0,B
10606818,16,"16. The computer system of claim 15 , wherein: the metadata includes status and capabilities provided by the sensor module and information on how to address the sensor module; and the information is based on a hierarchical naming scheme wherein a second sensor module under a similar name space root as the sensor module is organized and accessed in a hierarchical manner.",15,claim 15,0,B
10606818,17,"17. The computer system of claim 15 , wherein the module delegate is hosted by the edge gateway, and wherein the edge gateway provides access control based on a security requirement within the metadata.",16,claim 15,0,B
10606818,18,"18. The computer system of claim 15 , wherein the module delegate automatically generates: (i) status charts, (ii) access API, and (iii) configuration components, necessary to interact with other applications.",17,claim 15,0,B
10606818,19,"19. The computer system of claim 18 , wherein the configuration components include: a user interface for showing a trend of sensor data, which is exposed as a digital video format element; a local persistent storage for sensor module data; a configuration setting for configuration properties, which is exported as a stand-alone component for a flow editor; and a command setting for actions that are triggered by other components, which is accessed via RESTful API and publish-subscribe protocol.",18,claim 18,0,B
10606818,20,"20. The computer system of claim 15 , wherein: a wrapper is generated for the sensor module that allows the sensor module to be consumed by a higher level application and flow editor; the wrapper is an http-based component that supports both REST interface and web socket connection, operable to allow the higher level application to use RESTful API and WebSocket publish-subscribe to communicate with new modules; and a configuration interface of the sensor module is embedded using a digital video format element.",19,claim 15,0,B
10606819,1,"1. A method of reducing a number of event records to be communicated between one or more user devices and a device configured to obtain event data relating to a plurality of users, said event records corresponding to one or more changes or updates relating to a user profile or goal, said method comprising: accessing a list of pending event records corresponding to one or more changes or updates relating to a user profile or goal at a server entity; determining whether a first one of said pending event records comprises a most recent event of an event record type associated to a single one of said plurality of users; when it is determined that said first one of said pending event records comprises said most recent event of said event record type associated to said single user, transmitting said first one of said pending event records to said device configured to obtain said event data; when it is determined that said first one of said pending event records does not comprise said most recent event of said event record type associated to said single user, omitting to transmit said first one of said pending event records to said device configured to obtain said event data such that the number of event records to be communicated is reduced; performing said acts of determining and transmitting or omitting for each additional event record listed in said list of pending event records; determining whether said first one of said pending event records comprises a record indicating a first user profile deletion associated to a first user profile; when it is determined that said first one of said pending event records comprises a record indicating said profile deletion associated to said first user profile, omitting to transmit other ones of said pending event records associated to said first user profile to said device configured to obtain said event data; and ending a transmission session when it is determined that no further event records are listed in said list of pending event records.",0,,1,B
10606819,2,"2. The method of claim 1 , further comprising determining whether said first one of said pending event records comprises a recognized event type.",1,claim 1,0,B
10606819,3,"3. The method of claim 2 , wherein when said first one of said pending event records does not comprise a recognized event type, said method further comprises transmitting said first one of said pending event records to said device configured to obtain said event data.",2,claim 2,0,B
10606819,4,"4. The method of claim 3 , wherein when said first one of said pending event records does not comprise a recognized event type, said method further comprises marking said first one of said pending event records as having been evaluated.",3,claim 3,0,B
10606819,5,"5. The method of claim 1 , wherein when it is determined that said first one of said pending event records comprises said most recent event of said event record type associated to said first user profile, or when it is determined that said first one of said pending event records does not comprise said most recent event of said event record type associated to said first user profile, said method further comprising marking said first one of said pending event records as having been evaluated.",4,claim 1,0,B
10606819,6,"6. A server apparatus for reducing transmission of a plurality of records relating to a respective plurality of events entered at one or more user devices to at least one health-monitoring device, said events corresponding to one or more changes or updates relating to a user profile or goal, said server apparatus comprising: at least one interface configured to enable communication with said at least one health-monitoring device; a storage entity; and a processor configured to communicate to said storage entity, and said at least one interface, said processor configured to execute a plurality of health-monitoring computer programs and at least one event management computer program thereon, said event management computer program comprising a plurality of instructions which are configured to, when executed by said processor, cause said server apparatus to: access a plurality of previously unevaluated event records corresponding to one or more changes or updates relating to a user profile or goal; determine whether a first one of said plurality of previously unevaluated event records comprises a most temporally recent event of an event record type associated to a first user profile within said plurality of said previously unevaluated event records; transmit said first one of said plurality of previously unevaluated event records to said at least one health-monitoring device when it is determined that said first one of said plurality of previously unevaluated event records comprises said most temporally recent event of said event record type associated to said first user profile within said plurality of said previously unevaluated event records; and not transmit said first one of said plurality of previously unevaluated event records to said at least one health-monitoring device when it is determined that said first one of said plurality of previously unevaluated event records does not comprise said most temporally recent event of said event record type associated to said first user profile, and thereby reduce a number of the plurality of event records transmitted by the server apparatus; place a marker on said first one of said plurality of previously unevaluated event records as having been evaluated; and determine based on a presence of said marker on each of said plurality of previously unevaluated event records that no further event records are pending, and end a transmission session.",5,,0,B
10606819,7,"7. The server apparatus of claim 6 , wherein said determination, transmission and non-transmission occur for each of said plurality of previously unevaluated event records.",6,claim 6,0,B
10606819,8,"8. The server apparatus of claim 6 , wherein said plurality of instructions are further configured to, when executed by said processor, cause said server apparatus to: determine whether said first one of said plurality of previously unevaluated event records comprises a recognized event type; and when said first one of said plurality of previously unevaluated event records does not comprise said recognized event type, transmit said first one of said plurality of previously unevaluated event records to said at least one health-monitoring device.",7,claim 6,0,B
10606819,9,"9. The server apparatus of claim 8 , wherein said recognized event type comprises at least one of: a profile-related update, a profile deletion, a goal-related update, and/or a goal deletion.",8,claim 8,0,B
10606819,10,"10. The server apparatus of claim 8 , wherein said plurality of instructions are further configured to, when executed by said processor, cause said server apparatus to: when said first one of said plurality of previously unevaluated event records does not comprise said recognized event type, place a marker on said first one of said plurality of previously unevaluated event records as having been evaluated.",9,claim 8,0,B
10606819,11,"11. The server apparatus of claim 6 , wherein said plurality of instructions are further configured to, when executed by said processor, cause said server apparatus to: when it is determined that said first one of said plurality of previously unevaluated event records comprises a record indicating a profile deletion associated to said first user profile, not transmit any other ones of said plurality of previously unevaluated event records associated to said first profile to said at least one health-monitoring device.",10,claim 6,0,B
10606819,12,"12. A non-transitory, computer readable medium comprising a plurality of instructions which are configured to, when executed: collect at a server entity a plurality of pending event records representative of a respective plurality of events entered at one or more user devices and communicated to said server entity via a network, wherein said pending event records correspond to one or more changes or updates initiated by said users relating to a user profile or goal thereof; receive a notification that a second device is able to accept one or more of said plurality of pending event records; apply one or more rules configured to identify for suppression first ones of said plurality of pending event records which are not required to be transmitted to said health monitoring device, and identify for transmission second ones of said plurality of pending event records which are required to be transmitted to said health monitoring device; cause said first ones of said plurality of pending event records to be marked as having been evaluated, wherein said first ones of said plurality of event records do not include most recent event records of event record types; cause said second ones of said plurality of pending event records to be marked as having been evaluated, said second ones of said plurality of event records including most recent event records of the event record types; cause said second ones of said plurality of pending event records to be transmitted to said health monitoring device without causing said first ones of said plurality of event records to be transmitted to said health monitoring device such that a number of event records transmitted to said health monitoring device is reduced; and end a transmission session when it is determined that all event records are marked as having been evaluated.",11,,0,B
10606819,13,"13. The non-transitory, computer readable medium of claim 12 , wherein said notification that said second device is able to accept said one or more of said plurality of event records comprises a notification generated when said second device is powered on.",12,claim 12,0,B
10606819,14,"14. The non-transitory, computer readable medium of claim 12 , wherein one or more rules configured to identify for suppression first ones of said plurality of event records which are not required to be transmitted to said health monitoring device comprise rules configured to identify redundant and/or irrelevant event records from among said plurality of event records.",13,claim 12,0,B
10606819,15,"15. The non-transitory, computer readable medium of claim 12 , wherein one or more rules configured to identify for transmission second ones of said plurality of event records which are required to be transmitted to said health monitoring device comprise rules configured to identify non-redundant and/or most relevant event records from among said plurality of event records.",14,claim 12,0,B
10606819,16,"16. A method of reducing a number of records to be communicated between a first plurality of devices and a second device, said method comprising: accessing a list at a server entity, said list comprising a plurality of pending event records corresponding to one or more changes or updates relating to a user profile or first goal, each of said plurality of pending event records being categorized by an event type thereof; for each event type, identifying a most recent one of said plurality of pending event records thereof; transmitting said identified most recent pending event record of said each event type; omitting to transmit those ones of said plurality of pending event records of said each event type which are not identified as being said most recent one thereof such that the number of event records to be communicated is reduced; ending a transmission session when it is determined that all of the pending event records have been transmitted or omitted to transmit.",15,,0,B
10606819,17,"17. The method of claim 16 further comprising: determining whether an identified most recent one of said plurality of pending event records is a profile deletion for a first user profile, and omitting to transmit subsequent pending event records associated to said first user profile when it is determined that said identified most recent one of said plurality of pending event records is a profile deletion for the first user profile.",16,claim 16,0,B
10606820,1,"1. In a system including at least two data stores, a method for maintaining consistent values of objects, the method comprising: a data store d1 associating an update time for each object of a plurality of objects wherein each object of the plurality of objects resides, and has an entity tag stored, on a data store other than the data store d1, the entity tag indicating a version of said each object; the data store d1 maintaining a data structure comprising a balanced tree, the data structure ordering the plurality of objects by update times; the data store d1 periodically examining the data structure to read update times; and the data store d1 making a decision to request an updated version of an object belonging to the plurality of objects based on a difference between the update time associated with the object and a current time being less than a threshold value; the data store d1 sending a first entity tag identifying a version of the object to the data store on which the object resides; in response to the first entity tag matching an entity tag corresponding to a version of the object on the data store which the object resides, the data store on which the object resides responding to the data store d1 that the object has not changed; and in response to the entity tag not matching an entity tag corresponding to a version of the object on the data store which the object resides, the data store on which the object resides sending a value of the object to the data store d1.",0,,1,B
10606820,2,2. The method of claim 1 in which the data store d1 requests an updated version of the object in response to a difference between the update time and a current time being less than a threshold.,1,claim 1,0,B
10606820,3,"3. The method of claim 1 , wherein the data structure is one of a red-black tree, an AVL tree, and a B-tree.",2,claim 1,0,B
10606820,4,4. The method of claim 1 in which the data structure is a list.,3,claim 1,0,B
10606820,5,5. The method of claim 1 further comprising: the data store requesting an updated version of the object by contacting the data store on which the object resides.,4,claim 1,0,B
10606820,6,6. The method of claim 1 in which an update time for the object is based on an expiration time associated with the object.,5,claim 1,0,B
10606820,7,7. The method of claim 1 in which an update time for the object is based on a frequency with which the object changes.,6,claim 1,0,B
10606820,8,8. The method of claim 1 in which an update time for the object is based on an importance of maintaining a current value of the object in a data store.,7,claim 1,0,B
10606820,9,9. The method of claim 1 in which an update time for the object is based on a cost of the data store d1 obtaining an updated version of the object.,8,claim 1,0,B
10606820,10,10. The method of claim 1 in which an update time for the object is based on a frequency with which the data store d1 uses the object.,9,claim 1,0,B
10606820,11,11. The method of claim 1 further comprising: determining a subset including at least two of the plurality of objects which have update times in close temporal proximity and reside on a same data store; and requesting updated versions of all objects in the subset in a single request.,10,claim 1,0,B
10606820,12,"12. A computer program product for a processing system comprised of a server, the computer program product comprising a computer readable storage medium having computer readable program code embodied therewith, the computer readable program code including computer instructions, where a processor, responsive to executing the computer instructions, performs operations comprising: a data store d1 associating an update time for each object of a plurality of objects wherein each object of the plurality of objects resides, and has an entity tag stored, on a data store other than the data store d1, the entity tag indicating a version of said each object; the data store d1 maintaining a data structure comprising a balanced tree, the data structure ordering the plurality of objects by update times; the data store d1 periodically examining the data structure to read update times; the data store d1 making a decision to request an updated version of an object belonging to the plurality of objects based on a difference between the update time associated with the object and a current time being less than a threshold value; the data store d1 sending a first entity tag identifying a version of the object to the data store on which the object resides; in response to the first entity tag matching an entity tag corresponding to a version of the object on the data store which the object resides, the data store on which the object resides responding to the data store d1 that the object has not changed; and in response to the entity tag not matching an entity tag corresponding to a version of the object on the data store which the object resides, the data store on which the object resides sending a value of the object to the data store d1.",11,,0,B
10606820,13,13. The computer program product of claim 12 in which the operations further comprise: the data store d1 requests an updated version of the object in response to a difference between the update time and a current time being less than a threshold.,12,claim 12,0,B
10606820,14,"14. A processing system comprising: a server; memory; a network interface device for communicating with one or more networks; and at least one processor, communicatively coupled with the server, the memory, and the network interface device, the at least one processor, responsive to executing computer instructions, for performing operations comprising: a data store d1 associating an update time for each object of a plurality of objects wherein each object of the plurality of objects resides, and has an entity tag stored, on a data store other than the data store d1, the entity tag indicating a version of said each object; the data store d1 maintaining a data structure comprising a balanced tree, the data structure ordering the plurality of objects by update times; the data store d1 periodically examining the data structure to read update times; the data store d1 making a decision to request an updated version of an object belonging to the plurality of objects based on a difference between the update time associated with the object and a current time being less than a threshold value; the data store d1 sending a first entity tag identifying a version of the object to the data store on which the object resides; in response to the first entity tag matching an entity tag corresponding to a version of the object on the data store which the object resides, the data store on which the object resides responding to the data store d1 that the object has not changed; and in response to the entity tag not matching an entity tag corresponding to a version of the object on the data store which the object resides, the data store on which the object resides sending a value of the object to the data store d1.",13,,0,B
10606820,15,"15. The processing system of claim 14 , in which the operations further comprise: the data store d1 requests an updated version of the object in response to a difference between the update time and a current time being less than a threshold.",14,claim 14,0,B
10606821,1,"1. A method comprising: accessing a first entity record external to an applicant tracking system (ATS); determining that the first entity record corresponds to a second entity record within the ATS based on at least first information of the first entity record and second information of the second entity record, the first information being different from the second information, wherein determining that the first entity record corresponds to the second entity record comprises: accessing stored information about the first entity record and stored information about the second entity record, the stored information about the first entity record comprising the first information and the stored information about the second entity record comprising the second information; determining, based on the accessed stored information about the first entity record and the accessed stored information about the second entity record, a set of information items known about both the first entity record and the second entity record, each information item having an information type; computing, based on the set of information items, a probability that the first entity record corresponds to the second entity record by computing one or more expressiveness scores based on a value of a first information item and a value of a second information item from the set of information items, wherein at least one of the one or more expressiveness scores is computed based on a covariant expressiveness of the first information item and the second information item; and determining that the probability that the first entity record corresponds to the second entity record is greater than a threshold probability; importing, into the second entity record within the ATS, information from the first entity record external to the ATS in response to the first entity record corresponding to the second entity record; and providing, in response a request to access information about an entity associated with the second entity record, the information from the first entity record.",0,,1,B
10606821,2,"2. The method of claim 1 , wherein the request to access the information about the entity associated with the second entity record comprises a request to access information stored in the second entity record within the ATS.",1,claim 1,0,B
10606821,3,"3. The method of claim 1 , wherein the request to access the information about the entity associated with the second entity record comprises a request to view a social networking page associated with the entity, and wherein the information from the first entity record is presented adjacent to the social networking page.",2,claim 1,0,B
10606821,4,"4. The method of claim 1 , wherein determining that the first entity record corresponds to the second entity record comprises: determining that the second entity record corresponds to a third entity record, wherein information about the third entity record is stored at a central data repository; and determining that the first entity record corresponds to the third entity record.",3,claim 1,0,B
10606821,5,"5. The method of claim 4 , wherein the central data repository stores data from multiple different ATSs, the method further comprising: transmitting data stored in the ATS to the central data repository.",4,claim 4,0,B
10606821,6,"6. The method of claim 1 , wherein the first entity record external to the ATS resides within a second ATS, and wherein the second ATS belongs to a same team as the ATS.",5,claim 1,0,B
10606821,7,"7. The method of claim 1 , wherein the first entity record external to the ATS resides within a social networking service, and wherein accessing the first entity record comprises accessing, by a user of the ATS, a page corresponding to the first entity record within the social networking service.",6,claim 1,0,B
10606821,8,"8. The method of claim 1 , wherein the first entity record external to the ATS resides within an address book of a messaging service, wherein accessing the first entity record comprises accessing, by a user of the ATS, an interface within the messaging service to communicate with a person or business corresponding to the first entity record.",7,claim 1,0,B
10606821,9,"9. The method of claim 8 , further comprising: importing, into the ATS and from the messaging service, one or more messages between the user and the person or the business corresponding to the entity record; and notifying a second user of the ATS of the one or more messages.",8,claim 8,0,B
10606821,10,"10. The method of claim 1 , wherein the first information item and the second information item have a different information type, and wherein the information type comprises one of a name type, a contact type, a business type, and a geography type.",9,claim 1,0,B
10606821,11,"11. The method of claim 1 , wherein at least one of the one or more expressiveness scores measures a codependence between the first information item and the second information item.",10,claim 1,0,B
10606821,12,"12. The method of claim 1 , wherein at least one of the one or more expressiveness scores measures a frequency of occurrence of the first information item within a population, or a frequency of occurrence of the second information item within the population.",11,claim 1,0,B
10606821,13,"13. A non-transitory machine-readable medium comprising instructions which, when executed by one or more processors of a machine, cause the machine to perform operations comprising: accessing a first entity record external to an applicant tracking system (ATS); determining that the first entity record corresponds to a second entity record within the ATS based on at least first information of the first entity record and second information of the second entity record, the first information being different from the second information, wherein determining that the first entity record corresponds to the second entity record comprises: accessing stored information about the first entity record and stored information about the second entity record, the stored information about the first entity record comprising the first information and the stored information about the second entity record comprising the second information; determining, based on the accessed stored information about the first entity record and the accessed stored information about the second entity record, a set of information items known about both the first entity record and the second entity record, each information item having an information type; computing, based on the set of information items, a probability that the first entity record corresponds to the second entity record by computing one or more expressiveness scores based on a value of a first information item and a value of a second information item from the set of information items, wherein at least one of the one or more expressiveness scores is computed based on a covariant expressiveness of the first information item and the second information item; and determining that the probability that the first entity record corresponds to the second entity record is greater than a threshold probability; importing, into the second entity record within the ATS, information from the first entity record external to the ATS in response to the first entity record corresponding to the second entity record; and providing, in response a request to access information about an entity associated with the second entity record, the information from the first entity record.",12,,0,B
10606821,14,"14. The machine-readable medium of claim 13 , wherein determining that the first entity record corresponds to the second entity record comprises: determining that the second entity record corresponds to a third entity record, wherein information about the third entity record is stored at a central data repository; and determining that the first entity record corresponds to the third entity record.",13,claim 13,0,B
10606821,15,"15. The machine-readable medium of claim 14 , wherein the central data repository stores data from multiple different ATSs, the operations further comprising: transmitting data stored in the ATS to the central data repository.",14,claim 14,0,B
10606821,16,"16. The machine-readable medium of claim 13 , wherein the first entity record external to the ATS resides within a second ATS, and wherein the second ATS belongs to a same team as the ATS.",15,claim 13,0,B
10606821,17,"17. The machine-readable medium of claim 13 , wherein the first entity record external to the ATS resides within a social networking service, and wherein accessing the first entity record comprises accessing, by a user of the ATS, a page corresponding to the first entity record within the social networking service.",16,claim 13,0,B
10606821,18,"18. The machine-readable medium of claim 13 , wherein the first entity record external to the ATS resides within an address book of a messaging service, wherein accessing the first entity record comprises accessing, by a user of the ATS, an interface within the messaging service to communicate with a person or business corresponding to the first entity record.",17,claim 13,0,B
10606821,19,"19. A system comprising: one or more processors of a machine; and a memory storing instructions which, when executed by the one or more processors of the machine, cause the machine to perform operations comprising: accessing a first entity record external to an applicant tracking system (ATS); determining that the first entity record corresponds to a second entity record within the ATS based on at least first information of the first entity record and second information of the second entity record, the first information being different from the second information, wherein determining that the first entity record corresponds to the second entity record comprises: accessing stored information about the first entity record and stored information about the second entity record, the stored information about the first entity record comprising the first information and the stored information about the second entity record comprising the second information; determining, based on the accessed stored information about the first entity record and the accessed stored information about the second entity record, a set of information items known about both the first entity record and the second entity record, each information item having an information type; computing, based on the set of information items, a probability that the first entity record corresponds to the second entity record by computing one or more expressiveness scores based on a value of a first information item and a value of a second information item from the set of information items, wherein at least one of the one or more expressiveness scores is computed based on a covariant expressiveness of the first information item and the second information item; and determining that the probability that the first entity record corresponds to the second entity record is greater than a threshold probability; importing, into the second entity record within the ATS, information from the first entity record external to the ATS in response to the first entity record corresponding to the second entity record; and providing, in response a request to access information about an entity associated with the second entity record, the information from the first entity record.",18,,0,B
10606822,1,"1. A method to update metadata associated with a file system, the method comprising: creating a shadow file system metadata (FSM) index map in a shadow data block stored in a container provided in a reserved bitfile metadata table, the shadow data block being associated with a metadata storage of the file system and the metadata storage storing metadata files associated with the file system; associating the shadow FSM index map with a primary FSM index map stored in an mcell of the metadata storage through an index map of the metadata storage, the index map being indicative of the metadata files in the metadata storage; and updating the shadow FSM index map to dynamically update the metadata associated with the file system, in the metadata storage.",0,,1,B
10606822,2,"2. The method as claimed in claim 1 , wherein the associating comprises coupling the shadow FSM index map to a primary file system metadata (FSM) index map via one or more intermediate FSM index maps to form an index of the primary FSM index map, the primary FSM index map being an index map of unique identifiers associated with the metadata files of the file system, the metadata files being stored in the metadata storage.",1,claim 1,0,B
10606822,3,"3. The method as claimed in claim 1 , wherein the updating comprises adding an index in the shadow FSM index map for adding a metadata file in the metadata storage, the index being an index for a unique identifier of the metadata file.",2,claim 1,0,B
10606822,4,"4. The method as claimed in claim 1 , wherein the metadata files comprise reserved files associated with the file system.",3,claim 1,0,B
10606822,5,"5. The method as claimed in claim 1 , wherein the file system is a multi-volume file system, and wherein the metadata associated with each volume of the multi-volume file system is updated.",4,claim 1,0,B
10606822,6,"6. A metadata updating system to update metadata associated with a file system, the metadata updating system comprising: a processor; a creation module coupled to the processor to, create a shadow data block corresponding to a metadata storage of the file system stored in a container provided in a reserved bitfile metadata table, the metadata storage storing metadata files associated with the file system; and create a shadow file system metadata (FSM) index map in the shadow block data; an association module to associate the shadow FSM index map with a primary FSM index map stored in an mcell of the metadata storage through an index map of the metadata storage, the index map being indicative of a location of the metadata files in the metadata storage; and an updating module to update the shadow data block to add a metadata file in the metadata storage to update the metadata.",5,,0,B
10606822,7,"7. The metadata updating system as claimed in claim 6 , wherein the association module is to associate the shadow FSM index map to the metadata storage through a primary file system metadata (FSM) index map via one or more intermediate FSM index maps, the primary FSM index map being an index map of unique identifiers associated with the metadata files of the file system, the metadata files being stored in the metadata storage.",6,claim 6,0,B
10606822,8,"8. The metadata updating system as claimed in claim 6 , wherein the updating module is to update the shadow FSM index map to dynamically create the metadata file.",7,claim 6,0,B
10606822,9,"9. The metadata updating system as claimed in claim 6 , wherein the metadata files comprise reserved files associated with the file system.",8,claim 6,0,B
10606822,10,"10. The metadata updating system as claimed in claim 9 , wherein the updating module is to populate a reserved tag in the shadow data block, the reserved tag being associated with a reserved file from among the reserved files.",9,claim 9,0,B
10606822,11,"11. The metadata updating system as claimed in claim 6 , wherein the updating module adds an index in the shadow FSM index map to add a metadata file in the metadata storage, the index being an index for a unique identifier of the metadata file.",10,claim 6,0,B
10606822,12,"12. A non-transitory computer-readable medium comprising instructions executable by a processing resource to: create a shadow file system metadata (FSM) index map in a shadow data block stored in a container provided in a reserved bitfile metadata table, the shadow data block associated with a metadata storage of the file system and the metadata storage storing metadata files associated with the file system; associate the shadow FSM index map with a primary FSM index map stored in an mcell of the metadata storage through an index map of the metadata storage, the index map being indicative of the metadata files in the metadata storage; and modify the shadow FSM index map to dynamically add a metadata file to the file system to dynamically update the metadata storage for updating the metadata.",11,,0,B
10606822,13,"13. The non-transitory computer-readable medium as claimed in claim 12 , wherein the non-transitory computer-readable medium further comprises instructions executable by the processing resource to associate the shadow FSM index map with a primary file system metadata (FSM) index map through an index of the primary FSM index map via one or more intermediate FSM index maps to form an index of the primary FSM index map, the primary FSM index map being an index map of unique identifiers associated with the metadata files of the file system, the metadata files being stored in the metadata storage.",12,claim 12,0,B
10606822,14,"14. The non-transitory computer-readable medium as claimed in claim 12 , wherein the non-transitory computer-readable medium further comprises instructions executable by the processing resource to update the shadow data block to dynamically create the metadata file.",13,claim 12,0,B
10606822,15,"15. The non-transitory computer-readable medium as claimed in claim 14 , wherein the non-transitory computer-readable medium further comprises instructions executable by the processing resource to populate a reserved tag in the shadow data block, the reserved tag being associated with a reserved file of the file system, the reserved file being the metadata file to be created in the file system.",14,claim 14,0,B
10606823,1,"1. A method of monitoring changes for a server system, the method comprising: duplicating all data contents of a dataset of a server system for a first time point of the dataset, wherein the server system is operated on a first hardware system; transferring the duplicated data contents, for the first time point, from the server system of the first hardware system to a monitoring system, wherein the monitoring system is operated on a second hardware system separate from the first hardware system; receiving, by a processor of the monitoring system, the duplicated data contents for the first time point; storing, by the processor of the monitoring system, the duplicated data contents for the first time point; duplicating all data contents of the dataset of the server system for a second time point of the dataset; transferring the duplicated data contents, for the second time point, from the server system of the first hardware system to the monitoring system; receiving, by the processor of the monitoring system, the duplicated data contents for the second time point; processing, by the processor of the monitoring system, the duplicated data contents on the second hardware system by: comparing, at the processor of the monitoring system, the duplicated data contents for the first time point of the dataset with the duplicated data contents for the second time point of the dataset; determining, based on the comparison, a change for the server system between the first and second time points; and storing, by the processor of the monitoring system, a record of the determined change; and after storing the record of the determined change, discarding, by the processor of the monitoring system, the stored duplicated data contents for the first time point of the dataset.",0,,1,B
10606823,2,"2. The method according to claim 1 , further comprising: storing, by the processor of the monitoring system, the duplicated data contents for the second time point of the dataset; duplicating all data contents of the dataset of the server system for a third time point of the dataset; transferring the duplicated data contents, for the third time point, from the server system of the first hardware system to the monitoring system; receiving, by the processor of the monitoring system, the duplicated data contents for the third time point; comparing, at the processor of the monitoring system, the duplicated data contents for the second time point of the dataset with the duplicated data contents for the third time point of the dataset; determining, based on the comparison, a change for the server system between the second and third time points; storing, by the processor of the monitoring system, a record of the determined change for the server system between the second and third time points; and after storing the record of the determined change for the server system between the second and third time points, discarding, by the processor of the monitoring system, the stored duplicated data contents for the second time point of the dataset.",1,claim 1,0,B
10606823,3,"3. The method according to claim 1 , wherein comparing includes determining a difference between the duplicated data contents for the first time point of the dataset and the duplicated data contents for the second time point of the dataset; and wherein determining the change for the server system between the first and second time points includes noting the determined difference between the duplicated data contents for the first time point of the dataset and the duplicated data contents for the second time point of the dataset as the change for the server system.",2,claim 1,0,B
10606823,4,"4. The method according to claim 1 , further comprising, after determining the change for the server system between the first and second time points, generating, by the processor of the monitoring system, an alert reporting said change.",3,claim 1,0,B
10606823,5,"5. The method according to claim 1 , further comprising: comparing, at the processor of the monitoring system, one or more parameters for the determined change to a stored record of one or more parameters of a previously determined change for the server system; and determining, by the processor of the monitoring system, one or more differences between the determined change and the previously determined change based on the comparison of the one or more parameters of said determined change and the one or more parameters of the previously determined change.",4,claim 1,0,B
10606823,6,"6. The method according to claim 1 , wherein the server system is a database system including a database and a database management system.",5,claim 1,0,B
10606823,7,"7. The method according to claim 1 , wherein the data contents include data relating to one or more of: data objects; schema; size; status; access history; synchronization; replication; operating system; and/or management parameters of a database of the server system.",6,claim 1,0,B
10606823,8,"8. A system for monitoring changes for a server system, the system comprising: a first hardware system configured to operate the server system; wherein the server system includes a dataset; and wherein the first hardware system is configured to duplicate all data contents of the dataset of the server system, at each of a first time point and a second time point after the first time point; a second hardware system separate from the first hardware system, the second hardware system including at least one processor; and a transmission device configured to transfer the duplicated data contents, for each of the first and second time points, from the server system of the first hardware system to the second hardware system; wherein the at least one processor of the second hardware system is configured to: receive the duplicated data contents for the first time point of the dataset and the duplicated data contents for the second time point of the dataset; store the duplicated data contents for the first time point of the dataset and the duplicated data contents for the second time point of the dataset; compare the duplicated data contents for the first time point of the dataset with the duplicated data contents for the second time point of the dataset; determine, based on the comparison, a change for the server system between the first and second time points; and store a record of the determined change and discard the stored duplicated data contents for the first time point of the dataset.",7,,0,B
10606824,1,"1. A computing system, comprising: a computing device processor; a memory device including instructions that, when executed by the computing device processor, cause the computing system to: receive first image data captured by a camera mounted on a vehicle, the first image data including a representation of a first business entity and being associated with geographic coordinates corresponding to where the image data was captured; correlate the first image data with a locale based at least in part on the geographic coordinates; analyze the first image data to identify visual features of a visual representation of the first business entity, the visual features corresponding to a fa��ade of the first business entity including physical features of a building area of the first business entity; assign, based at least in part on the identified visual features, the first business entity to a category representative of a service associated with the first business entity; compare the visual features to stored inforon to determine a change in the visual representation of the first business entity, based at least in part on a difference between the physical features of the building area, the stored information comprising at least second business information associated with a second business entity at the geographic coordinates, the second business information being different than the first business information; determine that the difference between the visual features corresponds to a temporary change; compare the category of the first business entity to the stored information to determine a change in an assigned category of the second business entity; and generate an event to update the second business information to first business information of the first business entity for presentation in an online directory of businesses, in response to determining a change in at least one of the visual representation or the assigned category.",0,,1,B
10606824,2,"2. The computing system of claim 1 , wherein the instructions when executed further enable the computing system to: receive a search request for the business entity, the search request including the geographic coordinates; determine, based at least in part on the geographic coordinates, a geographic area for which the search is to be performed; identify a listing corresponding to the search request, wherein the listing is associated with a location in the geographic area; cause interactive information representative of the identified listing to be displayed; receive an indication that the listing does not include the business entity; and generate an event to provide business information of the business entity.",1,claim 1,0,B
10606824,3,"3. The computing system of claim 1 , wherein the instructions, when executed further enable the computing system to: receive second image data that includes a representation of the business entity from a computing device; analyze the second image data to identify the business entity; retrieve content associated with the business entity; and provide the content to the computing device, wherein the content includes at least one of promotional coupons, menus, advertisements, reservation systems, floor plans, videos, customer reviews, wait time, daily specials, recommendations of items offered by the business entity, or related business entities.",2,claim 1,0,B
10606824,4,"4. The computing system of claim 1 , wherein the information is derived from image data obtained from at least one of a camera of a user of an online directory, a camera of a user of a social media website, a camera coupled to an unmanned aerial vehicle, or a camera coupled to a wearable computing device.",3,claim 1,0,B
10606824,5,"5. A computing system, comprising: a computing device processor; and a memory device including instructions that, when executed by the computing device processor, cause the computing device to: receive first image data, from a camera mounted on a vehicle; the first image data including a representation of a first entity and being associated with metadata to identify the first entity; correlate the first image data with stored identification information associated with the first entity based at least in part on the metadata; analyze the first image data to identify visual features of a visual representation of the first entity, the visual features corresponding to a fa��ade of the first entity including physical features of a building area of the first entity; assign, based at least in part on the identified visual features, the first entity to a category representative of a service associated with the first entity; compare the visual features to stored information, comprising at least second business infoion of a second entity, to determine a change in the visual representation of the second entity, based at least in part on a difference between the physical features of the building area; determine that the difference between the visual features corresponds to a temporary change; compare the category of the first entity to the stored information to determine a change in an assigned category of the second entity; and generate an event to update entity descriptions of the second entity in an online directory of entities to correspond to business information of the first entity, in response to determining a change in at least one of the visual representation or the assigned category.",4,,0,B
10606824,6,"6. The computing device of claim 5 , wherein the entity includes at least one of a business entity, a landmark, a residential entity, a historical scene, or a notable scene; and wherein the metadata includes at least one of a keyword, a caption, a title, comments, geographic coordinates, or information used to catalog the first image data.",5,claim 5,0,B
10606824,7,"7. The computing device of claim 5 , wherein the instructions when executed further enable the computing system to: obtain a plurality of images, each image of the plurality of images including a view of the entity for a particular capture direction; correlate the plurality of images with an address associated with the entity; and store the plurality of images as stored information.",6,claim 5,0,B
10606824,8,"8. The computing device of claim 5 , wherein the instructions when executed further enable the computing system to: receive second image data, the second image data including a representation of at least a portion of the entity and being associated with geographic coordinates; correlate the second image data with a locale based at least in part on the geographic coordinates; analyze the second image data to determine the category associated with the entity; determine a dataset representative of a geographic area for which a search is to be performed based at least in part on the geographic coordinates; and identify a listing corresponding to the search, wherein the listing is associated with a location in the geographic area and the category.",7,claim 5,0,B
10606824,9,"9. The computing device of claim 8 , wherein the instructions when executed further enable the computing system to: cause interactive information representative of the identified listing to be displayed; receive an indication that the listing does not include the entity; and generate an event to provide business information of the entity.",8,claim 8,0,B
10606824,10,"10. The computing device of claim 8 , wherein the instructions when executed to analyze the second image data further enable the computing system to: identify information corresponding to at least one of text associated with the entity, visual features of a visual representation of the entity, or graphics associated with the entity; and compare the information with stored information to determine the category of the entity, wherein the category is one of a restaurant, a bar, a bookstore, a grocery store, or a clothing store.",9,claim 8,0,B
10606824,11,"11. The computing device of claim 5 , wherein the instructions when executed further enable the computing system to: receive second image data form a computing device that includes a representation of the entity; analyze the second image data to identify the entity; retrieve content associated with the entity; and provide the content to the computing device, wherein the content includes at least one of promotional coupons, menus, advertisements, reservation systems, floor plans, videos, customer reviews, wait time, daily specials, recommendations of items offered by the entity, or related entities.",10,claim 5,0,B
10606824,12,"12. The computing device of claim 5 , wherein the instructions when executed further enable the computing system to: receive, from the camera and a global positioning system (GPS) mounted on a vehicle, time information from a synchronized clock; receive images of objects at geographic locations captured by the camera and recording geographic locations as determined by the GPS, wherein each image and each determination of geographic location is time-stamped by the synchronized clock; associate each image with a geographic location based on corresponding respective time-stamps; and correlate each image with a locale based on each image's associated geographic location, wherein one or more images are correlated with each local.",11,claim 5,0,B
10606824,13,"13. The computing device of claim 5 , wherein the instructions when executed further enable the computing system to: receive a search request; determine a dataset representative of a geographic area for which the search is to be performed; cause a map representative of at least a portion of the geographic area to be displayed; identify a listing corresponding to the search request, wherein the listing is associated with a location within the geographic area; cause interactive information representative of the identified listing to be displayed with the map; and cause an interactive position identifier associated with the identified listing to be displayed on the map.",12,claim 5,0,B
10606824,14,"14. The computing device of claim 5 , wherein the instructions when executed further enable the computing system to: receive a search request for the entity, the search request including geographic coordinates; determine, based at least in part on the geographic coordinates, a geographic area for which the search is to be performed; identify a listing or entities corresponding to the search request, wherein the listing is associated with the geographic area; identify a plurality of potential images corresponding to the entity; provide for display the plurality of potential images in the listing; and enable user input indicating one of the plurality of potential images as being a visual representation of the entity.",13,claim 5,0,B
10606824,15,"15. The computing device of claim 14 , wherein the instructions when executed further enable the computing system to: store the user input in an online directory of entities.",14,claim 14,0,B
10606824,16,"16. A method, comprising: receiving first image data from a camera mounted on a vehicle, the first image data including a representation of a first entity and being associated with metadata to identify the first entity; correlating the first image data with stored identification information associated with the first entity based at least in part on the metadata; analyzing the first image data to identify visual features of a visual representation of the first entity, the visual features corresponding to a fa��ade of the first entity including physical features of a building area of the first entity; assigning, based at least in part on the identified visual features, the first entity to a category representative of a service associated with the first entity; comparing the visual features to stored information to determine a change in the visual representation of the entity, based at least in part on a difference between the physical features of the building area; determining that the difference between thsual features corresponds to a temporary change; comparing the category of the entity to the stored information, comprising at least second business information of a second entity, to determine a change in an assigned category of the second entity; and generating an event to update entity descriptions of the second entity in an online directory of entities to correspond to business information of the first entity, in response to determining a change in at least one of the visual representation or the assigned category.",15,,0,B
10606824,17,"17. The method of claim 16 , further including: obtaining a plurality of images, each image of the plurality of images including a view of the entity for a particular capture direction; correlating the plurality of images with a locale associated with the entity; and storing the plurality of images as stored information.",16,claim 16,0,B
10606824,18,"18. The method of claim 16 , further comprising: receiving second image data, the second image data including a representation of at least a portion of the entity and being associated with geographic coordinates; correlating the second image data with a locale based at least in part on the geographic coordinates; analyzing the second image data to determine the category associated with the entity; determining a dataset representative of a geographic area for which a search is to be performed based at least in part on the geographic coordinates; and identifying a listing corresponding to the search, wherein the listing is associated with a location in the geographic area and the category.",17,claim 16,0,B
10606824,19,"19. The method of claim 18 , further comprising: causing interactive information representative of the identified listing to be displayed; receiving an indication that the listing does not include the entity; and generating an event to provide business information of the entity.",18,claim 18,0,B
10606824,20,"20. The method of claim 16 , further comprising: receiving second image data form a computing device that includes a representation of the entity; analyzing the second image data to identify the entity; retrieving content associated with the entity; and providing the content to the computing device, wherein the content includes at least one of promotional coupons, menus, advertisements, reservation systems, floor plans, videos, customer reviews, wait time, daily specials, recommendations of items offered by the entity, or related entities.",19,claim 16,0,B
10606825,1,"1. A method comprising: retrieving a digitally stored first data set from a first digital data storage source; selecting a first data set type of a plurality of data set types for the first data set based at least in part on the first digital data storage source, and creating and storing an association of the first data set type to the first data set; selecting a first validation process from among a plurality of validation processes based at least in part on the first data set type; executing program instructions corresponding to the first validation process using at least a portion of the first data set to determine if the first data set is valid; in response to determining that the first data set is valid, assigning a validator instruction set to the first data set; assigning at least a portion of the first data set to a first analytics instruction set of a plurality of analytics instruction sets based on the first data set type and the validator instruction set; causing execution of the first analytics instruction set which performs a per-line parsing function on the first data set; causing execution of the first analytics instruction set using at least a portion of the first data set to extract and store, in a transition component, a first feature data set representing features of the first data set; determining, by the transition component, if further execution of the first analytics instruction set is needed to extract and store features of the first data set; in response to determining that further execution of the first analytics instruction set is needed to extract and store features of the first data set, causing execution of the first analytics instruction set using at least a portion of the first feature data set to extract and store, in the transition component, a second feature data set representing features of the first data set; in response to a query, causing a feature represented in the second feature data set to be displayed on a computer display device using a graphical user interface; causing a trace of transformations applied on the first data set to be displayed on the computer display device using the graphical user interface.",0,,1,B
10606825,2,"2. The method of claim 1 , wherein the first data set types comprise one or more of an integer, string, URL address, HTTP record, and TCP record and is indicative of the first digital data storage source.",1,claim 1,0,B
10606825,3,"3. The method of claim 1 , further comprising receiving at least one of the plurality of data set types as input from a client computing device.",2,claim 1,0,B
10606825,4,"4. The method of claim 1 , further comprising extracting at least one item of the following items associated with the first data set: format, data, identifier, source, destination, timestamp, listing, organization, and security information.",3,claim 1,0,B
10606825,5,"5. The method of claim 1 , further comprising assigning the at least a portion of the first data set to the first analytics instruction set based on the first digital data storage source being included in a set of sources associated with the first analytics instruction set.",4,claim 1,0,B
10606825,6,"6. The method of claim 1 , wherein the feature comprises a feature name, and wherein the query comprises at least the feature name.",5,claim 1,0,B
10606825,7,"7. The method of claim 1 , further comprising causing execution of the program instructions which compare the first data set to the first data set type.",6,claim 1,0,B
10606825,8,"8. The method of claim 1 , wherein the query comprises one or more parameters, the method further comprising filtering the first data set based on the one or more parameters to determine at least a portion of the first data set.",7,claim 1,0,B
10606825,9,"9. A security analytics system that is programmed for integrating security data sets from unfamiliar sources, the system comprising: one or more processors; one or more non-transitory digital computer readable storage media coupled to the one or more processors and storing sequences of instructions which, when executed, cause the one or more processors to: retrieve a digitally stored first computer security data set from a first digital data storage source; select a first computer security data set type of a plurality of computer security data set types for the first computer security data set based at least in part on the first digital data storage source, and creating and storing an association of the first computer security data set type to the first computer security data set; select a first validation process from among a plurality of validation processes based at least in part on the first computer security data set type; execute program instructions corresponding to the first validation process using at least a portion of the first computer security data set to determine if the first computer security data set is valid; in response to determining that the first computer security data set is valid, assign a validator instruction set to the first computer security data set; assign at least a portion of the first computer security data set to a first computer security analytics instruction set of a plurality of computer security analytics instruction sets based on the first computer security data set type and the validator instruction set; cause execution of the first computer security analytics instruction set which performs a per-line parsing function on the first computer security data set; cause execution of the first computer security analytics instruction set using at least a portion of the first computer security data set to extract and store, in a transition component, a first feature data set representing features of the first computer security data set; in response to determining that further execution of the first computer security analytics instruction set is needed to extract and store features of the first computer security data set, cause execution of the first computer security analytics instruction set using at least a portion of the first feature data set to extract and store, in the transition component, a second feature data set representing features of the first computer security data set; in response to a query, cause a feature represented in the second feature data set to be displayed on a computer display device using a graphical user interface; cause a trace of transformations applied on the first computer security data set to be displayed on the computer display device using the graphical user interface.",8,,0,B
10606825,10,"10. The method of claim 1 , further comprising causing a trace of storage locations used to be displayed on the computer display device using the graphical user interface.",9,claim 1,0,B
10606826,1,"1. A computer program product for managing information on computational resources in a computing system, wherein the computer program product comprises a computer readable storage medium having program instructions embodied therewith, the program instructions executable by a processor to cause operations, the operations comprising: maintaining a preserved data structure in persistent storage that is used to build a temporary data structure in a memory of the computing system during initialization of the computing system, wherein the temporary data structure represents computational resources in the computing system that are processed during computing system operations, wherein the temporary data structure is rebuilt from the preserved data structure during the initialization, wherein the preserved data structure includes a plurality of entries, wherein each entry in the preserved data structure includes information used to build entries in the temporary data structure during initialization, wherein each entry built in the temporary data structure represents one of the computational resources in the computing system, and wherein each entry in the temporary data structure is associated with one of the entries in the preserved data structure; determining an anomaly that would result in rebuilding the temporary data structure with an error in response to determining there are multiple entries in the preserved data structure associated with one entry in the temporary data structure; processing information on the preserved data structure and information on the temporary data structure having the anomaly to determine modifications to correct the preserved data structure; and processing the determined modifications to correct the preserved data structure.",0,,1,B
10606826,2,"2. The computer program product of claim 1 , wherein the operations further comprise: initiating a code load operation to upload a new code level in response to correcting the preserved data structure.",1,claim 1,0,B
10606826,3,"3. The computer program product of claim 1 , wherein each entry in the temporary data structure points to the entry in the preserved data structure used to build the entry in the temporary data structure during initialization, wherein the processing the information on the preserved data structure and information on the temporary data structure to determine the modifications comprises: determining at least two entries in the preserved data structure that point to one determined entry in the temporary data structure; and determining at least one of the entries in the preserved data structure that point to the preserved data structure that is not pointed to by the determined entry in the temporary data structure, wherein the processing the determined modifications comprises removing the determined at least one of the entries in the preserved data structure not pointed to by the determined entry in the temporary data structure.",2,claim 1,0,B
10606826,4,"4. The computer program product of claim 3 , wherein the operations further comprise: validating whether the entry in the preserved data structure pointed to by the determined entry in the temporary data structure would generate the determined entry in the temporary data structure, wherein the removing the determined at least one of the entries in the preserved data structure is performed in response to the validating the entry in the preserved data structure.",3,claim 3,0,B
10606826,5,"5. The computer program product of claim 1 , wherein the computing system comprises a storage controller managing access to volumes in a storage, wherein the preserved data structure comprises a rank segment table having entries and the temporary data structure comprises a volume segment table having entries, wherein each entry in the volume segment table identifies extents of tracks assigned to one of the volumes represented by the volume segment table, wherein each entry in the volume segment table points to one segment entry in the rank segment table and wherein each entry in the rank segment table points to the entry in the volume segment table that the entry in the rank segment table is used to build, wherein the anomaly occurs when multiple entries in the rank segment table points to two one entry in the volume segment table.",4,claim 1,0,B
10606826,6,"6. The computer program product of claim 5 , wherein the processing the information on the rank segment table and information on the volume segment table to determine modifications to correct the preserved data structure comprises: determining a plurality of the entries in the rank segment table that point to one determined entry in the volume segment table; and determining at least one of the determined entries in the rank segment table that is not pointed to by the determined entry in the volume segment table, wherein the processing the determined modifications comprise removing the determined at least one of the entries in the rank segment table not pointed to by the determined entry in the volume segment table.",5,claim 5,0,B
10606826,7,"7. A system comprising: a processor; a memory device; and a computer readable storage medium having program instructions executable by a processor to cause operations, the operations comprising: maintaining a preserved data structure in persistent storage that is used to build a temporary data structure in the memory device during initialization of the system, wherein the temporary data structure represents computational resources in the system that are processed during computing system operations, wherein the temporary data structure is rebuilt from the preserved data structure during the initialization, wherein the preserved data structure includes a plurality of entries, wherein each entry in the preserved data structure includes information used to build entries in the temporary data structure during initialization, wherein each entry built in the temporary data structure represents one of the computational resources in the system, and wherein each entry in the temporary data structure is associated with one of the entries in the preserved data structure; determining an anomaly that would result in rebuilding the temporary data structure with an error in response to determining there are multiple entries in the preserved data structure associated with one entry in the temporary data structure; processing information on the preserved data structure and information on the temporary data structure having the anomaly to determine modifications to correct the preserved data structure; and processing the determined modifications to correct the preserved data structure.",6,,0,B
10606826,8,"8. The system of claim 7 , wherein the operations further comprise: initiating a code load operation to upload a new code level in response to correcting the preserved data structure.",7,claim 7,0,B
10606826,9,"9. The system of claim 7 , wherein each entry in the temporary data structure points to the entry in the preserved data structure used to build the entry in the temporary data structure during initialization, wherein the processing the information on the preserved data structure and information on the temporary data structure to determine the modifications comprises: determining at least two entries in the preserved data structure that point to one determined entry in the temporary data structure; and determining at least one of the entries in the preserved data structure that point to the preserved data structure that is not pointed to by the determined entry in the temporary data structure, wherein the processing the determined modifications comprises removing the determined at least one of the entries in the preserved data structure not pointed to by the determined entry in the temporary data structure.",8,claim 7,0,B
10606826,10,"10. The system of claim 9 , wherein the operations further comprise: validating whether the entry in the preserved data structure pointed to by the determined entry in the temporary data structure would generate the determined entry in the temporary data structure, wherein the removing the determined at least one of the entries in the preserved data structure is performed in response to the validating the entry in the preserved data structure.",9,claim 9,0,B
10606826,11,"11. The system of claim 7 , further including: a storage in which volumes are configured, wherein the preserved data structure comprises a rank segment table having entries and the temporary data structure comprises a volume segment table having entries, wherein each entry in the volume segment table identifies extents of tracks assigned to one of the volumes represented by the volume segment table, wherein each entry in the volume segment table points to one segment entry in the rank segment table and wherein each entry in the rank segment table points to the entry in the volume segment table that the entry in the rank segment table is used to build, wherein the anomaly occurs when multiple entries in the rank segment table points to two one entry in the volume segment table.",10,claim 7,0,B
10606826,12,"12. The system of claim 11 , wherein the processing the information on the rank segment table and information on the volume segment table to determine modifications to correct the preserved data structure comprises: determining a plurality of the entries in the rank segment table that point to one determined entry in the volume segment table; and determining at least one of the determined entries in the rank segment table that is not pointed to by the determined entry in the volume segment table, wherein the processing the determined modifications comprise removing the determined at least one of the entries in the rank segment table not pointed to by the determined entry in the volume segment table.",11,claim 11,0,B
10606826,13,"13. A method for managing information on computational resources in a computing system, comprising: maintaining a preserved data structure in persistent storage that is used to build a temporary data structure in a memory of the computing system during initialization of the computing system, wherein the temporary data structure represents computational resources in the computing system that are processed during computing system operations, wherein the temporary data structure is rebuilt from the preserved data structure during the initialization wherein the preserved data structure includes a plurality of entries, wherein each entry in the preserved data structure includes information used to build entries in the temporary data structure during initialization, wherein each entry built in the temporary data structure represents one of the computational resources in the computing system, and wherein each entry in the temporary data structure is associated with one of the entries in the preserved data structure; determining an anomaly that would result in rebuilding the temporary data structure with an error in response to determining there are multiple entries in the preserved data structure associated with one entry in the temporary data structure; processing information on the preserved data structure and information on the temporary data structure having the anomaly to determine modifications to correct the preserved data structure; and processing the determined modifications to correct the preserved data structure.",12,,0,B
10606826,14,"14. The method of claim 13 , further comprising: initiating a code load operation to upload a new code level in response to correcting the preserved data structure.",13,claim 13,0,B
10606826,15,"15. The method of claim 13 , wherein each entry in the temporary data structure points to the entry in the preserved data structure used to build the entry in the temporary data structure during initialization, wherein the processing the information on the preserved data structure and information on the temporary data structure to determine the modifications comprises: determining at least two entries in the preserved data structure that point to one determined entry in the temporary data structure; and determining at least one of the entries in the preserved data structure that point to the preserved data structure that is not pointed to by the determined entry in the temporary data structure, wherein the processing the determined modifications comprises removing the determined at least one of the entries in the preserved data structure not pointed to by the determined entry in the temporary data structure.",14,claim 13,0,B
10606826,16,"16. The method of claim 15 , wherein the operations further comprise: validating whether the entry in the preserved data structure pointed to by the determined entry in the temporary data structure would generate the determined entry in the temporary data structure, wherein the removing the determined at least one of the entries in the preserved data structure is performed in response to the validating the entry in the preserved data structure.",15,claim 15,0,B
10606826,17,"17. The method of claim 13 , wherein the computing system comprises a storage controller managing access to volumes in a storage, wherein the preserved data structure comprises a rank segment table having entries and the temporary data structure comprises a volume segment table having entries, wherein each entry in the volume segment table identifies extents of tracks assigned to one of the volumes represented by the volume segment table, wherein each entry in the volume segment table points to one segment entry in the rank segment table and wherein each entry in the rank segment table points to the entry in the volume segment table that the entry in the rank segment table is used to build, wherein the anomaly occurs when multiple entries in the rank segment table points to two one entry in the volume segment table.",16,claim 13,0,B
10606826,18,"18. The method of claim 17 , wherein the processing the information on the rank segment table and information on the volume segment table to determine modifications to correct the preserved data structure comprises: determining a plurality of the entries in the rank segment table that point to one determined entry in the volume segment table; and determining at least one of the determined entries in the rank segment table that is not pointed to by the determined entry in the volume segment table, wherein the processing the determined modifications comprise removing the determined at least one of the entries in the rank segment table not pointed to by the determined entry in the volume segment table.",17,claim 17,0,B
10606827,1,"1. A method for distributed processing of a data collection, the method including: receiving, over an input device or port, information for configuring a distributed processing system, the configuring including forming a first configuration of components of the distributed processing system, the first configuration including a plurality of sources of data elements of the data collection and a plurality of workers configured to process data elements of the data collection, the sources and workers being distributed among a plurality of computing resources, wherein each data element includes a data partition value that identifies a subset of the plurality of workers of the first configuration according to a data partition rule of the first configuration; and processing data in the distributed processing system during at least two processing epochs, the processing including: accepting data elements from the sources for a first part of the data collection in a first processing epoch and routing said data elements through the first configuration and completing processing of at least some of said data elements, wherein other of the data elements of the first part remain queued at components of the first configuration; after accepting a first part of the data collection, initiating change of configuration of the distributed processing system from the first configuration to a second configuration; after initiating the change of configuration, performing a succession of two or more transitions between configurations of components of the system to a succession of modified configurations of components, and after each transition causing transfer of data elements between components of the modified configuration, wherein a last of said modified configurations corresponds to the second configuration, thereby completing a transition from the first configuration to the second configuration; and after completing a transition to the second configuration, accepting further data elements of the data collection from a plurality of sources of the second configuration in a second processing epoch.",0,,1,B
10606827,2,2. The method of claim 1 wherein the plurality of computing resources includes a plurality of processors coupled via communication links.,1,claim 1,0,B
10606827,3,"3. The method of claim 2 wherein the plurality of computing resources includes at least one processing thread executing on each of the plurality of processors, each computing resource being associated with a distinct processing thread.",2,claim 2,0,B
10606827,4,4. The method of claim 1 wherein the plurality of workers includes one or more workers each worker of said one or more workers being coupled to an accepter module configured to accept data elements from a plurality of partitioner modules.,3,claim 1,0,B
10606827,5,5. The method of claim 4 wherein data elements are received from any one of the partitioner modules in a first-in-first-out order.,4,claim 4,0,B
10606827,6,"6. The method of claim 1 wherein each data element further includes a serialization value, and wherein during the first processing epoch, processing using the first configuration enforces a serialization policy whereby no two data elements with a same serialization value are processed by a worker concurrently with one another.",5,claim 1,0,B
10606827,7,"7. The method of claim 6 wherein the plurality of workers includes one or more workers each worker of said one or more workers being coupled to an accepter module configured to accept data elements from a plurality of partitioner modules, the accepter module being configured to enforce a serialization policy whereby no two data elements with a same serialization value are processed by a worker coupled to said accepter module concurrently with one another.",6,claim 6,0,B
10606827,8,"8. The method of claim 6 wherein after the first processing epoch and prior to the second processing epoch, processing according to each modified configuration continues to enforce the serialization policy.",7,claim 6,0,B
10606827,9,"9. The method of claim 1 wherein during the first processing epoch, processing using the first configuration of components enforces a partition policy whereby all data elements with a same data partition value accepted from a first data source in a first order are provided to a same subset of the plurality of workers in the first order.",8,claim 1,0,B
10606827,10,"10. The method of claim 9 wherein after the first processing epoch and prior to the second processing epoch, data elements of the first part of the data that have not completed processing in the first processing epoch and with the same data partition value accepted from the first data source are provided to the same worker in the first order.",9,claim 9,0,B
10606827,11,11. The method of claim 10 wherein at least some of said data elements are transferred between components of the modified configurations.,10,claim 10,0,B
10606827,12,12. The method of claim 1 wherein the second configuration of components differs from the first configuration in at least one of: (a) a partition rule; (b) a set of sources; and (c) a set of workers.,11,claim 1,0,B
10606827,13,"13. A method for distributed processing of a data collection, the method including: receiving, over an input device or port, information for configuring a distributed processing system, the configuring including forming a first configuration of components of the distributed processing system, the first configuration including a plurality of sources of data elements of the data collection and a plurality of workers configured to process data elements of the data collection, the sources and workers being distributed among a plurality of computing resources, wherein each data element includes a partition value that identifies a subset of the plurality of workers of the first configuration according to a partition rule of the first configuration; and processing data in the distributed processing system during at least two processing epochs, the processing including: accepting data elements from the sources for a first part of the data collection in a first processing epoch and routing said data elements through the first configuration and completing processing of at least some of said data elements, wherein other of the data elements of the first part remain queued at components of the first configuration; after accepting a first part of the data collection, initiating change of configuration of the distributed processing system from the first configuration to a second configuration; after initiating the change of configuration, performing a succession of two or more transitions between configurations of components of the system to a succession of modified configurations of components, and after each transition causing transfer of data elements between components of the modified configuration, wherein a last of said modified configurations corresponds to the second configuration, thereby completing a transition from the first configuration to the second configuration; and after completing a transition to the second configuration, accepting further data elements of the data collection from a plurality of sources of the second configuration in a second processing epoch, wherein each source of data elements is coupled to a partitioner module configured to accept data elements from the source, and wherein each partitioner is configured with the partition rule to direct data elements to a worker identified according to the partition rule.",12,,0,B
10606827,14,"14. The method of claim 13 performing a first transition of the succession of two or more transitions between configurations of components of the system includes halting operation of the partitioner modules, stopping of acceptance of data elements from the sources at the partitioner modules, reconfiguring the plurality of partition modules with a modified partition rule, and coupling at least one queue of data elements accepted from a source to provide data elements to a partition module reconfigured with the modified partition.",13,claim 13,0,B
10606827,15,"15. The method of claim 13 wherein each partitioner module is hosted on a same computing resource as a source coupled to said partitioner module, wherein passing data elements from said source to said partitioner is performed without requiring inter-processor communication.",14,claim 13,0,B
10606827,16,16. The method of claim 13 wherein the plurality of workers includes one or more workers each worker of said one or more workers being coupled to an accepter module configured to accept data elements from a plurality of partitioner modules.,15,claim 13,0,B
10606827,17,"17. The method of claim 16 wherein each accepter module is hosted on a same computing resource as a worker coupled to said accepter module, wherein passing data elements from said accepter module to said worker is performed without requiring inter-processor communication.",16,claim 16,0,B
10606827,18,"18. The method of claim 16 wherein a first partitioner module is hosted on a same computing resource as a first accepter module, and is hosted on a different computing resource than a second accepter module, and wherein routing the data elements includes passing data elements from the first partitioner module to the first accepter module without requiring inter-processor communication, and wherein routing the data elements includes queuing data elements at the first partitioner module prior to inter-processor communication of said data elements for passing to the second accepter module.",17,claim 16,0,B
10606827,19,"19. A method for distributed processing of a data collection, the method including: receiving, over an input device or port, information for configuring a distributed processing system, the configuring including forming a first configuration of components of the distributed processing system, the first configuration including a plurality of sources of data elements of the data collection and a plurality of workers configured to process data elements of the data collection, the sources and workers being distributed among a plurality of computing resources, wherein each data element includes a partition value that identifies a subset of the plurality of workers of the first configuration according to a partition rule of the first configuration; and processing data in the distributed processing system during at least two processing epochs, the processing including: accepting data elements from the sources for a first part of the data collection in a first processing epoch and routing said data elements through the first configuration and completing processing of at least some of said data elements, wherein other of the data elements of the first part remain queued at components of the first configuration; after accepting a first part of the data collection, initiating change of configuration of the distributed processing system from the first configuration to a second configuration; after initiating the change of configuration, performing a succession of two or more transitions between configurations of components of the system to a succession of modified configurations of components, and after each transition causing transfer of data elements between components of the modified configuration, wherein a last of said modified configurations corresponds to the second configuration, thereby completing a transition from the first configuration to the second configuration; and after completing a transition to the second configuration, accepting further data elements of the data collection from a plurality of sources of the second configuration in a second processing epoch, wherein each source of data elements is coupled to a partitioner module configured to accept data elements from the source, and wherein each partitioner is configured with the partition rule to direct data elements to a worker identified according to the partition rule, the plurality of workers includes one or more workers each worker of said one or more workers being coupled to an accepter module configured to accept data elements from a plurality of partitioner modules, and performing a first transition of the succession of two or more transitions between configurations of components of the system includes halting operation of the partitioner modules, stopping of acceptance of data elements from the sources at the partitioner modules, halting operation of the plurality of accepter modules, reconfiguring the plurality of partition modules with a modified partition rule, and coupling at least one queue of an accepter module of the plurality of accepter modules to provide data elements to a partition module reconfigured with the modified partition.",18,,0,B
10606827,20,"20. A non-transitory machine-readable medium with software for distributed processing of a data collection stored thereon, the software including instructions that, when executed by one or more processors of a data processing system, cause the data processing system to: receive, over an input device or port, information for configuring a distributed processing system, the configuring including forming a first configuration of components of the distributed processing system, the first configuration including a plurality of sources of data elements of the data collection and a plurality of workers configured to process data elements of the data collection, the sources and workers being distributed among a plurality of computing resources, wherein each data element includes a data partition value that identifies a subset of the plurality of workers of the first configuration according to a partition rule of the first configuration; and process data in the distributed processing system during at least two processing epochs, the processing including: accepting data elements from the sources for a first part of the data collection in a first processing epoch and routing said data elements through the first configuration and completing processing of at least some of said data elements, wherein other of the data elements of the first part remain queued at components of the first configuration; after accepting a first part of the data collection, initiating change of configuration of the distributed processing system from the first configuration to a second configuration; after initiating the change of configuration, performing a succession of two or more transitions between configurations of components of the system to a succession of modified configurations of components, and after each transition causing transfer of data elements between components of the modified configuration, wherein a last of said modified configurations corresponds to the second configuration, thereby completing a transition from the first configuration to the second configuration; and after completing a transition to the second configuration, accepting further data elements of the data collection from a plurality of sources of the second configuration in a second processing epoch.",19,,0,B
10606827,21,"21. A distributed processing system for distributed processing of a data collection, the distributed processing system including: means for receiving information for configuring the distributed processing system, the configuring including forming a first configuration of components of the distributed processing system, the first configuration including a plurality of sources of data elements of the data collection and a plurality of workers configured to process data elements of the data collection, the sources and workers being distributed among a plurality of computing resources, wherein each data element includes a data partition value that identifies a subset of the plurality of workers of the first configuration according to a partition rule of the first configuration; and means for processing data during at least two processing epochs, the processing including: accepting data elements from the sources for a first part of the data collection in a first processing epoch and routing said data elements through the first configuration and completing processing of at least some of said data elements, wherein other of the data elements of the first part remain queued at components of the first configuration; after accepting a first part of the data collection, initiating change of configuration of the distributed processing system from the first configuration to a second configuration; after initiating the change of configuration, performing a succession of two or more transitions between configurations of components of the system to a succession of modified configurations of components, and after each transition causing transfer of data elements between components of the modified configuration, wherein a last of said modified configurations corresponds to the second configuration, thereby completing a transition from the first configuration to the second configuration; and after completing a transition to the second configuration, accepting further data elements of the data collection from a plurality of sources of the second configuration in a second processing epoch.",20,,0,B
10606827,22,"22. A distributed processing system, the distributed processing system including a plurality of hardware-based processing engines and configured to execute configurations of components distributed among said processing engines according to a first configuration of components, and to enable a transition to a second configuration of components via a succession of transitions between configurations of components of the system to a succession of modified configurations of components, wherein the first configuration of components includes: a plurality of sources of data elements of the data collection and a plurality of workers configured to process data elements of the data collection, the sources and workers being distributed among a plurality of processing engines, wherein each data element includes a data partition value that identifies a subset of the plurality of workers of the first configuration according to a partition rule of the first configuration; a plurality of partitioner modules, each partitioner module being configured to accept data elements from the source, and wherein each partitioner is configured with the partition rule to direct data elements to a worker identified according to the partition rule; and a plurality of accepter modules, each accepter module configured to accept data elements from a plurality of partitioner modules, and to provide data elements to at least one worker; wherein the system is configured to change from the first configuration to the second configuration by performing a succession of two or more transitions between configurations of components of the system to a succession of modified configurations of components, and after each transition causing transfer of data elements between components of the modified configuration, wherein a last of said modified configurations corresponds to the second configuration, thereby completing a transition from the first configuration to the second configuration.",21,,0,B
10606828,1,"1. A method of correlating data stored at a plurality of storage locations, the method comprising: extracting first data representing an item of information from a first storage location; extracting second data representing the item of information from a second storage location; and using the first data and the second data to assess the validity of the second data by confirming that a data size of the second data is the same as a data size of the first data, wherein, when the second data is determined to be invalid: maintaining the first data; and discarding the second data; and wherein, when the second data is determined to be valid: converting the second data into third data having a standardized data format; and storing the third data as new data, and wherein confirming that the data size of the second data is the same as the data size of the first data comprises: receiving a count of reference objects in the second data; calculating an expected number of reference objects by determining a number of reference objects in the first data; and comparing the received count to the calculated number and determining a variance between the received count and the calculated number.",0,,1,B
10606828,2,"2. The method of claim 1 , wherein using the first data and the second data to assess the validity of the second data comprises: confirming that there were no reported errors during a process of extracting the second data from the second storage location.",1,claim 1,0,B
10606828,3,"3. The method of claim 1 , wherein using the first data and the second data to assess the validity of the second data further comprises: parsing the first data to obtain first parse data corresponding to one or more parse categories; parsing the second data to obtain second parse data corresponding to the one or more parse categories; and comparing the first parse data and the second parse data.",2,claim 1,0,B
10606828,4,"4. The method of claim 1 , further comprising: providing an interface that permits direct access to the third data.",3,claim 1,0,B
10606828,5,"5. The method of claim 1 , further comprising, if the second data is determined to be valid: logging the second data as historical data.",4,claim 1,0,B
10606828,6,"6. The method of claim 1 , further comprising receiving information related to the first storage location wherein such information comprises: port identifier data; zoning data; and storage location configuration data, and wherein the information related to the first storage location is stored outside of the first storage location.",5,claim 1,0,B
10606828,7,"7. The method of claim 1 , further comprising receiving information related to the first storage location wherein such information comprises: fabric login data; fabric channel name server data; interface data; and zoneset data.",6,claim 1,0,B
10606828,8,"8. The method of claim 1 , further comprising: storing the third data in a third storage location.",7,claim 1,0,B
10606828,9,"9. The method of claim 8 , wherein storing the third data in the third storage location further comprises: moving a previously stored data value representing the item of information from the third storage location into a previous day storage table; and storing the third data into the data storage location in the third storage location.",8,claim 8,0,B
10606828,10,"10. A system for correlating data from a plurality of data sources, the system comprising: a processor; a hardware data interface; a correlation engine database; a memory; wherein the processor is in electronic communication with the hardware data interface, the correlation engine database, and the memory; the memory comprising software instructions that, when executed by the processor, cause the processor to: extract, using the hardware data interface, first data representing an item of information from a first storage location; extract, using the hardware data interface, second data representing the item of information from a second storage location receive, using the hardware data interface, information relating to the second data comprising: file record quantity; data source port data; and a value representing a quantity of reference objects in the second data; assess the validity of the second data using the first data by confirming that a data size of the second data is the same as a data size of the first data; wherein, when the second data is determined to be invalid: maintaining the first data; and discarding the second data; and wherein, when the second data is determined to be valid: converting the second data into third data having a standardized data format; and storing, using the hardware data interface, the third data as new data, and wherein confirming that the data size of the second data is the same as the data size of the first data comprises: receiving a count of reference objects in the second data; calculating an expected number of reference objects by determining a number of reference objects in the first data; and comparing the received count to the calculated number and determining a variance between the received count and the calculated number.",9,,0,B
10606828,11,"11. The system of claim 10 , wherein using the first data and the second data to assess the validity of the second data comprises: confirming that there were no reported errors during a process of extracting the second data from the second storage location.",10,claim 10,0,B
10606828,12,"12. The system of claim 10 , wherein using the first data and the second data to assess the validity of the second data further comprises: parsing the first data to obtain first parse data corresponding to one or more parse categories; parsing the second data to obtain second parse data corresponding to the one or more parse categories; and comparing the first parse data and the second parse data.",11,claim 10,0,B
10606828,13,"13. The system of claim 10 , wherein the third data is stored in a third storage location.",12,claim 10,0,B
10606828,14,"14. The system of claim 13 , wherein the third data is stored in the third storage location by: moving a previously stored data value representing the item of information from the third storage location into a previous day storage table; and storing the third data into the data storage location in the third storage location.",13,claim 13,0,B
10606828,15,"15. The system of claim 10 , further comprising software instructions that, when executed by the processor, cause the processor to: provide an interface that permits direct access to the third data.",14,claim 10,0,B
10606828,16,"16. The system of claim 10 , wherein the software instructions comprise instructions which, when executed by the processor, cause the processor to receive information related to the first storage location comprising: port identifier data; zoning data; and storage location configuration data, and wherein the information related to the first storage location is stored outside of the first storage location.",15,claim 10,0,B
10606828,17,"17. The system of claim 10 , wherein the software instructions comprise instructions which, when executed by the processor, cause the processor to receive information related to the first storage location comprising: fabric login data; fabric channel name server data; interface data; and zoneset data.",16,claim 10,0,B
10606828,18,"18. A non-transitory computer readable medium configured to store instructions for correlating data stored at a plurality of storage locations, wherein when executed, the instructions cause a processor to perform the following: extracting first data representing an item of information from a first storage location; extracting second data representing the item of information from a second storage location; and using the first data and the second data to assess the validity of the second data by confirming that a data size of the second data is the same as a data size of the first data, wherein, when the second data is determined to be invalid, the instructions, when executed, cause the processor to further perform the following: maintaining the first data; and discarding the second data; and wherein, when the second data is determined to be valid, the instructions, when executed, cause the processor to further perform the following: converting the second data into third data having a standardized data format; storing the third data as new data in a third storage location; and provide an interface that permits direct access to the third data, and wherein confirming that the data size of the second data is the same as the data size of the first data comprises: receiving a count of reference objects in the second data; calculating an expected number of reference objects by determining a number of reference objects in the first data; and comparing the received count to the calculated number and determining a variance between the received count and the calculated number.",17,,0,B
10606828,19,"19. The non-transitory computer readable medium according to claim 18 , wherein storing the third data in the third storage location further comprises: moving a previously stored data value representing the item of information from the third storage location into a previous day storage table; and storing the third data into the data storage location in the third storage location.",18,claim 18,0,B
10606828,20,"20. The non-transitory computer readable medium according to claim 18 , wherein using the first data and the second data to assess the validity of the second data further comprises: parsing the first data to obtain first parse data corresponding to one or more parse categories; parsing the second data to obtain second parse data corresponding to the one or more parse categories; and comparing the first parse data and the second parse data.",19,claim 18,0,B
10606829,1,"1. A method of efficiently identifying data inconsistencies between electronic record systems using data partitioning, comprising: requesting a first data subset from a first record system using a first partition parameter; requesting a second data subset from a second record system using the first partition parameter; receiving the first data subset comprising a first number of groups based on the first partition parameter; receiving the second data subset comprising a second number of groups based on the first partition parameter, wherein one or more groups in the second number of groups correspond to one or more groups in the first number of groups; determining at least one group of the first number of groups where data associated with the at least one group of the first number of groups does not match data associated with a corresponding group in the second number of groups; if a number of records associated with the at least one group of the first number of groups exceeds a threshold: incrementing the first partition parameter by a partition increment to obtain a second partition parameter; requesting a third data subset from the first record system using the second partition parameter; requesting a fourth data subset from a second record system using the second partition parameter; receiving the third data subset comprising a third number of groups based on the second partition parameter; receiving the fourth data subset comprising a fourth number of groups based on the second partition parameter; determining at least one group of the third number of groups where data associated with the at least one group of the third number of groups does not match data associated with a corresponding group in the fourth number of groups; and if a number of records associated with the at least one group of the third number of groups does not exceed the threshold: resyncing the at least one group of the third number of groups with the corresponding group in the fourth number of groups.",0,,1,B
10606829,2,"2. The method of claim 1 , wherein the resyncing further comprises: requesting a first data report from the first record system for the at least one group of the third number of groups; requesting a second data report from the second record system for the corresponding group in the fourth number of groups; determining a record in the first data report that does not match a record in the second data report; and resyncing the at least one group of the third number of groups with the corresponding group in the fourth number of groups based on determining that the record in the first data report does not match a record in the second data report.",1,claim 1,0,B
10606829,3,"3. The method of claim 1 , wherein the first partition parameter determines how records in the first data subset are partitioned into the first number of groups and how records in the second data subset are partitioned into the second number of groups, and wherein the second partition parameter determines how records in the third data subset are partitioned into the third number of groups and how records in the fourth data subset are partitioned into the fourth number of groups.",2,claim 1,0,B
10606829,4,"4. The method of claim 1 , wherein the first partition parameter indicates a number of data elements of a partition field associated with each record of the first data subset and each record of the second data subset, and wherein the second partition parameter indicates a number of data elements of a partition field associated with each record of the third data subset and each record of the fourth data subset.",3,claim 1,0,B
10606829,5,"5. The method of claim 4 , wherein data elements of the partition field associated with each record of the first data subset and each record of the second data subset comprise digits, and wherein the number of data elements indicated by the first partition parameter is one or a higher number, and wherein a number of data elements of partition fields of a number of records in each group of the first number of groups correspond to identical one or more data element values, and wherein a number of data elements of partition fields of a number of records in each group of the third number of groups correspond to identical one or more data element values.",4,claim 4,0,B
10606829,6,"6. The method of claim 4 , wherein data elements of the partition field associated with each record of the first data subset and each record of the second data subset comprise digits, and wherein a number of data elements of partition fields of records in each corresponding group pair from the first number of groups and the second number of groups correspond to identical one or more data element values, and wherein a number of data elements of partition fields of records in each corresponding group pair from the third number of groups and the fourth number of groups correspond to identical one or more data element values.",5,claim 4,0,B
10606829,7,"7. The method of claim 1 , wherein the data elements comprise letters.",6,claim 1,0,B
10606829,8,"8. A computer system, comprising: a non-transitory memory; and a processor configured to: request a first data subset from a first record system using a first partition parameter; request a second data subset from a second record system using the first partition parameter; receive the first data subset comprising a first number of groups based on a first partition parameter; receive the second data subset comprising a second number of groups based on the first partition parameter, wherein one or more groups in the second number of groups correspond to one or more groups in the first number of groups; determine at least one group of the first number of groups where data associated with the at least one group of the first number of groups does not match data associated with a corresponding group in the second number of groups; if a number of records associated with the at least one group of the first number of groups exceeds a threshold: increment the first partition parameter by a partition increment to obtain a second partition parameter; request a third data subset from the first record system using the second partition parameter; request a fourth data subset from a second record system using the second partition parameter; receive the third data subset comprising a third number of groups based on the second partition parameter; receive the fourth data subset comprising a fourth number of groups based on the second partition parameter; determine at least one group of the third number of groups where data associated with the at least one group of the third number of groups does not match data associated with a corresponding group in the fourth number of groups; and if a number of records associated with the at least one group of the third number of groups does not exceed the threshold: resyncing the at least one group of the third number of groups with the corresponding group in the fourth number of groups.",7,,0,B
10606829,9,"9. The computer system of claim 8 , wherein the resyncing further comprises: requesting a first data report from the first record system for the at least one group of the third number of groups; requesting a second data report from the second record system for the corresponding group in the fourth number of groups; determining a record in the first data report that does not match a record in the second data report; and resyncing the at least one group of the third number of groups with the corresponding group in the fourth number of groups based on determining that the record in the first data report does not match a record in the second data report.",8,claim 8,0,B
10606829,10,"10. The computer system of claim 8 , wherein the first partition parameter determines how records in the first data subset are partitioned into the first number of groups and how records in the second data subset are partitioned into the second number of groups, and wherein the second partition parameter determines how records in the third data subset are partitioned into the third number of groups and how records in the fourth data subset are partitioned into the fourth number of groups.",9,claim 8,0,B
10606829,11,"11. The computer system of claim 8 , wherein the first partition parameter indicates a number of data elements of a partition field associated with each record of the first data subset and each record of the second data subset, and wherein the second partition parameter indicates a number of data elements of a partition field associated with each record of the third data subset and each record of the fourth data subset.",10,claim 8,0,B
10606829,12,"12. The computer system of claim 11 , wherein data elements of the partition field associated with each record of the first data subset and each record of the second data subset comprise digits, and wherein the number of data elements indicated by the first partition parameter is one or a higher number, and wherein a number of data elements of partition fields of a number of records in each group of the first number of groups correspond to identical one or more data element values, and wherein a number of data elements of partition fields of a number of records in each group of the third number of groups correspond to identical one or more data element values.",11,claim 11,0,B
10606829,13,"13. The computer system of claim 11 , wherein data elements of the partition field associated with each record of the first data subset and each record of the second data subset comprise digits, and wherein a number of data elements of partition fields of records in each corresponding group pair from the first number of groups and the second number of groups correspond to identical one or more data element values, and wherein a number of data elements of partition fields of records in each corresponding group pair from the third number of groups and the fourth number of groups correspond to identical one or more data element values.",12,claim 11,0,B
10606829,14,"14. The computer system of claim 11 , wherein the data elements comprise letters.",13,claim 11,0,B
10606829,15,"15. A non-transitory computer readable medium comprising instructions to be executed in a computer system, wherein the instructions when executed in the computer system perform a method for efficiently identifying data inconsistencies between electronic record systems using data partitioning, the method comprising: requesting a first data subset from a first record system using a first partition parameter; requesting a second data subset from a second record system using the first partition parameter; receiving the first data subset comprising a first number of groups based on a first partition parameter; receiving the second data subset comprising a second number of groups based on the first partition parameter, wherein one or more groups in the second number of groups correspond to one or more groups in the first number of groups; determining at least one group of the first number of groups where data associated with the at least one group of the first number of groups does not match data associated with a corresponding group in the second number of groups; if a number of records associated with the at least one group of the first number of groups exceeds a threshold: incrementing the first partition parameter by a partition increment to obtain a second partition parameter; requesting a third data subset from the first record system using the second partition parameter; requesting a fourth data subset from a second record system using the second partition parameter; receiving the third data subset comprising a third number of groups based on the second partition parameter; receiving the fourth data subset comprising a fourth number of groups based on the second partition parameter; determining at least one group of the third number of groups where data associated with the at least one group of the third number of groups does not match data associated with a corresponding group in the fourth number of groups; and if a number of records associated with the at least one group of the third number of groups does not exceed the threshold: resyncing the at least one group of the third number of groups with the corresponding group in the fourth number of groups.",14,,0,B
10606829,16,"16. The non-transitory computer readable medium of claim 15 , wherein the resyncing further comprises: requesting a first data report from the first record system for the at least one group of the third number of groups; requesting a second data report from the second record system for the corresponding group in the fourth number of groups; determining a record in the first data report that does not match a record in the second data report; and resyncing the at least one group of the third number of groups with the corresponding group in the fourth number of groups based on determining that the record in the first data report does not match a record in the second data report.",15,claim 15,0,B
10606829,17,"17. The non-transitory computer readable medium of claim 15 , wherein the first partition parameter determines how records in the first data subset are partitioned into the first number of groups and how records in the second data subset are partitioned into the second number of groups, and wherein the second partition parameter determines how records in the third data subset are partitioned into the third number of groups and how records in the fourth data subset are partitioned into the fourth number of groups.",16,claim 15,0,B
10606829,18,"18. The non-transitory computer readable medium of claim 15 , wherein the first partition parameter indicates a number of data elements of a partition field associated with each record of the first data subset and each record of the second data subset, and wherein the second partition parameter indicates a number of data elements of a partition field associated with each record of the third data subset and each record of the fourth data subset.",17,claim 15,0,B
10606829,19,"19. The non-transitory computer readable medium of claim 18 , wherein data elements of the partition field associated with each record of the first data subset and each record of the second data subset comprise digits, and wherein the number of data elements indicated by the first partition parameter is one or a higher number, and wherein a number of data elements of partition fields of a number of records in each group of the first number of groups correspond to identical one or more data element values, and wherein a number of data elements of partition fields of a number of records in each group of the third number of groups correspond to identical one or more data element values.",18,claim 18,0,B
10606829,20,"20. The non-transitory computer readable medium of claim 18 , wherein data elements of the partition field associated with each record of the first data subset and each record of the second data subset comprise digits, and wherein a number of data elements of partition fields of records in each corresponding group pair from the first number of groups and the second number of groups correspond to identical one or more data element values, and wherein a number of data elements of partition fields of records in each corresponding group pair from the third number of groups and the fourth number of groups correspond to identical one or more data element values.",19,claim 18,0,B
10606830,1,"1. A computer system, comprising: one or more processors; and one or more computer-readable storage devices having stored thereon instructions that are executable by the one or more processors to execute a plurality of nested transactions, within a shared parent transaction, that perform operations on an object, including performing at least: based at least on executing a first nested transaction of the plurality of nested transactions, perform the following: assign a first begin transaction identifier to the first nested transaction, the first begin transaction identifier indicating that the first nested transaction has begun operating upon the object; and based at least on completion of the first nested transaction, assign a completion transaction identifier as a statement identifier to a version of the object, the completion transaction identifier indicating that the first nested transaction has completed; and based at least on executing a second nested transaction of the plurality of nested transactions, perform the following: compare a second begin transaction identifier of the second nested transaction with the statement identifier of the version of the object; and based on the comparison, determine whether the version of the object existed at a time that the second nested transaction began.",0,,1,B
10606830,2,"2. The computer system of claim 1 , wherein the version of the object is determined to have existed at the time that the second nested transaction began based at least on a first value of the statement identifier being less than a second value of the second begin transaction identifier.",1,claim 1,0,B
10606830,3,"3. The computer system of claim 1 , the instructions also being executable by the one or more processors to compare the second begin transaction identifier to an end transaction identifier of the version of the object.",2,claim 1,0,B
10606830,4,"4. The computer system of claim 3 , wherein the version of the object is determined to have not existed at the time that the second nested transaction began based at least on a third value of the end transaction identifier being less than the second value of the second begin transaction identifier.",3,claim 3,0,B
10606830,5,"5. The computer system of claim 1 , the instructions also being executable by the one or more processors to determine that the version of the object is visible to the second nested transaction based at least on determining that the statement identifier of the version of the object indicates that the first nested transaction committed before the second nested transaction began.",4,claim 1,0,B
10606830,6,"6. The computer system of claim 5 , the instructions also being executable by the one or more processors to read the version of the object by the second nested transaction based at least on the version of the object being visible to the second nested transaction.",5,claim 5,0,B
10606830,7,"7. The computer system of claim 1 , wherein the object comprises at least one of a multi-version relational database object or a multi-version structured object.",6,claim 1,0,B
10606830,8,"8. The computer system of claim 1 , the instructions also being executable by the one or more processors to, upon completion of the first nested transaction, amend the version of the object to turn over commit or abort of the first nested transaction to the shared parent transaction.",7,claim 1,0,B
10606830,9,"9. The computer system of claim 1 , wherein the version of the object is determined to have existed at the time that the second nested transaction began, and wherein the second nested transaction performs an insert operation on the object to thereby create a new version of the object, and to thereby create a new statement identifier for the new version of the object.",8,claim 1,0,B
10606830,10,"10. A method, implemented at a computer system that includes one or more processors, for executing a plurality of nested transactions, within a shared parent transaction, that perform operations on an object, the method comprising: based at least on executing a first nested transaction of the plurality of nested transactions, perform the following: assign a first begin transaction identifier to the first nested transaction, the first begin transaction identifier indicating that the first nested transaction has begun operating upon the object; and based at least on completion of the first nested transaction, assign a completion transaction identifier as a statement identifier to a version of the object, the completion transaction identifier indicating that the first nested transaction has completed; and based at least on executing a second nested transaction of the plurality of nested transactions, perform the following: compare a second begin transaction identifier of the second nested transaction with the statement identifier of the version of the object; and based on the comparison, determine whether the version of the object existed at a time that the second nested transaction began.",9,,0,B
10606830,11,"11. The method of claim 10 , wherein the version of the object is determined to have existed at the time that the second nested transaction began based at least on a first value of the statement identifier being less than a second value of the second begin transaction identifier.",10,claim 10,0,B
10606830,12,"12. The method of claim 10 , further comprising comparing the second begin transaction identifier to an end transaction identifier of the version of the object.",11,claim 10,0,B
10606830,13,"13. The method of claim 12 , wherein the version of the object is determined to have not existed at the time that the second nested transaction began based at least on a third value of the end transaction identifier being less than the second value of the second begin transaction identifier.",12,claim 12,0,B
10606830,14,"14. The method of claim 10 , further comprising determining that the version of the object is visible to the second nested transaction based at least on determining that the statement identifier of the version of the object indicates that the first nested transaction committed before the second nested transaction began.",13,claim 10,0,B
10606830,15,"15. The method of claim 14 , further comprising reading the version of the object by the second nested transaction based at least on the version of the object being visible to the second nested transaction.",14,claim 14,0,B
10606830,16,"16. The method of claim 10 , wherein the object comprises at least one of a multi-version relational database object or a multi-version structured object.",15,claim 10,0,B
10606830,17,"17. The method of claim 10 , further comprising, upon completion of the first nested transaction, amending the version of the object to turn over commit or abort of the first nested transaction to the shared parent transaction.",16,claim 10,0,B
10606830,18,"18. The method of claim 10 , wherein the version of the object is determined to have existed at the time that the second nested transaction began, and wherein the second nested transaction performs an insert operation on the object to thereby create a new version of the object, and to thereby create a new statement identifier for the new version of the object.",17,claim 10,0,B
10606830,19,"19. A computer program product comprising one or more hardware storage devices having stored thereon instructions that are executable by one or more processors to execute a plurality of nested transactions, within a shared parent transaction, that perform operations on an object, including performing at least: based at least on executing a first nested transaction of the plurality of nested transactions, perform the following: assign a first begin transaction identifier to the first nested transaction, the first begin transaction identifier indicating that the first nested transaction has begun operating upon the object; and based at least on completion of the first nested transaction, assign a completion transaction identifier as a statement identifier to a version of the object, the completion transaction identifier indicating that the first nested transaction has completed; and based at least on executing a second nested transaction of the plurality of nested transactions, perform the following: compare a second begin transaction identifier of the second nested transaction with the statement identifier of the version of the object; and based on the comparison, determine whether the version of the object existed at a time that the second nested transaction began.",18,,0,B
10606830,20,"20. The computer program product of claim 19 , wherein the version of the object is determined to have existed at the time that the second nested transaction began based at least on a first value of the statement identifier being less than a second value of the second begin transaction identifier.",19,claim 19,0,B
10606831,1,"1. A method for identifying an entity having an entity attribute in a document, the method comprising: receiving, from each process of a plurality of processes, a corresponding set of candidate identity attributes that are each for identifying a particular entity having said entity attribute specified in the document, wherein each process of the plurality of processes generates the corresponding set of candidate identity attributes based on the entity attribute specified in the document; calculating a score for each candidate identity attribute in the sets of candidate identity attributes, wherein calculating the score for a particular candidate identity attribute comprising (1) identifying a set of tokens in the particular candidate identity attribute, (2) assigning a value to each token in the sets of tokens based on a token count that represents a number of instances of the token across the sets of candidate identity attributes and (3) calculating the score based on the assigned values; and identifying, based on the sets of scores calculated to the candidate identity attributes, an identity attribute from the sets of candidate identity attributes that identifies the entity having said entity attribute specified in the document.",0,,1,B
10606831,2,"2. The method of claim 1 , wherein the entity is a name of a person.",1,claim 1,0,B
10606831,3,"3. The method of claim 1 , wherein the entity attribute is a name of the person.",2,claim 1,0,B
10606831,4,"4. The method of claim 3 , wherein the identity attribute is a title designated to the person.",3,claim 3,0,B
10606831,5,"5. The method of claim 3 , wherein the identity attribute is a company with which the person is affiliated.",4,claim 3,0,B
10606831,6,"6. The method of claim 1 , wherein the set of candidate identity attributes is a first set of candidate identity attributes, wherein the score is a first core, wherein the identity attribute is a first identity attribute, the method further comprising: receiving, from each process of the plurality of processes, a second set of candidate identity attributes that are each for identifying a particular entity having said entity attribute specified in the document, wherein each process of the plurality of processes generates the corresponding set of candidate identity attributes based on the entity attribute specified in the document; calculating, for each second set of candidate identity attributes, a second score for each candidate identity attribute in the second set of candidate identity attributes; and identifying, based on the second scores calculated for the second set of candidate identity attributes, a second identity attribute from the second sets of candidate identity attributes that identifies the entity having said entity attribute specified in the document.",5,claim 1,0,B
10606831,7,"7. The method of claim 1 , wherein each process in the plurality of processes further generates a relevancy score for each candidate identity attribute, the relevancy score representing a degree of correctness that the particular entity identified by the candidate identity attribute is the entity.",6,claim 1,0,B
10606831,8,"8. The method of claim 7 , wherein calculating the score for the particular candidate identity attribute further comprises calculating the score based on the particular candidate identity attribute's relevancy score.",7,claim 7,0,B
10606831,9,"9. The method of claim 7 , wherein calculating the score for the particular candidate identity attribute further comprises calculating the score based on a normalization factor for converting the relevancy score to a particular range of values.",8,claim 7,0,B
10606831,10,"10. The method of claim 1 , wherein calculating the score for the particular candidate identity attribute further comprises calculating the score based on a confidence factor that represents a probability that the particular candidate identity attribute correctly identifies the entity having said entity attribute specified in the document.",9,claim 1,0,B
10606831,11,"11. The method of claim 1 , wherein the process in the plurality of processes is a first process, wherein a second process in the plurality of processes generates a set of candidate identity attributes by a query to an entity database.",10,claim 1,0,B
10606831,12,"12. The method of claim 1 , wherein the process in the plurality of processes is a first process, wherein a second process in the plurality of processes comprises a service that generates a set of candidate identity attributes by performing lexical analysis on the document.",11,claim 1,0,B
10606831,13,"13. The method of claim 2 , wherein calculating the relevance scores comprises: processing the plurality of candidate identity attribute sets based on the first candidate identity attribute of each candidate identity attribute set to identify a subset of the plurality of candidate identity attribute sets; and processing only the subset of the plurality of candidate identity attribute sets based on the second candidate identity attribute of each candidate identity attribute set.",12,claim 2,0,B
10606831,14,"14. A method for identifying a set of identity attributes for determining the identity of an entity, the method comprising: identifying a particular entity that occurs more often than other entities in a set of documents; identifying a plurality of candidate identity attribute sets by analyzing the particular entity and at least one document in the set of documents using a plurality of different processes that each identifies (i) a set of candidate identities corresponding to the particular entity and (ii) a candidate identity attribute set for each identified candidate identity, wherein at least one of the different processes analyzes a stored plurality of identities to identify candidate identities having the particular entity and that are related to an entity to which the at least one document is also related; for each candidate identity attribute set of the plurality of candidate identity attribute sets, calculating a relevance score for each candidate identity attribute in the set that measures a level of correspondence between the particular entity and the candidate identity attribute; and identifying, based on the relevance scores calculated for the candidate identity attributes of the different candidate identity attribute sets, a particular candidate identity attribute set for a particular identity that corresponds to the particular entity.",13,,0,B
10606831,15,"15. The method of claim 14 , wherein identifying the plurality of candidate identity attribute sets comprises identifying a candidate identity attribute set based on a lexical analysis of the at least one document.",14,claim 14,0,B
10606831,16,16. The method of claim 14 further comprising calculating a normalization factor that converts a particular relevance score calculated for a particular candida e identity attribute to a particular range of values.,15,claim 14,0,B
10606831,17,"17. The method of claim 14 , wherein calculating a particular relevance score for a particular candidate identity attribute for a particular candidate identity comprises calculating a confidence factor that represents a probability that the particular candidate identity correctly identifies the entity referred to by the particular entity in the set of documents.",16,claim 14,0,B
10606831,18,"18. The method of claim 14 , wherein each candidate identity attribute set comprises a first candidate identity attribute of a first type and a second candidate identity attribute of a second type.",17,claim 14,0,B
10606831,19,"19. The method of claim 18 , wherein the particular entity is an entity of a person, the first type is a title of the person, and the second type is a company with which the person is affiliated.",18,claim 18,0,B
10606832,1,"1. A search system comprising: at least one processor; and at least one memory device that stores a plurality of instructions, which when executed by the at least one processor, causes the at least one processor to: obtain a second keyword based on a first operation related to a first keyword and performed by one or more users, context information indicating context of the first operation, and a second operation related to the second keyword; store the obtained second keyword in association with the first keyword and the context information into a conversion information storage as a converted search condition; and obtain a search keyword entered by a user and search context information; convert the search keyword to the second keyword as the converted search keyword if the search keyword and the search context information are associated with the second keyword; execute a search for obtaining a target that satisfies the converted search keyword, wherein the first operation is an operation performed by one or more users to associate the target with the first keyword, the second operation is an operation performed by one or more users to associate the target with a keyword that is different from the first keyword, the first keyword is a word having meaning that varies depending on the context information, and the context information is at least one of item type, gender, age group, location, date, time, or type of user terminal.",0,,1,B
10606832,2,"2. The search system according to claim 1 , wherein, in obtaining the second keyword, information is obtained wherein the information indicate the first operation performed by the one or more users to associate the target with the first keyword, the context information indicating context of the operation is obtained, and another second keyword is obtained, wherein the another second keyword is associated with the target obtained in the context or a target similar to the obtained target by the second operation.",1,claim 1,0,B
10606832,3,"3. The search system according to claim 2 , wherein, in obtaining the second keyword, one or more targets are obtained, wherein the one or more targets are the targets obtained by a search according to the first keyword, a predetermined instruction from the user is received, context information of the search is obtained, and another keyword in another search as the second keyword is obtained, wherein the another search is a search where the target obtained in the context or the target similar to the obtained target is obtained.",2,claim 2,0,B
10606832,4,"4. The search system according to claim 2 , wherein, in obtaining the second keyword, one or more targets to which the user enters an evaluation comment including the first keyword is obtained the context information indicating context to which the evaluation comment is entered is obtained, and another keyword as the second keyword in the search where the target is obtained in the context or the target similar to the obtained target is obtained.",3,claim 2,0,B
10606832,5,"5. A search method comprising: obtaining a second keyword based on a first operation related to a first keyword and performed by one or more users, context information indicating context of the first operation, and a second operation related to the second keyword; storing the obtained second keyword in association with the first keyword and the context information into conversion information storing means as a converted search condition; and obtaining a search keyword entered by a user and search context information; converting the search keyword to the second keyword as the converted search keyword if the search keyword and the search context information are associated with the second keyword; executing a search for obtaining a target that satisfies the converted search keyword, wherein the first operation is an operation performed by one or more users to associate the target with the first keyword, the second operation is an operation performed by one or more users to associate the target with a keyword that is different from the first keyword, the first keyword is a word having meaning that varies depending on the context information, and the context information is at least one of item type, gender, age group, location, date, time, or type of user terminal.",4,,0,B
10606832,6,"6. The search method according to claim 5 , further comprising: obtaining information indicating the first operation performed by the one or more users to associate the target with the first keyword and the context information indicating context of the operation, and obtaining another second keyword, which is associated with the target obtained in the context or a target similar to the obtained target by the second operation.",5,claim 5,0,B
10606832,7,"7. The search method according to claim 6 , further comprising: obtaining one or more targets, which are the targets obtained by a search according to the first keyword and receive a predetermined instruction from the user, and context of the search, and obtaining another keyword in another search, which is a search where the target obtained in the context or the target similar to the obtained target.",6,claim 6,0,B
10606832,8,"8. The search method according to claim 6 , further comprising: obtaining one or more targets to which the user enters an evaluation comment including the first keyword are obtained and the context information indicating context to which the evaluation comment is entered, and obtaining another keyword as the second keyword in the search where the target is obtained in the context or the target similar to the obtained target.",7,claim 6,0,B
10606832,9,"9. A non-transitory computer-readable information storage medium having stored thereon a program for causing a computer to: obtain a second keyword based on a first operation related to a first keyword and performed by one or more users, context information indicating context of the first operation, and a second operation related to the second keyword; store the obtained second keyword in association with the first keyword and the context information into conversion information storing means as a converted search condition; and obtain a search keyword entered by a user and search context information; convert the search keyword to the second keyword as the converted search keyword if the search keyword and the search context information are associated with the second keyword; execute a search for obtaining a target that satisfies the converted search keyword, wherein the first operation is an operation performed by one or more users to associate the target with the first keyword, the second operation is an operation performed by one or more users to associate the target with a keyword that is different from the first keyword, the first keyword is a word having meaning that varies depending on the context information, and the context information is at least one of item type, gender, age group, location, date, time, or type of user terminal.",8,,0,B
10606833,1,"1. A method, comprising: a database management system (��DBMS��) receiving one or more data definition language (��DDL��) database statements; in response to receiving said one or more DDL statements, generating within a database dictionary of said DBMS, dictionary metadata that defines: multiple database indexes on a table, said multiple database indexes including a first database index and a second database index, said first database index indexing a particular column of said table; a first domain of first attribute states for a first visibility attribute, said first domain of first attribute states including a first visibility attribute state, for said first visibility attribute state, defining a second domain of second attribute states for a second visibility attribute associated with said first visibility attribute state, said second domain of second attribute states including a second visibility attribute state, that said first database index and said second database index are visible byd first visibility attribute state, and that said first database index is not visible for said second visibility attribute state; and establishing a database session, wherein establishing a database session includes setting, within said database session, at least one user attribute that grants access to said table; said DBMS receiving a particular database statement within said database session, wherein said particular database statement references said table and said particular column in a WHERE clause; before receiving said particular database statement: setting within said database session said first visibility attribute to said first visibility attribute state; setting within said database session said second visibility attribute to said second visibility attribute state; within said database session, compiling said particular database statement thereby generating an execution plan for said particular database statement, wherein generating an execution plan includes: making a determination that said dictionary metadata defines said first visibility attribute and said second visibility attribute as visibility attributes for said first database index and said second database index; making a determination that said dictionary metadata defines that said first database index is not visible when said second visibility attribute is set to said second visibility attribute state; in response to making a determination that said dictionary metadata defines that said first database index is not visible when said second visibility attribute is set to said second visibility attribute state, foregoing evaluating said first database index for use as an access path for said execution plan to said table in response to said determination, and evaluating said second database index for use as an access path for said execution plan to said table; and said DBMS executing said execution plan.",0,,1,B
10606833,2,"2. The method of claim 1 , further including receiving second one or more DDL database statements specifying, for said second visibility attribute, another visibility attribute state for which said first database index is not visible.",1,claim 1,0,B
10606833,3,"3. The method of claim 1 , wherein setting within said database session said first visibility attribute includes setting said first visibility attribute in response to establishing said database session.",2,claim 1,0,B
10606833,4,"4. The method of claim 1 , wherein setting within said database session said first visibility attribute includes setting said first visibility attribute in response to receiving a command from a database client.",3,claim 1,0,B
10606833,5,"5. The method of claim 1 , wherein: establishing said database session includes setting a session attribute to identify a database user; the method further includes: receiving a request from a database client to set said first visibility attribute to said first visibility attribute state; and performing said setting within said database session said first visibility attribute in response to receiving said request.",4,claim 1,0,B
10606833,6,"6. The method of claim 1 , wherein: said second domain of said second attribute states include another visibility attribute state for which said first database index is visible.",5,claim 1,0,B
10606833,7,"7. The method of claim 1 , wherein a third visibility attribute of said database session identifies a database user.",6,claim 1,0,B
10606833,8,"8. The method of claim 1 , wherein said first visibility attribute state identifies a module.",7,claim 1,0,B
10606833,9,"9. The method of claim 1 , wherein said second visibility attribute state identifies an action.",8,claim 1,0,B
10606833,10,"10. One or more non-transitory storage media storing sequences of instructions which, when executed by one or more computing devices, cause: a database management system (��DBMS��) receiving one or more data definition language (��DDL��) database statements; in response to receiving said one or more DDL statements, generating within a database dictionary of said DBMS, dictionary metadata that defines: multiple database indexes on a table, said multiple database indexes including a first database index and a second database index, said first database index indexing a particular column of said table; a first domain of first attribute states for a first visibility attribute, said first domain of first attribute states including a first visibility attribute state, for said first visibility attribute state, defining a second domain of second attribute states for a second visibility attribute associated with said first visibility attribute state, said second domain of second attribute states includibility attribute state, that said first database index and said second database index are visible by default for said first visibility attribute state, and that said first database index is not visible for said second visibility attribute state; and establishing a database session, wherein establishing a database session includes setting, within said database session, at least one user attribute that grants access to said table; said DBMS receiving a particular database statement within said database session, wherein said particular database statement references said table and said particular column in a WHERE clause; before receiving said particular database statement: setting within said database session said first visibility attribute to said first visibility attribute state; setting within said database session said second visibility attribute to said second visibility attribute state; within said database session, compiling said particular database statement thereby generating an execution plan for said particular database statement, wherein generating an execution plan includes: making a determination that said dictionary metadata defines said first visibility attribute and said second visibility attribute as visibility attributes for said first database index and said second database index; making a determination that said dictionary metadata defines that said first database index is not visible when said second visibility attribute is set to said second visibility attribute state; in response to making a determination that said dictionary metadata defines that said first database index is not visible when said second visibility attribute is set to said second visibility attribute state, foregoing evaluating said first database index for use as an access path for said execution plan to said table in response to said determination, and evaluating said second database index for use as an access path for said execution plan to said table; and said DBMS executing said execution plan.",9,,0,B
10606833,11,"11. The one or more non-transitory storage media of claim 10 , wherein the sequences of instructions comprise instructions, which when executed by said one or more computing devices, cause receiving second one or more DDL database statements specifying, for said second visibility attribute, another visibility attribute state for which said first database index is not visible.",10,claim 10,0,B
10606833,12,"12. The one or more non-transitory storage media of claim 10 , wherein setting within said database session said first visibility attribute includes setting said first visibility attribute in response to establishing said database session.",11,claim 10,0,B
10606833,13,"13. The one or more non-transitory storage media of claim 10 , wherein setting within said database session said first visibility attribute includes setting said first visibility attribute in response to receiving a command from a database client.",12,claim 10,0,B
10606833,14,"14. The one or more non-transitory storage media of claim 10 , wherein: establishing said database session includes setting a session attribute to identify a database user; the sequences of instructions comprise instructions, which when executed by said one or more computing devices, cause: receiving a request from a database client to set said first visibility attribute to said first visibility attribute state; and performing said setting within said database session said first visibility attribute in response to receiving said request.",13,claim 10,0,B
10606833,15,"15. The one or more non-transitory storage media of claim 10 , wherein: said second domain of said second attribute states include another visibility attribute state for which said first database index is visible.",14,claim 10,0,B
10606833,16,"16. The one or more non-transitory storage media of claim 10 , wherein a third visibility attribute of said database session identifies a database user.",15,claim 10,0,B
10606833,17,"17. The one or more non-transitory storage media of claim 10 , wherein said first visibility attribute state identifies a module.",16,claim 10,0,B
10606833,18,"18. The one or more non-transitory storage media of claim 10 , wherein said second visibility attribute state identifies an action.",17,claim 10,0,B
10606834,1,"1. A method for optimizing query execution, the method comprising: identifying, in a query execution plan compiled for a query, a plurality of target operators that includes an expression that computes a common value; for at least one target operator of the plurality of target operators, modifying a row input of the at least one target operator to add a column to receive an evaluation result comprising the common value from a storage device; performing, by a database server connected to the storage device, the query execution plan by: sending, to the storage device, the expression that computes the common value, and receiving, within the column, the common value from the storage device; wherein the method is performed by one or more computing devices.",0,,1,B
10606834,2,"2. The method of claim 1 , further comprising: determining whether a number of target operators identified satisfies a threshold; wherein said modifying is performed in response to determining that the number of target operators identified satisfies the threshold.",1,claim 1,0,B
10606834,3,"3. The method of claim 1 , wherein the storage device returns a set of rows that includes the evaluation result.",2,claim 1,0,B
10606834,4,"4. The method of claim 1 , wherein the expression is a hash computation on a common hash key.",3,claim 1,0,B
10606834,5,"5. The method of claim 1 , wherein modifying a row input of the at least one target operator comprises: traversing operators of a query execution tree to identify a first target operator that is a hash-user; wherein the first target operator includes an expression for computing a hash value from a particular hash key; traversing a subtree of the query execution tree using the first target operator as a root to identify one or more operators in the subtree that are also hash-users; for each hash-user identified in the subtree, determining whether a hash key is identical to the particular hash key; in response to determining that the hash-user includes a hash key that is identical to the particular hash key, marking the hash-user as a target operator.",4,claim 1,0,B
10606834,6,"6. The method of claim 1 , wherein modifying a row input of the at least one target operator comprises: for one or more target operators of the at least one target operator, replacing the expression with a reference to a shared expression; wherein replacing the expression with a reference to a shared expression causes a respective target operator to access the evaluation result without computing the evaluation result.",5,claim 1,0,B
10606834,7,"7. The method of claim 1 , wherein modifying a row input of the at least one target operator comprises assigning responsibility for evaluating the expression to a single target operator of the at least one target operator; wherein the responsibility is assigned to a first target operator in a dataflow of a query execution tree.",6,claim 1,0,B
10606834,8,"8. The method of claim 1 , wherein the plurality of target operators include different target operators; wherein a first target operator of the at least one target operator uses the evaluation result to perform a first type of operation; wherein a second target operation of the at least one target operator uses the evaluation result to perform a second type of operation; wherein the first type of operation is different than the second type of operation.",7,claim 1,0,B
10606834,9,"9. The method of claim 1 , wherein the plurality of target operators includes two or more of: a hash join, a hash group by, a bloom filter, or an output table queue.",8,claim 1,0,B
10606834,10,"10. One or more non-transitory computer-readable storage media storing instructions, which, when executed by one or more processors, cause: identifying, in a query execution plan compiled for a query, a plurality of target operators that includes an expression that computes a common value; for at least one target operator of the plurality of target operators, modifying a row input of the at least one target operator to add a column to receive an evaluation result comprising the common value from a layer device; performing, by a database server connected to the storage device, the query execution plan by: sending, to the storage device, the expression that computes the common value, and receiving, within the column, the common value from the storage device.",9,,0,B
10606834,11,"11. The one or more non-transitory computer-readable storage media of claim 10 , wherein the instructions further cause: determining whether a number of target operators identified satisfies a threshold; wherein said modifying is performed in response to determining that the number of target operators identified satisfies the threshold.",10,claim 10,0,B
10606834,12,"12. The one or more non-transitory computer-readable storage media of claim 10 , wherein the storage device returns a set of rows that includes the evaluation result.",11,claim 10,0,B
10606834,13,"13. The one or more non-transitory computer-readable storage media of claim 10 , wherein the expression is a hash computation on a common hash key.",12,claim 10,0,B
10606834,14,"14. The one or more non-transitory computer-readable storage media of claim 10 , wherein modifying a row input of the at least one target operator comprises: traversing operators of a query execution tree to identify a first target operator that is a hash-user; wherein the first target operator includes an expression for computing a hash value from a particular hash key; traversing a subtree of the query execution tree using the first target operator as a root to identify one or more operators in the subtree that are also hash-users; for each hash-user identified in the subtree, determining whether a hash key is identical to the particular hash key; in response to determining that the hash-user includes a hash key that is identical to the particular hash key, marking the hash-user as a target operator.",13,claim 10,0,B
10606834,15,"15. The one or more non-transitory computer-readable storage media of claim 10 , wherein modifying a row input of the at least one target operator comprises: for one or more target operators of the at least one target operator, replacing the expression with a reference to a shared expression; wherein replacing the expression with a reference to a shared expression causes a respective target operator to access the evaluation result without computing the evaluation result.",14,claim 10,0,B
10606834,16,"16. The one or more non-transitory computer-readable storage media of claim 10 , wherein modifying a row input of the at least one target operator comprises assigning responsibility for evaluating the expression to a single target operator of the at least one target operator; wherein the responsibility is assigned to a first target operator in a dataflow of a query execution tree.",15,claim 10,0,B
10606834,17,"17. The one or more non-transitory computer-readable storage media of claim 10 , wherein the plurality of target operators include different target operators; wherein a first target operator of the at least one target operator uses the evaluation result to perform a first type of operation; wherein a second target operation of the at least one target operator uses the evaluation result to perform a second type of operation; wherein the first type of operation is different than the second type of operation.",16,claim 10,0,B
10606834,18,"18. The one or more non-transitory computer-readable storage media of claim 10 , wherein the plurality of target operators includes two or more of: a hash join, a hash group by, a bloom filter, or an output table queue.",17,claim 10,0,B
10606834,19,"19. A system comprising: a storage computer configured to store database content and execute one or more target operators upon the database content; a database server configured to: identify, in a query execution plan compiled for a query, a plurality of target operators that includes an expression that computes a common value; for at least one target operator of the plurality of target operators, modify a row input of the at least one target operator to add a column to receive an evaluation result comprising the common value from the storage computer; and perform the query execution plan, including: send, to the storage computer, the expression that computes the common value, and receive, within the column, the common value from the storage computer; wherein the database server is connected to the storage computer by a communication network.",18,,0,B
10606834,20,"20. The system of claim 19 , wherein the storage computer returns a set of rows that includes the evaluation result.",19,claim 19,0,B
10606835,1,"1. A method of operating a database management system responsible for processing queries of a relational database which stores data in tables of records, the method comprising: selecting a table to undergo obsolescence control for a period of time, wherein the selection involves specifying: a total number of cycles for which obsolescence control will take place, which is at least three; a duration of each cycle; and a time limit ��M�� specified in terms of a number of cycles, which is at least two but less than the total number of cycles; storing a bitmap cycle counter associated with the table, and a bit mask associated with the table, in a metadata database store; monitoring results of database queries to that table during a first cycle, wherein records that are accessed by a database query are tagged; storing an obsolescence bitmap of records accessed during the first cycle; monitoring results of database queries to that table during a next cycle, wherein records that are accessed by a database queagged; storing a further obsolescence bitmap of records accessed during the next cycle; and repeating the monitoring and storing steps for subsequent cycles so that an obsolescence bitmap is stored for each cycle; wherein: (i) once ��M�� obsolescence bitmaps are available, queries are restricted to records which have been accessed during the last ��M�� cycles by applying the ��M�� most recently stored obsolescence bitmaps, (ii) the bitmap cycle counter counts which obsolescence cycle is current for the table, and (iii) the bit mask validates obsolescence records according to the binary values of ",0,,1,B
10606835,2,"2. The method of claim 1 , wherein selecting a table to undergo obsolescence control further involves specifying an update phase during each cycle, which will generally be shorter than the cycle duration, and wherein the monitoring of the results of database queries during the first cycle and subsequent cycles is restricted to the update phase of each cycle, so that the obsolescence bitmap of each cycle relates only to records accessed during the update phase of that cycle.",1,claim 1,0,B
10606835,3,"3. The method of claim 1 , wherein, at the end of the obsolescence control period, the obsolescence control for the table is de-selected allowing subsequent queries to access all records of the table.",2,claim 1,0,B
10606835,4,"4. The method of claim 1 , wherein, at the end of the obsolescence control period, the obsolescence control for the table is continued with by rotating the ��M�� most recently stored obsolescence bitmaps to where they would have been had they been generated in the first ��M�� cycles, so that subsequent queries continue to be restricted to records which have been accessed during the la",3,claim 1,0,B
10606835,5,"5. The method of claim 1 , wherein, during the obsolescence control period, records which can no longer be accessed by queries are moved to higher latency storage.",4,claim 1,0,B
10606835,6,"6. The method of claim 1 , wherein, during the obsolescence control period, records which can no longer be accessed by queries and are hence obsolete are moved into a different table, to create an obsolete table distinct from the selected table which will now only contain records which are still accessible as identified by the most recently stored ��M�� obsolescence bitmaps, and, on conclusion of the obsolescence control period, the obsolete table is merged back into the selecte",5,claim 1,0,B
10606835,7,"7. The method of claim 1 , wherein, when storing an obsolescence bitmap for a current cycle ��n��, the bitmaps of the ��n?1��th to ��n?M��th cycles are refreshed to untag records that were accessed in those previous cycles but have also been accessed in the current cycle, so that bitmaps of the ��n?1��th to ��n?M��th cycles only tag records that have not been accessed in the current cycle, b",6,claim 1,0,B
10606835,8,"8. The method of claim 1 , wherein the obsolescence bitmaps are dis-associated from the tables with which they are associated in such a way that modifications to contents of a table during a period when obsolescence control is being applied do not cause modification of its obsolescence bitmaps.",7,claim 1,0,B
10606836,1,"1. A system comprising: a local monitoring data management apparatus; a communication network; and one or more monitoring apparatuses that use the communication network to transmit and receive monitoring data with respect to electric power generation information of a photovoltaic power generation cloud system, wherein the local monitoring data management apparatus: identifies the monitoring data as one of structured monitoring data and unstructured monitoring data using flag information of the monitoring data, wherein the unstructured monitoring data is selected from the group consisting of a graph, an image, and audio information, wherein the structured monitoring data has a table structure or a tree structure in which a field is structured; stores the monitoring data in a relational database on the basis of an identification result of the monitoring data, wherein the photovoltaic power generation cloud system communicates with the one or more local monitoring apparatuses to receive the monitoring data; converts the structured monitoring data into unstructured monitoring data using a data conversion condition comprising a preset field value among the field value of the structured monitoring data or searches the structured monitoring data corresponding to a preset data format among the structured monitoring data and converts the structured monitoring data, which is combined with apparatus identification information of the one or more monitoring apparatuses the same as the apparatus identification information among the searched structured monitoring data, into the unstructured monitoring data, wherein the local monitoring data management apparatus uses the data conversion condition if the field value of the structured monitoring data is the same as the preset field value, wherein the field value includes regional information, monitoring time information, and monitoring date information, and wherein the local monitoring data management apparatus verifies the apparatus identification information that is combined with the structured monitoring data corresponding to the preset data format; and performs a big data analysis from the unstructured monitoring data to produce estimated electric power generation information of the photovoltaic power generation cloud system located at different geographic regions on the basis of the graph and calculate an estimated price using the analyzed data.",0,,1,B
10606836,2,"2. The system of claim 1 , wherein the local monitoring data management apparatus collects the monitoring data from the one or more monitoring apparatuses.",1,claim 1,0,B
10606836,3,"3. The system of claim 2 , wherein the local monitoring data management apparatus collects the monitoring data by combining the apparatus identification information of the one or more monitoring apparatuses with the monitoring data.",2,claim 2,0,B
10606837,1,"1. A method of performing a join operation on a plurality of database objects comprising: distributing data structures contained in a first database object across a plurality of database partitions in accordance with a partitioning scheme, the database partitions being stored in respective data storage units of a plurality of processing nodes, each of the processing nodes comprising a processor and a data storage unit, the processing nodes being communicatively coupled one to another, wherein each of the plurality of database partitions uniquely corresponds to a partition processing module configured to perform one or more operations on the corresponding database partition in parallel with one or more other partition processing modules to complete a common task on the first database object; associating the data structures of the first database object with indices computed complementary to the partitioning scheme; computing other indices from data structures contained in a second database object; and performing the join operation at each of the database partitions on the data structures in the respective first and second database objects having the indices and the other indices in common.",0,,1,B
10606837,2,"2. The method of claim 1 , further comprising: performing, as the partitioning scheme, a hash function on key values identifying data in the respective first and second database objects on which the join operation is predicated; and distributing the first and second database objects across the database partitions in accordance with the hashed key values.",1,claim 1,0,B
10606837,3,"3. The method of claim 2 , further comprising: determining whether data values in the data structure of the first database object meet a density criterion.",2,claim 2,0,B
10606837,4,"4. The method of claim 3 , further comprising: constructing a memory array that associates each of the data structures of the first database object with the respective indices in response to the data values meeting the density criterion.",3,claim 3,0,B
10606837,5,"5. The method of claim 3 , further comprising: constructing a hash table that associates the hashed key values with the data structures in response to the data values failing to meet the density criterion.",4,claim 3,0,B
10606837,6,"6. The method of claim 1 , further comprising: distributing the data structures in the first and second database objects in accordance with a modulus operation K MOD N, where K is the key value and N is the number of partitions over which the data structures are distributed; and computing the index and the other index in accordance with an integer division operation K/N.",5,claim 1,0,B
10606837,7,"7. The method of claim 1 , further comprising: distributing the data structures in the first and second database objects in accordance with a modulus operation (K MOD P) MOD N, where K is the key value, N is the number of partitions over which the data structures are distributed and P is a predetermined prime number; and computing the index and the other index in accordance with an integer division operation ((K/P)*S)+((K MOD P)/N), where S is a scale factor.",6,claim 1,0,B
10606837,8,"8. The method of claim 7 , wherein the scale factor, S, is determined at each partition from one of: 
 S? 1+(( P? 1)/ N )); and 
 S? 1+( P/N ); wherein P is the prime number, and N is the quantity of partitions.",7,claim 7,0,B
10606838,1,"1. A computer-implemented method for performing an operation in a relational database, wherein the operation is expressed as a join query between first data residing in the relational database and second data residing in a memory space of an application, the method comprising: serializing rows of the second data from the application into a character large binary object, wherein the second data are organized in rows with columns of variable lengths, and wherein the columns of the second data are encoded with at least one of: a variable length encoding multi-byte ASCII; a variable length encoding UTF-8; and a variable length encoding UTF-16; wherein the columns of the second data are padded with space characters up to a maximum column width for a related data type and character set; generating a composite statement which includes: a section that decodes rows of the character large binary object into columns of associated database data-types, wherein the rows are substrings of the character large binary object resulting from a table function, and a section containing text of the join query; sending the character large binary object and the composite statement to a relational database; executing the composite statement between a database table and the character large binary object in the relational database; and receiving a returned result of executing the composite statement to the application.",0,,1,B
10606838,2,"2. The method according to claim 1 , wherein data values in the character large binary object are represented by a one byte ASCII representation.",1,claim 1,0,B
10606838,3,"3. The method according to claim 1 , wherein data values in the character large binary object are represented by a two byte UCS2 representation.",2,claim 1,0,B
10606838,4,"4. The method according to claim 1 , wherein data values in the character large binary object are represented by a four byte UTF32 representation.",3,claim 1,0,B
10606838,5,"5. The method according to claim 1 , wherein the second data are organized in rows with columns of fixed lengths.",4,claim 1,0,B
10606838,6,"6. The method according to claim 1 , wherein a Null indicator is encoded in the table large binary object.",5,claim 1,0,B
10606838,7,"7. The method according to claim 1 , wherein the table function is a user defined table function written in SQL.",6,claim 1,0,B
10606838,8,"8. The method according to claim 1 , wherein the table function is an external user defined table function written in a programing language which is predetermined.",7,claim 1,0,B
10606838,9,"9. The method according to claim 1 , wherein the table function is an external user defined table function written in any programing language.",8,claim 1,0,B
10606838,10,"10. The method according to claim 1 , wherein a decoding portion of the composite statement is represented as a Common Table Expression.",9,claim 1,0,B
10606838,11,"11. The method according to claim 1 , wherein the second data represent one or more application data tables.",10,claim 1,0,B
10606838,12,"12. The method according to claim 1 , wherein: the table function is an external user defined table function written in any programing language; a decoding portion of the composite statement is represented as a Common Table Expression; and the second data represent one or more application data tables.",11,claim 1,0,B
10606838,13,"13. The method according to claim 1 , wherein: a Null indicator is encoded in the table large binary object; the table function is a user defined table function written in SQL; a decoding portion of the composite statement is represented as a Common Table Expression; and the second data represent one or more application data tables.",12,claim 1,0,B
10606838,14,"14. The method according to claim 13 , wherein the second data are organized in rows with columns of variable lengths.",13,claim 13,0,B
10606838,15,"15. A system for performing an operation in a relational database, wherein the operation is expressed as a join query between first data residing in the relational database and second data residing in a memory space of an application, the system comprising: a memory having a set of computer readable computer instructions, and a processor for executing the set of computer readable instructions, the set of computer readable instructions including: serializing rows of the second data from the application into a character large binary object, wherein the second data are organized in rows with columns of variable lengths, and wherein the columns of the second data are encoded with at least one of: a variable length encoding multi-byte ASCII; a variable length encoding UTF-8; or a variable length encoding UTF-16; wherein the columns of the second data are padded with space characters up to a maximum column width for a related data type and character set; generating a composite statement which includes: a section that decodes rows of the character large binary object into columns of associated database data-types, wherein the rows are substrings of the character large binary object resulting from a table function, and a section containing text of the join query; sending the character large binary object and the composite statement to a relational database; executing the composite statement between a database table and the character large binary object in the relational database; and receiving a returned result of executing the composite statement to the application.",14,,0,B
10606838,16,"16. A computer program product for performing an operation in a relational database, wherein the operation is expressed as a join query between first data residing in the relational database and second data residing in a memory space of an application, the computer program product comprising a computer readable storage medium having program instructions embodied therewith, wherein the computer readable storage medium is not a transitory signal per se, the program instructions executable by a processor to cause the processor to perform a method comprising: serializing rows of the second data from the application into a character large binary object, wherein the second data are organized in rows with columns of variable lengths, and wherein the columns of the second data are encoded with at least one of: a variable length encoding multi-byte ASCII; a variable length encoding UTF-8; or a variable length encoding UTF-16; wherein the columns of the second data are padded with space characters up to a maximum column width for a related data type and character set; generating a composite statement which includes: a section that decodes rows of the character large binary object into columns of associated database data-types, wherein the rows are substrings of the character large binary object resulting from a table function, and a section containing text of the join query; sending the character large binary object and the composite statement to a relational database; executing the composite statement between a database table and the character large binary object in the relational database; and receiving a returned result of executing the composite statement to the application.",15,,0,B
10606839,1,"1. A computer implemented method, the method comprising: receiving, by one or more processors, an asynchronously updated index corresponding to a main dataset in a database system; receiving, by the one or more processors, time-sequenced log data of modifications made to the main dataset after a cutoff time of a last asynchronous index update, wherein the time-sequenced log data is read once by the database system for joining the main dataset with the time-sequenced log data and filtering out updated dataset entries and deleted dataset entries from the asynchronously updated index; receiving, by the one or more processors, from an end user, a proximity-based query directed to the main dataset; joining, by the one or more processors, the main dataset with the time-sequenced log data resulting in a first intermediate result comprising a first one or more entries of the main dataset made after the cutoff time; processing, by the one or more processors, the proximity-based query to determine a second one or more entries satisfying the proximity-based query by emulating a function of the last asynchronous index update resulting in a second intermediate result, wherein the second intermediate result includes updated and deleted entries of a base table that are retrieved by the proximity-based query using an outdated asynchronously updated index, wherein the processing the proximity-based query further comprises receiving a staleness acceptability criterion; and determining, based at least in part on the staleness acceptability criterion, that one or more query results are acceptable; filtering out, by the one or more processors, the updated dataset entries from the asynchronously updated index using the time-sequenced log data to generate a lookup table as index table; processing, by the one or more processors, the proximity-based query against the main dataset using the lookup table resulting in a third intermediate result; and building, by the one or more processors, a union of the second intermediate result and the third intermediate result, to generate a final result of the proximity-based query.",0,,1,B
10606839,2,"2. The method of claim 1 , wherein the database system is a relational database system.",1,claim 1,0,B
10606839,3,"3. The method of claim 2 , wherein each dataset is a table of the relational database system.",2,claim 2,0,B
10606839,4,"4. The method of claim 1 , wherein the asynchronously updated index is selected from the group consisting of a text search index, and an image index.",3,claim 1,0,B
10606840,1,"1. A method comprising: receiving a plurality of encoded and compressed data blocks; decoding the data blocks; decompressing the data blocks utilizing a plurality of processor sets, wherein each processor set is assigned a data block to decompress, the processor sets decompress in parallel to exploit inter-block parallelism, each processor set comprises one or more processors that collaborate in decompressing an assigned data block to exploit intra-block parallelism, each processor of each processor set is assigned a token from a sequence of decoded tokens factorized from an assigned data block, and each processor of each processor set processes an assigned token based a token type of the assigned token; and generating a final uncompressed output sequence based on uncompressed data blocks resulting from the decompressing.",0,,1,B
10606840,2,"2. The method of claim 1 , wherein the decompressing comprises: for each processor set: maintaining a corresponding sequence of decoded tokens factorized from an assigned data block, wherein each processor of the processor set is assigned a token from the corresponding sequence of decoded tokens; maintaining a corresponding literal tokens list comprising each literal token of a corresponding sequence of decoded tokens; maintaining a corresponding back-reference tokens list comprising each back-reference token of the corresponding sequence of decoded tokens; and maintaining a corresponding back-reference bitmap comprising a sequence of bits, wherein each bit of the back-reference bitmap corresponds to a token of the corresponding sequence of decoded tokens and indicates a token type of the corresponding token.",1,claim 1,0,B
10606840,3,"3. The method of claim 2 , wherein the decompressing comprises: for each processor of each processor set: determining a token type of an assigned token based on a bit of a corresponding back-reference bitmap, wherein the token type is one of a literal token or a back-reference token.",2,claim 2,0,B
10606840,4,"4. The method of claim 3 , wherein the decompressing comprises: for each processor set: utilizing each processor of the processor set to collectively negate bits of a corresponding back-reference bitmap to create a corresponding negated back-reference bitmap.",3,claim 3,0,B
10606840,5,"5. The method of claim 4 , wherein the decompressing comprises: for each processor set: utilizing each processor of the processor set to collectively compute a corresponding first inclusive prefix scan and a corresponding second inclusive prefix scan based on bits of a corresponding back-reference bitmap and bits of a corresponding negated back-reference bitmap, respectively.",4,claim 4,0,B
10606840,6,"6. The method of claim 5 , wherein the decompressing comprises: for each processor assigned a literal token of each processor set: utilizing a prefix sum of a corresponding second inclusive prefix scan as an index into a corresponding literal tokens list to retrieve a literal value for the literal token.",5,claim 5,0,B
10606840,7,"7. The method of claim 5 , wherein the decompressing comprises: for each processor assigned a back-reference token of each processor set: utilizing a prefix sum of a corresponding first inclusive prefix scan as an index into a corresponding back-reference tokens list to retrieve the back-reference token.",6,claim 5,0,B
10606840,8,"8. The method of claim 5 , wherein the decompressing comprises: for each processor set: determining a token lengths list comprising a list of length values, wherein each length value corresponds to a token of a corresponding sequence of decoded tokens; and utilizing each processor of the processor set to collectively compute a corresponding exclusive prefix scan, wherein each prefix sum of the corresponding exclusive prefix scan corresponds to a token of a corresponding sequence of decoded tokens, the prefix sum is exclusive of a length value of the corresponding token, and the prefix sum indicates a start position for the corresponding token in a corresponding uncompressed output sequence for an assigned data block.",7,claim 5,0,B
10606840,9,"9. The method of claim 8 , wherein the decompressing comprises: for each processor assigned a literal token of each processor set: determining a corresponding start position for the literal token in a corresponding uncompressed output sequence; and writing a literal value for the literal token into the corresponding uncompressed output sequence at the corresponding start position.",8,claim 8,0,B
10606840,10,"10. The method of claim 8 , wherein the decompressing comprises: for each processor assigned a back-reference token of each processor set: determining a corresponding source index range and a corresponding destination index range for the back-reference token in a corresponding uncompressed output sequence; copying a sub string from the corresponding source index range in the uncompressed output sequence; and writing the substring into the corresponding destination index range in the uncompressed output sequence.",9,claim 8,0,B
10606840,11,"11. The method of claim 10 , wherein the decompressing comprises: parallel resolution of a dependent back-reference token utilizing a ballot voting primitive and a broadcast primitive.",10,claim 10,0,B
10606840,12,"12. A system comprising: at least one processor; and a non-transitory processor-readable memory device storing instructions that when executed by the at least one processor causes the at least one processor to perform operations including: receiving a plurality of encoded and compressed data blocks; decoding the data blocks; decompressing the data blocks utilizing a plurality of processor sets, wherein each processor set is assigned a data block to decompress, the processor sets decompress in parallel to exploit inter-block parallelism, each processor set comprises one or more processors that collaborate in decompressing an assigned data block to exploit intra-block parallelism, each processor of each processor set is assigned a token from a sequence of decoded tokens factorized from an assigned data block, and each processor of each processor set processes an assigned token based a token type of the assigned token; and generating a final uncompressed output sequence based on uncompressed data blocks resulting from the decompressing.",11,,0,B
10606840,13,"13. The system of claim 12 , wherein the decompressing comprises: for each processor set: maintaining a corresponding sequence of decoded tokens factorized from an assigned data block, wherein each processor of the processor set is assigned a token from the corresponding sequence of decoded tokens; maintaining a corresponding literal tokens list comprising each literal token of a corresponding sequence of decoded tokens; maintaining a corresponding back-reference tokens list comprising each back-reference token of the corresponding sequence of decoded tokens; and maintaining a corresponding back-reference bitmap comprising a sequence of bits, wherein each bit of the back-reference bitmap corresponds to a token of the corresponding sequence of decoded tokens and indicates a token type of the corresponding token.",12,claim 12,0,B
10606840,14,"14. The system of claim 13 , wherein the decompressing comprises: for each processor of each processor set: determining a token type of an assigned token based on a bit of a corresponding back-reference bitmap, wherein the token type is one of a literal token or a back-reference token.",13,claim 13,0,B
10606840,15,"15. The system of claim 14 , wherein the decompressing comprises: for each processor set: utilizing each processor of the processor set to collectively negate bits of a corresponding back-reference bitmap to create a corresponding negated back-reference bitmap.",14,claim 14,0,B
10606840,16,"16. The system of claim 15 , wherein the decompressing comprises: for each processor set: utilizing each processor of the processor set to collectively compute a corresponding first inclusive prefix scan and a corresponding second inclusive prefix scan based on bits of a corresponding back-reference bitmap and bits of a corresponding negated back-reference bitmap, respectively.",15,claim 15,0,B
10606840,17,"17. The system of claim 16 , wherein the decompressing comprises: for each processor assigned a literal token of each processor set: utilizing a prefix sum of a corresponding second inclusive prefix scan as an index into a corresponding literal tokens list to retrieve a literal value for the literal token; and for each processor assigned a back-reference token of each processor set: utilizing a prefix sum of a corresponding first inclusive prefix scan as an index into a corresponding back-reference tokens list to retrieve the back-reference token.",16,claim 16,0,B
10606840,18,"18. The system of claim 16 , wherein the decompressing comprises: for each processor set: determining a token lengths list comprising a list of length values, wherein each length value corresponds to a token of a corresponding sequence of decoded tokens; and utilizing each processor of the processor set to collectively compute a corresponding exclusive prefix scan, wherein each prefix sum of the corresponding exclusive prefix scan corresponds to a token of a corresponding sequence of decoded tokens, the prefix sum is exclusive of a length value of the corresponding token, and the prefix sum indicates a start position for the corresponding token in a corresponding uncompressed output sequence for an assigned data block.",17,claim 16,0,B
10606840,19,"19. The system of claim 18 , wherein the decompressing comprises: for each processor assigned a literal token of each processor set: determining a corresponding start position for the literal token in a corresponding uncompressed output sequence; and writing a literal value for the literal token into the corresponding uncompressed output sequence at the corresponding start position; and for each processor assigned a back-reference token of each processor set: determining a corresponding source index range and a corresponding destination index range for the back-reference token in a corresponding uncompressed output sequence; copying a substring from the corresponding source index range in the uncompressed output sequence; and writing the substring into the corresponding destination index range in the uncompressed output sequence.",18,claim 18,0,B
10606840,20,"20. A computer program product comprising a computer-readable hardware storage medium having program code embodied therewith, the program code being executable by a computer to implement a method comprising: receiving a plurality of encoded and compressed data blocks; decoding the data blocks; decompressing the data blocks utilizing a plurality of processor sets, wherein each processor set is assigned a data block to decompress, the processor sets decompress in parallel to exploit inter-block parallelism, each processor set comprises one or more processors that collaborate in decompressing an assigned data block to exploit intra-block parallelism, each processor of each processor set is assigned a token from a sequence of decoded tokens factorized from an assigned data block, and each processor of each processor set processes an assigned token based a token type of the assigned token; and generating a final uncompressed output sequence based on uncompressed data blocks resulting from the decompressing.",19,,0,B
10606841,1,"1. A computing device for data compression token generation, the computing device comprising: a hardware processor; and one or more memory devices having stored therein a plurality of instructions that, when executed by the hardware processor, cause the computing device to establish: a plurality of search agents to search for a plurality of matches and to generate a plurality of weight values, wherein each search agent is associated with a different index, and wherein each search agent is to: search, in parallel, a history of an input stream for a corresponding match of the plurality of matches, wherein the corresponding match comprises a substring of the history that matches the input stream starting at a position that is based on the index associated with the search agent, and wherein the corresponding match is associated with a length and a distance; and generate, in parallel, a corresponding weight value of the plurality of weight values, wherein each weight value is associated with a corresponding match of the plurality of matches, and wherein each weight value is indicative of the length associated with the corresponding match and an encoded length associated with the corresponding match, wherein the encoded length is indicative of a number of bits to encode the corresponding match, wherein to generate the corresponding weight value comprises to: generate a raw score associated with the corresponding match based on the length associated with the corresponding match or the encoded length associated with the corresponding match, wherein to generate the raw score comprises to generate a frequency count weight as a function of a first frequency count of the length associated with the corresponding match and a second frequency count of the distance associated with the corresponding match; normalize the raw score to generate a percentile weight based on a maximum of a plurality of raw scores, wherein each raw score of the plurality of raw scores is associated with a match of the plurality of matches; and generate the corresponding weight value as a function of the percentile weight; and a decision engine to select a selected match from the plurality of matches as a function of the plurality of weight values.",0,,1,B
10606841,2,"2. The computing device of claim 1 , wherein to generate the corresponding weight value comprises to determine whether the distance associated with the corresponding match is included in a move-to-front stack; replace the distance associated with the corresponding match with a symbol from the move-to-front stack in response to a determination that the distance associated with the corresponding match is included in the move-to-front stack; and move the distance associated with the corresponding match to a front of the move-to front stack in response to a determination of whether the distance associated with the corresponding match is included in the move-to-front stack.",1,claim 1,0,B
10606841,3,"3. The computing device of claim 1 , wherein to generate the raw score comprises to generate a length weight as a function of the length associated with the corresponding match and the index associated with the search agent.",2,claim 1,0,B
10606841,4,"4. The computing device of claim 1 , wherein to generate the raw score comprises to generate an extra bit weight as a function of a number of extra bits corresponding to the distance associated with the corresponding match and a predetermined maximum number of extra bits.",3,claim 1,0,B
10606841,5,"5. The computing device of claim 1 , wherein to generate the corresponding weight value comprises to: generate a plurality of raw scores associated with the corresponding match based on the length associated with the corresponding match and the encoded length associated with the corresponding match; normalize each of the plurality of raw scores to generate a plurality of percentile weights, wherein each percentile weight is associated with a corresponding raw score; and generate the corresponding weight value as a function of the plurality of percentile weights.",4,claim 1,0,B
10606841,6,"6. The computing device of claim 5 , wherein to generate the corresponding weight value further comprises to: determine whether the corresponding match is adjacent to another match of the plurality of matches; and generate the corresponding weight value as a function of an adjacency bonus in response to a determination that the corresponding match is adjacent to another match, wherein the adjacency bonus comprises a plurality of percentile weights associated with the other match.",5,claim 5,0,B
10606841,7,"7. The computing device of claim 5 , wherein to generate the corresponding weight value as a function of the plurality of percentile weights comprises to adjust a relative importance of each percentile weight of the plurality of percentile weights.",6,claim 5,0,B
10606841,8,"8. The computing device of claim 7 , wherein to adjust the relative importance of each percentile weight of the plurality of percentile weights comprises to: multiply each percentile weight of the plurality of percentile weights by a corresponding constant to generate a corresponding product; and sum the plurality of products to generate the corresponding weight value.",7,claim 7,0,B
10606841,9,"9. The computing device of claim 7 , wherein to adjust the relative importance of each percentile weight comprises to adjust the relative importance of each percentile weight based on a data type of the input data stream.",8,claim 7,0,B
10606841,10,"10. A method for data compression token generation, the method comprising: searching in parallel, by a computing device, a history of an input stream for a plurality of matches, wherein each match comprises a substring of the history that matches the input stream starting at a position based on a corresponding index, and wherein each match is associated with a length and a distance; generating in parallel, by the computing device, a plurality of weight values, wherein each weight value is associated with a corresponding match of the plurality of matches, and wherein each weight value is indicative of the length associated with the corresponding match and an encoded length associated with the corresponding match, wherein the encoded length is indicative of a number of bits to encode the corresponding match, wherein generating in parallel the plurality of weight values comprises generating a first weight value associated with a first match of the plurality of matches, and wherein generating the first weight value comprises: generating a raw score associated with the first match based on the length associated with the first match or the encoded length associated with the first match, wherein generating the raw score comprises generating a frequency count weight as a function of a first frequency count of the first length and a second frequency count of the first distance; normalizing the raw score to generate a percentile weight based on a maximum of a plurality of raw scores, wherein each raw score of the plurality of raw scores is associated with a corresponding match of the plurality of matches; and generating the first weight value as a function of the percentile weight; and selecting, by the computing device, a selected match from the plurality of matches as a function of the plurality of weight values.",9,,0,B
10606841,11,"11. The method of claim 10 , wherein generating in parallel the plurality of weight values comprises generating a first weight value associated with a first match of the plurality of matches, and wherein generating the first weight value comprises: determining whether a first distance of the first match is included in a move-to-front stack; replacing the first distance with a corresponding symbol from the move-to-front stack in response to determining that the first distance of the first match is included in the move-to-front stack; and moving the first distance to a front of the move-to front stack in response to determining whether the first distance of the first match is included in the move-to-front stack.",10,claim 10,0,B
10606841,12,"12. The method of claim 10 , wherein generating the raw score comprises generating an extra bit weight as a function of a number of extra bits corresponding to the first distance and a predetermined maximum number of extra bits.",11,claim 10,0,B
10606841,13,"13. The method of claim 10 , wherein generating in parallel the plurality of weight values comprises generating a first weight value associated with a first match of the plurality of matches, and wherein generating the first weight value comprises: generating a plurality of raw scores associated with the first match based on the length associated with the first match and the encoded length associated with the first match; normalizing each of the plurality of raw scores to generate a plurality of percentile weights, wherein each percentile weight is associated with a corresponding raw score; and generating the first weight value as a function of the plurality of percentile weights.",12,claim 10,0,B
10606841,14,"14. The method of claim 13 , wherein generating the first weight value further comprises: determining whether the first match is adjacent to another match of the plurality of matches; and generating the first weight value as a function of an adjacency bonus in response to determining that the first match is adjacent to another match, wherein the adjacency bonus comprises a plurality of percentile weights associated with the other match.",13,claim 13,0,B
10606841,15,"15. One or more computer-readable storage media comprising a plurality of instructions that in response to being executed cause a computing device to: search in parallel a history of an input stream for a plurality of matches, wherein each match comprises a substring of the history that matches the input stream starting at a position based on a corresponding index, and wherein each match is associated with a length and a distance; generate in parallel a plurality of weight values, wherein each weight value is associated with a corresponding match of the plurality of matches, and wherein each weight value is indicative of the length associated with the corresponding match and an encoded length associated with the corresponding match, wherein the encoded length is indicative of a number of bits to encode the corresponding match; wherein to generate in parallel the plurality of weight values comprises to generate a first weight value associated with a first match of the plurality of matches, and wherein to generate the first weight value comprises to: generate a raw score associated with the first match based on the length associated with the first match or the encoded length associated with the first match, wherein to generate the raw score comprises to generate a frequency count weight as a function of a first frequency count of the first length and a second frequency count of the first distance; normalize the raw score to generate a percentile weight based on a maximum of a plurality of raw scores, wherein each raw score of the plurality of raw scores is associated with a corresponding match of the plurality of matches; and generate the first weight value as a function of the percentile weight; and select a selected match from the plurality of matches as a function of the plurality of weight values.",14,,0,B
10606841,16,"16. The one or more computer-readable storage media of claim 15 , wherein to generate in parallel the plurality of weight values comprises to generate a first weight value associated with a first match of the plurality of matches, and wherein to generate the first weight value comprises to: determine whether a first distance of the first match is included in a move-to-front stack; replace the first distance with a corresponding symbol from the move-to-front stack in response to determining that the first distance of the first match is included in the move-to-front stack; and move the first distance to a front of the move-to front stack in response to determining whether the first distance of the first match is included in the move-to-front stack.",15,claim 15,0,B
10606841,17,"17. The one or more computer-readable storage media of claim 15 , wherein to generate the raw score comprises to generate an extra bit weight as a function of a number of extra bits corresponding to the first distance and a predetermined maximum number of extra bits.",16,claim 15,0,B
10606841,18,"18. The one or more computer-readable storage media of claim 15 , wherein to generate in parallel the plurality of weight values comprises to generate a first weight value associated with a first match of the plurality of matches, and wherein generating the first weight value comprises to: generate a plurality of raw scores associated with the first match based on the length associated with the first match and the encoded length associated with the first match; normalize each of the plurality of raw scores to generate a plurality of percentile weights, wherein each percentile weight is associated with a corresponding raw score; and generate the first weight value as a function of the plurality of percentile weights.",17,claim 15,0,B
10606841,19,"19. The one or more computer-readable storage media of claim 18 , wherein to generate the first weight value further comprises to: determine whether the first match is adjacent to another match of the plurality of matches; and generate the first weight value as a function of an adjacency bonus in response to determining that the first match is adjacent to another match, wherein the adjacency bonus comprises a plurality of percentile weights associated with the other match.",18,claim 18,0,B
10606842,1,"1. A method of constructing data from different data providers in a correlated fashion, the method being performed by one or more processors of a computer system, the method comprising: performing a first query on a first data set controlled by a first entity to capture a first set of data results; performing a second query on a second data set controlled by a second entity to capture a second set of data results, wherein the second query is generated independently from the first query such that the second query is distinct from, and not dependent on, the first query; receiving a selection of one or more results from the first set of data results; subsequent to performing both the first query and the second query, using the selection of the one or more results from the first set of data results to: consult a relationship ontology that correlates data stored in different data stores controlled by different entities, the correlated data including correlations between the first data set controlled by the first entity and the second data set controlled by the second entity, and identify, from the relationship ontology, at least one relationship between data in the selection of the one or more results from the first set of data results and the second set of data results; and performing a new query over only the second data set to generate a new set of data results, the new query being constructed based on the identified at least one relationship such that the new set of data results are correlated with the selection of the one or more results from the first set of data results.",0,,1,B
10606842,2,"2. The method of claim 1 , wherein the at least one relationship stored in the relationship ontology is manually defined.",1,claim 1,0,B
10606842,3,3. The method of claim 1 further comprising: performing an additional operation on the second set of data results based on the identified at least one relationship between the data in the selection from the first set of data results and the second set of data results.,2,claim 1,0,B
10606842,4,"4. The method of claim 3 , wherein the additional operation comprises highlighting an element in the second set of data results.",3,claim 3,0,B
10606842,5,"5. The method of claim 3 , wherein the additional operation comprises categorizing the second set of data results.",4,claim 3,0,B
10606842,6,"6. The method of claim 3 , the additional operation comprises sorting the second set of data results.",5,claim 3,0,B
10606842,7,"7. The method of claim 3 , wherein the additional operation comprises filtering the second set of data results.",6,claim 3,0,B
10606842,8,"8. The method of claim 1 , further comprising: displaying a correlation between the first set of data results and the second set of data results.",7,claim 1,0,B
10606842,9,"9. A system for constructing data from different data providers in a correlated fashion, the system comprising: one or more processors; and one or more computer readable hardware storage devices having stored thereon computer executable instructions that are executable by at least one of the one or more processors to cause the system to: perform a first query on a first data set controlled by a first entity to capture a first set of data results; perform a second query on a second data set controlled by a second entity to capture a second set of data results, wherein the second query is generated independently from the first query such that the second query is distinct from, and not dependent on, the first query; receive a selection of one or more results from the first set of data results; subsequent to performing both the first query and the second query, use the selection of the one or more results from the first set of data results to: consult a relationship ontology that correlates data stored in different data stores controlled by different entities, the correlated data including correlations between the first data set controlled by the first entity and the second data set controlled by the second entity, and identify, from the relationship ontology, at least one relationship between data in the selection of the one or more results from the first set of data results and the second set of data results; and perform a new query over only the second data set to generate a new set of data results, the new query being constructed based on the identified at least one relationship such that the new set of data results are correlated with the selection of the one or more results from the first set of data results.",8,,0,B
10606842,10,"10. The system of claim 9 , wherein the at least one relationship stored in the relationship ontology is manually defined.",9,claim 9,0,B
10606842,11,"11. The system of claim 9 , wherein execution of the computer-executable instructions further causes the system to: perform an additional operation on the second set of data results based on the identified at least one relationship between the data in the selection from the first set of data results and the second set of data results.",10,claim 9,0,B
10606842,12,"12. The system of claim 11 , wherein the additional operation comprises highlighting an element in the second set of data results.",11,claim 11,0,B
10606842,13,"13. The system of claim 11 , wherein the additional operation comprises filtering the second set of data results.",12,claim 11,0,B
10606842,14,"14. The system of claim 9 , wherein the first data set is stored in a first table that includes column labeling and the second data set is stored in a second table that also includes column labeling, and wherein the computer executable instructions further cause the system to: identify a first column of information in the first table, the first column including substantially similar information as a second column of information in the second table; identify a first column label corresponding to the first column, the first column label being named differently than a second column label corresponding to the second column; and in the relationship ontology, correlate the first column of information in the first table with the second column of information in the second table even though the first column label is named differently than the second column label.",13,claim 9,0,B
10606842,15,"15. The system of claim 14 , wherein the first column label is expressed using a first language while the second column label is expressed using a second language.",14,claim 14,0,B
10606842,16,"16. The system of claim 14 , wherein the second set of data results is displayed in a bar chart.",15,claim 14,0,B
10606842,17,"17. A physical computer readable hardware storage device comprising computer executable instructions that are executable by one or more processors to cause the one or more processors to: perform a first query on a first data set controlled by a first entity to capture a first set of data results; perform a second query on a second data set controlled by a second entity to capture a second set of data results, wherein the second query is generated independently from the first query such that the second query is distinct from, and not dependent on, the first query; receive a selection of one or more results from the first set of data results; subsequent to both the first query and the second query, use the selection of the one or more results from the first set of data results to: consult a relationship ontology that correlates data stored in different data stores controlled by different entities, the correlated data including correlations between the first data set controlled by the first entity and the second data set controlled by the second entity, and identify, from the relationship ontology, at least one relationship between data in the selection of the one or more results from the first set of data results and the second set of data results; and perform a new query over only the second data set to generate a new set of data results, the new query being constructed based on the identified at least one relationship such that the new set of data results are correlated with the selection of the one or more results from the first set of data results.",16,,0,B
10606843,1,"1. A method comprising: receiving, by at least one computing device, a data driven application engineering (DDAE) specification; determining, by the at least one computing device, a metamodel that defines relationships between tokens, lines, and statements found in the DDAE specification, wherein each of the tokens includes a foreign key indicating a relationship with one of the statements; defining, by the at least one computing device, a plurality of connector patterns based on the received DDAE specification and the metamodel, wherein the connector patterns modularize a plurality of condition tests as comparisons and gates; and generating, using a compiler executing on the at least one computing device, a plurality of irreducible modules in a perl programming language based on the plurality of connector patterns, wherein the plurality of irreducible modules perform the calculation according to the plurality of condition tests to produce an output variable.",0,,1,B
10606843,2,"2. The method of claim 1 , wherein the connector patterns define a set of modules that can be created and combined in any application.",1,claim 1,0,B
10606843,3,"3. The method of claim 1 , wherein the irreducible modules are independent of each other and a data flow associated with the irreducible module is identified by the output variable.",2,claim 1,0,B
10606843,4,"4. The method of claim 3 , wherein the output variable is identified by a primary key value and is related to other variables by foreign key references.",3,claim 3,0,B
10606843,5,"5. The method of claim 1 , wherein the irreducible modules are associated with a parallel computing application.",4,claim 1,0,B
10606843,6,"6. The method of claim 5 , wherein the irreducible modules are hardware or software infrastructure agnostic.",5,claim 5,0,B
10606843,7,"7. The method of claim 1 , wherein the generating the plurality of irreducible modules includes generating a two dimensional matrix, wherein each entry within the two dimensional matrix is associated with a token within a particular line sequence that is within a statement.",6,claim 1,0,B
10606843,8,"8. The method of claim 1 , wherein the plurality of irreducible modules includes a gate connector.",7,claim 1,0,B
10606843,9,"9. The method of claim 8 , wherein the gate connector comprises at least one of an AND gate, an OR gate, a NAND gate, and NOR gate and connects two independent variables with a dependent variable.",8,claim 8,0,B
10606843,10,"10. The method of claim 1 , wherein the irreducible models are generated in the perl programming language using a SQL query.",9,claim 1,0,B
10606843,11,"11. The method of claim 10 , wherein the DDAE specification is received via a graphical user interface.",10,claim 10,0,B
10606843,12,"12. The method of claim 1 , wherein the DDAE specification defines a calculation and comprises the plurality of condition tests that are required for assigning a correct value to the output variable.",11,claim 1,0,B
10606843,13,"13. The method of claim 1 , wherein the irreducible modules further includes a calculation connector and a comparison connector, the calculation connector includes at least one of a numeric function, a string function, and an aggregate function defined in the DDAE specification, and the comparison connector includes a comparison of two independent variables and outputs TRUE if values of the two independent variables comply with the comparison in accordance with the condition tests.",12,claim 1,0,B
10606843,14,"14. The method of claim 13 , wherein the calculation connector connects two or three independent variables with a dependent variable by combining the two or three independent variables to assign a value to the dependent variable.",13,claim 13,0,B
10606843,15,"15. The method of claim 13 , wherein the comparison connector compares the two independent variables and then assigns a value to a dependent variable.",14,claim 13,0,B
10606843,16,"16. The method of claim 1 , further comprising generating at least one irreducible model in a Java programming language.",15,claim 1,0,B
10606843,17,"17. The method of claim 1 , wherein the foreign key further indicates a relationship between a line entity, one of the statements, and the metamodel.",16,claim 1,0,B
10606844,1,"1. A method for identifying files, at least a portion of the method being performed by one or more computing devices comprising at least one processor, the method comprising: receiving, at the one or more computing devices via a network, a request for a reputation score associated with a first file, wherein the request specifies a first hash value for the first file, wherein the first file includes a plurality of updating portions and a plurality of non-updating portions, and wherein the first hash value is generated as a combination of hashes associated with at least some of the plurality of non-updating portions of the first file; identifying, at the one or more computing devices, one of a plurality of file clusters that includes one or more files, wherein hash values of the one or more files match the first hash value; determining, at the one or more computing devices, the reputation score associated with the first file based on the identified file cluster, wherein the reputation score indicates a rating of the first file based on a distribution of the first file in a user base; and transmitting, over the network, an indication of the reputation score in response to the request.",0,,1,B
10606844,2,"2. The method of claim 1 , wherein the reputation score is further determined based on an amount of files in the identified file cluster and on a trust level of a vendor associated with the one or more files in the identified file cluster.",1,claim 1,0,B
10606844,3,"3. The method of claim 1 , wherein each of the file clusters is associated with a hash value generated from one or more parts of the one or more files included in the identified file cluster.",2,claim 1,0,B
10606844,4,"4. The method of claim 1 , wherein the non-updating portions of the first file include at least one of a first non-empty section of the first file, an entry point to the first file, appended data of the first file, or an import name table.",3,claim 1,0,B
10606844,5,"5. The method of claim 4 , wherein the non-updating portions of the first file further include a vendor name.",4,claim 4,0,B
10606844,6,"6. The method of claim 1 , further comprising: associating the first file with the identified file cluster.",5,claim 1,0,B
10606844,7,"7. The method of claim 1 , wherein the request is sent by an antivirus application and wherein the method further comprises: receiving, by the antivirus application, the indication of the reputation score; determining, by the antivirus application that a remedial action should be taken with regard to the first file based on the reputation score; and performing, by the antivirus application, the remedial action.",6,claim 1,0,B
10606844,8,"8. The method of claim 7 , wherein the remedial action comprises one or more of: quarantining the first file, restricting access to the first file, and generating an alert to an administrator.",7,claim 7,0,B
10606844,9,"9. A non-transitory computer-readable storage medium storing instructions, which, when executed on a processor, perform an operation for identifying files, the operation comprising: receiving, at one or more computing devices via a network, a request for a reputation score associated with a first file, wherein the request specifies a first hash value for the first file, wherein the first file includes a plurality of updating portions and a plurality of non-updating portions, and wherein the first hash value is generated as a combination of hashes associated with at least some of the plurality of non-updating portions of the first file; identifying, at the one or more computing devices, one of a plurality of file clusters that includes one or more files, wherein hash values of the one or more files match the first hash value; determining the reputation score associated with the first file based on the identified file cluster, wherein the reputation score indicates a rating of the first file based on a distribution of the first file in a user base; and transmitting, over the network, an indication of the reputation score in response to the request.",8,,0,B
10606844,10,"10. The computer-readable storage medium of claim 9 , wherein the reputation score is further determined based on an amount of files in the identified file cluster and on a trust level of a vendor associated with the one or more files in the identified file cluster.",9,claim 9,0,B
10606844,11,"11. The computer-readable storage medium of claim 9 , wherein each of the file clusters is associated with a hash value generated from one or more parts of the one or more files included in the identified file cluster.",10,claim 9,0,B
10606844,12,"12. The computer-readable storage medium of claim 9 , wherein the non-updating portions of the first file include at least one of a first non-empty section of the first file, an entry point to the first file, appended data of the first file, or an import name table.",11,claim 9,0,B
10606844,13,"13. The computer-readable storage medium of claim 9 , wherein the operation further comprises: associating the first file with the identified file cluster.",12,claim 9,0,B
10606844,14,"14. The computer-readable storage medium of claim 9 , wherein the request is sent by an antivirus application and wherein the operation further comprises: receiving, by the antivirus application, the indication of the reputation score; determining, by the antivirus application that a remedial action should be taken with regard to the first file based on the reputation score; and performing, by the antivirus application, the remedial action.",13,claim 9,0,B
10606844,15,"15. The computer-readable storage medium of claim 14 , wherein the remedial action comprises one or more of: quarantining the first file, restricting access to the first file, and generating an alert to an administrator.",14,claim 14,0,B
10606844,16,"16. A system for identifying files, the system comprising: a processor; and a memory storing code, which, when executed on the processor, performs an operation comprising: receiving, at one or more computing devices via a network, a request for a reputation score associated with a first file, wherein the request specifies a first hash value for the first file, wherein the first file includes a plurality of updating portions and a plurality of non-updating portions, and wherein the first hash value is generated as a combination of hashes associated with at least some of the plurality of non-updating portions of the file; identifying, at the one or more computing devices, one of a plurality of file clusters that includes one or more files, wherein hash values of the one or more files match the first hash value; determining the reputation score associated with the first file based on the identified file cluster, wherein the reputation score indicates a rating of the first file based on a distribution of the first file in a user base; and transmitting, over the network, an indication of the reputation score in response to the request.",15,,0,B
10606844,17,"17. The system of claim 16 , wherein the reputation score is further determined based on an amount of files in the identified file cluster and on a trust level of a vendor associated with the one or more files in the identified file cluster.",16,claim 16,0,B
10606844,18,"18. The system of claim 16 , wherein the non-updating portions of the first file include at least one of a first non-empty section of the first file, an entry point to the first file, appended data of the first file, or an import name table.",17,claim 16,0,B
10606844,19,"19. The system of claim 16 , wherein the request is sent by an antivirus application, the operation further comprising: receiving, by the antivirus application, the indication of the reputation score; determining, by the antivirus application that a remedial action should be taken with regard to the first file based on the reputation score; and performing, by the antivirus application, the remedial action.",18,claim 16,0,B
10606844,20,"20. The system of claim 19 , wherein the remedial action comprises one or more of: quarantining the first file, restricting access to the first file, and generating an alert to an administrator.",19,claim 19,0,B
10606845,1,"1. A method, comprising: detecting, by a device comprising a processor, leading events of an application based on historical ranking information, wherein the leading events are the time segments during which the application remains in at least a predefined high ranking in an application leaderboard, and a standard for at least the predefined high ranking is that a ranking of the application in the application leaderboard is not greater than a ranking threshold K*, and the detecting the leading events of the application comprises: identifying start times of the leading events and adjacent end times of the leading events that are adjacent to the start times, wherein the leading events are separately formed by connecting ranking points during a leading even, and based on a result of searching for rankings of the application at time points represented in the historical ranking information, identifying time segments between the start times and the adjacent end times as corresponding to the leading events, wherein the historical ranking information comprises a ranking index corresponding to a discrete date index, and wherein each element in the ranking index corresponds to a discrete time point in the discrete date index, and represents a ranking of the application when the application is at the discrete time point; in response to a time interval of two adjacent leading events of the adjacent leading events being determined to be less than an interval threshold, combining adjacent leading events of the leading events to form leading sessions of the application, wherein the adjacent leading events comprise at least two consecutive time segments of the time segments; and sending the leading session of the application to at least one of at least one device of an application developer, an operator of an application store or an application user.",0,,1,B
10606845,2,"2. The method of claim 1 , further comprising: setting the ranking threshold K*.",1,claim 1,0,B
10606845,3,"3. The method of claim 1 , wherein a value of the ranking threshold K* is in a range of integers between 1 and 500.",2,claim 1,0,B
10606845,4,"4. The method of claim 1 , further comprising: setting the interval threshold.",3,claim 1,0,B
10606845,5,"5. The method of claim 1 , wherein a value of the interval threshold is in a range of 2 to 10 times of an update cycle of the application leaderboard.",4,claim 1,0,B
10606845,6,"6. The method of claim 1 , wherein if a first ranking of the application at a first time point in the historical ranking information is not greater than the ranking threshold K*, identifying the first time point as a start time; and if a second ranking of the application at a last time point in the historical ranking information is not greater than the ranking threshold K*, identifying the last time point as an adjacent end time of the adjacent end times.",5,claim 1,0,B
10606845,7,"7. The method of claim 1 , wherein the combining the adjacent leading events of the leading events to form the leading sessions of the application comprises: searching, in an order of the adjacent leading events, for a detected leading event starting from an initial time point of the historical ranking information in; and when a time interval between a current leading event and a previous leading event is less than an interval threshold, combining the current leading event and the previous leading event in a same leading session until the searching for the detected leading event is completed.",6,claim 1,0,B
10606845,8,"8. The method of claim 7 , wherein the combining the adjacent leading events of the leading events to form the leading sessions of the application further comprises: when the time interval between the current leading event and the previous leading event is not less than the interval threshold, and another time interval between the current leading event and a next leading event is not less than the interval threshold, detecting the detected leading event as a leading session of the leading sessions.",7,claim 7,0,B
10606845,9,"9. The method of claim 1 , wherein the time segments are first time segments, and wherein the historical ranking information comprises information about ratings on the application by users of the application in second time segments in the history.",8,claim 1,0,B
10606845,10,"10. The method of claim 1 , further comprising: obtaining the historical ranking information of the application in an application leaderboard.",9,claim 1,0,B
10606845,11,"11. The method of claim 10 , wherein the obtaining the historical ranking information comprises at least one of obtaining the historical ranking information from a device of an operator of an application store or extracting the historical ranking information from data received from the application store.",10,claim 10,0,B
10606845,12,"12. The method of claim 1 , further comprising: when a first ranking at a current time point is not greater than a ranking threshold K* and a second ranking of the rankings at a previous time point is greater than the ranking threshold K*, identifying the current time point as a start time of the leading event of the start times of the leading events; and when a first ranking at a current time point is greater than the ranking threshold K* and a second ranking of the rankings at a previous time point is not greater than the ranking threshold K*, identifying the previous time point as an adjacent end time of the adjacent end times.",11,claim 1,0,B
10606845,13,"13. A system, comprising: a memory that stores executable units; and a processor, coupled to the memory, that executes the executable units to perform operations of the system, the executable units comprising: a leading event detection unit configured to detect leading events of an application based on historical ranking information, wherein the leading events are the time segments during which the application remains in at least a predefined high ranking in an application leaderboard, and a standard for at least the predefined high ranking is that a ranking of the application in the application leaderboard is not greater than a ranking threshold K*, and the leading event detection unit comprises: a start time identification module configured to identify start times of the leading events, an end time identification module configured to identify adjacent end times of the leading events, which are adjacent to the start times, wherein the leading events are separately formed by connecting ranking points during a leading event, and a leading event identification module configured to, based on a result of searching for rankings of the application at time points represented in the historical ranking information, identify time segments between the start times and the adjacent end times as the leading events, wherein the historical ranking information comprises a ranking index corresponding to a discrete date index, and wherein each element in the ranking index corresponds to a discrete time point in the discrete date index, and represents a ranking of the application when the application is at the discrete time point; a leading session detection unit configured to, in response to a time interval of two adjacent leading events of the adjacent leading events being determined to be less than an interval threshold, combine adjacent leading events of the leading events to form a leading session of the application, wherein the adjacent leading events comprise at least two consecutive time segments of the time segments; and a leading session sending unit configured to send the leading session of the application to at least one of at least one device of an application developer, an operator of an application store or an application user.",12,,0,B
10606845,14,"14. The system of claim 13 , wherein the executable units further comprise a ranking threshold setting unit configured to set the ranking threshold K*.",13,claim 13,0,B
10606845,15,"15. The system of claim 13 , wherein a standard for combining the adjacent leading events in a same leading session is that a time interval of the adjacent leading events is less than an interval threshold.",14,claim 13,0,B
10606845,16,"16. The system of claim 15 , wherein the executable units further comprise an interval threshold setting unit configured to set the interval threshold.",15,claim 15,0,B
10606845,17,"17. The system of claim 13 , wherein the start time identification module is further configured to identify a first time point as a start time of the start times if a first ranking of the application at the first time point in the historical ranking information is not greater than a ranking threshold; and the end time identification module is further configured to identify a last time point as an adjacent end time of the adjacent end times if a last ranking of the application at the last time point in the historical ranking information is not greater than the ranking threshold.",16,claim 13,0,B
10606845,18,"18. The system of claim 13 , wherein the leading session detection unit is further configured to: search, in time order, for the leading events starting from an initial time point of the historical ranking information; and when a time interval between a current leading event and a previous leading event is less than an interval threshold, combine the adjacent leading events in a same leading session until the search for the leading events is completed.",17,claim 13,0,B
10606845,19,"19. The system of claim 18 , wherein the leading session detection unit is configured to detect a leading event of the leading events as the leading session when a first time interval between the leading event and the previous leading event is not less than the interval threshold, and a second time interval between the leading event and a next leading event is not less than the interval threshold.",18,claim 18,0,B
10606845,20,"20. The system of claim 13 , wherein the executable units further comprise a historical ranking information obtaining unit configured to obtain the historical ranking information of the application in an application leaderboard.",19,claim 13,0,B
10606845,21,"21. The system of claim 20 , wherein the historical ranking information obtaining unit is configured to at least one of obtain the historical ranking information from a device of an operator of an application store or extract the historical ranking information from data published by the application store.",20,claim 20,0,B
10606845,22,"22. The system of claim 13 , wherein when a first ranking at a current time point is not greater than the ranking threshold K* and a second ranking of the rankings at a previous time point is greater than a ranking threshold K*, the start time identification module is further configured to identify the current time point as a start time of the leading event of the start times of the leading events; and when a first ranking at a current time point is greater than the ranking threshold K* and a second ranking of the rankings at a previous time point is not greater than the ranking threshold K*, the end time identification module is further configured to identify the previous time point as an adjacent end time of the adjacent end times.",21,claim 13,0,B
10606845,23,"23. The system of claim 13 , wherein a value of the interval threshold is in a range of 2 to 10 times of an update cycle of the application leaderboard.",22,claim 13,0,B
10606845,24,"24. A non-transitory computer readable storage device, comprising at least one executable instruction, which, in response to execution, causes a system comprising a processor to perform operations, comprising: detecting leading events of an application based on historical ranking information, wherein the leading events are the time segments during which the application remains in at least a predefined high ranking in an application leaderboard, and a standard for at least the predefined high ranking is that a ranking of the application in the application leaderboard is not greater than a ranking threshold K*, and the detecting the leading events of the application comprises: identifying start times of the leading events and adjacent end times of the leading events, wherein the adjacent end times are adjacent to the start times, wherein the leading events are separately formed by connecting ranking points during a leading event, and based on a result of searching for rankings of the application at time points represented in the historical ranking information, identifying time segments between the start times and the adjacent end times as the leading events, wherein the historical ranking information comprises a ranking index corresponding to a discrete date index, and wherein each element in the ranking index corresponds to a discrete time point in the discrete date index, and represents a ranking of the application when the application is at the discrete time point; combining adjacent leading events of the leading events to form leading sessions of the application, wherein the adjacent leading events comprise at least two consecutive time segments of the time segments, and sending the leading session of the application to at least one of at least one device of an application developer, an operator of an application store or an application user.",23,,0,B
10606845,25,"25. The non-transitory computer readable storage device of claim 24 , wherein the operations further comprise: setting the ranking threshold K*.",24,claim 24,0,B
10606845,26,"26. The non-transitory computer readable storage device of claim 25 , wherein a value of the ranking threshold K* is in a range of integers between 1 and 500.",25,claim 25,0,B
10606845,27,"27. The non-transitory computer readable storage device of claim 24 , wherein the operations further comprise: in response to a time interval of two adjacent leading events of the adjacent leading events being determined to be less than an interval threshold, combining the two adjacent leading events in a same leading session.",26,claim 24,0,B
10606845,28,"28. The non-transitory computer readable storage device of claim 24 , wherein the operations further comprise: setting the interval threshold.",27,claim 24,0,B
10606845,29,"29. The non-transitory computer readable storage device of claim 24 , wherein a value of the interval threshold is in a range of 2 to 10 times of an update cycle of the application leaderboard.",28,claim 24,0,B
10606845,30,"30. The non-transitory computer readable storage device of claim 24 , wherein the time segments are first time segments, and wherein the historical ranking information comprises information about ratings on the application by users of the application in second time segments in the history.",29,claim 24,0,B
10606845,31,"31. The non-transitory computer readable storage device of claim 24 , wherein the operations further comprise: obtaining the historical ranking information of the application in an application leaderboard.",30,claim 24,0,B
10606845,32,"32. The non-transitory computer readable storage device of claim 31 , wherein the obtaining the historical ranking information comprises at least one of obtaining the historical ranking information from a device of an operator of an application store or extracting the historical ranking information from data received from the application store.",31,claim 31,0,B
10606846,1,"1. A computer-implemented method for providing an answer to a query, the method comprising: receiving a query having one or more words, the one or more words including a subject chunk that describes a subject of the query; identifying the subject chunk using a trained subject labeling neural network by performing the steps comprising: transforming the one or more words of the query into one or more embeddings, each of the embeddings being a vector representing a corresponding word; using a set of neural network layers to convert the one or more embeddings into features; predicting, using the features produced by the set of neural network layers, a probability of each of the one or more words being a part of the subject chunk; and selecting one or more words whose associated probabilities are higher than a threshold as the subject chunk; querying a database to find at least one candidate subject, a name or an alias of the at least one candidate subject having a same surface form as the subject chunk; querying a knowledge graph database to find one or more relations that represent one or more relations associated with the at least one candidate subject; determining ranking scores of the one or more relations using a trained relation ranking neural network, each of the ranking scores indicating a semantic similarity between the query and a corresponding relation; responsive to the at least one candidate subject comprising a single candidate subject, selecting a relation with a highest ranking score amongst the one or more relations as a predicted relation and selecting the at least one candidate subject as a predicted subject; responsive to the at least one candidate subject comprising a plurality of candidate subjects: using one or more of the ranking scores to disambiguate the plurality of candidate subjects to select a predicted subject amongst the plurality of candidate subjects; and selecting as a predicted relation a relation with a highest ranking score amongst the one or more relations associated with the candidate subject that was selected as the predicted subject; and querying the knowledge graph database with the predicted relation and predicted subject to find an answer to the query.",0,,1,B
10606846,2,"2. A computer-implemented method as recited in claim 1 , wherein the database is the knowledge graph.",1,claim 1,0,B
10606846,3,"3. A computer-implemented method as recited in claim 1 , wherein the steps of using a set of neural network layers to convert the one or more embeddings into features and predicting a probability of each of the one or more words being a part of the subject chunk comprises: generating, using the set of neural network layers, binary classification features of whether each word is a part of the subject chunk; and using a binary classification layer and the binary classification features, predicting a probability for each word related to whether it is a part of the subject chunk.",2,claim 1,0,B
10606846,4,"4. A computer-implemented method as recited in claim 1 , wherein the step of determining ranking scores of the one or more relations using a trained relation ranking neural network, each of the ranking scores indicating a semantic similarity between the query and a corresponding relation comprises: transforming the one or more words of the query into one or more embeddings, each embedding being a vector representing a corresponding word; using the one or more embeddings and a set of recurrent neural layers, generating a question vector that is a neural representation of the query; representing each of the one or more relations as a relation vector; and for each relation, using a comparison between the question vector and its corresponding relation vector to determine its ranking score.",3,claim 1,0,B
10606846,5,"5. A computer-implemented method as recited in claim 4 , further comprising: if a dimension of the question vector is not equal to a dimension of each of the relation vectors, projecting the question vector into a vector having a same dimension as the relation vectors.",4,claim 4,0,B
10606846,6,"6. A computer-implemented method as recited in claim 4 , wherein the step of, for each relation, using a comparison between the question vector and its corresponding relation vector to determine its ranking score comprises: performing dot product using the question vector and the relation vector.",5,claim 4,0,B
10606846,7,"7. A computer-implemented method as recited in claim 1 , wherein the step of using at least some of the ranking scores to disambiguate the plurality of candidate subjects to select a predicted subject amongst the plurality of candidate subjects comprises: selecting as a predicted subject a candidate subject from the plurality of candidate subjects that has a highest ranking score combination formed from a combination of a set of top ranking scores of relations associated with the candidate subject.",6,claim 1,0,B
10606846,8,"8. A computer-implemented method as recited in claim 7 , wherein the step of selecting as a predicted subject a candidate subject from the plurality of candidate subjects that has a highest ranking score combination formed from a combination of a set of top ranking scores of relations associated with the candidate subject comprises: for each candidate subject from the plurality of candidate subjects, adding top-N of the ranking scores associated with the candidate subject, N being an integer number; and selecting a candidate subject having a highest sum of the top-N ranking scores as the predicted subject.",7,claim 7,0,B
10606846,9,"9. A computer-implemented method for identifying a subject in a question, the method comprising: receiving a query question having one or more words, the one or more words including a subject of the query question; transforming the one or more words into one or more embeddings, each embedding being a vector representing a corresponding word; using a set of bidirectional neural network layers to convert the one or more embeddings into features; predicting, using the features produced by the set of bidirectional neural network layers and a classification layer, a probability of each of the one or more words being a part of the subject; and selecting one or more words whose probabilities are higher than a threshold as the subject.",8,,0,B
10606846,10,"10. A computer-implemented method as recited in claim 9 , wherein the steps of using a set of bidirectional neural network layers to convert the one or more embeddings into features and predicting a probability of each of the one or more words being a part of the subject comprise: generating, using the set of bidirectional neural network layers, binary classification features of whether each word is a part of the subject; and using a logistic regression layer as the classification layer and the binary classification features, predicting a probability for each word related to whether it is a part of the subject.",9,claim 9,0,B
10606846,11,"11. A computer-implemented method as recited in claim 9 , wherein the set of bidirectional neural network layers comprises one or more layers of: Bi-directional RNN, Bi-directional Long-Short-Term-Memory (LSTM) and stacked-Bi-directional-Gated-Recurrent-Units (GRU)-RNN.",10,claim 9,0,B
10606846,12,"12. A computer-implemented method as recited in claim 9 , wherein the threshold is relative and the step of selecting one or more words whose probabilities are higher than a threshold as the subject comprises: selecting a word associated with a highest probability as part of the subject; and including as part of the subject each word on either side of the selected word whose associated probability has not decreased by more than a threshold percentage relative to its adjacent inner word's associated probability.",11,claim 9,0,B
10606846,13,"13. A non-transitory computer-readable medium or media comprising one or more sequences of instructions which, when executed by at least one of the one or more processors, causes steps to be performed comprising: receiving a query having one or more words, the one or more words including a subject chunk that describes a subject of the query; identifying the subject chunk using a trained subject labeling neural network by performing the steps comprising: transforming the one or more words of the query into one or more embeddings, each of the embeddings being a vector representing a corresponding word; using a set of neural network layers to convert the one or more embeddings into features; predicting, using the features produced by the set of neural network layers, a probability of each of the one or more words being a part of the subject chunk; and selecting one or more words whose associated probabilities are higher than a threshold as the subject chunk; querying a database to obtain at least one candidate subject; querying a database to find one or more relations that represent one or more relations associated with the at least one candidate subject; determining ranking scores of the one or more relations using a trained relation ranking neural network, each of the ranking scores indicating a semantic similarity between the query and a corresponding relation; responsive to the at least one candidate subject comprising a single candidate subject, selecting a relation with a highest ranking score amongst the one or more relations as a predicted relation and selecting the at least one candidate subject as a predicted subject; responsive to the at least one candidate subject comprising a plurality of candidate subjects: using one or more of the ranking scores to disambiguate the plurality of candidate subjects to select a predicted subject amongst the plurality of candidate subjects; and selecting as a predicted relation a relation with a highest ranking score amongst the one or more relations associated with the candidate subject that was selected as the predicted subject; and querying a database with the predicted relation and predicted subject to find an answer to the query.",12,,0,B
10606846,14,"14. The non-transitory computer-readable medium or media of claim 13 , wherein the set of neural network layers are a set of bidirectional neural network layers.",13,claim 13,0,B
10606846,15,"15. The non-transitory computer-readable medium or media of claim 13 , wherein the step of predicting, using the features produced by the set of neural network layers, a probability of each of the one or more words being a part of the subject chunk comprises: generating binary classification features of whether each word is a part of the subject chunk; and using a binary classification layer and the binary classification features, predicting a probability for each word related to whether it is a part of the subject chunk.",14,claim 13,0,B
10606846,16,"16. The non-transitory computer-readable medium or media of claim 13 , wherein the step of selecting one or more words whose associated probabilities are higher than a threshold as the predicted subject comprises: selecting a word associated with a highest probability as part of the predicted subject; and including as part of the predicted subject each word on either side of the selected word whose associated probability has not decreased by more than a threshold percentage relative to its adjacent inner word's associated probability.",15,claim 13,0,B
10606846,17,"17. The non-transitory computer-readable medium or media of claim 13 , wherein the step of determining ranking scores of the one or more relations using a trained relation ranking neural network, each of the ranking scores indicating a semantic similarity between the query and a corresponding relation comprises: transforming the one or more words of the query into one or more embeddings, each embedding being a vector representing a corresponding word; using the one or more embeddings and a set of recurrent neural layers, generating a question vector that is a neural representation of the query; representing each of the one or more relations as a relation vector; and for each relation, using a comparison between the question vector and its corresponding relation vector to determine its ranking score.",16,claim 13,0,B
10606846,18,"18. The non-transitory computer-readable medium or media of claim 16 , further comprises one or more sequences of instructions which, when executed by at least one of the one or more processors, causes steps to be performed comprising: if a dimension of the question vector is not equal to a dimension of each of the relation vectors, projecting the question vector into a vector having a same dimension as the relation vectors.",17,claim 16,0,B
10606846,19,"19. The non-transitory computer-readable medium or media of claim 16 , wherein the step of for each relation, using a comparison between the question vector and its corresponding relation vector to determine its ranking score comprises: performing dot product using the question vector and the relation vector.",18,claim 16,0,B
10606846,20,"20. The non-transitory computer-readable medium or media of claim 13 , wherein the step of using at least some of the ranking scores to disambiguate the plurality of candidate subjects to select a predicted subject amongst the plurality of candidate subjects comprises: selecting as a predicted subject a candidate subject from the plurality of candidate subjects that has a highest ranking score combination formed from a combination of a set of top ranking scores of relations associated with the candidate subject.",19,claim 13,0,B
10606847,1,"1. A computer implemented method, comprising: obtaining one or more sample ideal candidate member profiles in a social networking service; obtaining one or more sample search result member profiles in the social networking service, the one or more sample search result member profiles being results returned in response to searches performed using the one or more sample ideal candidate member profiles as input; identifying one or more pairs of sample ideal candidate member profiles and sample search result member profile, wherein each pair includes a sample ideal candidate member profile and a sample search result member profile returned in response to a search performed using the corresponding sample ideal candidate member profile in the pair as input; generating, for each unique pair of sample ideal candidate member profile and sample search result member profile, a label using a score generated from log information of the social networking service, the log information including records of communications between a searcher and members of the social networking service, the score being different if the searcher communicated with both the member corresponding to the sample ideal candidate member profile and the member corresponding to the sample search result member profile in a same search session than if the searcher did not communicate with both the member corresponding to the sample ideal candidate member profile and the member corresponding to the sample search result member profile in the same search session, the label being indicative of the likelihood that the searcher would interact with the sample search result member profile in the pair in response to the search being performed using the corresponding sample ideal candidate member profile as input; and feeding the generated labels into a machine learning algorithm to train a combined ranking model used to output ranking scores for search result member profiles.",0,,1,B
10606847,2,"2. The method of claim 1 , wherein the score is a medium score between the score if the searcher did communicate with both the member corresponding to the sample ideal candidate member profile and the member corresponding to the sample search result member profile in the same session and the score if the searcher did not communicate with both the member corresponding to the sample ideal candidate member profile and the member corresponding to the sample search result member profile in the same session if the log information further includes records of user input by the searcher, the user input causing interaction with member profiles in the social networking service but not resulting in communications between the searcher and the member of the social networking service corresponding to both the sample ideal candidate member profile and the sample search result member profile in the same search session.",1,claim 1,0,B
10606847,3,"3. The method of claim 1 , wherein a search session is a browsing session.",2,claim 1,0,B
10606847,4,"4. The method of claim 1 , wherein a search session includes a period of time between a searcher initiating a search and the searcher submitting an unrelated search or logging off the social networking service.",3,claim 1,0,B
10606847,5,"5. The method of claim 2 , wherein the score if the searcher communicated with both the member corresponding to the sample ideal candidate member profile and the member corresponding to the sample search result member profile in a same search session is higher than the score if the searcher did not communicate with both the member corresponding to the sample ideal candidate member profile and the member corresponding to the sample search result member profile in the same search session.",4,claim 2,0,B
10606847,6,"6. The method of claim 1 , further comprising aggregating label scores from multiple search sessions.",5,claim 1,0,B
10606847,7,"7. The method of claim 1 , further comprising ranking one or more search result member profiles using the combined ranking model.",6,claim 1,0,B
10606847,8,"8. A system comprising: a hardware processor; and a computer-readable medium having instructions stored thereon, which, when executed by the processor, cause the system to: obtain one or more sample ideal candidate member profiles in a social networking service; obtain one or more sample search result member profiles in the social networking service, the one or more sample search result member profiles being results returned in response to searches performed using the one or more sample ideal candidate member profiles as input; identify one or more pairs of sample ideal candidate member profiles and sample search result member profile, wherein each pair includes a sample ideal candidate member profile and a sample search result member profile returned in response to a search performed using the corresponding sample ideal candidate member profile in the pair as input; generate, for each unique pair of sample ideal candidate member profile and sample search result member profile, a label using a score generated from log information of the social networking service, the log information including records of communications between a searcher and members of the social networking service, the score being different if the searcher communicated with both the member corresponding to the sample ideal candidate member profile and the member corresponding to the sample search result member profile in a same search session than if the searcher did not communicate with both the member corresponding to the sample ideal candidate member profile and the member corresponding to the sample search result member profile in the same search session, the label being indicative of the likelihood that the searcher would interact with the sample search result member profile in the pair in response to the search being performed using the corresponding sample ideal candidate member profile as input; and feed the generated labels into a machine learning algorithm to train a combined ranking model used to output ranking scores for search result member profiles.",7,,0,B
10606847,9,"9. The system of claim 8 , wherein the score is a medium score between the score if the searcher did communicate with both the member corresponding to the sample ideal candidate member profile and the member corresponding to the sample search result member profile in the same session and the score if the searcher did not communicate with both the member corresponding to the sample ideal candidate member profile and the member corresponding to the sample search result member profile in the same session if the log information further includes records of user input by the searcher, the user input causing interaction with member profiles in the social networking service but not resulting in communications between the searcher and the member of the social networking service corresponding to both the sample ideal candidate member profile and the sample search result member profile in the same search session.",8,claim 8,0,B
10606847,10,"10. The system of claim 8 , wherein a search session is a browsing session.",9,claim 8,0,B
10606847,11,"11. The system of claim 8 , wherein a search session includes a period of time between a searcher initiating a search and the searcher submitting an unrelated search or logging off the social networking service.",10,claim 8,0,B
10606847,12,"12. The system of claim 9 , wherein the score if the searcher communicated with both the member corresponding to the sample ideal candidate member profile and the member corresponding to the sample search result member profile in a same search session is higher than the score if the searcher did not communicate with both the member corresponding to the sample ideal candidate member profile and the member corresponding to the sample search result member profile in the same search session.",11,claim 9,0,B
10606847,13,"13. The system of claim 8 , wherein the instructions further cause the system to aggregate label scores from multiple search sessions.",12,claim 8,0,B
10606847,14,"14. The system of claim 8 , wherein the instructions further cause the system to rank one or more search result member profiles using the combined ranking model.",13,claim 8,0,B
10606847,15,"15. A non-transitory machine-readable storage medium comprising instructions, which when implemented by one or more machines, cause the one or more machines to perform operations comprising: obtaining one or more sample ideal candidate member profiles in a social networking service; obtaining one or more sample search result member profiles in the social networking service, the one or more sample search result member profiles being results returned in response to searches performed using the one or more sample ideal candidate member profiles as input; identifying one or more pairs of sample ideal candidate member profiles and sample search result member profile, wherein each pair includes a sample ideal candidate member profile and a sample search result member profile returned in response to a search performed using the corresponding sample ideal candidate member profile in the pair as input; generating, for each unique pair of sample ideal candidate member profile and sample search result member profile, a label using a score generated from log information of the social networking service, the log information including records of communications between a searcher and members of the social networking service, the score being different if the searcher communicated with both the member corresponding to the sample ideal candidate member profile and the member corresponding to the sample search result member profile in a same search session than if the searcher did not communicate with both the member corresponding to the sample ideal candidate member profile and the member corresponding to the sample search result member profile in the same search session, the label being indicative of the likelihood that the searcher would interact with the sample search result member profile in the pair in response to the search being performed using the corresponding sample ideal candidate member profile as input; and feeding the generated labels into a machine learning algorithm to train a combined ranking model used to output ranking scores for search result member profiles.",14,,0,B
10606847,16,"16. The non-transitory machine-readable storage medium of claim 15 , wherein the score is a medium score between the score if the searcher did communicate with both the member corresponding to the sample ideal candidate member profile and the member corresponding to the sample search result member profile in the same session and the score if the searcher did not communicate with both the member corresponding to the sample ideal candidate member profile and the member corresponding to the sample search result member profile in the same session if the log information further includes records of user input by the searcher, the user input causing interaction with member profiles in the social networking service but not resulting in communications between the searcher and the member of the social networking service corresponding to both the sample ideal candidate member profile and the sample search result member profile in the same search session.",15,claim 15,0,B
10606847,17,"17. The non-transitory machine-readable storage medium of claim 15 , wherein a search session is a browsing session.",16,claim 15,0,B
10606847,18,"18. The non-transitory machine-readable storage medium of claim 15 , wherein a search session includes a period of time between a searcher initiating a search and the searcher submitting an unrelated search or logging off the social networking service.",17,claim 15,0,B
10606847,19,"19. The non-transitory machine-readable storage medium of claim 16 , wherein the score if the searcher communicated with both the member corresponding to the sample ideal candidate member profile and the member corresponding to the sample search result member profile in a same search session is higher than the score if the searcher did not communicate with both the member corresponding to the sample ideal candidate member profile and the member corresponding to the sample search result member profile in the same search session.",18,claim 16,0,B
10606847,20,"20. The non-transitory machine-readable storage medium of claim 15 , wherein the instructions further comprise aggregating label scores from multiple search sessions.",19,claim 15,0,B
10606848,1,"1. A computer-implemented method, comprising: determining a promotion contact list for a user account comprising a subset of a contact list for the user account containing contacts with whom a user of the user account has not sent a message to within a defined recency; determining a predicted bidirectional communication interest for each contact on the promotion contact list for the user account; determining a user predicted likelihood of future activeness for the user account comprising a prediction that the user account will have a defined level of messaging activity in a defined period of time; determining a contact predicted likelihood of future activeness for each contact on the promotion contact list comprising a prediction that the contact will have a defined level of messaging activity in a defined period of time; determining a ranking weight for each contact on the promotion contact list based on the predicted bidirectional communication interest for each contact on the promotion contact list, the user predicted likelihood of future activeness and the contact predicted likelihood of future activeness; and ordering the promotion contact list for display based on the determined ranking weight for each contact on the promotion contact list.",0,,1,B
10606848,2,"2. The method of claim 1 , wherein the ranking weight for each contact on the promotion contact list weighs contacts with a higher contact predicted likelihood of future activeness more heavily where the user predicted likelihood of future activeness is higher, wherein the ranking weight for each contact on the promotion contact list weighs contacts with a higher contact predicted likelihood of future activeness less heavily where the user predicted likelihood of future activeness is lower.",1,claim 1,0,B
10606848,3,"3. The method of claim 1 , wherein contacts with a higher predicted communication interest have a higher ranking weight.",2,claim 1,0,B
10606848,4,"4. The method of claim 1 , wherein the user predicted likelihood of future activeness is based on a number of threads for the user account, a number of sends for the user account, and a number of highly-active threads for the user account, wherein the contact predicted likelihood of future activeness on the communication system for each contact is based on a number of threads for each contact, a number of sends for each contact, and a number of highly-active threads for each contact.",3,claim 1,0,B
10606848,5,"5. The method of claim 1 , wherein the user predicted likelihood of future activeness is a function of a number of threads for the user account, a number of sends for the user account, and a number of highly-active threads for the user account, wherein the contact predicted likelihood of future activeness on the communication system for each contact is a function of a number of threads for each contact, a number of sends for each contact, and a number of highly-active threads for each contact.",4,claim 1,0,B
10606848,6,"6. The method of claim 5 , the function determined based on a linear regression of an historical data set for the communication system.",5,claim 5,0,B
10606848,7,"7. The method of claim 1 , the ranking weight reduced for one or more previously-viewed contacts on the promotion contact list.",6,claim 1,0,B
10606848,8,"8. The method of claim 1 , further comprising: associating a contact of the promotion contact list with an event badge, the event badge selected based on event information for the contact.",7,claim 1,0,B
10606848,9,"9. An apparatus, comprising: a processor circuit on a device; and memory containing instructions that, when executed, cause the processor to: determine a promotion contact list for the user account comprising a subset of a contact list for the user account containing contacts with whom a user of the user account has not sent a message to within a defined recency; determine a bidirectional predicted communication interest for each contact on the promotion contact list; determine a user predicted likelihood of future activeness for the user account comprising a prediction that the user account will have a defined level of messaging activity in a defined period of time; determine a contact predicted likelihood of future activeness for each contact on the promotion contact list comprising a prediction that the contact will have a defined level of messaging activity in a defined period of time; determine a ranking weight for each contact on the promotion contact list based on the predicted bidirectional communication interest for each contact on the promotion contact list, the user predicted likelihood of future activeness and the contact predicted likelihood of future activeness; and transmit an ordered promotion contact list to the client device ordered for display based on a determined ranking weight for each contact on the ordered promotion contact list.",8,,0,B
10606848,10,"10. The apparatus of claim 9 , wherein the ranking weight for each contact on the promotion contact list weighs contacts with a higher contact predicted likelihood of future activeness more heavily where the user predicted likelihood of future activeness is higher, wherein the ranking weight for each contact on the promotion contact list weighs contacts with a higher contact predicted likelihood of future activeness less heavily where the user predicted likelihood of future activeness is lower, wherein contacts with a higher predicted communication interest have a higher ranking weight.",9,claim 9,0,B
10606848,11,"11. The apparatus of claim 9 , wherein the user predicted likelihood of future activeness is based on a number of threads for the user account, a number of sends for the user account, and a number of highly-active threads for the user account, wherein the contact predicted likelihood of future activeness on the communication system for each contact is based on a number of threads for each contact, a number of sends for each contact, and a number of highly-active threads for each contact.",10,claim 9,0,B
10606848,12,"12. The apparatus of claim 9 , wherein the user predicted likelihood of future activeness is a function of a number of threads for the user account, a number of sends for the user account, and a number of highly-active threads for the user account, wherein the contact predicted likelihood of future activeness on the communication system for each contact is a function of a number of threads for each contact, a number of sends for each contact, and a number of highly-active threads for each contact, the function determined based on a linear regression of an historical data set for the communication system.",11,claim 9,0,B
10606848,13,"13. The apparatus of claim 9 , the ranking weight reduced for one or more previously-viewed contacts of the promotion contact list.",12,claim 9,0,B
10606848,14,"14. The apparatus of claim 9 , the instructions further causing the processor to: associate a contact of the promotion contact list with an event badge, the event badge selected based on event information for the contact.",13,claim 9,0,B
10606848,15,"15. At least one computer-readable storage medium comprising instructions that, when executed, cause a system to: determine a promotion contact list for a user account comprising a subset of a contact list for the user account containing contacts with whom a user of the user account has not send a message to within a defined recency; determine a predicted bidirectional communication interest for each contact on the promotion contact list; determine a user predicted likelihood of future activeness comprising a prediction that the user account will have a defined level of messaging activity in a defined period of time; determine a contact predicted likelihood of future activeness for each contact on the promotion contact list comprising a prediction that the contact will have a defined level of messaging activity in a defined period of time; determine a ranking weight for each contact on the promotion contact list based on the predicted bidirectional communication interest for each contact on the promotion contact list, the user predicted likelihood of future activeness, and the contact predicted likelihood of future activeness; and order the promotion contact list for display based on the determined ranking weight for each contact on the promotion contact list.",14,,0,B
10606848,16,"16. The computer-readable storage medium of claim 15 , wherein the ranking weight for each contact on the promotion contact list weighs contacts with a higher contact predicted likelihood of future activeness more heavily where the user predicted likelihood of future activeness is higher, wherein the ranking weight for each contact on the promotion contact list weighs contacts with a higher contact predicted likelihood of future activeness less heavily where the user predicted likelihood of future activeness is lower, wherein contacts with a higher predicted communication interest have a higher ranking weight.",15,claim 15,0,B
10606848,17,"17. The computer-readable storage medium of claim 15 , wherein the user predicted likelihood of future activeness is based on a number of threads for the user account, a number of sends for the user account, and a number of highly-active threads for the user account, wherein the contact predicted likelihood of future activeness on the communication system for each contact is based on a number of threads for each contact, a number of sends for each contact, and a number of highly-active threads for each contact.",16,claim 15,0,B
10606848,18,"18. The computer-readable storage medium of claim 15 , wherein the user predicted likelihood of future activeness is a function of a number of threads for the user account, a number of sends for the user account, and a number of highly-active threads for the user account, wherein the contact predicted likelihood of future activeness on the communication system for each contact is a function of a number of threads for each contact, a number of sends for each contact, and a number of highly-active threads for each contact, the function determined based on a linear regression of an historical data set for the communication system.",17,claim 15,0,B
10606848,19,"19. The computer-readable storage medium of claim 15 , the ranking weight reduced for one or more previously-viewed contacts of the promotion contact list.",18,claim 15,0,B
10606848,20,"20. The computer-readable storage medium of claim 15 , comprising further instructions that, when executed, cause a system to: associate a contact of the promotion contact list with an event badge, the event badge selected based on event information for the contact.",19,claim 15,0,B
10606849,1,"1. A method of assigning confidence scores to relationship entries in a knowledge graph, comprising: assigning, using a data processing system, respective initial confidence scores to relationship n-tuples in a knowledge graph (KG), wherein each of the relationship n-tuples designates at least a first entity, a second entity, and a relationship between the first and second entities or a single entity and a relationship between the single entity and one or more properties of the single entity; associating, using the data processing system, respective feature vectors with each of the relationship n-tuples, wherein the feature vectors are encoded with values representing a technology used to extract the first and second entities from data and a source that provided the data; generating, using the data processing system, a training set that includes at least a subset of the relationship n-tuples labeled with respective ground truth labels; learning, using the data processing system, respective initial weights for the feature vectors based on the training set; and generating, using the data processing system, respective subsequent confidence scores for each of the relationship n-tuples based on the initial weights for the feature vectors.",0,,1,B
10606849,2,"2. The method of claim 1 , wherein the method further comprises: extracting the relationship n-tuples from the data; and populating the KG with the extracted relationship n-tuples.",1,claim 1,0,B
10606849,3,"3. The method of claim 1 , wherein the features vectors have associated dynamic features and associated static features and the method further comprises: determining that one or more of the dynamic features associated with one or more of the feature vectors has changed; in response to determining that one or more of the dynamic features associated with one or more of the feature vectors has changed, learning respective new weights for the feature vectors; and generating respective new confidence scores for each of the relationship n-tuples based on the new weights for the feature vectors.",2,claim 1,0,B
10606849,4,"4. The method of claim 3 , wherein the dynamic features include one or more of a ��klout�� score and a ��click ",3,claim 3,0,B
10606849,5,"5. The method of claim 1 , wherein the method further comprises: determining that one or more new relationship n-tuples should be promoted to the training set; modifying the training set to include the new relationship n-tuples; learning respective new weights for the feature vectors based on the modified training set; and generating respective new confidence scores for each of the relationship n-tuples based on the new weights for the feature vectors.",4,claim 1,0,B
10606849,6,"6. The method of claim 5 , wherein the new relationship n-tuples are selected for promotion to the training set based on a confidence score and a robustness of the new relationship n-tuples.",5,claim 5,0,B
10606849,7,"7. The method of claim 6 , wherein the new relationship n-tuples that are automatically added to the training set are weighted differently than the new relationship n-tuples that are not automatically added to the training set.",6,claim 6,0,B
10606849,8,"8. A computer program product configured to assign confidence scores to relationship entries in a knowledge graph, the computer program product comprising: a computer-readable storage device; and computer-readable program code embodied on the computer-readable storage device, wherein the computer-readable program code, when executed by a data processing system, causes the data processing system to: assign respective initial confidence scores to relationship n-tuples in a knowledge graph (KG), wherein each of the relationship n-tuples designates at least a first entity, a second entity, and a relationship between the first and second entities or a single entity and a relationship between the single entity and one or more properties of the single entity; associate respective feature vectors with each of the relationship n-tuples, wherein the feature vectors are encoded with values representing a technology used to extract the first and second entities from data and a source that provided the data; generate a training set that includes at least a subset of the relationship n-tuples labeled with respective ground truth labels; learn respective initial weights for the feature vectors based on the training set; and generate respective subsequent confidence scores for each of the relationship n-tuples based on the initial weights for the feature vectors.",7,,0,B
10606849,9,"9. The computer program product of claim 8 , wherein the computer-readable program code, when executed by the data processing system, further causes the data processing system to: extract the relationship n-tuples from the data; and populate the KG with the extracted relationship n-tuples.",8,claim 8,0,B
10606849,10,"10. The computer program product of claim 8 , wherein the features vectors have associated dynamic features and associated static features and the computer-readable program code, when executed by the data processing system, further causes the data processing system to: determine that one or more of the dynamic features associated with one or more of the feature vectors has changed; in response to determining that one or more of the dynamic features associated with one or more of the feature vectors has changed, learn respective new weights for the feature vectors; and generate respective new confidence scores for each of the relationship n-tuples based on the new weights for the feature vectors.",9,claim 8,0,B
10606849,11,"11. The computer program product of claim 10 , wherein the dynamic features include one or more of a ��klout�� score and a ��click ",10,claim 10,0,B
10606849,12,"12. The computer program product of claim 8 , wherein the computer-readable program code, when executed by the data processing system, further causes the data processing system to: determine that one or more new relationship n-tuples should be promoted to the training set; modify the training set to include the new relationship n-tuples; learn respective new weights for the feature vectors based on the modified training set; and generate respective new confidence scores for each of the relationship n-tuples based on the new weights for the feature vectors.",11,claim 8,0,B
10606849,13,"13. The computer program product of claim 12 , wherein the new relationship n-tuples are selected for promotion to the training set based on a confidence score and a robustness of the new relationship n-tuples.",12,claim 12,0,B
10606849,14,"14. The computer program product of claim 13 , wherein the new relationship n-tuples that are automatically added to the training set are weighted differently than the new relationship n-tuples that are not automatically added to the training set.",13,claim 13,0,B
10606849,15,"15. A data processing system, comprising: a cache memory; and a processor coupled to the cache memory, wherein the processor is configured to: assign respective initial confidence scores to relationship n-tuples in a knowledge graph (KG), wherein each of the relationship n-tuples designates at least a first entity, a second entity, and a relationship between the first and second entities or a single entity and a relationship between the single entity and one or more properties of the single entity; associate respective feature vectors with each of the relationship n-tuples, wherein the feature vectors are encoded with values representing a technology used to extract the first and second entities from data and a source that provided the data; generate a training set that includes at least a subset of the relationship n-tuples labeled with respective ground truth labels; learn respective initial weights for the feature vectors based on the training set; and generate respective subsequent confidence scores for each of the relationship n-tuples based on the initial weights for the feature vectors.",14,,0,B
10606849,16,"16. The data processing system of claim 15 , wherein the processor is further configured to: extract the relationship n-tuples from the data; and populate the KG with the extracted relationship n-tuples.",15,claim 15,0,B
10606849,17,"17. The data processing system of claim 15 , wherein the features vectors have associated dynamic features and associated static features and the processor is further configured to: determine that one or more of the dynamic features associated with one or more of the feature vectors has changed; in response to determining that one or more of the dynamic features associated with one or more of the feature vectors has changed, learn respective new weights for the feature vectors; and generate respective new confidence scores for each of the relationship n-tuples based on the new weights for the feature vectors.",16,claim 15,0,B
10606849,18,"18. The data processing system of claim 17 , wherein the dynamic features include one or more of a ��klout�� score and a ��click ",17,claim 17,0,B
10606849,19,"19. The data processing system of claim 15 , wherein the processor is further configured to: determine that one or more new relationship n-tuples should be promoted to the training set; modify the training set to include the new relationship n-tuples; learn respective new weights for the feature vectors based on the modified training set; and generate respective new confidence scores for each of the relationship n-tuples based on the new weights for the feature vectors.",18,claim 15,0,B
10606849,20,"20. The data processing system of claim 19 , wherein the new relationship n-tuples are selected for promotion to the training set based on a confidence score and a robustness of the new relationship n-tuples, and wherein the new relationship n-tuples that are automatically added to the training set are weighted differently than the new relationship n-tuples that are not automatically added to the training set.",19,claim 19,0,B
10606850,1,"1. A computer implemented method for updating a knowledge base of a spam detection system for email messages, the knowledge base being operable for storing natural language terms and, for each natural language term in the stored natural language terms, a score value related to the natural language term, the score value specifying whether the natural language term is indicative for a spam message or a non-spam message, the method comprising: creating a first email set of email messages related to a time window, the first email set comprising email messages currently classified as spam messages; creating a second email set of email messages related to the time window, the second email set comprising email messages currently classified as non-spam messages; extracting a natural language term that is not present in the knowledge base from one of the email messages contained in one of the first email set or the second email set thereby forming an extracted natural language term; storing the extracted natural language term in a first candidate set of candidate terms potentially indicative for spam messages or a second candidate set of candidate terms potentially indicative for non-spam messages based on a frequency of occurrence of the extracted natural language term in the email messages of the first email set or the second email set, respectively; calculating a score value of the extracted natural language term stored in the first candidate set using the following formula, wherein score(c_spam_term) represents the score value of a spam term: score ? ( c_spam ? _term ) = freq ? ( c_spam ? _term ) * 1 N ? ? i = 1 N ? [ freq ? ( spam_term i ) * score ? ( spam_term i ) ] * [ 1 + a ? ? 1 * freq_moved ? _to ? _spam ? ( c_spam ? _term ) + b ? ? 1 * freq_blacklisted ? ( c_spam ? _term ) ] , and wherein freq(c_spam_term) is the frequency of occurrence of the extracted natural language term in the first email set, N is the number of terms comprised by the email messages of the first email set which are tagged in a vocabulary as existing spam terms, the sum from i=1 to N is the sum over the N terms tagged in the vocabulary as the existing spam terms, freq(spam_term i ) is the frequency of the i th term tagged as an existing spam term in the first email set, score(spam_term i ) is the score value of the i th term tagged in the vocabulary as an existing spam term, a1 and b1 are positive weighting factors, freq_moved_to_spam(c_spam_term) is the frequency of occurrence of the extracted natural language term in a first subset of the first email set comprising email messages which have been moved to the first email set due to a user move command, and freq_blacklisted(c_spam_term) is the frequency of occurrence of the extracted natural language term in a second subset of the first email set comprising email messages which have been moved to the first email set due to having a sender which is blacklisted; and storing the extracted natural language term and the calculated score value into the knowledge base.",0,,1,B
10606850,2,"2. The method of claim 1 , wherein the method comprises storing the extracted natural language term in the first candidate set of candidate terms potentially indicative for spam messages if the frequency of occurrence of the extracted natural language term in the email messages of the first email set of email messages is greater than or equal to a first threshold.",1,claim 1,0,B
10606850,3,"3. The method of claim 2 , wherein the method comprises storing the extracted natural language term in the second candidate set of candidate terms potentially indicative for non-spam messages if the frequency of occurrence of the extracted natural language term in email messages of the second email set of email messages is greater than or equal to a second threshold.",2,claim 2,0,B
10606850,4,"4. The method of claim 3 , wherein the method comprises calculating a first set difference of the first candidate set and the second candidate set in order to obtain a first supplement set of extracted natural language terms indicative for spam messages to be added to the knowledge base.",3,claim 3,0,B
10606850,5,"5. The method of claim 3 , wherein the method comprises calculating a second set difference of the second candidate set and the first candidate set in order to obtain a second supplement set of extracted natural language terms indicative for non-spam messages to be added to the knowledge base.",4,claim 3,0,B
10606850,6,"6. The method of claim 1 , wherein the frequency of occurrence is the fraction of email messages comprising the extracted natural language term of the email set that contains the email message from which the natural language term is extracted.",5,claim 1,0,B
10606850,7,"7. The method of claim 1 , further comprising for each of the first email set and the second email set: identifying one or more natural language terms in one or more email messages of the corresponding email set; creating a vocabulary comprising the identified natural language terms, wherein each identified natural language term is tagged as a new natural language term, as an existing natural language spam term or as an existing natural language non-spam term in the knowledge base, wherein extracting the natural language term comprises selecting a natural language term of the vocabulary being tagged as a new natural language term.",6,claim 1,0,B
10606850,8,"8. The method of claim 1 , wherein the calculated score value of a non-spam term, represented as score(c_non-spam_term), of the extracted natural language term stored in the second candidate set is defined using the following formula: score ? ( c_non ? - ? spam_term ) = freq ? ( c_non ? - ? spam_term ) * 1 M ? ? i = 1 M ? [ freq ? ( non ? - ? spam_term i ) * score ? ( non ? - ? spam_term i ) ] * [ 1 + a ? ? 2 * freq_moved ? _to ? _non ? - ? spam ? ( c_non ? - ? spam_term ) + b ? ? 2 * freq_whitelisted ? ( c_non ? - ? spam_term ) ] , wherein freq(c_non-spam_term) is the frequency of occurrence of the extracted natural language term in the second email set, M is the number of terms comprised by the messages of the second email set which are tagged in a vocabulary as existing non-spam terms, the sum from i=1 to M is the sum over the M terms tagged in the vocabulary as the existing non-spam terms, freq(non-spam_term i ) is the frequency of the i th term tagged as an existing non-spam term in the second email set, score(non-spam_term i ) is the score value of the i th term tagged in the vocabulary as an existing non-spam term, a2 and b2 are positive weighting factors, freq_moved_to_non-spam(c_non-spam_term) is the frequency of occurrence of the extracted natural language term in a second subset of the second email set comprising email messages which have been moved to the second email set due to the user move command, and freq_whitelisted(c_non-spam_term) is the frequency of occurrence of the extracted natural language term in the second subset of the second email set comprising email messages which have been moved to the second email set due to having a sender which is whitelisted.",7,claim 1,0,B
10606850,9,"9. The method of claim 1 , in case one or more email messages are moved to one of the email sets due to a user move command, calculated score values of one or more of spam or non-spam natural language terms comprised by the one or more email messages are updated taking into account that a respective email message has been moved due to a user move command.",8,claim 1,0,B
10606850,10,"10. The method of claim 9 , in case one or more email messages are moved to the first email set due to the user move command forming a first subset of the first email set, calculated score values score(spam_term) of spam natural language terms which are comprised by the moved email messages and which are tagged in a vocabulary as existing spam natural language terms are each increased: 
 score(spam_term)=score(spam_term)*[1 +a 4*freq_moved_to_spam(spam_term)], wherein freq_moved_to_spam(spam_term) is the frequency of occurrence of a respective spam natural language term in the first subset and a4 is a positive weighting factor.",9,claim 9,0,B
10606850,11,"11. The method of claim 10 , further comprising: calculated score values score(non-spam_term) of non-spam natural language terms which are comprised by the moved email messages and which are tagged in a vocabulary as existing non-spam natural language terms are each decreased: 
 score(non-spam_term)=score(non-spam_term)*[1 ?a 5*freq_moved_to_spam(non-spam_term)], wherein freq_moved_to_spam(non-spam_term) is the frequency of occurrence of a respective non-spam natural language term in the first subset and a5 is a positive weighting factor.",10,claim 10,0,B
10606850,12,"12. The method of claim 9 , in case one or more email messages are moved to the second email set due to the user move command forming a second subset of the second email set, calculated score values score(non-spam_term) of non-spam natural language terms which are comprised by the moved email messages and which are tagged in a vocabulary as existing non-spam natural language terms are each increased: 
 score(non-spam_term)=score(non-spam_term)*[1 +a 6*freq_moved_to_non-spam(non-spam_term)], wherein freq_moved_to_non-spam(non-spam_term) is the frequency of occurrence of a respective non-spam natural language term in the second subset and a6 is a positive weighting factor.",11,claim 9,0,B
10606850,13,"13. The method of claim 12 , further comprising: calculated score values score(spam_term) of spam natural language terms which are comprised by the moved email messages and which are tagged in a vocabulary as existing spam natural language terms are each decreased: 
 score(spam_term)=score(spam_term)*[1 ?a 7*freq_moved_to_non-spam(spam_term)], wherein freq_moved_to_non-spam(spam_term) is the frequency of occurrence of a respective spam natural language term in the second subset and a7 is a positive weighting factor.",12,claim 12,0,B
10606850,14,"14. The method of claim 1 , wherein the method further comprises: receiving within the time window multiple email messages to be added to the email sets in order to update the email sets; classifying each of the received email messages either as a spam message or as a non-spam message and based on the classification adding the respective email message to one of the email sets, wherein email messages from senders which are blacklisted are classified as spam message, email messages from senders which are whitelisted are classified as non-spam message, and email messages from senders which are neither blacklisted nor whitelisted are classified as spam or non-spam message depending on their content.",13,claim 1,0,B
10606850,15,"15. The method of claim 1 , wherein the method further comprises updating the time window and removing from the email sets email messages related to a time outside of the updated time window.",14,claim 1,0,B
10606850,16,"16. The method of claim 1 , wherein the method comprises: monitoring the frequency of occurrence of one or more extracted natural language terms, which are present in the knowledge base, in one of the first email set or the second email set; and updating the score value of a respective natural language term or removing the respective natural language term from the knowledge base based on the monitoring.",15,claim 1,0,B
10606850,17,"17. A computer program product comprising a non-transitory non-volatile computer-readable storage medium having computer-readable program code embodied therewith, the computer-readable program code being configured for updating a knowledge base of a spam detection system for email messages, the knowledge base being operable for storing natural language terms and, for each natural language term in the stored natural language terms, a score value related to the natural language term, the score value specifying whether the natural language term is indicative for a spam message or a non-spam message, wherein the computer-readable program code, when executed on a computer system, causes the computer system to: create a first email set of email messages related to a time window, the first email set comprising email messages currently classified as spam messages; create a second email set of email messages related to the time window, the second email set comprising email messages currently classified as non-spam messages; extract a natural language term that is not present in the knowledge base from one of the email messages contained in one of the first email set or the second email set thereby forming an extracted natural language term; store the extracted natural language term in a first candidate set of candidate terms potentially indicative for spam messages or a second candidate set of candidate terms potentially indicative for non-spam messages based on a frequency of occurrence of the extracted natural language term in the email messages of the first email set or the second email set, respectively; calculate a score value of the extracted natural language term stored in the first candidate set using the following formula, wherein score(c_spam_term) represents the score value of a spam term: score ? ( c_spam ? _term ) = freq ? ( c_spam ? _term ) * 1 N ? ? i = 1 N ? [ freq ? ( spam_term i ) * score ? ( spam_term i ) ] * [ 1 + a ? ? 1 * freq_moved ? _to ? _spam ? ( c_spam ? _term ) + b ? ? 1 * freq_blacklisted ? ( c_spam ? _term ) ] , and wherein freq(c_spam_term) is the frequency of occurrence of the extracted natural language term in the first email set, N is the number of terms comprised by the email messages of the first email set which are tagged in a vocabulary as existing spam terms, the sum from i=1 to N is the sum over the N terms tagged in the vocabulary as the existing spam terms, freq(spam_term i ) is the frequency of the i th term tagged as an existing spam term in the first email set, score(spam_term i ) is the score value of the i th term tagged in the vocabulary as an existing spam term, a1 and b1 are positive weighting factors, freq_moved_to_spam(c_spam_term) is the frequency of occurrence of the extracted natural language term in a first subset of the first email set comprising email messages which have been moved to the first email set due to a user move command, and freq_blacklisted(c_spam_term) is the frequency of occurrence of the extracted natural language term in a second subset of the first email set comprising email messages which have been moved to the first email set due to having a sender which is blacklisted; and store the extracted natural language term and the calculated score value into the knowledge base.",16,,0,B
10606850,18,"18. A computer system for updating a knowledge base of a spam detection system for email messages, the knowledge base being operable for storing natural language terms and, for each natural language term in the stored natural language terms, a score value related to the natural language term, the score value specifying whether the natural language term is indicative for a spam message or a non-spam message, the computer system comprising: a processor; and a memory coupled to the processor, wherein the memory comprises instructions which, when executed by the processor, cause the processor to: create a first email set of email messages related to a time window, the first email set comprising email messages currently classified as spam messages; create a second email set of email messages related to the time window, the second email set comprising email messages currently classified as non-spam messages; extract a natural language term that is not present in the knowledge base from one of the email messages contained in one of the first email set or the second email set thereby forming an extracted natural language term; store the extracted natural language term in a first candidate set of candidate terms potentially indicative for spam messages or a second candidate set of candidate terms potentially indicative for non-spam messages based on a frequency of occurrence of the extracted natural language term in the email messages of the first email set or the second email set, respectively; calculate a score value of the extracted natural language term stored in the first candidate set using the following formula, wherein score(c_spam_term) represents the score value of a spam term: score ? ( c_spam ? _term ) = freq ? ( c_spam ? _term ) * 1 N ? ? i = 1 N ? [ freq ? ( spam_term i ) * score ? ( spam_term i ) ] * [ 1 + a ? ? 1 * freq_moved ? _to ? _spam ? ( c_spam ? _term ) + b ? ? 1 * freq_blacklisted ? ( c_spam ? _term ) ] , and wherein freq(c_spam_term) is the frequency of occurrence of the extracted natural language term in the first email set, N is the number of terms comprised by the email messages of the first email set which are tagged in a vocabulary as existing spam terms, the sum from i=1 to N is the sum over the N terms tagged in the vocabulary as the existing spam terms, freq(spam_term i ) is the frequency of the i th term tagged as an existing spam term in the first email set, score(spam_term i ) is the score value of the i th term tagged in the vocabulary as an existing spam term, a1 and b1 are positive weighting factors, freq_moved_to_spam(c_spam_term) is the frequency of occurrence of the extracted natural language term in a first subset of the first email set comprising email messages which have been moved to the first email set due to a user move command, and freq_blacklisted(c_spam_term) is the frequency of occurrence of the extracted natural language term in a second subset of the first email set comprising email messages which have been moved to the first email set due to having a sender which is blacklisted; and store the extracted natural language term and the calculated score value into the knowledge base.",17,,0,B
10606851,1,"1. A system comprising: a resource allocation system, comprising a network communication interface configured to receive a query from a device, the query indicating a request to perform a processing operation on a portion of one or more data sets; a first non-transitory computer storage medium configured to store data provided by two or more back-end computer resources, the data including historical information related to processing of previously received queries; a second non-transitory computer storage medium configured to at least store computer-executable instructions; and one or more computer hardware processors in communication with the second non-transitory computer storage medium, the one or more computer hardware processors configured to execute the computer-executable instructions to at least: determine whether the query includes user defined code for execution on a back-end computer resource, determine one or more scores associated with the query, the one or more scores indicating a particular back-end computer resource, of the two or more back-end resources, wherein if the query includes user defined code, at least one score is based at least in part on the query including user defined code, provide a compute request to the particular back-end computer resource to perform a processing operation on a portion of one or more data sets, wherein if the query includes user defined code the compute request includes a risk mitigation required for the particular back-end computer resource, and store processing information related to the processing of the compute request by the particular back-end computer resource as historical information in the first non-transitory computer storage medium.",0,,1,B
10606851,2,"2. The system of claim 1 , wherein the particular back-end computer resource is indicated by a determined high score associated with the query.",1,claim 1,0,B
10606851,3,"3. The system of claim 1 , wherein at least one of the scores is based at least in part on the originator of the query.",2,claim 1,0,B
10606851,4,"4. The system of claim 3 , wherein the originator is associated with a predefined group of a number of groups that the query maybe associated with.",3,claim 3,0,B
10606851,5,"5. The system of claim 1 , wherein at least one of the scores is based at least in part on the type or characteristic of the query.",4,claim 1,0,B
10606851,6,"6. The system of claim 1 , wherein at least one of the scores is based at least in part on stored historical information.",5,claim 1,0,B
10606851,7,"7. The system of claim 6 , wherein the one or more computer hardware processors are further configured to execute the computer-executable instructions to at least receive processing information from two or more back-end computer resources and save the processing information in the first non-transitory computer storage medium as historical data.",6,claim 6,0,B
10606851,8,"8. The system of claim 6 , wherein the historical data includes processing time.",7,claim 6,0,B
10606851,9,"9. The system of claim 6 , wherein the historical data includes characteristics of the computer resource.",8,claim 6,0,B
10606851,10,"10. The system of claim 6 , wherein the historical data includes query originator data.",9,claim 6,0,B
10606851,11,"11. The system of claim 6 , wherein the historical data includes data set information corresponding to a particular data set processed by a back-end computer resource, the data set information at least one of the more of number of rows of the data set, the number of columns of the data set, or the overall size of the data set.",10,claim 6,0,B
10606851,12,"12. The system of claim 1 , wherein the one or more computer hardware processors are further configured to execute the computer-executable instructions to control a lifecycle parameter of the back-end computer resources.",11,claim 1,0,B
10606851,13,"13. The system of claim 12 , wherein controlling a lifecycle parameter comprises setting stop and start parameters of a back-end computer resource.",12,claim 12,0,B
10606851,14,"14. The system of claim 12 , wherein controlling a lifecycle parameter comprises controlling start of back-end computer resources with similar compute parameters.",13,claim 12,0,B
10606851,15,"15. The system of claim 12 , wherein controlling a lifecycle parameter comprises controlling start of back-end computer resources having non-similar compute parameters.",14,claim 12,0,B
10606851,16,"16. The system of claim 1 , wherein the one or more computer hardware processors are further configured to execute the computer-executable instructions to start the particular back-end computer resource for a query with user defined code and stop the particular back-end computer resource when the compute request is completed.",15,claim 1,0,B
10606851,17,"17. The system of claim 1 , wherein if the query includes user defined code, the one or more computer hardware processors are further configured to execute the computer-executable instructions to: determine a stop parameter based on the user defined code; start the particular back-end computer resource; provide a compute request to the particular backend computer resource; and stop the particular backend computer resource based on the stop parameter.",16,claim 1,0,B
10606851,18,"18. A method of resource allocation, comprising: receiving processing information related to processing of compute requests from two or more back-end computer resources; storing the processing information on a non-transitory computer storage medium as historical information; receiving a query indicating a request to perform a processing operation on one or more data sets; determining whether the query includes user defined code for execution on a back-end computer resource; determining one or more scores associated with the query, the one or more scores indicating a particular back-end computer resource, of the two or more back-end resources, wherein if the query includes user defined code, at least one score is based at least in part on the query including user defined code, providing a compute request to the particular back-end computer resource to perform a processing operation on a portion of one or more data sets, wherein if the query includes user defined code the compute request includes a risk mitigation required for the particular back-end computer resource, wherein the method is performed by one or more computer hardware processors configured to execute computer-executable instructions stored on a non-transitory computer storage medium.",17,,0,B
10606851,19,"19. The method of claim 18 , further comprising starting a first back-end computer resource for a query with user defined code, and stopping the first back-end computer resource when the compute request is completed.",18,claim 18,0,B
10606851,20,"20. The method of claim 18 , further comprising: wherein if the query includes user defined code, determining a stop parameter based on the user defined code; starting the particular back-end computer resource; providing the compute request to the particular backend computer resource; and stopping the particular backend computer resource based on the stop parameter.",19,claim 18,0,B
10606852,1,"1. A method, comprising: receiving, by a columnar database management system from a client device over a network, a data mining request, the columnar database management system comprising stored columns of data, data mining operations, and a database engine, the data mining request containing a description of requested calculations and information about data items to be processed; parsing, by the database engine, the description of the requested calculations, the parsing identifying a data mining operation of the data mining operations; generating, by the database engine, a data mining processing plan for processing the data items specified by the data mining request, the generating comprising: identifying, based on the data mining operation identified from the parsing or an internal table or data structure of the columnar database management system, any other data mining operation necessary to complete processing of the data mining request; acquiring any resource needed for processing the data items indicated by the data mining request; performing a pre-allocation procedure on any resource thus acquired; and performing orchestration tasks, the orchestration tasks including a coordination procedure, the coordination procedure including determining an order of execution for different parts of identified data mining operations that are to be applied to the stored columns of data; wherein the data mining processing plan thus generated by the database engine comprises the data items and the identified mining operations to be used, the order of execution in which the identified mining operations are to be executed, the resources to be used during execution, and a coordination of the identified data mining operations and the resources to be used during execution; executing, by the database engine, the data mining processing plan, the executing producing data mining results; and responsive to the data mining request, returning the data mining results for presentation on the client device.",0,,1,B
10606852,2,"2. The method according to claim 1 , wherein the orchestration tasks further comprise at least one of a lock control procedure, a concurrency control procedure, an integrity control procedure, a queue management procedure, a parallelization procedure, or a synchronization procedure.",1,claim 1,0,B
10606852,3,"3. The method according to claim 1 , wherein the coordination procedure further comprises determining an execution duration of a particular data mining operation or a step thereof and utilizing the execution duration thus determined in generation of the data mining processing plan.",2,claim 1,0,B
10606852,4,"4. The method according to claim 1 , wherein the data mining operations comprise at least one of a cross tabulation process, a Venn diagram generation, profile finding processes, decision tree algorithms, association rule algorithms, clustering algorithms, time series algorithms, neural network algorithms, support vector machine related algorithms, or Bayesian network related algorithms.",3,claim 1,0,B
10606852,5,"5. The method according to claim 1 , further comprising: authenticating the data mining request, the authenticating performed by the database engine prior to the parsing, the authenticating comprising determining whether authentication information included in the data mining request is valid against information for authenticated clients stored by the database engine.",4,claim 1,0,B
10606852,6,"6. The method according to claim 1 , wherein the data mining processing plan comprises executable code available as software modules in the columnar database management system.",5,claim 1,0,B
10606852,7,"7. The method according to claim 1 , wherein the data mining request is received by the columnar database management system from the client device indirectly via a frontend application of a data mining system within which the columnar database management system operates, the frontend application receiving the data mining results from the columnar database management system for transmission to the client device.",6,claim 1,0,B
10606852,8,"8. A columnar database management system, comprising: a processor; a non-transitory computer-readable medium; stored columns of data embodied on the non-transitory computer-readable medium; data mining operations embodied on the non-transitory computer-readable medium; and stored instructions embodied on the non-transitory computer-readable medium and translatable by the processor to implement a database engine for processing a data mining request received from a client device over a network, the data mining request containing a description of requested calculations and information about data items to be processed, the processing by the database engine comprising: parsing the description of the requested calculations, the parsing identifying a data mining operation of the data mining operations; generating a data mining processing plan for processing the data items specified by the data mining request, the generating comprising: identifying, based on the data mining operation identified from the parsing or an internal table or data structure of the columnar database management system, any other data mining operation necessary to complete processing of the data mining request; acquiring any resource needed for processing the data items indicated by the data mining request; performing a pre-allocation procedure on any resource thus acquired; and performing orchestration tasks, the orchestration tasks including a coordination procedure, the coordination procedure including determining an order of execution for different parts of identified data mining operations that are to be applied to the stored columns of data; wherein the data mining processing plan thus generated by the database engine comprises the data items and the identified mining operations to be used, the order of execution in which the identified mining operations are to be executed, the resources to be used during execution, and a coordination of the identified data mining operations and the resources to be used during execution; executing the data mining processing plan, the executing producing data mining results; and responsive to the data mining request, returning the data mining results for presentation on the client device.",7,,0,B
10606852,9,"9. The columnar database management system of claim 8 , wherein the orchestration tasks further comprise at least one of a lock control procedure, a concurrency control procedure, an integrity control procedure, a queue management procedure, a parallelization procedure, or a synchronization procedure.",8,claim 8,0,B
10606852,10,"10. The columnar database management system of claim 8 , wherein the coordination procedure further comprises determining an execution duration of a particular data mining operation or a step thereof and utilizing the execution duration thus determined in generation of the data mining processing plan.",9,claim 8,0,B
10606852,11,"11. The columnar database management system of claim 8 , wherein the data mining operations comprise at least one of a cross tabulation process, a Venn diagram generation, profile finding processes, decision tree algorithms, association rule algorithms, clustering algorithms, time series algorithms, neural network algorithms, support vector machine related algorithms, or Bayesian network related algorithms.",10,claim 8,0,B
10606852,12,"12. The columnar database management system of claim 8 , wherein the processing by the database engine further comprises authenticating the data mining request, the authenticating performed prior to the parsing, the authenticating comprising determining whether authentication information included in the data mining request is valid against information for authenticated clients stored by the database engine.",11,claim 8,0,B
10606852,13,"13. The columnar database management system of claim 8 , wherein the data mining processing plan comprises executable code available as software modules in the columnar database management system.",12,claim 8,0,B
10606852,14,"14. The columnar database management system of claim 8 , wherein the data mining request is received by the columnar database management system from the client device indirectly via a frontend application of a data mining system within which the columnar database management system operates, the frontend application receiving the data mining results from the columnar database management system for transmission to the client device.",13,claim 8,0,B
10606852,15,"15. A computer program product comprising a non-transitory computer-readable medium storing instructions translatable by a processor of a columnar database management system for: receiving a data mining request received from a client device over a network, the columnar database management system comprising stored columns of data and data mining operations, the data mining request containing a description of requested calculations and information about data items to be processed; parsing the description of the requested calculations, the parsing identifying a data mining operation of the data mining operations; generating a data mining processing plan for processing the data items specified by the data mining request, the generating comprising: identifying, based on the data mining operation identified from the parsing or an internal table or data structure of the columnar database management system, any other data mining operation necessary to complete processing of the data mining request; acquiring any resource needed for processing the data items indicated by the data mining request; performing a pre-allocation procedure on any resource thus acquired; and performing orchestration tasks, the orchestration tasks including a coordination procedure, the coordination procedure including determining an order of execution for different parts of identified data mining operations that are to be applied to the stored columns of data; wherein the data mining processing plan thus generated by the database engine comprises the data items and the identified mining operations to be used, the order of execution in which the identified mining operations are to be executed, the resources to be used during execution, and a coordination of the identified data mining operations and the resources to be used during execution; executing the data mining processing plan, the executing producing data mining results; and responsive to the data mining request, returning the data mining results for presentation on the client device.",14,,0,B
10606852,16,"16. The computer program product of claim 15 , wherein the orchestration tasks further comprise at least one of a lock control procedure, a concurrency control procedure, an integrity control procedure, a queue management procedure, a parallelization procedure, or a synchronization procedure.",15,claim 15,0,B
10606852,17,"17. The computer program product of claim 15 , wherein the coordination procedure further comprises determining an execution duration of a particular data mining operation or a step thereof and utilizing the execution duration thus determined in generation of the data mining processing plan.",16,claim 15,0,B
10606852,18,"18. The computer program product of claim 15 , wherein the data mining operations comprise at least one of a cross tabulation process, a Venn diagram generation, profile finding processes, decision tree algorithms, association rule algorithms, clustering algorithms, time series algorithms, neural network algorithms, support vector machine related algorithms, or Bayesian network related algorithms.",17,claim 15,0,B
10606852,19,"19. The computer program product of claim 15 , wherein the instructions are further translatable by the processor for authenticating the data mining request, the authenticating performed prior to the parsing, the authenticating comprising determining whether authentication information included in the data mining request is valid against information for authenticated clients stored by the database engine.",18,claim 15,0,B
10606852,20,"20. The computer program product of claim 15 , wherein the data mining processing plan comprises executable code available as software modules in the columnar database management system.",19,claim 15,0,B
10606853,1,"1. A method for identifying prospective new clients based upon review of a plurality of current clients, comprising: receiving, from a user of a transactional platform via a computing device, a request for prospective client identification; identifying, by processing circuitry, a plurality of clients associated with the user; identifying, by the processing circuitry for each organization of the plurality of organizations, a plurality of key terms relevant to the respective organization, wherein identifying the plurality of key terms comprises identifying a web site of the respective organization, performing a web scraping operation of the web site to obtain raw data, and identifying, within the raw data, at least a subset of the plurality of key terms by isolating frequently used terms; automatically performing, by the processing circuitry a plurality of Internet searches, each search using different groupings of the plurality of key terms relevant to the plurality of organizations, the plurality of Internet searches resulting in a plurality of web sites; automatically deriving, by the processing circuitry from at least a portion of the plurality of web sites, prospect information for a plurality of prospect organizations, wherein, for each prospect organization, the prospect information comprises a prospect organization name; and causing presentation of the prospect information to a user of a computing device.",0,,1,B
10606853,2,"2. The method of claim 1 , wherein identifying the plurality of clients comprises accessing, from a user account of the user on the transactional platform, at least a portion of the plurality of current clients of the user.",1,claim 1,0,B
10606853,3,"3. The method of claim 1 , wherein identifying the plurality of clients comprises receiving, from the user via the computing device, identification of at least one desired new client, wherein the identification comprises at least one of an organization name and an organization web site.",2,claim 1,0,B
10606853,4,"4. The method of claim 1 , wherein identifying the plurality of key terms comprises: identifying, within the plurality of key terms, a subset of redundant key terms; and removing redundancies from the subset of redundant key terms.",3,claim 1,0,B
10606853,5,"5. The method of claim 1 , further comprising, after performing the plurality of Internet searches, discarding, by the processing circuitry, a subset of the plurality of web sites based on parsing URL content of the subset of the plurality of web sites.",4,claim 1,0,B
10606853,6,"6. The method of claim 1 , wherein deriving prospect information comprises querying a financial or business research web site to obtain at least one of an address, an industry, a size, and a revenue.",5,claim 1,0,B
10606853,7,"7. The method of claim 1 , further comprising, prior to performing the Internet searches, classifying, by the processing circuitry, the plurality of clients by at least one of size, geographic region, maturity, and industry, wherein performing the plurality of Internet searches comprises performing, for each classification of the plurality of clients, a plurality of classification-targeted Internet searches.",6,claim 1,0,B
10606853,8,"8. The method of claim 7 , wherein identifying the key terms comprises at least one of promoting key terms prevalent to a particular classification and demoting key terms prevalent across classifications.",7,claim 7,0,B
10606853,9,"9. The method of claim 7 , further comprising, prior to presenting the prospect information, automatically classifying, by the processing circuitry, the plurality of prospects by the at least one of the size, the geographic region, the maturity, and the industry.",8,claim 7,0,B
10606853,10,"10. The method of claim 1 , further comprising, prior to presenting the prospect information, automatically removing, by the processing circuitry, redundancies in the plurality of plurality of prospect organizations.",9,claim 1,0,B
10606853,11,"11. The method of claim 10 , wherein automatically removing the redundancies comprises applying a fuzzy name matching technique to identify variances in prospect name within the plurality of prospect organizations.",10,claim 10,0,B
10606853,12,"12. The method of claim 1 , further comprising, prior to presenting the prospect information, automatically cross-referencing, by the processing circuitry, each of the plurality of prospect organizations with a plurality of existing clients within the transactional platform.",11,claim 1,0,B
10606853,13,"13. The method of claim 1 , further comprising, prior to presenting the prospect information, automatically cross-referencing, by the processing circuitry, the plurality of prospect organizations against the plurality of clients to confirm the plurality of key terms identified the plurality of clients.",12,claim 1,0,B
10606853,14,"14. A system of software engines for identifying prospective new clients based upon review of a plurality of current clients, the system of software engines being stored as sets of instructions on at least one processor, the system comprising: an attribute generation engine for determining a plurality of attributes of each of a plurality of current clients of a user of a transactional platform, and categorizing the plurality of current clients by the plurality of attributes; a web scraping engine for identifying, for each of the plurality of current clients, a client web site, and obtaining raw data from each client web site; a key term generation engine for generating, from the raw data from each client web site, a plurality of key terms; a prospect generation engine for identifying a plurality of web sites through conducting Internet search queries using groups of the plurality of key terms, and identifying, from the plurality of web sites, a plurality of prospective clients; a prospect classification engine for determining a plurality of attributes of each of the plurality of prospective clients, categorizing the plurality of prospective clients by the plurality of attributes, and discarding one or more prospects of the plurality of prospective clients based on determining each of the one or more prospects lacks attributes desired by the user; and a graphical user interface engine for presenting the plurality of prospective clients to a user at a computing device.",13,,0,B
10606853,15,"15. The system of claim 14 , further comprising a client identification engine for confirming the plurality of key terms, when applied by the prospect generation engine, identified each of the plurality of current clients as search results.",14,claim 14,0,B
10606853,16,"16. The system of claim 14 , further comprising a client matching engine for cross-referencing the plurality of prospective clients with registered clients of the transactional platform.",15,claim 14,0,B
10606853,17,"17. The system of claim 14 , further comprising a term refining engine for: receiving, responsive to the plurality of web sites, a set of positive match indications and a set of negative match indications; and refining at least one of the plurality of key terms and weightings used in combining the key terms in constructing search queries.",16,claim 14,0,B
10606853,18,"18. The system of claim 17 , wherein the term refining engine coordinates with a machine learning model for identifying key terms related to potential prospective clients.",17,claim 17,0,B
10606854,1,"1. An intelligent cascading linkage machine for transforming input signals into comparable signals, and linking the input signals or the comparable signals to stored signals comprised in a database, wherein but for the transforming and the linking performed by a communication server, at least some of the input signals are not comparable and linkable to the stored signals comprised in the database, the intelligent cascading linkage machine comprising: a communication interface for: establishing a first connection to an input signal system, and receiving, on the first connection, an input signal comprising a first attribute and a second attribute, the first attribute being associated with a first field and the second attribute being associated with a second field, and establishing a second connection to the database comprising stored signals, and accessing the stored signals on the second connection; a chipset interfaced with a processor, the chipset having hardware for supporting the first connection to the input signal system and the second connection to the database; a power provisioning interface for facilitating powering of the chipset and the processor; and the processor configured for: transforming the input signal into a comparable signal, wherein the transforming comprises at least one of modifying the first attribute or the second attribute, deleting at least a portion of the first attribute or the second attribute, adding a new portion to the first attribute or the second attribute, and adding a third attribute to the input signal, the third attribute being associated with a third field; determining whether a stored signal in the database has a first attribute associated with the first field; accessing a first matching operation comprising determining, using a first matching technique, whether the first attribute of the comparable signal matches the first attribute of the stored signal in the database; in response to determining, using the first matching technique, the first attribute of the comparable signal does not match the first attribute of the stored signal in the database, cascading to a second matching operation comprising determining whether the stored signal in the database has a second attribute associated with the second field; determining, using the first matching technique or a second matching technique, whether a second attribute of the comparable signal matches the second attribute of the stored signal in the database; in response to determining, using the first matching technique or the second matching technique, the second attribute of the comparable signal does not match the second attribute of the stored signal in the database, cascading to a fuzzy match operation comprising determining, using a fuzzy matching comparison technique, whether the comparable signal matches the stored signal in the database; in response to determining, using the fuzzy matching comparison technique, the comparable signal matches the stored signal in the database, linking the comparable signal or the input signal to the stored signal in the database, wherein the first attribute of the comparable signal does not match, using the first matching technique, the first attribute of the stored signal in the database, and wherein the second attribute of the comparable signal does not match, using the first matching technique or the second matching technique, the second attribute of the stored signal in the database; determining a strength indicator indicating a strength of the linking of the comparable signal or the input signal to the stored signal in the database; calibrating, based on the linking of the comparable signal or the input signal to the stored signal in the database, a technique for calculating the strength indicator, wherein the calibrating the technique for calculating the strength indicator comprises improving the technique for calculating the strength indicator after the linking of the comparable signal or the input signal to the stored signal in the database; determining a second stored signal in the database incorrectly linked to the comparable signal or the input signal, wherein the second stored signal does not match the comparable signal or the input signal; and eliminating the linking between the second stored signal in the database and the comparable signal or the input signal, wherein the first matching technique does not comprise the fuzzy matching comparison technique, and wherein the second matching technique does not comprise the fuzzy matching comparison technique.",0,,1,B
10606854,2,"2. The intelligent cascading linkage machine of claim 1 , wherein the processor is further configured for: calibrating, based on the linking of the comparable signal or the input signal to the stored signal in the database, the first matching technique, the second matching technique, the fuzzy matching comparison technique, or a technique for calculating the strength indicator indicating a strength of the linking of the comparable signal or the input signal to the stored signal in the database.",1,claim 1,0,B
10606854,3,"3. The intelligent cascading linkage machine of claim 1 , wherein the processor is further configured for: providing a link table comprising: the comparable signal or the input signal, the stored signal in the database linked to the comparable signal or the input signal, and the strength indicator indicating the strength of the linking of the comparable signal or the input signal to the stored signal in the database.",2,claim 1,0,B
10606854,4,"4. The intelligent cascading linkage machine of claim 3 , further comprising providing a field or a matching technique that causes the linking of the comparable signal or the input signal to the stored signal in the database.",3,claim 3,0,B
10606854,5,"5. The intelligent cascading linkage machine of claim 3 , wherein the link table further comprises a second stored signal in the database linked to the comparable signal or the input signal.",4,claim 3,0,B
10606854,6,"6. The intelligent cascading linkage machine of claim 3 , wherein the link table further comprises a second comparable signal or a second input signal not linked to the stored signal in the database.",5,claim 3,0,B
10606854,7,"7. The intelligent cascading linkage machine of claim 3 , wherein the link table further comprises a matching score for determining whether there is or is not a match.",6,claim 3,0,B
10606854,8,"8. The intelligent cascading linkage machine of claim 1 , wherein the fuzzy matching comparison technique further comprises a random forest processing technique.",7,claim 1,0,B
10606854,9,"9. The intelligent cascading linkage machine of claim 8 , wherein the fuzzy matching comparison technique comprising the random forest processing technique further comprises: calculating a list of computational scores to be used by one or more matching operations within the fuzzy matching comparison; calculating two final computational scores, the two final computational scores indicating the number of one or more match operations that transformed an input score into an indication of whether there is a match and whether there is no match; and comparing one or more final computational scores to one or more thresholds, the one or more thresholds being adjustable.",8,claim 8,0,B
10606854,10,"10. The intelligent cascading linkage machine of claim 1 , wherein the fuzzy matching comparison technique further comprises a logistic regression technique.",9,claim 1,0,B
10606854,11,"11. The intelligent cascading linkage machine of claim 10 , wherein the fuzzy matching comparison technique comprising the logistic regression technique further comprises calculating a probability and a weighted sum of match scores, the probability and the weighted sum of match scores being compared to a threshold, the threshold being adjustable.",10,claim 10,0,B
10606854,12,"12. The intelligent cascading linkage machine of claim 1 , wherein the fuzzy match operation further comprises at least one of: a Jaro-Winkler distance operation, a Levenshtein distance operation, a Soundex operation, an Edit distance operation, a Support Vector Machine operation, and a Machine Learning Library operation.",11,claim 1,0,B
10606854,13,"13. The intelligent cascading linkage machine of claim 1 , wherein the transforming of the input signal into the comparable signal includes transforming the stored signal into a second comparable signal.",12,claim 1,0,B
10606854,14,"14. The intelligent cascading linkage machine of claim 1 , wherein the linking the comparable signal or the input signal to the stored signal in the database further comprises: establishing a connection to the database or another database, and storing a link created by the linking in the database or the other database.",13,claim 1,0,B
10606854,15,"15. A method comprising: establishing, using one or more computing device processors, a first connection to an input signal system, and receiving, on the first connection, an input signal comprising a first attribute and a second attribute, the first attribute being associated with a first field and the second attribute being associated with a second field; establishing, using the one or more computing device processors, a second connection to a database comprising stored signals, and accessing the stored signals on the second connection; transforming, using the one or more computing device processors, the input signal into a comparable signal, wherein the transforming comprises at least one of modifying the first attribute or the second attribute, deleting at least a portion of the first attribute or the second attribute, adding a new portion to the first attribute or the second attribute, and adding a third attribute to the input signal, the third attribute being associated with a third field; determining, using the one or more computing device processors, whether a stored signal in the database has a first attribute associated with the first field; accessing, using the one or more computing device processors, a first matching operation comprising determining, using a first matching technique, whether a first attribute of the comparable signal matches the first attribute of the stored signal in the database; in response to determining, using the first matching technique, the first attribute of the comparable signal does not match the first attribute of the stored signal in the database, cascading, using the one or more computing device processors, to a second matching operation comprising determining whether the stored signal in the database has a second attribute associated with the second field; determining, using the one or more computing device processors, using the first matching technique or a second matching technique, whether a second attribute of the comparable signal matches the second attribute of the stored signal in the database; in response to determining, using the first matching technique or the second matching technique, the second attribute of the comparable signal does not match the second attribute of the stored signal in the database, cascading, using the one or more computing device processors, to a fuzzy match operation comprising determining, using a fuzzy matching comparison technique, whether the comparable signal matches the stored signal in the database; in response to determining, using the fuzzy matching comparison technique, the comparable signal matches the stored signal in the database, linking, using the one or more computing device processors, the comparable signal or the input signal to the stored signal in the database, wherein the first attribute of the comparable signal does not match, using the first matching technique, the first attribute of the stored signal in the database, and wherein the second attribute of the comparable signal does not match, using the first matching technique or the second matching technique, the second attribute of the stored signal in the database; determining, using the one or more computing device processors, a strength indicator indicating a strength of the linking of the comparable signal or the input signal to the stored signal in the database; and calibrating, using the one or more computing device processors, based on the linking of the comparable signal or the input signal to the stored signal in the database, a technique for calculating the strength indicator, wherein the calibrating the technique for calculating the strength indicator comprises improving the technique for calculating the strength indicator after the linking of the comparable signal or the input signal to the stored signal in the database, wherein the first matching technique does not comprise the fuzzy matching comparison technique, and wherein the second matching technique does not comprise the fuzzy matching comparison technique.",14,,0,B
10606854,16,"16. The method of claim 15 , wherein the fuzzy matching comparison technique further comprises a random forest processing technique and a logistic regression technique.",15,claim 15,0,B
10606854,17,"17. A non-transitory computer-readable medium comprising code for causing one or more processors to perform operations of: establishing a first connection to an input signal system, and receiving, on the first connection, an input signal comprising a first attribute and a second attribute, the first attribute being associated with a first field and the second attribute being associated with a second field; establishing a second connection to a database comprising stored signals, and accessing the stored signals on the second connection; transforming the input signal into a comparable signal, wherein the transforming comprises at least one of modifying the first attribute or the second attribute, deleting at least a portion of the first attribute or the second attribute, adding a new portion to the first attribute or the second attribute, and adding a third attribute to the input signal, the third attribute being associated with a third field; determining whether a stored signal in the database has a first attribute associated with the first field; accessing a first matching operation comprising determining, using a first matching technique, whether a first attribute of the comparable signal matches the first attribute of the stored signal in the database; in response to determining, using the first matching technique, the first attribute of the comparable signal does not match the first attribute of the stored signal in the database, cascading to a second matching operation comprising determining whether the stored signal in the database has a second attribute associated with the second field; determining, using the first matching technique or a second matching technique, whether a second attribute of the comparable signal matches the second attribute of the stored signal in the database; in response to determining, using the first matching technique or the second matching technique, the second attribute of the comparable signal does not match the second attribute of the stored signal in the database, cascading to a fuzzy match operation comprising determining, using a fuzzy matching comparison technique, whether the comparable signal matches the stored signal in the database; and in response to determining, using the fuzzy matching comparison technique, the comparable signal matches the stored signal in the database, linking the comparable signal or the input signal to the stored signal in the database, wherein the first attribute of the comparable signal does not match, using the first matching technique, the first attribute of the stored signal in the database, and wherein the second attribute of the comparable signal does not match, using the first matching technique or the second matching technique, the second attribute of the stored signal in the database, wherein the first matching technique does not comprise the fuzzy matching comparison technique, and wherein the second matching technique does not comprise the fuzzy matching comparison technique.",16,,0,B
10606854,18,"18. The non-transitory computer-readable medium of claim 17 , wherein the code further causes the one or more processors to perform operations of: determining a strength indicator indicating a strength of the linking of the comparable signal or the input signal to the stored signal in the database; calibrating, based on the linking of the comparable signal or the input signal to the stored signal in the database, a technique for calculating the strength indicator, wherein the calibrating the technique for calculating the strength indicator comprises improving the technique for calculating the strength indicator after the linking of the comparable signal or the input signal to the stored signal in the database; determining a second stored signal in the database incorrectly linked to the comparable signal or the input signal, wherein the second stored signal does not match the comparable signal or the input signal; and eliminating the linking between the second stored signal in the database and the comparable signal or the input signal.",17,claim 17,0,B
10606855,1,"1. A method for facilitating concurrent search and analysis performed by an integrated search and analytics runtime module in an enterprise computing environment, the enterprise computing environment including one or more client devices in communication with a server system, wherein the server system executes webpage software, wherein the webpage software provides webpage information accessible to the one or more client devices, wherein the integrated search and analytics runtime module includes an analytics generation module integrated with a search module, the method comprising the following performed by one of the client devices: employing a first user interface display screen to display one or more search options to enable user initiation of a data search, wherein user activation of the one or more search options employs an analytic runtime component of the integrated search and analytics module to generate a tree structure of a data component being searched, wherein the tree structure is flattened into one or more temporary tables, wherein the temporary tables are used to generate queries resulting in a collection of one or more search results of the data search; receiving the user activation of one of the search options; in response to the user activation of one of the search options, generating analytics including predefined dimensions; showing, on the display screen, the collection of the one or more search results of the data search in response to the user activation of one of the search options, wherein the one or more search results are shown via a first data visualization concurrently with the one or more search options, wherein the first data visualization includes a display of the one or more search results and the analytics; setting an analytics settings control in a first state with respect to the predefined dimensions; varying the analytics settings control to a second state in accordance with the one or more search results, with respect to the predefined dimensions; in response to the varying of the analytics settings control to the second state with respect to the predefined dimensions, changing dimensions of the one or more search results; in response to a user initiated adjustment to the first data visualization, utilizing the analytics settings control in a third state associated with the user initiated adjustment to automatically adjust displayed search results and a pivot grid in response to the user initiated adjustment; in response to selecting a first row in the set of one or more search results, providing a first set of selectable user options to implement functional manipulation of data associated with the first row, wherein in response to selecting a second row in the set of one or more search results, providing a second set of selectable user options to implement functional manipulation of data associated with the second row, wherein the second set of selectable user options is different than the first set of selectable user options, based on the item represented by the row; and in response to selecting analytics in the first data visualization associated with the first row in the set of one or more search results, changing the first set of selectable user options associated with the first row in the set of the one or more search results to a third set of selectable user options associated with the first row in the set of the one or more search results, wherein the third set of selectable user options includes a user option to drag and drop a dimension onto the pivot grid associated with the first data visualization and the analytics settings control, resulting in an updated second data visualization in response thereto.",0,,1,B
10606855,2,"2. The method of claim 1 , wherein the data search includes a transaction search, and wherein the one or more search results include indications of one or more transactions.",1,claim 1,0,B
10606855,3,"3. The method of claim 1 , wherein data associated with the one or more search results includes data of a computing object associated with a particular search result selected by the user.",2,claim 1,0,B
10606855,4,"4. The method of claim 3 , wherein the functional manipulation includes one or more software actions.",3,claim 3,0,B
10606855,5,"5. The method of claim 4 , wherein the one or more software actions include approval of an expense report associated with the computing object.",4,claim 4,0,B
10606855,6,"6. The method of claim 3 , wherein the varying of the analytics settings controls comprises selecting a drill-down action via a menu or control incorporated in the first data visualization, wherein the drill-down action is based on a portion of an analytic identified by user selection via the portion.",5,claim 3,0,B
10606855,7,"7. The method of claim 6 , further including automatically selecting a data dimension, facet, filter, or search term in response to the drill-down action, and displaying data associated with the selection.",6,claim 6,0,B
10606855,8,"8. The method of claim 1 , wherein the data search includes a filtering operation performed upon a first set of data.",7,claim 1,0,B
10606855,9,"9. The method of claim 8 , further including maintaining said first set of data in a relational database.",8,claim 8,0,B
10606855,10,"10. The method of claim 9 , further including employing one or more Structured Query Language (SQL) constructs to selectively access data in the relational database in response to a user initiated query implemented via user selection of the one or more search options.",9,claim 9,0,B
10606855,11,"11. The method of claim 10 , wherein the one or more SQL constructs include an SQL construct adapted to perform an approximately real time SQL query against the database during implementation of a data search or refresh of data displayed via the first user interface display screen.",10,claim 10,0,B
10606855,12,"12. The method of claim 1 , further including: wherein the first set of selectable user options and the second set of selectable user options are actuatable via one or more user interface controls; and selectively altering display of the one or more user interface controls in accordance with the one or more search results.",11,claim 1,0,B
10606855,13,"13. The method of claim 1 , further including providing a set of selectable user search options to specify a transaction search; providing a set of selectable user analytic options to specify an analytic coupled to the analytics settings control; refining the tree structure in response to user selection of set of selectable user tree options; and using an integrated analytics and search framework to present one or more search results via the analytic in response to the user selection of the user tree options.",12,claim 1,0,B
10606855,14,"14. The method of claim 13 , wherein the user search option further includes one or mechanisms enabling user specification of one or more dimensions of a data component used for a search, by manipulation of an analytics setting, and wherein the method further includes adjusting a display of the one or more search results to include one or more user interface controls for enabling user access to functionality, the functionality dependent upon content of the one or more search results.",13,claim 13,0,B
10606855,15,"15. An apparatus comprising: a digital processor coupled to a display and to a processor-readable storage device, wherein the processor-readable storage device includes one or more instructions executable by the digital processor to perform the following acts: employing a first user interface display screen to display one or more search options to enable user initiation of a data search, wherein user activation of the one or more search options employs an integrated search analytics module that comprises an analytic runtime component to generate a tree structure of a data component being searched, wherein the tree structure is flattened into one or more temporary tables, wherein the temporary tables are used to generate queries resulting in a collection of one or more search results of the data search; receiving the user activation of one of the search options; in response to the user activation of one of the search options, generating analytics including predefined dimensions; showing, on the display screen, the collection of the one or more search results of the data search in response to the user activation of one of the search options, wherein the one or more search results are shown via a first data visualization concurrently with the one or more search options, wherein the first data visualization includes a display of the one or more search results and the analytics; setting an analytics settings control in a first state with respect to the predefined dimensions; varying the analytics settings control to a second state in accordance with the one or more search results, with respect to the predefined dimensions; in response to the varying of the analytics settings control to the second state with respect to the predefined dimensions, changing dimensions of the one or more search results; in response to a user initiated adjustment to the first data visualization, utilizing the analytics settings control in a third state associated with the user initiated adjustment to automatically adjust displayed search results and a pivot grid in response to the user initiated adjustment; in response to selecting a first row in the set of one or more search results, providing a first set of selectable user options to implement functional manipulation of data associated with the first row, wherein in response to selecting a second row in the set of one or more search results, providing a second set of selectable user options to implement functional manipulation of data associated with the second row, wherein the second set of selectable user options is different than the first set of selectable user options, based on the item represented by the row; and in response to selecting analytics in the first data visualization associated with the first row in the set of one or more search results, changing the first set of selectable user options associated with the first row in the set of the one or more search results to a third set of selectable user options associated with the first row in the set of the one or more search results, wherein the third set of selectable user options includes a user option to drag and drop a dimension onto the pivot grid associated with the first data visualization and the analytics settings control, resulting in an updated second data visualization in response thereto.",14,,0,B
10606855,16,"16. A processor-readable non-transient storage device including instructions executable by a digital processor, the processor-readable storage device including one or more instructions for: employing a first user interface display screen to display one or more search options to enable user initiation of a data search, wherein user activation of the one or more search options employs an integrated search and analytics module that comprises an analytic runtime component to generate a tree structure of a data component being searched, wherein the tree structure is flattened into one or more temporary tables, wherein the temporary tables are used to generate queries resulting in a collection of one or more search results of the data search; receiving the user activation of one of the search options; in response to the user activation of one of the search options, generating analytics including predefined dimensions; showing, on the display screen, the collection of the one or more search results of the data search in response to the user activation of one of the search options, wherein the one or more search results are shown via a first data visualization concurrently with the one or more search options, wherein the first data visualization includes a display of the one or more search results and the analytics; setting an analytics settings control in a first state with respect to the predefined dimensions; varying the analytics settings control to a second state in accordance with the one or more search results, with respect to the predefined dimensions; in response to the varying of the analytics settings control to the second state with respect to the predefined dimensions, changing dimensions of the one or more search results; in response to a user initiated adjustment to the first data visualization, utilizing the analytics settings control in a third state associated with the user initiated adjustment to automatically adjust displayed search results and a pivot grid in response to the user initiated adjustment; in response to selecting a first row in the set of one or more search results, providing a first set of selectable user options to implement functional manipulation of data associated with the first row, wherein in response to selecting a second row in the set of one or more search results, providing a second set of selectable user options to implement functional manipulation of data associated with the second row, wherein the second set of selectable user options is different than the first set of selectable user options, based on the item represented by the row; and in response to selecting analytics in the first data visualization associated with the first row in the set of one or more search results, changing the first set of selectable user options associated with the first row in the set of the one or more search results to a third set of selectable user options associated with the first row in the set of the one or more search results, wherein the third set of selectable user options includes a user option to drag and drop a dimension onto the pivot grid associated with the first data visualization and the analytics settings control, resulting in an updated second data visualization in response thereto.",15,,0,B
10606855,17,"17. The method of claim 1 , further comprising: in response to selection of the first or second row, the first and second set of selectable user options to implement functional manipulation of data are displayed in an overlay of the set of one or more search results.",16,claim 1,0,B
10606855,18,"18. The method of claim 1 , wherein functional manipulation of data associated with the first row or the second row further comprises one or more selected from the group of: modifying data associated with a respective row; and employing the data associated with the respective row to perform a software action.",17,claim 1,0,B
10606856,1,"1. A method, comprising: ingesting, by a data intake and query system, collected data including metrics data, the metrics data including a plurality of key values and a plurality of numerical values, each numerical value being indicative of a measured characteristic of a computing resource; populating, by the data intake and query system, a first portion of a metric-series index (msidx) file with the plurality of key values and a second portion of the msidx file with the plurality of numerical values, the first portion being distinct from the second portion; generating, by the data intake and query system, a plurality of metrics from the metrics data, each metric having a plurality of dimensions populated with at least some of the plurality of key values and having one of the plurality of numerical values; and indexing, by the data intake and query system, the plurality of metrics by at least one of the plurality of dimensions, wherein data of an indexed metric is searchable based on the first portion of the msidx file.",0,,1,B
10606856,2,"2. The method of claim 1 , further comprising: receiving, by the data intake and query system, a query including a criterion; and evaluating, by the data intake and query system, the query by applying the criterion to only the first portion of the msidx file to obtain query results indicative of metrics that satisfy the criterion.",1,claim 1,0,B
10606856,3,"3. The method of claim 1 , wherein each numerical value of the plurality of numerical values is a floating point value.",2,claim 1,0,B
10606856,4,"4. The method of claim 1 , wherein the metrics data is semi-structured data or structured data.",3,claim 1,0,B
10606856,5,"5. The method of claim 1 , wherein the measured characteristic of a computing resource is a utilization of a processor, a temperature of an electronic component, or a voltage reading of an electronic component.",4,claim 1,0,B
10606856,6,"6. The method of claim 1 , wherein the metrics data is received by the data intake and query system over a computer network from a plurality of remote computer systems.",5,claim 1,0,B
10606856,7,"7. The method of claim 1 , wherein each of the plurality of dimensions is either a required dimension or an optional dimension, wherein each of the plurality of metrics includes a value for each required dimension, and wherein only some of the plurality of metrics include values for some optional dimensions.",6,claim 1,0,B
10606856,8,"8. The method of claim 1 , wherein the plurality of dimensions includes a plurality of required dimensions, and wherein each metric includes a value for each required dimension.",7,claim 1,0,B
10606856,9,"9. The method of claim 1 , wherein the plurality of dimensions includes a time dimension, the time dimension including a value indicative of when the measured characteristic of the metric was measured, and a name dimension indicative of (a) the measured characteristic and (b) the computing resource of the numerical value.",8,claim 1,0,B
10606856,10,"10. The method of claim 1 , wherein the plurality of dimensions includes optional dimensions, and wherein only some of the plurality of metrics include values for some optional dimensions.",9,claim 1,0,B
10606856,11,"11. The method of claim 1 , wherein: the plurality of dimensions includes a host dimension, a manufacturer dimension, and a model dimension; and only some of the plurality of metrics include values for the host dimension, the manufacturer dimension, or the model dimension.",10,claim 1,0,B
10606856,12,"12. The method of claim 1 , wherein the plurality of dimensions includes a user specified dimension selected by a user prior to ingesting the metrics data.",11,claim 1,0,B
10606856,13,"13. The method of claim 1 , wherein at least some of the plurality of numerical values are indicative of a time series of measured characteristics of a single computing resource.",12,claim 1,0,B
10606856,14,"14. The method of claim 1 , wherein the collected data includes raw machine data, the method further comprising: generating, by the data intake and query system, a plurality of events indexed by timestamps, each of the plurality of events including a respective segment of the raw machine data.",13,claim 1,0,B
10606856,15,"15. The method of claim 1 , wherein the collected data includes raw machine data, the method further comprising: generating, by the data intake and query system, a plurality of events indexed by timestamps, each of the plurality of events including a respective segment of the raw machine data; and correlating, by the data intake and query system, the plurality of events and the plurality of metrics.",14,claim 1,0,B
10606856,16,"16. The method of claim 1 , further comprising, prior to ingesting the collected data: causing, by the data intake and query system, a forwarder to collect the collected data, the collected data being selected from a group consisting of: only raw data; raw data and structured metrics data; and only structured metrics data; and receiving, by the data intake and query system, the collected data over a computer network.",15,claim 1,0,B
10606856,17,"17. The method of claim 1 , further comprising, prior to ingesting the collected data: causing, by the data intake and query system, a forwarder to collect and locally index the collected data, the collected data being selected from a group consisting of: only raw data; raw data and structured metrics data; and only structured metrics data; and receiving, by the data intake and query system, the collected data over a computer network.",16,claim 1,0,B
10606856,18,"18. The method of claim 1 , further comprising, prior to ingesting the collected data: causing, by the data intake and query system, a script running on a remote computer system to collect the metrics data from an application running on the remote computer system, the application including the script; and receiving, by the data intake and query system, the metrics data over an HTTP-based connection of a computer network.",17,claim 1,0,B
10606856,19,"19. The method of claim 1 , further comprising, prior to ingesting the collected data: causing, by the data intake and query system, a background process of a remote computer system to collect the metrics data from an application running on the remote computer system, the background process being functionally independent of the application; and receiving, by the data intake and query system, the metrics data over a computer network.",18,claim 1,0,B
10606856,20,"20. The method of claim 1 , further comprising, prior to ingesting the collected data: causing, by the data intake and query system, a collector running on a remote computer system to collect metrics data from the remote computing system; and receiving, by the data intake and query system, the metrics data over a computer network.",19,claim 1,0,B
10606856,21,"21. The method of claim 1 , further comprising, prior to ingesting the collected data: causing, by the data intake and query system, a collector running on a remote computer system to collect and aggregate metrics data from the remote computing system to produce the collected data; and receiving, by the data intake and query system, the collected data over a computer network.",20,claim 1,0,B
10606856,22,"22. The method of claim 1 , further comprising, prior to ingesting the collected data: receiving, by the data intake and query system, a command causing the data intake and query system to obtain the metrics data using an add-on reusable software component.",21,claim 1,0,B
10606856,23,"23. The method of claim 1 , further comprising, prior to ingesting the collected data: calling, by the data intake and query system, an application programming interface, API, of a remote computer system to send the metrics data to the data intake and query system; and receiving, by the data intake and query system, the metrics data over a computer network.",22,claim 1,0,B
10606856,24,"24. The method of claim 1 , further comprising, prior to ingesting the collected data: receiving, by the data intake and query system, a command from a user to modify an add-on reusable software component; causing, by the data intake and query system, the modified add-on reusable software component to obtain the structured metrics data from a remote computer system; and receiving, by the data intake and query system, the structured metrics data over a computer network.",23,claim 1,0,B
10606856,25,"25. The method of claim 1 , further comprising, prior to ingesting the collected data: scheduling, by the data intake and query system, transfer of the metrics data collected by a plurality of collectors from a plurality of remote computer system; and receiving, by the data intake and query system, the structured metrics data over a computer network.",24,claim 1,0,B
10606856,26,"26. A method, comprising: ingesting, by a data intake and query system, raw data and metrics data, the metrics data including a plurality of key values and a plurality of numerical values, each numerical value being indicative of a measured characteristic of a computing resource; populating, by the data intake and query system, a first portion of a metric-series index (msidx) file with the plurality of key values and a second portion of the msidx file with the plurality of numerical values, the first portion being distinct from the second portion; generating, by the data intake and query system, a plurality of metrics from the metrics data, each metric having a plurality of dimensions populated with at least some of the plurality of key values and having one of the plurality of numerical values; generating, by the data intake and query system, a plurality of events including a timestamp and a segment of the raw data; and indexing, by the data intake and query system, the plurality of metrics by at least one of the plurality of dimensions, wherein data of an indexed metric is searchable based on the first portion of the msidx file; and indexing, by the data intake and query system, the plurality of events by the timestamps.",25,,0,B
10606856,27,"27. The method of claim 26 , further comprising: receiving, by the data intake and query system, a query having a scope that includes at least one of the plurality of metrics or the plurality of events, the query being input by a user and expressed in a pipelined search language; obtaining, by the data intake and query system, results satisfying the received query; and displaying, on a display device, the results or data indicative of the results.",26,claim 26,0,B
10606856,28,"28. The method of claim 26 , wherein each numerical value of the plurality of numerical values is a floating point value.",27,claim 26,0,B
10606856,29,"29. The method of claim 26 , wherein the metrics data is semi-structured data or structured data.",28,claim 26,0,B
10606856,30,"30. A data intake and query system comprising: a processor; and memory containing instructions that, when executed by the processor, cause the data intake and query system to: ingest collected data including metrics data, the metrics data including a plurality of key values and a plurality of numerical values, each numerical value being indicative of a measured characteristic of a computing resource; populate a first portion of a metric-series index (msidx) file with the plurality of key values and a second portion of the msidx file with the plurality of numerical values, the first portion being distinct from the second portion; generate a plurality of metrics from the metrics data, each metric having a plurality of dimensions populated with at least some of the plurality of key values and having one of the plurality of numerical values; and index the plurality of metrics by at least one of the plurality of dimensions, wherein data of an indexed metric is searchable based on the first portion of the msidx file.",29,,0,B
10606857,1,"1. A method, comprising: populating, by a data intake and query system, an index of a metrics store with a plurality of metrics, each metric including a measure value; receiving, by the data intake and query system, a specified condition related to the plurality of metrics; cataloging, by the data intake and query system, metadata related to the specified condition in an in-memory metrics catalog; receiving, by the data intake and query system, a search query including search criteria; evaluating, by the data intake and query system, the search query by applying the search criteria to the metadata of the metrics catalog to obtain results that satisfy the search criteria; and causing display, on a display device, of the results or data indicative of the results.",0,,1,B
10606857,2,"2. The method of claim 1 , further comprising: calling, by the data intake and query system, an application programming interface (API) to retrieve metrics data from the metrics store, the metrics data being cataloged in the in-memory metrics catalog.",1,claim 1,0,B
10606857,3,"3. The method of claim 1 , wherein the plurality of metrics are received by the data intake and query system over a computer network from a plurality of remote computer systems.",2,claim 1,0,B
10606857,4,"4. The method of claim 1 , wherein the query is input by a user via a user interface rendered on the display device, and wherein the results or the data indicative of the results is rendered on the user interface.",3,claim 1,0,B
10606857,5,"5. The method of claim 1 , wherein the metrics store is not an in-memory metrics store.",4,claim 1,0,B
10606857,6,"6. The method of claim 1 , wherein the metrics store resides in non-volatile memory, and wherein the results are obtained by retrieving metrics data only from the metrics catalog.",5,claim 1,0,B
10606857,7,"7. The method of claim 1 , wherein the metrics store resides in non-volatile memory, and wherein the results are obtained by retrieving metrics data in the metrics store.",6,claim 1,0,B
10606857,8,"8. The method of claim 1 , wherein at least some of the metadata is user specified metadata.",7,claim 1,0,B
10606857,9,"9. The method of claim 1 , wherein the metadata includes user specified metadata indicative of at least one condition causing the metrics catalog to automatically retrieve metrics data from the metrics store.",8,claim 1,0,B
10606857,10,"10. The method of claim 1 , wherein the metadata includes user specified metadata indicative of a threshold of a measure value, a range of a measure value, or preferred measure value for a metric.",9,claim 1,0,B
10606857,11,"11. The method of claim 1 , wherein the metadata defines a condition related to a metric in the metrics store, and the occurrence of the condition causes the metrics catalog to display an alert on the display device.",10,claim 1,0,B
10606857,12,"12. The method of claim 1 , wherein the search query is input by a user and expressed in a pipelined search language.",11,claim 1,0,B
10606857,13,"13. The method of claim 1 , wherein the index includes a plurality of dimensions, and wherein each of the plurality of dimensions is either a required dimension or an optional dimension, each metric includes a value for each required dimension, and only some of the plurality of metrics include values for some optional dimensions.",12,claim 1,0,B
10606857,14,"14. The method of claim 1 , wherein the index includes a plurality of dimensions, and the plurality of dimensions includes a user specified dimension.",13,claim 1,0,B
10606857,15,"15. The method of claim 1 , wherein each metric has only one measure value, and the measure value is a floating point value.",14,claim 1,0,B
10606857,16,"16. The method of claim 1 , wherein the plurality of metrics are received by the data intake and query system over a computer network from a plurality of remote computer systems, and where each metric is semi-structured data or structured data.",15,claim 1,0,B
10606857,17,"17. The method of claim 1 , wherein the measure value is a utilization of a processor, a temperature of an electronic component, or a voltage reading of an electronic component.",16,claim 1,0,B
10606857,18,"18. The method of claim 1 , wherein the search criteria has a scope including metrics data and non-metrics data, and wherein the results include metrics data and non-metrics data.",17,claim 1,0,B
10606857,19,"19. The method of claim 1 , wherein the metadata includes user specified metadata causing a metric to appear deleted or edited from the metric store.",18,claim 1,0,B
10606857,20,"20. The method of claim 1 , wherein the metadata includes user specified metadata causing a metric to appear with a unit value different from a unit value of the metric in the metric store.",19,claim 1,0,B
10606857,21,"21. The method of claim 1 , wherein the metadata includes user specified metadata indicative of a relationship between two or more metrics of the metrics store.",20,claim 1,0,B
10606857,22,"22. The method of claim 1 , wherein the plurality of metrics are received by the data intake and query system over a computer network from a plurality of remote computer systems.",21,claim 1,0,B
10606857,23,"23. The method of claim 1 , wherein the query is input by a user via a user interface rendered on the display device, and wherein the results or the data indicative of the results is rendered on the user interface.",22,claim 1,0,B
10606857,24,"24. The method of claim 1 , wherein the metrics store is not an in-memory metrics store.",23,claim 1,0,B
10606857,25,"25. The method of claim 1 , wherein the results are obtained by retrieving metrics data only from the metrics catalog.",24,claim 1,0,B
10606857,26,"26. A method, comprising: storing, by a data intake and query system, a plurality of metrics in an index of a metrics store residing in non-volatile memory, the index including a plurality of dimensions and a measure for each metric; receiving, by the data intake and query system, a specified condition related to the plurality of metrics stored in the index of the metrics store; cataloging, by the data intake and query system, metadata related to the specified condition in a metrics catalog residing in volatile memory, wherein some of the metadata is user specified and some of the metadata is derived from the plurality of metrics stored in the metrics store; receiving, by the data intake and query system, a search query including search criteria; evaluating, by the data intake and query system, the search query by applying the search criteria to the metadata of the metrics catalog to obtain results without accessing the plurality of metrics of the metrics store; and displaying, on a display device, the results or data indicative of the results.",25,,0,B
10606857,27,"27. The method of claim 26 , further comprising: calling, by the data intake and query system, an application programming interface (API) to retrieve metrics data from the metrics store, the metrics data being cataloged in the metrics catalog.",26,claim 26,0,B
10606857,28,"28. The method of claim 26 , wherein the results are obtained by retrieving metrics data from the metrics store.",27,claim 26,0,B
10606857,29,"29. The method of claim 26 , wherein at least some of the metadata is user specified metadata.",28,claim 26,0,B
10606857,30,"30. A data intake and query system, comprising: a processor; and memory containing instructions that, when executed by the electronic device, cause the data intake and query system to: populate an index of a metrics store with a plurality of metrics, each metric including a measure value; receive a specified condition related to the plurality of metrics of the index of the metrics store; catalog metadata related to the specified condition in an in-memory metrics catalog; receive a search query including search criteria; evaluate the search query by applying the search criteria to the metadata of the metrics catalog to obtain results that satisfy the search criteria; and cause the results or data indicative of the results to be displayed on a display device.",29,,0,B
10606858,1,"1. A method for presenting content based on a generic content rating, the method comprising: receiving, using a hardware processor, one or more search results corresponding to a search query; determining, using the hardware processor, country-specific content ratings associated with the one or more received search results; converting, using the hardware processor, the country-specific content ratings to generic content ratings associated with the one or more search results by transmitting a query to a server that includes an indicator of the country-specific content ratings and receiving, from the server, the generic content ratings; determining, using the hardware processor, that at least one search result is to be blocked based on the generic content ratings associated with the one or more search results and a user-selected generic content rating restriction; in response to determining that at least one search result is to be blocked, removing, using the hardware processor, the at least one search result from the one or more search results to create modified search results; and causing, using the hardware processor, the modified search results to be presented in response to the search query.",0,,1,B
10606858,2,"2. The method of claim 1 , further comprising: receiving a selection of content from the presented modified search results; determining a country-specific content rating associated with the selected content; converting the country-specific content rating to a generic content rating associated with the selected content; determining that the selected content is not to be blocked based at least in part on the generic content rating associated with the selected content and the user-selected generic content rating restriction; and in response to determining that the selected content is not to be blocked, causing the selected content to be presented.",1,claim 1,0,B
10606858,3,"3. The method of claim 2 , wherein converting the country-specific content ratings associated with the one or more received search results to generic content ratings associated with the one or more search results further comprises determining an age suitable for viewing the one or more search results.",2,claim 2,0,B
10606858,4,"4. The method of claim 2 , further comprising: determining that the selected content is to be blocked based at least in part on the generic content rating associated with the selected content and the user-selected generic content rating restriction; requesting authorization to present the selected content; and in response to receiving authorization to present the selected content, causing the selected content to be presented.",3,claim 2,0,B
10606858,5,"5. The method of claim 1 , further comprising: determining that a portion of the at least one search result is to be blocked based on the generic content ratings; and modifying the at least one search result by removing the portion of the at least one search result.",4,claim 1,0,B
10606858,6,"6. The method of claim 1 , further comprising receiving the user-selected generic content rating restriction from a user interface.",5,claim 1,0,B
10606858,7,"7. The method of claim 1 , wherein the user-selected generic content rating restriction is stored in association with a user account, and wherein the selected content is presented in association with the user account.",6,claim 1,0,B
10606858,8,"8. A system for presenting content based on a generic content rating, the system comprising: a hardware processor that is programmed to: receive one or more search results corresponding to a search query; determine country-specific content ratings associated with the one or more received search results; convert the country-specific content ratings to generic content ratings associated with the one or more search results by transmitting a query to a server that includes an indicator of the country-specific content ratings and receiving, from the server, the generic content ratings; determine that at least one search result is to be blocked based on the generic content ratings associated with the one or more search results and a user-selected generic content rating restriction; in response to determining that at least one search result is to be blocked, remove the at least one search result from the one or more search results to create modified search results; and cause the modified search results to be presented in response to the search query.",7,,0,B
10606858,9,"9. The system of claim 8 , wherein the hardware processor is further programmed to: receive a selection of content from the presented modified search results; determine a country-specific content rating associated with the selected content; convert the country-specific content rating to a generic content rating associated with the selected content; determine that the selected content is not to be blocked based at least in part on the generic content rating associated with the selected content and the user-selected generic content rating restriction; and in response to determining that the selected content is not to be blocked, cause the selected content to be presented.",8,claim 8,0,B
10606858,10,"10. The system of claim 9 , wherein converting the country-specific content ratings associated with the one or more received search results to generic content ratings associated with the one or more search results further comprises determining an age suitable for viewing the one or more search results.",9,claim 9,0,B
10606858,11,"11. The system of claim 9 , wherein the hardware processor is further programmed to: determine that the selected content is to be blocked based at least in part on the generic content rating associated with the selected content and the user-selected generic content rating restriction; request authorization to present the selected content; and in response to receiving authorization to present the selected content, cause the selected content to be presented.",10,claim 9,0,B
10606858,12,"12. The system of claim 7 , wherein the hardware processor is further programmed to: determine that a portion of the at least one search result is to be blocked based on the generic content ratings; and modify the at least one search result by removing the portion of the at least one search result.",11,claim 7,0,B
10606858,13,"13. The system of claim 7 , wherein the hardware processor is further programmed to receive the user-selected generic content rating restriction from a user interface.",12,claim 7,0,B
10606858,14,"14. The system of claim 7 , wherein the user-selected generic content rating restriction is stored in association with a user account, and wherein the selected content is presented in association with the user account.",13,claim 7,0,B
10606858,15,"15. A non-transitory computer-readable medium containing computer executable instructions that, when executed by a processor, cause the processor to perform a method for presenting content based on a generic content rating, the method comprising: receiving one or more search results corresponding to a search query; determining country-specific content ratings associated with the one or more received search results; converting the country-specific content ratings to generic content ratings associated with the one or more search results by transmitting a query to a server that includes an indicator of the country-specific content ratings and receiving, from the server, the generic content ratings; determining that at least one search result is to be blocked based on the generic content ratings associated with the one or more search results and a user-selected generic content rating restriction; in response to determining that at least one search result is to be blocked, removing the at least one search result from the one or more search results to create modified search results; and causing the modified search results to be presented in response to the search query.",14,,0,B
10606858,16,"16. The non-transitory computer-readable medium of claim 15 , wherein the method further comprises: receiving a selection of content from the presented modified search results; determining a country-specific content rating associated with the selected content; converting the country-specific content rating to a generic content rating associated with the selected content; determining that the selected content is not to be blocked based at least in part on the generic content rating associated with the selected content and the user-selected generic content rating restriction; and in response to determining that the selected content is not to be blocked, causing the selected content to be presented.",15,claim 15,0,B
10606858,17,"17. The non-transitory computer-readable medium of claim 16 , wherein converting the country-specific content ratings associated with the one or more received search results to generic content ratings associated with the one or more search results further comprises determining an age suitable for viewing the one or more search results.",16,claim 16,0,B
10606858,18,"18. The non-transitory computer-readable medium of claim 16 , wherein the method further comprises: determining that the selected content is to be blocked based at least in part on the generic content rating associated with the selected content and the user-selected generic content rating restriction; requesting authorization to present the selected content; and in response to receiving authorization to present the selected content, causing the selected content to be presented.",17,claim 16,0,B
10606858,19,"19. The non-transitory computer-readable medium of claim 15 , wherein the method further comprises: determining that a portion of the at least one search result is to be blocked based on the generic content ratings; and modifying the at least one search result by removing the portion of the at least one search result.",18,claim 15,0,B
10606858,20,"20. The non-transitory computer-readable medium of claim 15 , wherein the method further comprises receiving the user-selected generic content rating restriction from a user interface.",19,claim 15,0,B
10606858,21,"21. The non-transitory computer-readable medium of claim 15 , wherein the user-selected generic content rating restriction is stored in association with a user account, and wherein the selected content is presented in association with the user account.",20,claim 15,0,B
10606859,1,"1. A method to produce a custom calendar user interface (UI) on an electronic device display screen of a user device, the method comprising: receiving a search query that includes attribute information at the user device, wherein the attribute information corresponds to one or more tasks; sending, by the user device, the search query over the network to a server system; receiving, from a first user device that is different from the user device, at the server system, a first code object that corresponds to a first task previously assigned to a first user and having a first task status value, wherein the first code object includes device readable code that is used to generate a first visual content item for the first task, such that the first code object has been used by the first user device to generate the first visual content item within a first calendar UI on the first user device; receiving, from a second user device that is different from the user device and the first user device, at the server system, a second code object that corresponds to a second task previously assigned to a second user and having a second task status value, wherein the second code object includes device readable code that is used to generate a second visual content item for the second task, such that the second code object has been used by the second user device to generate the second visual content item within a second calendar UI on the second user device, the first code object being separate and discrete from the second code object; storing, in a computer readable storage device associated with the server system, an information structure that associates attribute information with code objects corresponding to tasks and that associates the code objects with dates, wherein the code objects are separate and discrete objects including device readable code that are used to generate combinations of multiple visual content items for the tasks assigned to multiple different users within a calendar date pane display grid within the custom calendar UI, the calendar date pane display grid comprising a two-dimensional display grid of date panes that correspond to days and weeks of a month, wherein the code objects include the first code object received from the first user device and the second code object received from the second user device, the code objects including corresponding attributes characterized by stored attribute information, such that the stored attribute information for the first code object which corresponds to the first task includes a first task identification value, a first task assignment value, and the first task status value, wherein the stored attribute information for the second code object which corresponds to the second task includes a second task identification value, a second task assignment value, and the second task status value; matching, at the server system, the attribute information included with the search query with the stored attribute information to identify one or more of the code objects and one or more of the dates that match the search query; transmitting, by the server system, information that identifies multiple ones of the code objects and the dates associated with the stored attribute information that matches the attribute information included with the search query; receiving over the network by the user device from the server system, the information that identifies the multiple ones of the code objects and the dates associated with the stored attribute information that matches the attribute information included with the search query; and using, by the user device, the multiple ones of the code objects to generate the multiple visual content items for the tasks within the calendar date pane display grid within the custom calendar UI that is displayed via the user device in accordance with the multiple ones of the code objects identified, wherein the multiple visual content items include the first visual content item corresponding to the first task previously assigned to the first user and the second visual content item corresponding to the second task previously assigned to the second user.",0,,1,B
10606859,2,"2. The method of claim 1 , wherein the first task status value of the first task is selected from a set of status values that includes a completed status that indicates a task has been completed, wherein using the multiple ones of the code objects to generate the multiple visual content items includes using the first code object to generate the first visual content item and using the second code object to generate the second visual content item, wherein the first visual content item displays a first representation of the first task status value, and wherein the second visual content items displays a second representation of the second task status value.",1,claim 1,0,B
10606859,3,"3. The method of claim 1 , further including: chronologically ordering the multiple ones of the code objects into an ordered calendar UI information structure; and using the ordered calendar UI information structure to map the multiple visual content items to the custom calendar UI displayed on the device display screen.",2,claim 1,0,B
10606859,4,"4. The method of claim 1 , wherein the multiple ones of the code objects identified by the server system are associated with dates within a prescribed date range, and wherein the method further comprises: sending, by the user device, a request over the network to the server system for information indicating matching code objects associated with dates within an extended date range that is outside of the prescribed date range; sending over the network by the server system to the user device, information that identifies at least one code object and date within the extended date range associated in the information structure with stored attribute information that matches the attribute information included with the search query; receiving over the network by the user device from the server system, the information that identifies the at least one code object and date within an extended date range associated in the information structure with the identified at least one code object; and using the identified at least one code object to generate at least one visual content item within the custom calendar UI display on a device display screen of the user device.",3,claim 1,0,B
10606859,5,"5. The method of claim 1 further including: sending over a network from different user devices to the server system, different code objects that are associated with dates, wherein the code objects are adapted for use to generate the visual content items on the different user device display screens, wherein receiving over the network from the server system, information that identifies the multiple ones of the code objects that match the search query includes receiving information that matches multiple different code objects sent over the network by different user devices to the server system.",4,claim 1,0,B
10606859,6,"6. The method of claim 1 , wherein the search query identifies two or more of an individual task, a task deadline, a milestone, a keyword, or a person.",5,claim 1,0,B
10606859,7,"7. The method of claim 1 , wherein the information that identifies the multiple ones of the code objects that match the search query received by the user device includes attribute information that matches the attribute information in the search query.",6,claim 1,0,B
10606859,8,"8. A calendar user interface management system comprising: a user device including an electronic device display screen; and a server system including one or more processors configured by machine-readable instructions to: receive, from a first user device that is different from the user device, a first code object that corresponds to a first task previously assigned to a first user and having a first task status value, wherein the first code object includes device readable code that is used to generate a first visual content item for the first task, such that the first code object has been used by the first user device to generate the first visual content item within a first calendar UI on the first user device; and receive, from a second user device that is different from the user device and the first user device, a second code object that corresponds to a second task previously assigned to a second user and having a second task status value, wherein the second code object includes device readable code that is used to generate a second visual content item for the second task, such that the second code object has been used by the second user device to generate the second visual content item within a second calendar UI on the second user device, the first code object being separate and discrete from the second code object; wherein the user device includes one or more processors configured by machine-readable instructions to: receive a search query that includes attribute information, wherein the attribute information corresponds to one or more tasks; send the search query over a network to the server system; and use code objects to generate multiple visual content items for tasks within a calendar date pane display grid within the custom calendar UI that is displayed via the user device in accordance with multiple ones of the code objects, wherein the multiple ones of the code objects include the first code object received from the first user device and the second code object received from the second user device, wherein the code objects are separate and discrete objects including device readable code that are used to generate the multiple visual content items for the tasks within the calendar date pane display grid within the custom calendar user interface, the calendar date pane display grid comprising a two-dimensional display grid of date panes that correspond to days and weeks of a month, wherein the code objects correspond to the tasks, wherein the multiple visual content items include the first visual content item corresponding to the first task previously assigned to the first user and the second visual content item corresponding to the second task previously assigned to the second user; and wherein the server system includes one or more processors configured by machine-readable instructions to: store, in a computer readable storage device associated with the server system, an information structure that associates the attribute information with the multiple ones of the code objects corresponding to the tasks and that associates the code objects with dates, the multiple ones of the code objects including corresponding attributes characterized by stored attribute information, such that the stored attribute information for the first code object which corresponds to the first task includes a first task identification value, a first task assignment value, and the first task status value, the first code object being separate and discrete from the second code object that corresponds to the second task, wherein the stored attribute information for the second code object which corresponds to the second task includes a second task identification value, a second task assignment value, and the second task status value; and match the attribute information, included in the search query, with the stored attribute information to identify one or more of the code objects and one or more of the dates that match the search query; transmitting, over the network to the user device, information identifying the multiple ones of the code objects and the dates associated with the stored attribute information that matches the attribute information included with the search query.",7,,0,B
10606859,9,"9. The system of claim 8 , wherein the one or more processors are further configured by machine-readable instructions to: identify a set of code objects from among the multiple ones of the code objects that fit within a prescribed date range.",8,claim 8,0,B
10606859,10,"10. The system of claim 8 , wherein the one or more processors are further configured by machine-readable instructions to: produce a code object ordering information structure in a computer readable storage device that orders the multiple ones of the code objects according to their associated dates; and identify code objects from among the multiple ones of the code objects that fit within a prescribed date range based upon the code object ordering information structure.",9,claim 8,0,B
10606859,11,11. The system of claim 8 further including: a computer readable storage device including a calendar user interface (UI) information structure that associates the multiple code objects with date panes of a calendar UI grid that correspond to dates associated in the attribute association information structure associated with the multiple ones of the code objects.,10,claim 8,0,B
10606860,1,"1. A system for interacting with a content file of a content management and file sharing system, the system comprising: a database system implemented using a server system comprising one or more hardware processors, the database system configurable to cause: sending a content file request from the database system to the content management and file sharing system using one or more application programming interfaces (APIs), the content management and file sharing system being external to the database system; processing data of the content file received at the database system from the content management and file sharing system; creating or updating a persistent object in a database of the database system to store the content file data, the persistent object representing the content file in the database system; displaying a graphical component representing the persistent object in a user interface on a display of a user device, the user interface providing services of an enterprise social networking system associated with the database system, the persistent object configured to be collaborated on by users of the enterprise social networking system through one or more streams of the enterprise social networking system; identifying user input received from the user device in association with the graphical component, the user input associated with the content file; and performing one or more system events in accordance with the user input.",0,,1,B
10606860,2,"2. The system of claim 1 , wherein the persistent object is configured to be shared, edited and commented on by the users of the enterprise social networking system through the one or more streams of the enterprise social networking system.",1,claim 1,0,B
10606860,3,"3. The system of claim 1 , wherein the user input indicates one or more of: dragging a file to be uploaded to the content management and file sharing system, dropping a file to be uploaded to the content management and file sharing system, a request to preview content, a request to update a document, or a request associated with a task to be performed with respect to a document.",2,claim 1,0,B
10606860,4,"4. The system of claim 1 , wherein the user input indicates one or more of: a request to access a library, a request to create a link, or a request to embed a preview of a file.",3,claim 1,0,B
10606860,5,"5. The system of claim 1 , wherein the user input indicates one or more of: a request to view a list of folders, a request to view a list of files, a request to search files for specified text, or a request for notifications.",4,claim 1,0,B
10606860,6,"6. The system of claim 1 , the database system further configurable to cause: determining that a user associated with the user input has permission to cause the content file to be updated.",5,claim 1,0,B
10606860,7,"7. The system of claim 6 , wherein the permission is based at least in part on a sharing arrangement of a social layer with which the persistent object is associated.",6,claim 6,0,B
10606860,8,"8. The system of claim 1 , the one or more system events comprising: identifying a content object identifier in the persistent object, identifying the content file via the content object identifier, and establishing read/write access with the content file.",7,claim 1,0,B
10606860,9,"9. A computer program product associated with a database system, the computer program product comprising program code to be executed by one or more processors when retrieved from a non-transitory computer-readable medium, the program code comprising instructions configurable to cause: sending a content file request from the database system to a content management and file sharing system using one or more application programming interfaces (APIs), the content management and file sharing system being external to the database system; processing data of a content file received at the database system from the content management and file sharing system; creating or updating a persistent object in a database of the database system to store the content file data, the persistent object representing the content file in the database system; displaying a graphical component representing the persistent object in a user interface on a display of a user device, the user interface providing services of an enterprise social networking system associated with the database system, the persistent object configured to be collaborated on by users of the enterprise social networking system through one or more streams of the enterprise social networking system; identifying user input received from the user device in association with the graphical component, the user input associated with the content file; and performing one or more system events in accordance with the user input.",8,,0,B
10606860,10,"10. The computer program product of claim 9 , wherein the persistent object is configured to be shared, edited and commented on by the users of the enterprise social networking system through the one or more streams of the enterprise social networking system.",9,claim 9,0,B
10606860,11,"11. The computer program product of claim 9 , wherein the user input indicates one or more of: dragging a file to be uploaded to the content management and file sharing system, dropping a file to be uploaded to the content management and file sharing system, a request to preview content, a request to update a document, or a request associated with a task to be performed with respect to a document.",10,claim 9,0,B
10606860,12,"12. The computer program product of claim 9 , wherein the user input indicates one or more of: a request to access a library, a request to create a link, or a request to embed a preview of a file.",11,claim 9,0,B
10606860,13,"13. The computer program product of claim 9 , wherein the user input indicates one or more of: a request to view a list of folders, a request to view a list of files, a request to search files for specified text, or a request for notifications.",12,claim 9,0,B
10606860,14,"14. The computer program product of claim 9 , the instructions further configurable to cause: determining that a user associated with the user input has permission to cause the content file to be updated.",13,claim 9,0,B
10606860,15,"15. The computer program product of claim 9 , the one or more system events comprising: identifying a content object identifier in the persistent object, identifying the content file via the content object identifier, and establishing read/write access with the content file.",14,claim 9,0,B
10606860,16,"16. A method associated with a database system, the method comprising: sending a content file request from the database system to a content management and file sharing system using one or more application programming interfaces (APIs), the content management and file sharing system being external to the database system; processing data of a content file received at the database system from the content management and file sharing system; creating or updating a persistent object in a database of the database system to store the content file data, the persistent object representing the content file in the database system; displaying a graphical component representing the persistent object in a user interface on a display of a user device, the user interface providing services of an enterprise social networking system associated with the database system, the persistent object configured to be collaborated on by users of the enterprise social networking system through one or more streams of the enterprise social networking system; identifying user input received from the user device in association with the graphical component, the user input associated with the content file; and performing one or more system events in accordance with the user input.",15,,0,B
10606860,17,"17. The method of claim 16 , wherein the persistent object is configured to be shared, edited and commented on by the users of the enterprise social networking system through the one or more streams of the enterprise social networking system.",16,claim 16,0,B
10606860,18,"18. The method of claim 16 , wherein the user input indicates one or more of: dragging a file to be uploaded to the content management and file sharing system, dropping a file to be uploaded to the content management and file sharing system, a request to preview content, a request to update a document, or a request associated with a task to be performed with respect to a document.",17,claim 16,0,B
10606860,19,"19. The method of claim 16 , wherein the user input indicates one or more of: a request to access a library, a request to create a link, or a request to embed a preview of a file.",18,claim 16,0,B
10606860,20,"20. The method of claim 16 , wherein the user input indicates one or more of: a request to view a list of folders, a request to view a list of files, a request to search files for specified text, or a request for notifications.",19,claim 16,0,B
10606861,1,"1. A method for building data integration tools that facilitate interoperability of data integration solutions among data integration platforms, the method comprising: receiving source schemas from a plurality of data sources, wherein the source schemas are associated with the data integration solutions in the data integration platforms; generating a unified source schema from the source schemas; querying data based on the unified source schema of an enterprise using an input query in a query language, wherein the data is categorized in the source schemas in accordance with a hierarchical structure of the enterprise, wherein the input query comprises a plurality of sub-goals targeting the data to be identified from the unified source schema; capturing relationships among the data by specifying a constraint and a rule associated with the data in the query language; segmenting the plurality of sub-goals into groups of sub-goals, wherein each group of sub-goals correspond to a data source of the plurality of data sources; creating a plurality of nodes for the plurality of sub-goals and for expressions of the plurality of sub-goals such that each sub-goal and each expression of a sub-goal is individually associated with a node; creating an edge between two nodes of the plurality of nodes when the two nodes share a common variable and belong to a same group of sub-goals; generating sub-queries for the groups of sub-goals such that each sub-query corresponds to a group of sub-goals, wherein before forming the sub-query for a query segment, the sub-query is checked for its existence with an equivalent query segment in a graph data structure and reused to assist in performance optimization when there exists the sub-query with the equivalent query segment; executing the sub-queries on data sources corresponding to the groups of sub-goals; and constructing a data flow graph for building data integration tools based upon the relationships among the data and the execution of the sub-queries, wherein the data flow graph is presented using rich meta models and a set of semantically invariant graph transformation operations are performed on the data flow graph to obtain an optimal execution order on data flow operations, wherein the data flow graph is generated by mapping query forms to corresponding data flow graph operators, and each data flow graph operator include a set of input ports, a set of output ports and a set of associated expressions, wherein the query form represented Q (<head-var-list>) is mapped to the data flow graph operator DFG(Qm(<Qm-var-list>)).",0,,1,B
10606861,2,"2. The method of claim 1 , further comprising integrating the unified source schema and a target schema by creating target queries in the query language corresponding to the sub queries based on the data flow graph in the target schema.",1,claim 1,0,B
10606861,3,"3. The method of claim 1 , further comprising matching specification for instances of entities present in the unified source schema to identify duplicate instances of the entities present in the source schemas, and output matching object pairs from the instances as tuples.",2,claim 1,0,B
10606861,4,"4. The method of claim 1 , further comprising testing a relationship between two queries on the source schemas.",3,claim 1,0,B
10606861,5,"5. The method of claim 1 , further comprising mapping the unified source schema and the source schemas using the data flow graph.",4,claim 1,0,B
10606861,6,"6. The method of claim 1 , wherein the source schemas are used by at least one of Enterprise Information Integration (EII) tool, or an Extract, Transform and Load (ETL) tool, or a data synchronization tool, or a data migration tool.",5,claim 1,0,B
10606861,7,"7. The method of claim 6 , further comprising composing the data migration tool, the composing comprising: receiving a mapping between the source schemas and the target schema; formulating the input query corresponding to an entity present in the target schema; translating the input query to the target query corresponding to the source schemas; generating the data flow graph for the target query; and executing the data flow graph to migrate the data from the source schemas to the target schema.",6,claim 6,0,B
10606861,8,"8. The method of claim 6 , further comprising composing the Extract, Transform and Load (ETL) tool, the composing comprising: receiving a mapping between a warehouse schema and at least one of: the unified source schema or the source schemas; formulating the input query corresponding to an entity in the warehouse schema; translating the input query to an equivalent query on the source schemas; converting the equivalent query into the data flow graph; and executing the data flow graph to compose the Extract, Transform and Load (ETL) tool.",7,claim 6,0,B
10606861,9,"9. The method of claim 8 , further comprising migrating from the ETL tool to the EII the migrating comprising: converting the warehouse schema into the unified source schema; translating specifications for instances of entities in the ETL tool into a data flow graph; translating the data flow graph into an equivalent query; and converting the equivalent query into a mapping view specification of the unified source schema.",8,claim 8,0,B
10606861,10,"10. The method of claim 6 , further comprising composing the Enterprise Information Integration (EII) tool, the composing comprising: receiving a mapping between the unified source schema and the source schemas; receiving the input query on the unified source schema; translating the input query to the target query on the source schemas; converting the target query to the data flow graph; and executing the data flow graph to compose the Enterprise Information Integration (EII) tool.",9,claim 6,0,B
10606861,11,"11. The method of claim 10 , further comprising migrating from the Enterprise Information Integration (EII) tool to the Extract, Transform and Load (ETL) tool, the migrating comprising: translating the input query of the EII into an equivalent source query; translating the equivalent source query into the data flow graph of the EII; and translating the data flow graph of the EII into a data flow graph of the ETL.",10,claim 10,0,B
10606861,12,"12. The method of claim 6 , further comprising composing the data synchronization tool, the composing comprising: receiving a mapping between the unified source schema and the source schemas; receiving matching specification for instances of entities on the unified source schema; generating an object map to identify the instances of entities matched based on the snatching specification, wherein the object map comprises a tuple to identify the matching of the instances of entities in the source schemas; translating an update statement of an entity in the source schemas into an equivalent update statement on the instances of the entities matched based on the object map; and executing the equivalent update statement to compose the data synchronization tool.",11,claim 6,0,B
10606862,1,"1. A method for data processing in data modeling, wherein the method is implemented by a terminal device, the method comprising: reading, by a processor of the terminal device, original data obtained by a transceiver of the terminal device, wherein the original data comprises a plurality of data columns, and wherein each of the plurality of data columns corresponds to a characteristic; obtaining, by the processor, a preset plurality of data processing category identifiers, wherein each of the preset plurality of data processing category identifiers corresponds to a data transformation function; performing, by the processor according to an obtained data transformation function, data transformation on a corresponding data column of the plurality of data columns to generate a corresponding extended characteristic column; combining, by the processor, each extended characteristic column to generate an extended characteristic set, wherein the extended characteristic set comprises one or more extended characteristic columns obtained after the data transformation and one or more of the plurality of data columns where the data transformation is not performed; determining, by the processor, a correlation coefficient of each characteristic in the extended characteristic set; selecting, by the processor, a characteristic in the extended characteristic set whose correlation coefficient satisfies a specified condition as an important characteristic; and obtaining, by the processor by screening from the extended characteristic set, a data column and outputting the data column by the transceiver, the data column corresponding to the important characteristic that permits data modeling on the data column so as to reduce a calculation time for data processing and increase efficiency of computer resources.",0,,1,B
10606862,2,"2. The method of claim 1 , wherein performing data transformation on the corresponding data column to generate the corresponding extended characteristic column comprises: obtaining, by screening from the preset plurality of data processing category identifiers according to the corresponding data column corresponding to the characteristic, a target data processing category identifier corresponding to the characteristic; performing, according to a data transformation function corresponding to each target data processing category identifier obtained by screening, the data transformation on the corresponding data column corresponding to the characteristic to generate an extended characteristic corresponding to the target data processing category identifier; and setting all the extended characteristics corresponding to target data processing category identifiers as the extended characteristic column of the characteristic.",1,claim 1,0,B
10606862,3,"3. The method of claim 2 , wherein obtaining the target data processing category identifier comprises either: determining a data type of the characteristic according to the corresponding data column corresponding to the characteristic, and obtaining, by screening from the preset plurality of data processing category identifiers, a target data processing category identifier corresponding to the data type, wherein the data type comprises a discrete type and a continuous type; or determining a data defect type of the characteristic according to the corresponding data column corresponding to the characteristic, and obtaining, by screening from the preset plurality of data processing category identifiers, a target data processing category identifier corresponding to the data defect type, wherein the data defect type comprises a missing value and an outlier.",2,claim 2,0,B
10606862,4,"4. The method of claim 1 , wherein combining each of the extended characteristic columns to generate the extended characteristic set comprises: combining extended characteristic columns corresponding to all characteristics in the original data; and performing one-hot encoding on each data column in the combined extended characteristic columns to generate the extended characteristic set.",3,claim 1,0,B
10606862,5,"5. The method of claim 4 , wherein after performing the one-hot encoding on each of the data columns in the combined extended characteristic columns, the method further comprises: performing logic AND operation on any two data columns in the extended characteristic set to obtain a new data column; and adding the new data column to the extended characteristic set.",4,claim 4,0,B
10606862,6,"6. The method of claim 1 , wherein determining the correlation coefficient of each characteristic in the extended characteristic set comprises: obtaining a target regularization coefficient; performing logistic regression training on the extended characteristic set based on the target regularization coefficient to obtain a corresponding target logistic regression function; and determining the correlation coefficient of each characteristic in the extended characteristic set according to the corresponding target logistic regression function.",5,claim 1,0,B
10606862,7,"7. The method of claim 6 , wherein obtaining the target regularization coefficient comprises either: obtaining a preset target regularization coefficient; or obtaining a preset plurality of regularization coefficients, and obtaining the target regularization coefficient by screening from the preset plurality of regularization coefficients based on the extended characteristic set.",6,claim 6,0,B
10606862,8,"8. The method of claim 7 , wherein obtaining the target regularization coefficient by screening from the preset plurality of regularization coefficients comprises either: performing the logistic regression training on the extended characteristic set according to each regularization coefficient in the preset plurality of regularization coefficients to obtain a corresponding logistic regression function, and determining the target regularization coefficient according to the corresponding logistic regression function; or performing a linear support vector machine operation on the extended characteristic set according to each regularization coefficient in the preset plurality of regularization coefficients to obtain a corresponding support vector function, and determining the target regularization coefficient according to the corresponding support vector function.",7,claim 7,0,B
10606862,9,"9. The method of claim 8 , wherein performing the logistic regression training on the extended characteristic set to obtain the corresponding logistic regression function comprises: performing sampling on the extended characteristic set according to a specified ratio to obtain a training set; and performing the logistic regression training on the training set according to each regularization coefficient in the preset plurality of regularization coefficients to obtain the corresponding logistic regression function.",8,claim 8,0,B
10606862,10,"10. The method of claim 8 , wherein determining the target regularization coefficient according to the corresponding logistic regression function comprises: setting data in the extended characteristic set except the training set as a validation set; determining a target characteristic in all characteristics in the validation set; calculating an accuracy coefficient of the corresponding logistic regression function corresponding to each regularization coefficient with respect to the target characteristic in the validation set; obtaining, by screening, a logistic regression function corresponding to a highest accuracy coefficient; and setting a regularization coefficient corresponding to the logistic regression function obtained by screening as the target regularization coefficient.",9,claim 8,0,B
10606862,11,"11. A terminal device for data processing in data modeling, comprising: a transceiver; a processor coupled to the transceiver; and a computer-readable storage medium coupled to the processor and configured to store programming instructions for execution by the processor, wherein the programming instructions cause the processor to be configured to: read original data obtained by the transceiver of the terminal device, wherein the original data comprises a plurality of data columns, wherein each of the plurality of data columns corresponds to a characteristic; obtain a preset plurality of data processing category identifiers, wherein each of the preset plurality of data processing category identifiers corresponds to a data transformation function; perform, according to an obtained data transformation function, data transformation on a corresponding data column of the plurality of data columns to generate a corresponding extended characteristic column; combine each extended characteristic column to generate an extended characteristic set, wherein the extended characteristic set comprises one or more extended characteristic columns obtained after the data transformation and one or more of the plurality of data columns where the data transformation is not performed; determine a correlation coefficient of each characteristic in the extended characteristic set; select a characteristic in the extended characteristic set whose correlation coefficient satisfies a specified condition as an important characteristic; and obtain, by screening from the extended characteristic set, a data column and output the data column via the transceiver, the data column corresponding to the important characteristic that permits data modeling on the data column so as to reduce a calculation time for data processing and increase efficiency of computer resources.",10,,0,B
10606862,12,"12. The terminal device of claim 11 , wherein when performing the data transformation on the corresponding data column corresponding to each characteristic in the original data to generate the corresponding extended characteristic column, the programming instructions further cause the processor to be configured to: obtain, by screening from the preset plurality of data processing category identifiers according to the corresponding data column corresponding to the characteristic, a target data processing category identifier corresponding to the characteristic; perform, according to a data transformation function corresponding to each target data processing category identifier obtained by screening, the data transformation on the corresponding data column corresponding to the characteristic to generate an extended characteristic corresponding to the target data processing category identifier; and set all the extended characteristics corresponding to target data processing category identifiers as the extended characteristic column of the characteristic.",11,claim 11,0,B
10606862,13,"13. The terminal device of claim 12 , wherein when obtaining the target data processing category identifier corresponding to the characteristic, the programming instructions further cause the processor to be configured to either: determine a data type of the characteristic according to the corresponding data column corresponding to the characteristic, and obtain, by screening from the preset plurality of data processing category identifiers, a target data processing category identifier corresponding to the data type, wherein the data type comprises a discrete type and a continuous type; or determine a data defect type of the characteristic according to the corresponding data column corresponding to the characteristic, and obtain, by screening from the preset plurality of data processing category identifiers, a target data processing category identifier corresponding to the data defect type, wherein the data defect type comprises a missing value and an outlier.",12,claim 12,0,B
10606862,14,"14. The terminal device of claim 11 , wherein when combining each of the extended characteristic columns to generate the extended characteristic set, the programming instructions further cause the processor to be configured to: combine extended characteristic columns corresponding to all characteristics in the original data; and perform one-hot encoding on each data column in the combined extended characteristic columns to generate the extended characteristic set.",13,claim 11,0,B
10606862,15,"15. The terminal device of claim 14 , wherein after performing the one-hot encoding on each of the data columns in the combined extended characteristic columns to generate the extended characteristic set, the programming instructions further cause the processor to be configured to: perform logic AND operation on any two data columns in the extended characteristic set to obtain a new data column; and add the new data column to the extended characteristic set.",14,claim 14,0,B
10606862,16,"16. The terminal device of claim 11 , wherein the programming instructions further cause the processor to be configured to: obtain a target regularization coefficient; perform logistic regression training on the extended characteristic set based on the target regularization coefficient to obtain a corresponding target logistic regression function; and determine the correlation coefficient of each characteristic in the extended characteristic set according to the corresponding target logistic regression function.",15,claim 11,0,B
10606862,17,"17. The terminal device of claim 16 , wherein when obtaining the target regularization coefficient, the programming instructions further cause the processor to be configured to either: obtain a preset target regularization coefficient; or obtain a preset plurality of regularization coefficients, and obtain the target regularization coefficient by screening from the preset plurality of regularization coefficients based on the extended characteristic set.",16,claim 16,0,B
10606862,18,"18. The terminal device of claim 16 , wherein when obtaining the target regularization coefficient by screening from the preset plurality of regularization coefficients, the programming instructions further cause the processor to be configured to either: perform the logistic regression training on the extended characteristic set according to each regularization coefficient in the preset plurality of regularization coefficients to obtain a corresponding logistic regression function, and determine the target regularization coefficient according to the corresponding logistic regression function; or perform a linear support vector machine operation on the extended characteristic set according to each regularization coefficient in the preset plurality of regularization coefficients to obtain a corresponding support vector function, and determine the target regularization coefficient according to the corresponding support vector function.",17,claim 16,0,B
10606862,19,"19. The terminal device of claim 18 , wherein when performing the logistic regression training on the extended characteristic set to obtain the corresponding logistic regression function, the programming instructions further cause the processor to be configured to: perform sampling on the extended characteristic set according to a specified ratio to obtain a training set; and perform the logistic regression training on the training set according to each regularization coefficient in the preset plurality of regularization coefficients to obtain the corresponding logistic regression function.",18,claim 18,0,B
10606862,20,"20. The terminal device of claim 19 , wherein when determining the target regularization coefficient according to the corresponding logistic regression function, the programming instructions further cause the processor to be configured to: set data in the extended characteristic set except the training set as a validation set; determine a target characteristic in all characteristics in the validation set; calculate an accuracy coefficient of the corresponding logistic regression function corresponding to each regularization coefficient with respect to the target characteristic in the validation set; obtain, by screening, a logistic regression function corresponding to a highest accuracy coefficient; and set a regularization coefficient corresponding to the logistic regression function obtained by screening as the target regularization coefficient.",19,claim 19,0,B
10606863,1,"1. A method for monotonic transactions in a multi-master database with a plurality of nodes that are loosely coupled, the method comprising: electing, by a processor, a special node from the plurality of nodes based on a consensus protocol; and performing, by the processor, a write transaction protocol including: a client device issuing a write transaction at any one particular node of the plurality of nodes; recording the write transaction locally at the one particular node of the plurality of nodes and asynchronously replicating the write transaction to at least one other node of the plurality of nodes; and waiting for reception of an acknowledgment from at least a write quorum of the plurality of nodes before returning a response to the client device, wherein the write quorum is any set of the plurality of nodes that includes the special node and at least one other node, and after a commit transaction for storing data from the write transaction to the multi-master database, an initiator node of the plurality of nodes waits to receive an acknowledgement for the commit transaction without ever timing out, and waits for replication of a transaction log to the set of nodes of the write quorum before returning a success result notification for the commit transaction for providing data consistency and visibility of the write transaction for the plurality of nodes.",0,,1,B
10606863,2,"2. The method of claim 1 , wherein the write quorum and the read quorum each further includes a number of other nodes of the plurality of that are selected based on a durability requirement.",1,claim 1,0,B
10606863,3,"3. The method of claim 1 , wherein upon determining the client device timed out during waiting for receiving an acknowledgment from the multi-master database, the client device obtains status of the write transaction by issuing at least one read transaction.",2,claim 1,0,B
10606863,4,"4. The method of claim 3 , further comprising: upon determining timeout by the client device of the at least one read transaction, repeating, by the client device, the at least one read transaction.",3,claim 3,0,B
10606863,5,"5. The method of claim 1 , further comprising: performing, by the processor, a read transaction protocol including: issuing read transactions at any one of the plurality of nodes; attempting to return rows that are known to be replicated by at least a read quorum of the plurality of nodes; and for timing-out of the attempting to return rows known to be replicated by at least the read quorum of the plurality of nodes based on the special-node being non-responsive: selecting a new special-node from the plurality of nodes; and repeating attempting to return rows that are known to be replicated by at least the read quorum of the plurality of nodes.",4,claim 1,0,B
10606863,6,"6. The method of claim 5 , further comprising: assigning weights to the plurality of nodes including the special node, wherein a weight assigned to the special-node exceeds weights assigned to remaining nodes of the plurality of nodes, write quorum voting is based on a first sum of voting nodes weights being equal to or greater than a write quorum threshold, and read quorum voting is based on a second sum of voting nodes weights being equal to or greater than a read quorum threshold.",5,claim 5,0,B
10606863,7,"7. The method of claim 5 , wherein the selecting of the new special-node is performed by the processor upon a transaction failure or non-responsiveness of the special node.",6,claim 5,0,B
10606863,8,"8. A computer program product for monotonic transactions in a multi-master database with a plurality of nodes that are loosely coupled, the computer program product comprising a computer readable storage medium having program instructions embodied therewith, the program instructions executable by a processor to cause the processor to: elect, by the processor, a special node from the plurality of nodes based on a consensus protocol; and perform, by the processor, a write transaction protocol including: a client device issuing a write transaction at any one particular node of the plurality of nodes; recording the write transaction locally at the one particular node of the plurality of nodes and asynchronously replicating the write transaction to at least one other node of the plurality of nodes; and waiting for reception of an acknowledgment from at least a write quorum of the plurality of nodes before returning a response to the client device, wherein the write quorum is any set of the plurality of nodes that includes the special node and at least one other node, and after a commit transaction for storing data from the write transaction to the multi-master database, an initiator node of the plurality of nodes waits to receive an acknowledgement for the commit transaction without ever timing out and waits for replication of a transaction log to the set of nodes of the write quorum before returning a success result notification for the commit transaction for providing data consistency and visibility of the write transaction for the plurality of nodes.",7,,0,B
10606863,9,"9. The computer program product of claim 8 , wherein upon determining the client device timed out during waiting for receiving an acknowledgment from the multi-master database, the client device obtains status of the write transaction by issuing at least one read transaction.",8,claim 8,0,B
10606863,10,"10. The computer program product of claim 8 , wherein the write quorum and the read quorum each further includes a number of other nodes of the plurality of nodes that are selected based on a durability requirement.",9,claim 8,0,B
10606863,11,"11. The computer program product of claim 8 , further comprising program instructions executable by the processor to cause the processor to: perform, by the processor, a read transaction protocol including further program instructions executable by the processor to cause the processor to: issue read transactions at any one of the plurality of nodes; attempt to return rows that are known to be replicated by at least a read quorum of the plurality of nodes; and for timing out of the attempting to return rows known to be replicated by at least the read quorum of the plurality of nodes based on the special-node being non-responsive: select a new special-node from the plurality of nodes; and repeat attempting to return rows that are known to be replicated by at least the read quorum of the plurality of nodes.",10,claim 8,0,B
10606863,12,"12. The computer program product of claim 11 , wherein the selecting of the new special-node is performed by the processor upon a transaction failure or non-responsiveness of the special node.",11,claim 11,0,B
10606863,13,"13. The computer program product of claim 11 , further comprising: upon determining timeout of the at least one read transaction, repeating, by the client device, the at least one read transaction.",12,claim 11,0,B
10606863,14,"14. The computer program product of claim 11 , wherein selecting of the new special-node is performed by the processor upon a transaction failure or non-responsiveness of the special node.",13,claim 11,0,B
10606863,15,"15. The computer program product of claim 11 , further comprising program instructions executable by the processor to cause the processor to: assign, by the processor, weights to the plurality of nodes including the special node, wherein a weight assigned to the special-node exceeds weights assigned to remaining nodes of the plurality of nodes, and write quorum voting is based on a first sum of voting nodes weights being equal to or greater than a write quorum threshold, and read quorum voting is based on a second sum of voting nodes weights being equal to or greater than a read quorum threshold.",14,claim 11,0,B
10606863,16,"16. An apparatus comprising: a memory configured to store instructions; and a processor configured to execute the instructions to: elect a special node from a plurality of nodes that are loosely coupled in a multi-master database based on a consensus protocol; and perform a write transaction protocol including: a client device issuing a write transaction at any one particular node of the plurality of nodes; recording the write transaction locally at the one particular node of the plurality of nodes and asynchronously replicating the write transaction to at least one other node of the plurality of nodes; waiting for reception of an acknowledgment from at least a write quorum of the plurality of nodes before returning a response to the client device, wherein the write quorum is any set of the plurality of nodes that includes the special node and at least one other node; and after a commit transaction for storing data from the write transaction to the multi-master database, waiting by an initiator node of the plurality of nodes to receive an acknowledgement for the commit transaction, without ever timing out, and waiting for replication of a transaction log to the set of nodes of the write quorum before returning a success result notification for the commit transaction for providing data consistency and visibility of the write transaction for the plurality of nodes.",15,,0,B
10606863,17,"17. The apparatus of claim 16 , wherein: upon determining the client device timed out during waiting for receiving an acknowledgment from the multi-master database, the client device obtains status of the write transaction by issuing at least one read transaction.",16,claim 16,0,B
10606863,18,"18. The apparatus of claim 17 , wherein: upon determining timeout of the at least one read transaction, repeating, by the client device, the at least one read transaction.",17,claim 17,0,B
10606863,19,"19. The apparatus of claim 16 , wherein the processor is further configured to: perform a read transaction protocol including: issue read transactions at any one of the nodes of the plurality of nodes; attempt to return rows that are known to be replicated by at least a read quorum of the plurality of nodes; and for timing out of the attempting to return rows known to be replicated by at least the read quorum of the plurality of nodes based on the special-node being non-responsive: select a new special-node; and repeat attempting to return rows that are known to be replicated by at least the read quorum of the plurality of nodes.",18,claim 16,0,B
10606863,20,"20. The apparatus of claim 19 , wherein: selection of the new special-node is performed by the processor upon a transaction failure or non-responsiveness of the special node; and the write quorum and the read quorum each further includes a number of other nodes of the plurality of nodes that are selected based on a durability requirement.",19,claim 19,0,B
10606863,21,"21. The apparatus of claim 19 , wherein the processor is further configured to: assign weights to the plurality of nodes including the special node, wherein a weight assigned to the special-node exceeds weights assigned to remaining nodes of the plurality of nodes, and write quorum voting is based on a first sum of voting nodes weights being equal to or greater than a write quorum threshold, and read quorum voting is based on a second sum of voting nodes weights being equal to or greater than a read quorum threshold.",20,claim 19,0,B
10606864,1,"1. A distributed plurality of compute nodes comprising: a first compute node comprising: a first local database comprising a first master instance of a first logical shard of a cryptographic key database, wherein the first master instance includes first cryptographic data of the cryptographic key database; and a first key management module to perform a first database operation on the first local database; a second compute node comprising: a second local database comprising a second master instance of a second logical shard of the cryptographic key database, wherein the second master instance includes second cryptographic data of the cryptographic key database; and a second key management module to perform a second database operation on the second local database; the first compute node further comprising: a first shard property table, wherein the first shard property table includes information associated with content of the first master instance and the second master instance, and wherein when a third database operation is received by the first key management module, the first key management module performs the third database operation on the second local database on the second compute node when a determination is made, using the first shard property table, that the third database operation is associated with the content of the second master instance; and the second compute node further comprising: a second shard property table, wherein the second shard property table includes information associated with content of the first master instance and the second master instance, and wherein when a fourth database operation is received by the second key management module, the second key management module performs the fourth database operation on the first local database on the first compute node when a determination is made, using the second shard property table, that the fourth database operation is associated with the content of the first master instance.",0,,1,B
10606864,2,"2. The distributed plurality of compute nodes of claim 1 , wherein when a fourth database operation is received by the first key management module, the first key management module is configured to execute one or more instructions to: identify cryptographic data associated with the fourth database operation; determine a location of the cryptographic data using the first or second shard property table, wherein the location is the first local database or the second local database; and execute the fourth database operation on the location.",1,claim 1,0,B
10606864,3,"3. The distributed plurality of compute nodes of claim 1 , wherein the first compute node includes a first slave instance of the first logical shard, and wherein the first slave instance replicates the first cryptographic data of the first master instance in an asynchronous manner.",2,claim 1,0,B
10606864,4,"4. The distributed plurality of compute nodes of claim 1 , wherein the second compute node includes a second slave instance of the first logical shard, and wherein the second slave instance replicates the first cryptographic data of the first master instance in a synchronous manner.",3,claim 1,0,B
10606864,5,"5. The distributed plurality of compute nodes of claim 1 , wherein each of the first compute node and the second compute node further includes: an interface to receive a request to configure the cryptographic key database from a remote device; and a configuration module to process the request to configure the cryptographic key database.",4,claim 1,0,B
10606864,6,"6. The distributed plurality of compute nodes of claim 5 , wherein the interface includes at least one or more of a graphical user interface and a command line interface, and wherein the command line interface uses an application programming interface (API).",5,claim 5,0,B
10606864,7,"7. The distributed plurality of compute nodes of claim 5 , wherein the configuration module of the first compute node processes the request when the request is received by the interface of the first compute node, and wherein the configuration module of the first compute node is configured to execute one or more instructions to: send the request to the interface of the second compute node when (1) the request is received by the interface of the first compute node, and (2) the request is associated with content in the second local database, wherein the configuration module of the second compute node processes the request when the request is received by the interface of the second compute node.",6,claim 5,0,B
10606864,8,"8. The distributed plurality of compute nodes of claim 6 , wherein the first and second shard property tables include information associated with master instances of the cryptographic key database, wherein the configuration module of the first compute node updates the first shard property table of the first compute node, and wherein the configuration module of the second compute node updates the second shard property table of the second compute node.",7,claim 6,0,B
10606864,9,"9. The distributed plurality of compute nodes of claim 1 , wherein the first compute node includes a first slave instance of the first logical shard, wherein the second compute node includes a second slave instance of the first logical shard, wherein the second slave instance replicates the first cryptographic data in a synchronous manner, wherein a network partition event interrupts communication between the first compute node and the second compute node, wherein the first slave instance replicates the first cryptographic data of the first master instance in an asynchronous manner before the network partition event, and wherein the first slave instance replicates the first cryptographic data of the first master instance in a synchronous manner after the network partition event.",8,claim 1,0,B
10606864,10,"10. The distributed plurality of compute nodes of claim 9 , wherein the network partition event is at least one or more of a power outage for the second compute node, a communication cable disconnection between the first compute node and the second node, and a planned upgrade or replacement of the second compute node.",9,claim 9,0,B
10606864,11,"11. The distributed plurality of compute nodes of claim 9 , wherein the first shard property table further includes synchronization priority, wherein the synchronization priority indicates an order to promote slave instances from replicating in an asynchronous manner to a synchronous manner, and wherein the first slave instance is changed to replication in a synchronous manner based on the first shard property table.",10,claim 9,0,B
10606864,12,"12. The distributed plurality of compute nodes of claim 1 , further comprising: a load balancer, wherein the load balancer is configured to execute one or more instructions to: receive, from a remote device, a request to perform a fourth database operation, wherein the fourth database operation is associated with the cryptographic key database; and send the request to the first compute node or the second compute node based on a load of the distributed plurality of compute nodes.",11,claim 1,0,B
10606865,1,"1. A system for providing database scale-out, the system comprising: at least one processor; and memory coupled to the at least one processor, the memory comprising computer executable instructions that, when executed by the at least one processor, performs a method comprising: receiving a message regarding a total capacity of a first database; based on the message, determining an amount of data to copy from the first database to a second database, wherein the amount of data to copy corresponds to a first data range of the first database, the first data range corresponding to one or more partitions of the first database; creating a second data range on the second database at a location substantially adjacent to the first data range, wherein the second data range is extended to at least a range of the first data range; designating the second data range as changing; and transferring the first data range to the second database.",0,,0,B
10606865,2,"2. The system of claim 1 , wherein the message includes an indication to move a predetermined amount of data from the first database to the second database.",1,claim 1,0,B
10606865,3,"3. The system of claim 1 , wherein the first data range is associated with a one or more weight attributes, the one or more weight attributes contributing to a current capacity of the first database.",2,claim 1,0,B
10606865,4,"4. The system of claim 1 , wherein the first data range is a range of binary key values associated with a start point and an end point of data in the first database.",3,claim 1,0,B
10606865,5,"5. The system of claim 1 , wherein identifying the first database comprising the first data range includes designating the first data range as read-only.",4,claim 1,0,B
10606865,6,"6. The system of claim 1 , wherein creating the second data range on the second database comprises calling a procedure for creating the second data range and passing an indication that the second data range is changing to the procedure.",5,claim 1,0,B
10606865,7,"7. The system of claim 1 , wherein creating the second data range on the second database initiates a log entry describing action attributes for transferring the one or more first database partitions to the second database.",6,claim 1,0,B
10606865,8,"8. The system of claim 7 , wherein the log entry is usable to restore data on at least one of the first database and the second database.",7,claim 7,0,B
10606865,9,"9. The system of claim 1 , wherein, after transferring the first data range to the second database, the first data range is removed from the first database.",8,claim 1,0,B
10606865,10,"10. The system of claim 1 , wherein transferring the first data range to the second database comprises applying one or more runtime rules to transfer operations.",9,claim 1,0,B
10606865,11,"11. A method for providing database scale-out, the method comprising: receiving a message regarding a total capacity of a first database; based on the message, determining an amount of data to copy from the first database to a second database, wherein the amount of data to copy corresponds to a first data range of the first database, the first data range corresponding to one or more partitions of the first database; creating a second data range on the second database at a location substantially adjacent to the first data range, wherein the second data range is extended to at least a range of the first data range; designating the second data range as changing; and transferring the first data range to the second database.",10,,1,B
10606865,12,"12. The method of claim 11 , wherein the first database comprising the first data range is identified in response to receiving a message indicating the first database is reaching the total capacity.",11,claim 11,0,B
10606865,13,"13. The method of claim 11 , wherein, in response to identifying the first database comprising the first data range, an instantiation of the second database is created.",12,claim 11,0,B
10606865,14,"14. The method of claim 11 , wherein, after transferring the first data range to the second database, the first data range and the second data range are removed.",13,claim 11,0,B
10606865,15,"15. A computer storage device storing computer executable instructions that, when executed, cause a computing system to perform a method for providing database scale-out, the method comprising: receiving a message regarding a total capacity of a first database; based on the message, determining an amount of data to copy from the first database to a second database, wherein the amount of data to copy corresponds to a first data range of the first database, the first data range corresponding to one or more partitions of the first database; creating a second data range on the second database at a location substantially adjacent to the first data range, wherein the second data range is extended to at least a range of the first data range; designating the second data range as changing; and transferring the first data range to the second database.",14,,0,B
10606865,16,"16. The computer storage device of claim 15 , wherein the message includes an indication to move a predetermined amount of data from the first database to the second database.",15,claim 15,0,B
10606865,17,"17. The system of claim 15 , wherein creating the second data range on the second database initiates a log entry describing action attributes for transferring the one or more first database partitions to the second database.",16,claim 15,0,B
10606865,18,"18. The system of claim 15 , wherein the amount of data to copy from the first database is predetermined by the computing system.",17,claim 15,0,B
10606865,19,"19. The system of claim 15 , wherein the message is received in response to a request to add a set of data to the first database.",18,claim 15,0,B
10606865,20,"20. The system of claim 15 , wherein the first database is associated with a first weight attribute and the first data range is associated with a second weight attribute, the second weight attribute contributing to the first weight attribute.",19,claim 15,0,B
10606866,1,"1. A system comprising: one or more processors; and memory storing instructions that, when executed by the one or more processors, cause the system to perform: accessing network activity information, the network activity information describing for an individual: respective relationships with one or more persons; and respective activity status information of the one or more persons, the respective activity status information indicating whether a given person has engaged in a particular activity; generating a network activity graph based on the network activity information, the network activity graph including two or more nodes representing the individual and the one or more persons, and connections between the two or more nodes representing the respective relationships between the individual and the one or more persons; providing data corresponding to the network activity graph to be presented through an interface; determining a density metric for the individual based on the connections of the network activity graph between the two or more nodes representing the respective relationships between the individual and the one or more persons, wherein the density metric for the individual is determined based on a number of relationship loops formed by the respective relationships of the individual with the one or more persons and one or more sizes of the relationship loops; determining an association metric for the individual based on the respective activity status information of the one or more persons; and providing information describing the individual for investigation to be presented through the interface based on a combination of the density metric and the association metric.",0,,1,B
10606866,2,"2. The system of claim 1 , wherein the respective relationships of the individual with the one or more persons include a linking entity that connects the individual to at least one of the one or more persons.",1,claim 1,0,B
10606866,3,"3. The system of claim 1 , wherein the association metric for the individual is determined based on a propagation function.",2,claim 1,0,B
10606866,4,"4. The system of claim 1 , wherein the association metric for the individual is determined further based on one or more weights associated with the one or more persons, one or more weights associated with the respective relationships between the individual and the one or more persons, or one or more weights associated with the one or more persons and the respective relationships between the individual and the one or more persons.",3,claim 1,0,B
10606866,5,"5. The system of claim 4 , wherein the instructions further cause the system to perform: assigning or changing at least one of the one or more weights associated with the one or more persons, at least one of the one or more weights associated with the respective relationships between the individual and the one or more persons, or at least one of the one or more weights associated with the one or more persons and the respective relationships between the individual and the one or more persons.",4,claim 4,0,B
10606866,6,"6. The system of claim 1 , wherein the instructions further cause the system to perform: changing an update rule by which the association metric is updated.",5,claim 1,0,B
10606866,7,"7. The system of claim 1 , wherein the instructions further cause the system to perform presenting a build-up user interface, the build-up user interface enabling a user to: view a list of entities added to an investigation; view a list of related entities; and add one or more of the related entities to the investigation.",6,claim 1,0,B
10606866,8,"8. A method implemented by a computing system including one or more processors and storage media storing machine-readable instructions, wherein the method is performed using the one or more processors, the method comprising: accessing network activity information, the network activity information describing for an individual: respective relationships with one or more persons; and respective activity status information of the one or more persons, the respective activity status information indicating whether a given person has engaged in a particular activity; generating a network activity graph based on the network activity information, the network activity graph including two or more nodes representing the individual and the one or more persons, and connections between the two or more nodes representing the respective relationships between the individual and the one or more persons; providing data corresponding to the network activity graph to be presented through an interface; determining a density metric for the individual based on the connections of the network activity graph between the two or more nodes representing the respective relationships between the individual and the one or more persons, wherein the density metric for the individual is determined based on a number of relationship loops formed by the respective relationships of the individual with the one or more persons and one or more sizes of the relationship loops; determining an association metric for the individual based on the respective activity status information of the one or more persons; and providing information describing the individual for investigation to be presented through the interface based on a combination of the density metric and the association metric.",7,,0,B
10606866,9,"9. The method of claim 8 , wherein the respective relationships of the individual with the one or more persons include a linking entity that connects the individual to at least one of the one or more persons.",8,claim 8,0,B
10606866,10,"10. The method of claim 8 , wherein the association metric for the individual is determined based on a propagation function.",9,claim 8,0,B
10606866,11,"11. The method of claim 8 , wherein the association metric for the individual is determined further based on one or more weights associated with the one or more persons, one or more weights associated with the respective relationships between the individual and the one or more persons, or one or more weights associated with the one or more persons and the respective relationships between the individual and the one or more persons.",10,claim 8,0,B
10606866,12,"12. The method of claim 11 , further comprising assigning or changing at least one of the one or more weights associated with the one or more persons, at least one of the one or more weights associated with the respective relationships between the individual and the one or more persons, or at least one of the one or more weights associated with the one or more persons and the respective relationships between the individual and the one or more persons.",11,claim 11,0,B
10606866,13,"13. The method of claim 8 , further comprising changing an update rule by which the association metric is updated.",12,claim 8,0,B
10606866,14,"14. The method of claim 8 , further comprising presenting a build-up user interface, the build-up user interface enabling a user to: view a list of entities added to an investigation; view a list of related entities; and add one or more of the related entities to the investigation.",13,claim 8,0,B
10606866,15,"15. A non-transitory computer readable medium comprising instructions that, when executed, cause one or more processors to perform: accessing network activity information, the network activity information describing for an individual: respective relationships with one or more persons; and respective activity status information of the one or more persons, the respective activity status information indicating whether a given person has engaged in a particular activity; generating a network activity graph based on the network activity information, the network activity graph including two or more nodes representing the individual and the one or more persons, and connections between the two or more nodes representing the respective relationships between the individual and the one or more persons; providing data corresponding to the network activity graph to be presented through an interface; determining a density metric for the individual based on the connections of the network activity graph between the two or more nodes representing the respective relationships between the individual and the one or more persons, wherein the density metric for the individual is determined based on a number of relationship loops formed by the respective relationships of the individual with the one or more persons and one or more sizes of the relationship lops; determining an association metric for the individual based on the respective activity status information of the one or more persons; and providing information describing the individual for investigation to be presented through the interface based on a combination of the density metric and the association metric.",14,,0,B
10606867,1,"1. A data mining method, wherein the method is applied to a distributed system, wherein the distributed system comprises at least one node, and wherein the method comprises: determining multiple execution steps of a data mining process; acquiring a correspondence between a physical resource required by each execution step in a running process and a physical resource occupied by input data of the data mining process; determining a node for executing each execution step, wherein the node provides a physical resource for each execution step; determining, according to the correspondence and a physical resource possessed by a node for executing a corresponding execution step, a maximum amount of data of input data that is capable of being processed by the node for executing each execution step; determining, according to the maximum amount of data of the input data that is capable of being processed by the node for executing each execution step, a maximum amount of data of input data that is capable of being processed by the distributed system; and processing to-be-mined data in accordance with the data mining process according to the maximum amount of data of the input data that is capable of being processed by the distributed system, wherein when the execution step is an optimized execution step, and a physical resource occupied by process data generated in the optimized execution step is larger than a physical resource occupied by at least one of input data or output data of the optimized execution step, acquiring the correspondence comprises: determining two larger ratios in three ratios, wherein the three ratios comprise the physical resource occupied by the process data, the physical resource occupied by the input data of the optimized execution step, and the physical resource occupied by the output data of the optimized execution step respectively to the physical resource occupied by the input data of the data mining process; and performing summation calculation to obtain a ratio parameter of a physical resource required by the optimized execution step in the running process to the physical resource occupied by the input data of the data mining process.",0,,1,B
10606867,2,"2. The method according to claim 1 , wherein determining the multiple execution steps of the data mining process comprises: acquiring the multiple execution steps for executing the data mining process; analyzing process data generated in the multiple execution steps; and combining an execution step in which the process data is generated with the execution step in which the process data is used as input data into an optimized execution step when there is one execution step in which the process data is used as the input data, and wherein the input data of the determined execution step does not comprise other process data except the process data.",1,claim 1,0,B
10606867,3,"3. The method according to claim 1 , wherein determining the multiple execution steps of the data mining process further comprises: acquiring the multiple execution steps for executing the data mining process; analyzing the process data generated in the multiple execution steps; and combining the two or more than two execution steps when a single sample is processed each time in the two or more than two consecutive execution steps.",2,claim 1,0,B
10606867,4,"4. The method according to claim 1 , wherein when the correspondence is represented as a ratio parameter, acquiring the correspondence comprises determining, for each execution step of the multiple execution steps, a ratio of all physical resources occupied by input data and output data of the execution step to the physical resource occupied by the input data of the data mining process when the execution step is running.",3,claim 1,0,B
10606867,5,"5. The method according to claim 1 , wherein determining the maximum amount of the data of the input data that is capable of being processed by the distributed system comprises: screening one or more maximum amounts of data of input data allowed by each node; and setting a minimum value of the one or more maximum amounts of data as the maximum amount of data of the input data that is capable of being processed by the distributed system running the data mining process.",4,claim 1,0,B
10606867,6,"6. The method according to claim 1 , wherein processing the to-be-mined data in accordance with the data mining process according to the maximum amount of data further comprises: determining, according to the maximum amount of data, a maximum quantity K of data columns selected from the to-be-mined data, wherein K is an integer; and selecting K data columns from the to-be-mined data, wherein the K data columns comprise K?1 feature columns and one target column.",5,claim 1,0,B
10606867,7,"7. The method according to claim 6 , wherein selecting the K data columns from the to-be-mined data comprises: performing clustering calculation on feature columns in the to-be-mined data, to obtain P clusters, wherein P is an integer; and screening out K data columns from the P clusters according to a correlation between a feature column and the target column.",6,claim 6,0,B
10606867,8,"8. The method according to claim 7 , wherein a clustering algorithm corresponding to the clustering calculation comprises a K-Means clustering algorithm.",7,claim 7,0,B
10606867,9,"9. The method according to claim 7 , wherein a clustering algorithm corresponding to the clustering calculation comprises a hierarchical clustering algorithm.",8,claim 7,0,B
10606867,10,"10. The method according to claim 7 , wherein a clustering algorithm corresponding to the clustering calculation comprises a density clustering algorithm.",9,claim 7,0,B
10606867,11,"11. The method according to claim 1 , wherein the physical resource comprises a memory resource.",10,claim 1,0,B
10606867,12,"12. The method according to claim 1 , wherein the physical resource comprises at least one of a hard disk resource or a processor core resource.",11,claim 1,0,B
10606867,13,"13. A data mining apparatus, wherein the apparatus is applied to a distributed system, wherein the distributed system comprises at least one node, and wherein the apparatus comprises: a transceiver configured to: receive an original data set; and send to-be-processed input data obtained through extraction to each node for processing: a memory coupled to the transceiver and configured to store the original data set; and a processor coupled to the transceiver and memory, wherein the processor is configured to: determine multiple execution steps of a data mining process; acquire a correspondence between a physical resource required by each execution step in a running process and a physical resource occupied by input data of the data mining process; determine a node for executing each execution step, wherein the node provides a physical resource for each execution step; determine, according to the correspondence and a physical resource possessed by a node for executing a corresponding execution step, a maximum amount of data of the input data that is capable of being processed by the node for executing each execution step; determine, according to the maximum amount of data of the input data that is capable of being processed by the node for executing each execution step, a maximum amount of data of input data that is capable of being processed by the distributed system; and process to-be-mined data in accordance with the data mining process according to the maximum amount of data of the input data that is capable of being processed by the distributed system, wherein when the execution step is an optimized execution step, and a physical resource occupied by temporary data generated in the optimized execution step is larger than a physical resource occupied by at least one of input or output data of the optimized execution step, the processor is further configured to perform summation calculation according to two larger ratios in three ratios, wherein the three ratios comprise the physical resource occupied by the temporary data, the physical resource occupied by the input data of the optimized execution step, and the physical resource occupied by the output data of the optimized execution step respectively to the physical resource occupied by the input data of the data mining process, to obtain a ratio parameter of a physical resource required by the optimized execution step in a running process to the physical resource occupied by the input data of the data mining process.",12,,0,B
10606867,14,"14. The apparatus according to claim 13 , wherein the processor is further configured to: acquire the multiple execution steps for executing the data mining process; analyze process data generated in the multiple execution steps; and combine an execution step in which the process data is generated with the execution step in which the process data is used as input data into an optimized execution step when there is one execution step in which the process data is used as the input data, and wherein the input data of the determined execution step does not comprise other process data except the process data.",13,claim 13,0,B
10606867,15,"15. The apparatus according to claim 13 , wherein when the correspondence is represented as a ratio parameter, the processor is further configured to determine, for each execution step of the multiple execution steps, a ratio of all physical resources occupied by input data and output data of the execution step to the physical resource occupied by the input data of the data mining process when the execution step is running.",14,claim 13,0,B
10606867,16,"16. The apparatus according to claim 13 , wherein the processor is further configured to: screen one or more maximum amounts of data of input data allowed by each node; and set a minimum value of the one or more maximum amounts of data as the maximum amount of data of the input data that is capable of being processed by the distributed system to run the data mining process.",15,claim 13,0,B
10606867,17,"17. The apparatus according to claim 13 , wherein the processor is further configured to: determine, according to the maximum amount of data, a maximum quantity K of data columns selected from the to-be-mined data, wherein K is an integer; and select K data columns from the to-be-mined data, wherein the K data columns comprise K?1 feature columns and one target column.",16,claim 13,0,B
10606867,18,"18. The apparatus according to claim 17 , wherein the processor is further configured to: perform clustering calculation on feature columns in the to-be-mined data, to obtain P clusters, wherein P is an integer; and screen out the K data columns from the P clusters according to a correlation between a feature column and the target column.",17,claim 17,0,B
10606868,1,"1. An information processing device comprising a server configured to communicate with a plurality of data acquisition units over a network, the server comprising: a requester selection unit configured to select a requester of data concerning a certain location on a spatiotemporal map in which data changes with time from among the plurality of data acquisition units on the basis of at least one of contexts and profiles of the data acquisition units as well as contents of requested data; a data requesting unit configured to request data from the requester; a map generation unit configured to generate the spatiotemporal map using data from the requester; and a condition setting unit configured to set a condition for collecting data, wherein the requester selection unit selects the requester from among the data acquisition units capable of acquiring data that satisfies the set condition.",0,,1,B
10606868,2,"2. The information processing device according to claim 1 , wherein the contexts of the data acquisition units include contexts of users who use the data acquisition units, and the request selection unit estimates likelihoods that the users provide data concerning the certain location on the basis of the contexts of the users, and selects the requester on the basis of an estimated result.",1,claim 1,0,B
10606868,3,"3. The information processing device according to claim 1 , wherein the profiles of the data acquisition units include past track records of providing data of users who use the data acquisition units, and the request selection unit selects the requester on the basis of the past track records of providing data of the users.",2,claim 1,0,B
10606868,4,"4. The information processing device according to claim 1 , further comprising: an event detection unit configured to detect an event in a space corresponding to the spatiotemporal map on the basis of data from a plurality of the data acquisition units, wherein the requester selection unit selects a requester of data concerning a vicinity of a location in which the event has been detected.",3,claim 1,0,B
10606868,5,"5. The information processing device according to claim 1 , wherein the requester selection unit selects a requester of data concerning a vicinity of a location specified by a user who uses the spatiotemporal map.",4,claim 1,0,B
10606868,6,"6. The information processing device according to claim 1 , further comprising: a reward setting unit configured to set a reward for data on the basis of a value of requested data, wherein the data requesting unit notifies the requester of a set reward.",5,claim 1,0,B
10606868,7,"7. The information processing device according to claim 6 , wherein the reward setting unit sets the reward on the basis of an estimated value of the number of accesses to the requested data.",6,claim 6,0,B
10606868,8,"8. An information processing method comprising: a requester selection step of selecting a requester of data concerning a certain location on a spatiotemporal map in which data changes with time from among a plurality of data acquisition units on the basis of at least one of contexts and profiles of the data acquisition units as well as contents of requested data; a data requesting step of requesting data from the requester; a map generation step of generating the spatiotemporal map using data from the requester; and a condition setting step of setting a condition for collecting data, wherein the requester is selected from among the data acquisition units capable of acquiring data that satisfies the set condition.",7,,0,B
10606868,9,"9. A non-transitory computer readable medium comprising a memory storing a program for causing a computer to execute a process, the process comprising: a requester selection step of selecting a requester of data concerning a certain location on a spatiotemporal map in which data changes with time from among a plurality of data acquisition units on the basis of at least one of contexts and profiles of the data acquisition units as well as contents of requested data, wherein the selection is made by the computer and the computer is configured to communicate with the plurality of data acquisition units over a network, a data requesting step of requesting data from the requester by the computer, a map generation step of generating the spatiotemporal map using data from the requester, and a condition setting step of setting a condition for collecting data, wherein the requester is selected from among the data acquisition units capable of acquiring data that satisfies the set condition.",8,,0,B
10606869,1,"1. A computer-implemented method for event matching, the computer-implemented method comprising: acquiring a plurality of documents, wherein each document of the plurality of documents comprises respective metadata that is indicative of an event attribute; identifying a document subset comprising multiple documents of the plurality of documents using the respective metadata for each document of the multiple documents; extracting a first salient text feature from a first document of the multiple documents and a second salient text feature from a second document of the multiple documents; determining, based on a comparison between the first salient text feature and the second salient text feature, an event similarity score for the first document and the second document; and upon determining that the event similarity score satisfies a threshold condition, including the first document and the second document as a pair of documents in a common event document list, wherein the common event document list identifies pairs of documents whose respective event similarity scores satisfy the threshold condition; providing, for display by a presentation module, a representation of the pair of documents for review, wherein the representation of the pair of documents identifies the first salient text feature and the second salient text feature in a manner that highlights a match between the first salient text feature and the second salient text feature; receiving data indicative of feedback about the pair of documents, the feedback comprising a confirmation of the including of the first document and the second document together in the common event document list; and adjusting the threshold condition based on the feedback.",0,,1,B
10606869,2,"2. The computer-implemented method of claim 1 , wherein the event attribute comprises an event time.",1,claim 1,0,B
10606869,3,"3. The computer-implemented method of claim 1 , wherein the event attribute comprises an event location.",2,claim 1,0,B
10606869,4,"4. The computer-implemented method of claim 1 , wherein the event attribute comprises an entity type of an entity associated with the event.",3,claim 1,0,B
10606869,5,"5. The computer-implemented method of claim 1 , wherein identifying the document subset comprises excluding a third document from inclusion in the document subset based on respective metadata for the third document.",4,claim 1,0,B
10606869,6,"6. The computer-implemented method of claim 1 , wherein the first salient text feature comprise a first multi-word term, and wherein the second salient text feature comprise a second multi-word term, and wherein the event similarity score is determined based on the first multi-word term and the second multi-word term.",5,claim 1,0,B
10606869,7,"7. The computer-implemented method of claim 6 , wherein extracting the first salient text feature comprises extracting the first salient text feature using natural language processing.",6,claim 6,0,B
10606869,8,"8. The computer-implemented method of claim 7 , wherein extracting the first salient text feature using natural language processing comprises identifying the first salient text feature as an n-gram.",7,claim 7,0,B
10606869,9,"9. The computer-implemented method of claim 6 , wherein determining the event similarity score comprises: computing a first weight corresponding to the first multi-word term using a rarity measure; computing a second weight corresponding to the second multi-word term using a rarity measure; and determining the event similarity score based on the first weight, the first multi-word term, the second weight, and the second multi-word term.",8,claim 6,0,B
10606869,10,"10. The computer-implemented method of claim 9 , wherein the rarity measure comprises an inverse document frequency.",9,claim 9,0,B
10606869,11,"11. The computer-implemented method of claim 6 , wherein extracting the first multi-word term comprises expanding an acronym using an acronym list.",10,claim 6,0,B
10606869,12,"12. The computer-implemented method of claim 6 , wherein the first salient text feature comprises a first aircraft event, and wherein the second salient text feature comprises a second aircraft event.",11,claim 6,0,B
10606869,13,"13. The computer-implemented method of claim 1 , wherein extracting the first salient text feature comprises extracting a first alphanumerical expression or a first multiword term, wherein extracting the second salient text feature comprises extracting a second alphanumerical expression or a second multiword term.",12,claim 1,0,B
10606869,14,"14. The computer-implemented method of claim 1 , wherein extracting the first salient text feature comprises extracting a first numerical expression using a regular expression, wherein extracting the second salient text feature comprises extracting a second numerical expression using a regular expression, and wherein the event similarity score is determined based on the first numerical expression and the second numerical expression.",13,claim 1,0,B
10606869,15,"15. The computer-implemented method of claim 1 , wherein extracting the first salient text feature comprises extracting a first alphanumerical expression using a regular expression, wherein extracting the second salient text feature comprises extracting a second alphanumerical expression using a regular expression, and wherein the event similarity score is determined based on the first alphanumerical expression and the second alphanumerical expression.",14,claim 1,0,B
10606869,16,"16. The computer-implemented method of claim 15 , wherein the regular expression comprises a number and unit pattern.",15,claim 15,0,B
10606869,17,"17. The computer-implemented method of claim 1 , further comprising extracting a third salient text feature from the first document and a fourth salient text feature from the second document, wherein the event similarity score is further based on a comparison between the third salient text feature and the fourth salient text feature.",16,claim 1,0,B
10606869,18,"18. The computer-implemented method of claim 1 , wherein the respective metadata for the documents of the plurality of documents comprises a structured content field storing information that enables grouping of the documents of the plurality of documents, and wherein identifying the document subset comprises grouping the multiple documents into the document subset based on the information of the structured content field for the multiple documents.",17,claim 1,0,B
10606869,19,"19. The computer-implemented method of claim 16 , further comprising: extracting a third salient text feature from the first document; and determining that the third salient text feature does not match any salient text features extracted from the second document, wherein the representation identifies the third salient text feature as unmatched.",18,claim 16,0,B
10606869,20,"20. A system for event matching, the system comprising: at least one processor; and a memory storing instructions that, when executed by the at least one processor, cause the at least one processor to perform functions comprising: acquiring a plurality of documents, wherein each document of the plurality of documents comprises respective metadata that is indicative of an event attribute, identifying a document subset comprising multiple documents of the plurality of documents using the respective metadata for each document of the multiple documents, extracting a first salient text feature from a first document of the multiple documents and a second salient text feature from a second document of the multiple documents, determining, based on a comparison between the first salient text feature and the second salient text feature, an event similarity score for the first document and the second document; and upon determining that the event similarity score satisfies a threshold condition, including the first document and the second document as a pair of documents in a common event document list, wherein the common event document list identifies pairs of documents whose respective event similarity scores satisfy the threshold condition, providing, for display, a representation of the pair of documents for review, wherein the representation of the pair of documents identifies the first salient text feature and the second salient text feature in a manner that highlights a match between the first salient text feature and the second salient text feature, receiving data indicative of feedback about the pair of documents, the feedback comprising a confirmation of the including of the first document and the second document together in the common event document list, and adjusting the threshold condition based on the feedback.",19,,0,B
10606869,21,"21. A non-transitory computer-readable medium having stored therein instructions that, when executed by at least one processor, cause the at least one processor to perform functions comprising: acquiring a plurality of documents, wherein each document of the plurality of documents comprises respective metadata that is indicative of an event attribute, identifying a document subset comprising multiple documents of the plurality of documents using the respective metadata for each document of the multiple documents, extracting a first salient text feature from a first document of the multiple documents and a second salient text feature from a second document of the multiple documents, determining, based on a comparison between the first salient text feature and the second salient text feature, an event similarity score for the first document and the second document; and upon determining that the event similarity score satisfies a threshold condition, including the first document and the second document as a pair of documents in a common event document list, wherein the common event document list identifies pairs of documents whose respective event similarity scores satisfy the threshold condition, providing, for display, a representation of the pair of documents for review, wherein the representation of the pair of documents identifies the first salient text feature and the second salient text feature in a manner that highlights a match between the first salient text feature and the second salient text feature, receiving data indicative of feedback about the pair of documents, the feedback comprising a confirmation of the including of the first document and the second document together in the common event document list, and adjusting the threshold condition based on the feedback.",20,,0,B
10606870,1,"1. A non-transitory computer readable medium comprising computer executable instructions stored thereon to cause one or more processing units of a processing device to: obtain a first plurality of unencrypted documents, wherein each document in the first plurality of unencrypted documents comprises: a Small Index of tags based, at least in part, on a content of the respective document; and a Large Index of tags based, at least in part, on a predictive analysis of the tags in the Small Index of the respective document; obtain a second encrypted document, wherein the second encrypted document comprises a Small Index of tags based, at least in part, on a content of the second encrypted document; create one or more associations between the second encrypted document and one or more documents of the first plurality of unencrypted documents based, at least in part, on the Small Index of tags of the second encrypted document and the respective Small Index of tags of the one or more of the first plurality of unencrypted documents; and generate a result set of documents in response to a received query, wherein the result set comprises the second encrypted document.",0,,0,B
10606870,2,"2. The non-transitory computer readable medium of claim 1 , wherein the first plurality of unencrypted documents are each owned by a first user.",1,claim 1,0,B
10606870,3,"3. The non-transitory computer readable medium of claim 1 , further comprising instructions to: generate a Large Index of tags for the second encrypted document based, at least in part, on a predictive analysis of the tags in the Small Index of tags of the second encrypted document; and augment the Large Index of tags for the second encrypted document based, at least in part, on the respective Large Index of tags for the one or more associated documents of the first plurality of unencrypted documents.",2,claim 1,0,B
10606870,4,"4. The non-transitory computer readable medium of claim 3 , wherein the instructions to augment the Large Index of tags for the second encrypted document further comprise instructions to: link the Large Index of tags of at least one of the one or more associated documents with the Large Index of tags of the second unencrypted document.",3,claim 3,0,B
10606870,5,"5. The non-transitory computer readable medium of claim 1 , wherein the Small Index of tags for the second encrypted document comprises a user-customized index of tags.",4,claim 1,0,B
10606870,6,"6. The non-transitory computer readable medium of claim 1 , wherein the instructions to create one or more associations between the second encrypted document and one or more documents of the first plurality of unencrypted documents further comprise instructions to use at least one of the following: a Markovian data model; neural networks; deep learning techniques; and semantic language training techniques.",5,claim 1,0,B
10606870,7,"7. The non-transitory computer readable medium of claim 1 , further comprising instructions to: augment the Small Index of tags for the second encrypted document based, at least in part, on the respective Small Index of tags for the one or more associated documents of the first plurality of unencrypted documents.",6,claim 1,0,B
10606870,8,"8. The non-transitory computer readable medium of claim 1 , wherein the processing device does not have the ability to decrypt the second encrypted document.",7,claim 1,0,B
10606870,9,"9. The non-transitory computer readable medium of claim 1 , wherein the instructions to create one or more associations between the second encrypted document and one or more documents of the first plurality of unencrypted documents further comprise instructions to base the created associations, at least in part, on metadata of the second encrypted document and metadata of the one or more documents of the first plurality of unencrypted documents.",8,claim 1,0,B
10606870,10,"10. The non-transitory computer readable medium of claim 1 , further comprising instructions to: obtain an updated version of the second encrypted document, wherein the updated version of the second encrypted document comprises an updated Small Index of tags based, at least in part, on the updated version of the second encrypted document.",9,claim 1,0,B
10606870,11,"11. A system, comprising: a memory; and one or more processing units, communicatively coupled to the memory, wherein the memory stores instructions to configure the one or more processing units to: obtain a first plurality of unencrypted documents, wherein each document in the first plurality of unencrypted documents comprises: a Small Index of tags based, at least in part, on a content of the respective document; and a Large Index of tags based, at least in part, on a predictive analysis of the tags in the Small Index of the respective document; obtain a second encrypted document, wherein the second encrypted document comprises a Small Index of tags based, at least in part, on a content of the second encrypted document; create one or more associations between the second encrypted document and one or more documents of the first plurality of unencrypted documents based, at least in part, on the Small Index of tags of the second encrypted document and the respective Small Index of tags of the one or more of the first plurality of unencrypted documents; and generate a result set of documents in response to a received query, wherein the result set comprises the second encrypted document.",10,,0,B
10606870,12,"12. The system of claim 11 , wherein the first plurality of unencrypted documents are each owned by a first user.",11,claim 11,0,B
10606870,13,"13. The system of claim 11 , wherein the memory stores instructions to further configure the one or more processing units to: generate a Large Index of tags for the second encrypted document based, at least in part, on a predictive analysis of the tags in the Small Index of tags of the second encrypted document; and augment the Large Index of tags for the second encrypted document based, at least in part, on the respective Large Index of tags for the one or more associated documents of the first plurality of unencrypted documents.",12,claim 11,0,B
10606870,14,"14. The system of claim 13 , wherein the instructions to augment the Large Index of tags for the second encrypted document further comprise instructions to: link the Large Index of tags of at least one of the one or more associated documents with the Large Index of tags of the second unencrypted document.",13,claim 13,0,B
10606870,15,"15. The system of claim 11 , wherein the Small Index of tags for the second encrypted document comprises a user-customized index of tags.",14,claim 11,0,B
10606870,16,"16. The system of claim 11 , wherein the instructions to create one or more associations between the second encrypted document and one or more documents of the first plurality of unencrypted documents further comprise instructions to use at least one of the following: a Markovian data model; neural networks; deep learning techniques; and semantic language training techniques.",15,claim 11,0,B
10606870,17,"17. The system of claim 11 , wherein the instructions further comprise instructions to cause the one or more processing units to: augment the Small Index of tags for the second encrypted document based, at least in part, on the respective Small Index of tags for the one or more associated documents of the first plurality of unencrypted documents.",16,claim 11,0,B
10606870,18,"18. The system of claim 11 , wherein the system does not have the ability to decrypt the second encrypted document.",17,claim 11,0,B
10606870,19,"19. The system of claim 11 , wherein the instructions to create one or more associations between the second encrypted document and one or more documents of the first plurality of unencrypted documents further comprise instructions to base the created associations, at least in part, on metadata of the second encrypted document and metadata of the one or more documents of the first plurality of unencrypted documents.",18,claim 11,0,B
10606870,20,"20. The system of claim 11 , wherein the instructions further comprise instructions to cause the one or more processing units to: obtain an updated version of the second encrypted document, wherein the updated version of the second encrypted document comprises an updated Small Index of tags based, at least in part, on the updated version of the second encrypted document.",19,claim 11,0,B
10606870,21,"21. A computer-implemented method, comprising: obtaining a first plurality of unencrypted documents, wherein each document in the first plurality of unencrypted documents comprises: a Small Index of tags based, at least in part, on a content of the respective document; and a Large Index of tags based, at least in part, on a predictive analysis of the tags in the Small Index of the respective document; obtaining a second encrypted document, wherein the second encrypted document comprises a Small Index of tags based, at least in part, on a content of the second encrypted document; creating one or more associations between the second encrypted document and one or more documents of the first plurality of unencrypted documents based, at least in part, on the Small Index of tags of the second encrypted document and the respective Small Index of tags of the one or more of the first plurality of unencrypted documents; and generating a result set of documents in response to a received query, wherein the result set comprises the second encrypted document.",20,,1,B
10606870,22,"22. The method of claim 21 , wherein the first plurality of unencrypted documents are each owned by a first user.",21,claim 21,0,B
10606870,23,"23. The method of claim 21 , further comprising: generating a Large Index of tags for the second encrypted document based, at least in part, on a predictive analysis of the tags in the Small Index of tags of the second encrypted document; and augmenting the Large Index of tags for the second encrypted document based, at least in part, on the respective Large Index of tags for the one or more associated documents of the first plurality of unencrypted documents.",22,claim 21,0,B
10606870,24,"24. The method of claim 23 , wherein augmenting the Large Index of tags for the second encrypted document further comprises linking the Large Index of tags of at least one of the one or more associated documents with the Large Index of tags of the second unencrypted document.",23,claim 23,0,B
10606870,25,"25. The method of claim 21 , further comprising: augmenting the Small Index of tags for the second encrypted document based, at least in part, on the respective Small Index of tags for the one or more associated documents of the first plurality of unencrypted documents.",24,claim 21,0,B
10606871,1,"1. A non-transitory computer readable medium comprising computer executable instructions stored thereon to cause one or more processing units to: obtain a first plurality of messages for a first user, wherein the first plurality of messages comprises: one or more messages in each of a first one or more formats; and one or more messages sent or received via each of a first one or more protocols; and create one or more associations between one or more of the first plurality of messages, wherein creating the one or more associations comprises: performing a predictive semantic analysis on the first plurality of messages, wherein performing the predictive semantic analysis comprises: generating a predictive tag cloud based on at least one word in a first one of the first plurality of messages, wherein the predictive tag cloud comprises a plurality of words predicted to be related to the at least one word; and creating one or more clusters of messages from the first plurality of messages, wherein creating the one or more clusters of messages comprises: associating the first one of the first plurality of messages with at least a second one of the first plurality of messages based, at least in part, on the second one of the first plurality of messages containing at least one word from the generated predictive tag cloud.",0,,1,B
10606871,2,"2. The non-transitory computer readable medium of claim 1 , wherein the instructions further comprise instructions to cause the one or more processing units to receive a query requesting at least one message from the first plurality of messages.",1,claim 1,0,B
10606871,3,"3. The non-transitory computer readable medium of claim 2 , wherein the instructions further comprise instructions to cause the one or more processing units to generate a result set to the query.",2,claim 2,0,B
10606871,4,"4. The non-transitory computer readable medium of claim 3 , wherein the result set comprises the at least one requested message and one or more messages from the first plurality of messages for which associations have been created to the requested message.",3,claim 3,0,B
10606871,5,"5. The non-transitory computer readable medium of claim 1 , wherein the instructions to create one or more associations between one or more of the first plurality of messages further comprise instructions to: perform a semantic analysis on the first plurality of messages; and create one or more additional clusters of messages from the first plurality of messages, based, at least in part, on the semantic analysis performed on the first plurality of messages.",4,claim 1,0,B
10606871,6,"6. The non-transitory computer readable medium of claim 5 , wherein the instructions to perform a semantic analysis on a first plurality of messages further comprise instructions to identify one or more keywords in one or more of the first plurality of messages.",5,claim 5,0,B
10606871,7,"7. The non-transitory computer readable medium of claim 1 , wherein at least one of the one or more associations is between messages sent or received via two or more different protocols from among the first one or more protocols, and wherein at least one of the one or more associations is between messages in two or more different formats from among the first one or more formats.",6,claim 1,0,B
10606871,8,"8. The non-transitory computer readable medium of claim 1 , wherein the instructions to create one or more associations between one or more of the first plurality of messages further comprise instructions to: perform element matching on the first plurality of messages.",7,claim 1,0,B
10606871,9,"9. The non-transitory computer readable medium of claim 8 , wherein the instructions to perform element matching on the first plurality of messages further comprise instructions to: perform element matching on at least one of the following: sender, recipient list, subject, quoted text, and timestamp.",8,claim 8,0,B
10606871,10,"10. The non-transitory computer readable medium of claim 1 , wherein the instructions to create one or more associations between one or more of the first plurality of messages further comprise instructions to: perform state matching on the first plurality of messages.",9,claim 1,0,B
10606871,11,"11. A system, comprising: a memory; and one or more processing units, communicatively coupled to the memory, wherein the memory stores instructions to configure the one or more processing units to: obtain a first plurality of messages for a first user, wherein the first plurality of messages comprises: one or more messages in each of a first one or more formats; and one or more messages sent or received via each of a first one or more protocols; and create one or more associations between one or more of the first plurality of messages, wherein creating the one or more associations comprises: performing a predictive semantic analysis on the first plurality of messages, wherein performing the predictive semantic analysis comprises: generating a predictive tag cloud based on at least one word in a first one of the first plurality of messages, wherein the predictive tag cloud comprises a plurality of words predicted to be related to the at least one word; and creating one or more clusters of messages from the first plurality of messages, wherein creating the one or more clusters of messages comprises: associating the first one of the first plurality of messages with at least a second one of the first plurality of messages based, at least in part, on the second one of the first plurality of messages containing at least one word from the generated predictive tag cloud.",10,,0,B
10606871,12,"12. The system of claim 11 , wherein the instructions further comprise instructions to cause the one or more processing units to receive a query requesting at least one message from the first plurality of messages.",11,claim 11,0,B
10606871,13,"13. The system of claim 12 , wherein the instructions further comprise instructions to cause the one or more processing units to generate a result set to the query.",12,claim 12,0,B
10606871,14,"14. The system of claim 13 , wherein the result set comprises the at least one requested message and one or more messages from the first plurality of messages for which associations have been created to the requested message.",13,claim 13,0,B
10606871,15,"15. The system of claim 11 , wherein the instructions to create one or more associations between one or more of the first plurality of messages further comprise instructions to: perform a semantic analysis on the first plurality of messages; and create one or more additional clusters of messages from the first plurality of messages, based, at least in part, on the semantic analysis performed on the first plurality of messages.",14,claim 11,0,B
10606871,16,"16. The system of claim 15 , wherein the instructions to perform a semantic analysis on a first plurality of messages further comprise instructions to identify one or more keywords in one or more of the first plurality of messages.",15,claim 15,0,B
10606871,17,"17. The system of claim 11 , wherein at least one of the one or more associations is between messages sent or received via two or more different protocols from among the first one or more protocols, and wherein at least one of the one or more associations is between messages in two or more different formats from among the first one or more formats.",16,claim 11,0,B
10606871,18,"18. The system of claim 11 , wherein the instructions to create one or more associations between one or more of the first plurality of messages further comprise instructions to: perform element matching on the first plurality of messages.",17,claim 11,0,B
10606871,19,"19. The system of claim 18 , wherein the instructions to perform element matching on the first plurality of messages further comprise instructions to: perform element matching on at least one of the following: sender, recipient list, subject, quoted text, and timestamp.",18,claim 18,0,B
10606871,20,"20. The system of claim 11 , wherein the instructions to create one or more associations between one or more of the first plurality of messages further comprise instructions to: perform state matching on the first plurality of messages.",19,claim 11,0,B
10606871,21,"21. A computer-implemented method, comprising: obtaining a first plurality of messages for a first user, wherein the first plurality of messages comprises: one or more messages in each of a first one or more formats; and one or more messages sent or received via each of a first one or more protocols; and creating one or more associations between one or more of the first plurality of messages, wherein creating the one or more associations comprises: performing a predictive semantic analysis on the first plurality of messages, wherein performing the predictive semantic analysis comprises: generating a predictive tag cloud based on at least one word in a first one of the first plurality of messages, wherein the predictive tag cloud comprises a plurality of words predicted to be related to the at least one word; and creating one or more clusters of messages from the first plurality of messages, wherein creating the one or more clusters of messages comprises: associating the first one of the first plurality of messages with at least a second one of the first plurality of messages based, at least in part, on the second one of the first plurality of messages containing at least one word from the generated predictive tag cloud.",20,,0,B
10606871,22,"22. The method of claim 21 , further comprising receiving a query requesting at least one message from the first plurality of messages.",21,claim 21,0,B
10606871,23,"23. The method of claim 22 , further comprising generating a result set to the query.",22,claim 22,0,B
10606871,24,"24. The method of claim 23 , wherein the result set comprises the at least one requested message and one or more messages from the first plurality of messages for which associations have been created to the requested message.",23,claim 23,0,B
10606871,25,"25. The method of claim 21 , wherein at least one of the one or more associations is between messages sent or received via two or more different protocols from among the first one or more protocols, and wherein at least one of the one or more associations is between messages in two or more different formats from among the first one or more formats.",24,claim 21,0,B
10606872,1,"1. A method for a graphical user interface to query an item database, the method comprising: receiving, from a user interface, item input comprising an item related query parameter; executing a query based at least on the item related query parameter to retrieve item results; receiving, from the user interface, supplemental input comprising an input time period and a supplemental item related query parameter; retrieving a plurality of supplemental data items based at least on the supplemental item related query parameter; identifying a first subset of the plurality of supplemental data items and a second subset of the plurality of supplemental data items according to the input time period, the first subset corresponding to a first time period, and the second subset corresponding to a second time period; determining a first efficacy indicator for the first subset and a second efficacy indicator for the second subset; determining a ranking based at least on the first efficacy indicator and the second efficacy indicator; generating, according to the ranking, a first visual representation corresponding to the first subset and a second visual representation corresponding to the second subset; wherein the ranking comprises a first rank and a second rank, and wherein generating the first visual representation and the second visual representation further comprises: determining a first color or shading corresponding to at least one of the first rank or the first efficacy indicator; determining a second color or shading corresponding to at least one of the second rank or the second efficacy indicator, the second color or shading different from the first color or shading; assigning the first color or shading to the first visual representation; and assigning the second color or shading to the second visual representation; arranging the first visual representation at least partly separated from the second visual representation; and displaying on a display of the computing system, a user interface indicating the item results, the first visual representation, and the second visual representation, wherein the first visual representation and the second visual representation are further presented with respect to a timeline indicating the first time period and the second time period, wherein the method is performed by a computer hardware processor.",0,,1,B
10606872,2,"2. The method of claim 1 , wherein generating the first visual representation further comprises: retrieving a default height; calculating a first height for the first visual representation, wherein the first height is further based at least on a relationship R, wherein relationship R is defined substantially as: default height*E 1 , where E 1 comprises the first efficacy indicator; and adjusting the first visual representation to the first height.",1,claim 1,0,B
10606872,3,"3. The method of claim 1 , wherein arranging the first visual representation at least partly separated from the second visual representation further comprises: determining that one of the first rank and the second rank is lower; and bringing a respective visual representation to a foreground or background, the one of the first rank and the second rank corresponding to the respective visual representation.",2,claim 1,0,B
10606872,4,"4. The method of claim 1 , wherein the item results comprise a plurality of first data value pairs, and wherein presenting the item results in the user interface further comprises presenting the plurality of first data value pairs as a first graph, the method further comprising: receiving user input comprising a cumulative option selection; calculating a plurality of cumulative data value pairs, wherein calculating the plurality of cumulative data value pairs comprises: calculating a current cumulative value from a previous cumulative value and a current data value from the plurality of first data value pairs; and presenting, in an updated user interface, the plurality of cumulative data value pairs as a cumulative graph.",3,claim 1,0,B
10606872,5,"5. The method of claim 1 , wherein determining the first efficacy indicator for the first subset further comprises: determining a first metric for the first time period and an item; determining a historical metric for another time period different than the first time period and the item; and determining a difference value between the first metric and the historical metric, wherein the first efficacy indicator is based at least in part on the difference value.",4,claim 1,0,B
10606872,6,"6. A system comprising: a non-transitory computer storage medium configured to at least store computer-executable instructions; and one or more computer hardware processors in communication with the non-transitory computer storage medium, the one or more computer hardware processors configured to execute the computer-executable instructions to at least: receive, from a user interface, item input comprising an item related query parameter; retrieve item results based at least on the item related query parameter; receive, from the user interface, supplemental input comprising an input time period and a supplemental item related query parameter; retrieve a plurality of supplemental data items based at least on the supplemental item related query parameter; identify a first subset of the plurality of supplemental data items and a second subset of the plurality of supplemental data items according to the input time period, the first subset corresponding to a first time period, and the second subset corresponding to a second time period; determine a first efficacy indicator for the first subset and a second efficacy indicator for the second subset; determine a ranking based at least on the first efficacy indicator and the second efficacy indicator; generate, according to the ranking, a first visual representation corresponding to the first subset and a second visual representation corresponding to the second subset; wherein the ranking comprises a first rank and a second rank, and wherein generating the first visual representation and the second visual representation further comprises: determining a first color or shading corresponding to at least one of the first rank or the first efficacy indicator; determining a second color or shading corresponding to at least one of the second rank or the second efficacy indicator, the second color or shading different from the first color or shading; assigning the first color or shading to the first visual representation; and assigning the second color or shading to the second visual representation; arrange the first visual representation at least partly separated from the second visual representation; and display on a display of the system, a user interface indicating the item results, the first visual representation, and the second visual representation, wherein the first visual representation the second visual representation are further presented with respect to a timeline indicating the first time period and the second time period.",5,,0,B
10606872,7,"7. The system of claim 6 , wherein generating the first visual representation further comprises: retrieving a default height; calculating a first height for the first visual representation, wherein the first height is further based at least on a relationship R, wherein relationship R is defined substantially as: default height*E 1 , where E 1 comprises the first efficacy indicator; and adjusting the first visual representation to the first height.",6,claim 6,0,B
10606872,8,"8. The system of claim 6 , wherein arranging the first visual representation at least partly separated from the second visual representation further comprises: determining that one of the first rank and the second rank is lower; and bringing a respective visual representation to a foreground or background, the one of the first rank and the second rank corresponding to the respective visual representation.",7,claim 6,0,B
10606872,9,"9. The system of claim 6 , wherein arranging the first visual representation further comprises: retrieving a start date and an end date for the first time period; and aligning the first visual representation on the timeline according to the start date and the end date.",8,claim 6,0,B
10606872,10,"10. The system of claim 6 , wherein the item results comprise a plurality of first data value pairs, and wherein one or more computer hardware processors are further configured to at least: calculate a plurality of cumulative data value pairs, wherein calculating the plurality of cumulative data value pairs comprises: calculate a current cumulative value from a previous cumulative value and a current data value from the plurality of first data value pairs; and present, in an updated user interface, the plurality of cumulative data value pairs as a cumulative graph.",9,claim 6,0,B
10606872,11,"11. The system of claim 6 , wherein presenting, in the user interface, the item results further comprises: presenting the plurality of first data value pairs as a first graph.",10,claim 6,0,B
10606872,12,"12. The system of claim 6 , wherein determining the first efficacy indicator for the first subset further comprises: determining a first metric for the first time period and an item; determining a historical metric for another time period different than the first time period and the item; and determining a difference value between the first metric and the historical metric, wherein the first efficacy indicator is based at least in part on the difference value.",11,claim 6,0,B
10606872,13,"13. A computerized method, performed by a computing system having one or more hardware computer processors and one or more non-transitory computer readable storage device storing software instructions executable by the computing system to perform the computerized method comprising: receiving an input time period and a query parameter; determining a plurality of data items based at least on the query parameter; identifying a first subset of the plurality of data items and a second subset of the plurality of data items according to the input time period, the first subset corresponding to a first time period, and the second subset corresponding to a second time period; determining a first efficacy indicator for the first subset and a second efficacy indicator for the second subset; determining a ranking based at least on the first efficacy indicator and the second efficacy indicator; determining a first color or shading corresponding to at least one of the ranking or the first efficacy indicator; determining a second color or shading corresponding to at least one of the ranking or the second efficacy indicator, the second color or shading different from the first color or shading; generating, according to the ranking, a first visual representation having the first color or shading and corresponding to the first subset, and a second visual representation having the second color or shading and corresponding to the second subset; and displaying on a display of the computing system, a user interface including the first visual representation and the second visual representation, wherein the first visual representation and the second visual representation are further presented with respect to a timeline indicating the first time period and the second time period.",12,,0,B
10606873,1,"1. A method comprising: prior to receiving, from a user device, a search query of one or more keywords searching for a relevant set of publications in a publication corpus, trimming, with one or more processors, candidate publications from a plurality of candidate publications to generate a trimmed plurality of candidate publications, the trimming based on (i) a machine-learned model of keywords to relevant publications; or (ii) historic user behavior comprising purchases, selections, and/or other interactions; receiving the search query; and in response to the search query, accessing, with the one or more processors, the trimmed plurality of candidate publications in the publication corpus.",0,,1,B
10606873,2,"2. The method of claim 1 , wherein the trimming is based on a machine learned model.",1,claim 1,0,B
10606873,3,"3. The method of claim 1 , wherein the trimming is based on historic user behavior data.",2,claim 1,0,B
10606873,4,"4. The method of claim 1 , further comprising: for at least one keyword of a plurality of keywords including publication corpus keywords and potential search keywords, aggregating the plurality of candidate publications in the publication corpus.",3,claim 1,0,B
10606873,5,"5. The method of claim 1 , wherein the search query includes any of user profile data, session context data, and non-textual input that includes at least any of audio input, video input, or image input.",4,claim 1,0,B
10606873,6,"6. The method of claim 1 , further comprising: responsive to receiving the search query, processing the trimmed plurality of candidate publications to search for the publication in the publication corpus.",5,claim 1,0,B
10606873,7,"7. The method of claim 6 , further comprising: responsive to the processing the trimmed plurality of candidate publications, causing display of the relevant set of publications at the user device; and after the causing display, receiving a selection signal originating from the user device, the selection signal indicating a selection from the at least one of the one or more closest matches.",6,claim 6,0,B
10606873,8,"8. A system comprising: one or more processors and executable instructions accessible on a computer-readable medium that, when executed by the one or more processors, configure the one or more processors to at least perform operations comprising: prior to receiving, from a user device, a search query of one or more keywords searching for a relevant set of publications in a publication corpus, trimming candidate publications from a plurality of candidate publications to generate a trimmed plurality of candidate publications, the trimming based on (i) a machine-learned model of keywords to relevant publications; or (ii) historic user behavior comprising purchases, selections, and/or other interactions; receiving the search query; and in response to the search query, accessing the trimmed plurality of candidate publications in the publication corpus.",7,,0,B
10606873,9,"9. The system of claim 8 , wherein the trimming is based on a machine learned model.",8,claim 8,0,B
10606873,10,"10. The system of claim 8 , wherein the trimming is based on historic user behavior data.",9,claim 8,0,B
10606873,11,"11. The system of claim 8 , wherein the operations further comprise: for at least one keyword of a plurality of keywords including publication corpus keywords and potential search keywords, aggregating the plurality of candidate publications in the publication corpus.",10,claim 8,0,B
10606873,12,"12. The system of claim 8 , wherein the search query includes any of user profile data, session context data, and non-textual input that includes at least any of audio input, video input, or image input.",11,claim 8,0,B
10606873,13,"13. The system of claim 8 , wherein the operations further comprise: responsive to receiving the search query, processing the trimmed plurality of candidate publications to search for the publication in the publication corpus.",12,claim 8,0,B
10606873,14,"14. The system of claim 13 , wherein the operations further comprise: responsive to the processing the trimmed plurality of candidate publications, causing display of the relevant set of publications at the user device; and after the causing display, receiving a selection signal originating from the user device, the selection signal indicating a selection from the at least one of the one or more closest matches.",13,claim 13,0,B
10606873,15,"15. A non-transitory machine-readable medium storing instructions that, when executed by one or more processors of a machine, cause the machine to at least perform operations comprising: prior to receiving, from a user device, a search query of one or more keywords searching for a relevant set of publications in a publication corpus, trimming candidate publications from a plurality of candidate publications to generate a trimmed plurality of candidate publications, the trimming based on (i) a machine-learned model of keywords to relevant publications; or (ii) historic user behavior comprising purchases, selections, and/or other interactions; receiving the search query; and in response to the search query, accessing the trimmed plurality of candidate publications in the publication corpus.",14,,0,B
10606873,16,"16. The non-transitory machine-readable medium of claim 15 , wherein the trimming is based on a machine learned model.",15,claim 15,0,B
10606873,17,"17. The non-transitory machine-readable medium of claim 15 , wherein the trimming is based on historic user behavior data.",16,claim 15,0,B
10606873,18,"18. The non-transitory machine-readable medium of claim 15 , wherein the operations further comprise: for at least one keyword of a plurality of keywords including publication corpus keywords and potential search keywords, aggregating the plurality of candidate publications in the publication corpus.",17,claim 15,0,B
10606873,19,"19. The non-transitory machine-readable medium of claim 15 , wherein the search query includes any of user profile data, session context data, and non-textual input that includes at least any of audio input, video input, or image input.",18,claim 15,0,B
10606873,20,"20. The non-transitory machine-readable medium of claim 15 , wherein the operations further comprise: responsive to receiving the search query, processing the trimmed plurality of candidate publications to search for the publication in the publication corpus.",19,claim 15,0,B
10606874,1,"1. A method implemented in a computer infrastructure comprising a combination of hardware and software, the method comprising: generating a ranked result set based on a search query; generating an adjusted ranked result set based on a skill rating of a search user; determining an efficiency of the search by click through selection data which includes a time it takes for the search user to click through the adjusted ranked result set before selecting a result document contained in the adjusted ranked result to generate a modified skill rating of the searcher in view of the amount of documents clicked on by the search user prior to achieving the result document, wherein the more documents clicked on by the search user the less of an increase in the skill rating of the search user; monitoring a review of the adjusted ranked result set by the search user, wherein the monitoring comprises monitoring time spent reviewing the adjusted ranked result set; and storing the modified skill rating of the searcher based on the determined efficiency.",0,,1,B
10606874,2,"2. The method of claim 1 , wherein the monitoring further comprises monitoring at least one of: a number of documents reviewed in the adjusted ranked result set; and a rank of the result document contained in the adjusted ranked result set.",1,claim 1,0,B
10606874,3,"3. The method of claim 2 , further comprising adjusting the skill rating of the search user based on the monitoring.",2,claim 2,0,B
10606874,4,"4. The method of claim 1 , further comprising: providing the result document to a recipient; and receiving feedback associated with the result document from the recipient.",3,claim 1,0,B
10606874,5,"5. The method of claim 4 , further comprising adjusting the skill rating of the search user based on at least one of the monitoring and the feedback.",4,claim 4,0,B
10606874,6,"6. The method of claim 4 , further comprising determining a lack of documentation in a domain or category based on the feedback.",5,claim 4,0,B
10606874,7,"7. The method of claim 1 , wherein the adjusting the ranked result set based on the skill rating of the search user comprises: identifying at least one document that is in both the ranked result set and a similar search performed by another search user having a higher skill rating than the search user; and changing a ranking of the at least one document in the ranked result set based on the identifying.",6,claim 1,0,B
10606874,8,"8. The method of claim 1 , wherein the adjusting the ranked result set based on the skill rating of the search user comprises: identifying at least one document that has been tagged by another search user having a higher skill rating than the search user; and changing a ranking of the at least one document in the ranked result set based on the identifying.",7,claim 1,0,B
10606874,9,"9. The method of claim 8 , wherein the identifying the at least one document comprises determining that the at least one document is contained in a same domain or category as the search query from the search user.",8,claim 8,0,B
10606874,10,"10. The method of claim 1 , further comprising providing a hint or educational information to the search user based on a similar search performed by another search user having a higher skill rating than the search user.",9,claim 1,0,B
10606874,11,"11. The method of claim 10 , wherein the ranked result set includes a ranking having a value that describes a percentage of relevance against 100 percent that a particular document is in the ranked result set.",10,claim 10,0,B
10606874,12,"12. The method of claim 11 , further comprising generating a set of documents from a skill set of the search user.",11,claim 11,0,B
10606874,13,"13. The method of claim 12 , wherein the skill set of the search user is based on the skill rating of the user.",12,claim 12,0,B
10606874,14,"14. The method of claim 13 , further comprising augmenting the skill result set of documents based on a search category derived from input search parameters inputted by the search user into the search query.",13,claim 13,0,B
10606874,15,"15. The method of claim 14 , further comprising accounting an order in which the search user clicked on the documents, thereby increasing a ranking of the clicked on documents for a subsequent similar search query performed by a lower skilled search user.",14,claim 14,0,B
10606874,16,"16. The method of claim 15 , further comprising identifying a language of the search user to employ a linguistic dictionary for adjusting terms within the search query.",15,claim 15,0,B
10606874,17,"17. The method of claim 16 , further comprising: receiving feedback associated with the result document from a recipient which was provided with the result document; adjusting the skill rating of the search user based on the monitoring and the feedback; and determining a lack of documentation in a domain or category based on the feedback.",16,claim 16,0,B
10606874,18,"18. A system implemented in hardware and comprising a computer infrastructure configured to: receive a search query from a search user; enter terms within the search query to alter a preferred document type to employ a tier arrangement to return documents requiring a type of skill from the search user; generate a ranked result set of documents in view of the type of skill by searching a document repository against the search query, wherein the ranked result set includes a ranking having a value that describes a percentage of relevance against 100 percent that a particular document is in the ranked result set; generate an adjusted ranked result set of documents based on a skill rating of the search user; monitor a review of the adjusted ranked result set of documents by the search user, wherein the monitoring comprises monitoring time spent reviewing the adjusted ranked result set; receive a selection of a result document contained in the adjusted ranked result set of documents; determine an efficiency of the search session by comparing a time of the search session to a threshold value; adjust the skill rating of the search user based on the efficiency; and store the adjusted skill rating of the searcher based on the efficiency.",17,,0,B
10606874,19,"19. The system of claim 18 , wherein the computer infrastructure is further operable to determine a lack of documentation in a domain or category based on feedback associated with the result document.",18,claim 18,0,B
10606875,1,"1. A search support apparatus for widening a range of a user's interest, the apparatus comprising: a hardware processor configured to: analyze a clipped document to obtain location information indicating a location of an original document which is an origination from which the clipped document is obtained; acquire an updated document by referring to the location information if the original document has been updated, the updated document being the updated original document; measure a first update frequency of the original document; extract one or more first keywords from the clipped document; weight each keyword extraction algorithm from a plurality of keyword extraction algorithms based at least in part on an update pattern corresponding to a time span of the first update frequency among a high-frequency update pattern, a periodic update pattern, and a no-update pattern; select a keyword extraction algorithm from the plurality of keyword extractions algorithms based on the weight of each keyword extraction algorithm, wherein the keyword extraction algorithm extracts at least one different keyword from the updated document than at least one other keyword extraction algorithm from the plurality of keyword extraction algorithms; extract one or more second keywords from the updated document using a first keyword extraction scheme which is set in accordance with the first update frequency, the first keyword extraction scheme including the keyword extraction algorithm; and a storage which stores the one or more first keywords, the one or more second keywords and the update document each associated with the clipped document.",0,,1,B
10606875,2,"2. The apparatus according to claim 1 , wherein the hardware processor is further configured to: extract a word feature amount of a query document which serves as a search query; and search the storage for a relevant document which is a clipped document having a level of similarity with the word feature amount no less than a threshold; and wherein the apparatus further comprises a display configured to display the query document, the relevant document, and at least one of an updated document associated with the relevant document and the one or more second keywords associated with the relevant document.",1,claim 1,0,B
10606875,3,"3. The apparatus according to claim 1 , wherein the hardware processor is further configured to: analyze the clipped document and the updated document to obtain link information indicating a link to other documents; acquire a link destination document by referring to the link information, the link destination document being a linked-to document; measure a second update frequency of the link destination document; and extract one or more third keywords from the link destination document, using a second keyword extraction scheme in accordance with the second update frequency, the second keyword extraction scheme including a keyword extraction algorithm selected from the plurality of keyword extraction algorithms based on an update pattern corresponding to a time span of the second update frequency among the high-frequency update pattern, the periodic update pattern, and the no-update pattern; and wherein the storage further stores the link destination document and the one or more third keywords each associated with the clipped document.",2,claim 1,0,B
10606875,4,"4. The apparatus according to claim 3 , wherein the hardware processor extracts the one or more third keywords from domains of logical elements and fields related to a layout of the updated document set in accordance with the second update frequency.",3,claim 3,0,B
10606875,5,"5. The apparatus according to claim 1 , wherein the hardware processor is further configured to: extract a word feature amount of a query document which serves as a search query; and search the storage for a relevant document which is a clipped document having a level of similarity with the word feature amount no less than a threshold; and wherein the apparatus further comprises a display configured to display the query document, the relevant document, and at least one of an updated document associated with the relevant document, a link destination document associated with the relevant document, the one or more second keywords associated with the relevant document and the one or more third keywords associated with the relevant document.",4,claim 1,0,B
10606875,6,"6. The apparatus according to claim 1 , wherein the hardware processor extracts the one or more second keywords from domains of logical elements and fields related to a layout of the updated document set in accordance with the first update frequency.",5,claim 1,0,B
10606875,7,"7. A search support method for widening a range of a user's interest, the method comprising: analyzing a clipped document to obtain location information indicating a location of an original document which is an origination from which the clipped document is obtained; acquiring an updated document by referring to the location information if the original document has been updated, the updated document being the updated original document; measuring a first update frequency of the original document; extracting one or more first keywords from the clipped document; weighting each keyword extraction algorithm from a plurality of keyword extraction algorithms based at least in part on an update pattern corresponding to a time span of the first update frequency among a high-frequency update pattern, a periodic update pattern, and a no-update pattern; selecting a keyword extraction algorithm from the plurality of keyword extractions algorithms based on the weight of each keyword extraction algorithm, wherein the keyword extraction algorithm extracts at least one different keyword from the updated document than at least one other keyword extraction algorithm from the plurality of keyword extraction algorithms; extracting one or more second keywords from the updated document using a first keyword extraction scheme which is set in accordance with the first update frequency, the first keyword extraction scheme including the keyword extraction algorithm; and storing, in a storage, the one or more first keywords, the one or more second keywords and the update document each associated with the clipped document.",6,,0,B
10606875,8,"8. The method according to claim 7 , further comprising: extracting a word feature amount of a query document which serves as a search query; searching the storage for a relevant document which is a clipped document having a level of similarity with the word feature amount no less than a threshold; and presenting the query document, the relevant document, and at least one of an updated document associated with the relevant document and the one or more second keywords associated with the relevant document.",7,claim 7,0,B
10606875,9,"9. The method according to claim 7 , further comprising: analyzing the clipped document and the updated document to obtain link information indicating a link to other documents; acquiring a link destination document by referring to the link information, the link destination document being a linked-to document; measuring a second update frequency of the link destination document; extracting one or more third keywords from the link destination document, using a second keyword extraction scheme in accordance with the second update frequency, the second keyword extraction scheme including a keyword extraction algorithm selected from the plurality of keyword extraction algorithms based on an update pattern corresponding to a time span of the second update frequency among the high-frequency update pattern, the periodic update pattern, and the no-update pattern; and storing, in the storage, the link destination document and the one or more third keywords each associated with the clipped document.",8,claim 7,0,B
10606875,10,"10. The method according to claim 9 , wherein the extracting extracts the one or more third keywords from domains of logical elements and fields related to a layout of the updated document set in accordance with the second update frequency.",9,claim 9,0,B
10606875,11,"11. The method according to claim 7 , further comprising: extracting a word feature amount of a query document which serves as a search query; searching the storage for a relevant document which is a clipped document having a level of similarity with the word feature amount no less than a threshold; and presenting the query document, the relevant document, and at least one of an updated document associated with the relevant document, a link destination document associated with the relevant document, the one or more second keywords associated with the relevant document and the one or more third keywords associated with the relevant document.",10,claim 7,0,B
10606875,12,"12. The method according to claim 7 , wherein the extracting extracts the one or more second keywords from domains of logical elements and fields related to a layout of the updated document set in accordance with the first update frequency.",11,claim 7,0,B
10606875,13,"13. A non-transitory computer readable medium including computer executable instructions, wherein the instructions, when executed by a processor, cause the processor to perform a method for widening a range of a user's interest, the method comprising: analyzing a clipped document to obtain location information indicating a location of an original document which is an origination from which the clipped document is obtained; acquiring an updated document by referring to the location information if the original document has been updated, the updated document being the updated original document; measuring a first update frequency of the original document; extracting one or more first keywords from the clipped document; weighting each keyword extraction algorithm from a plurality of keyword extraction algorithms based at least in part on an update pattern corresponding to a time span of the first update frequency among a high-frequency update pattern, a periodic update pattern, and a no-update pattern; selecting a keyword extraction algorithm from the plurality of keyword extractions algorithms based on the weight of each keyword extraction algorithm, wherein the keyword extraction algorithm extracts at least one different keyword from the updated document than at least one other keyword extraction algorithm from the plurality of keyword extraction algorithms; extracting one or more second keywords from the updated document using a first keyword extraction scheme which is set in accordance with the first update frequency, the first keyword extraction scheme including the keyword extraction algorithm; and storing, in a storage, the one or more first keywords, the one or more second keywords and the update document each associated with the clipped document.",12,,0,B
10606875,14,"14. The medium according to claim 13 , further comprising: extracting a word feature amount of a query document which serves as a search query; searching the storage for a relevant document which is a clipped document having a level of similarity with the word feature amount no less than a threshold; and presenting the query document, the relevant document, and at least one of an updated document associated with the relevant document and the one or more second keywords associated with the relevant document.",13,claim 13,0,B
10606875,15,"15. The medium according to claim 13 , further comprising: analyzing the clipped document and the updated document to obtain link information indicating a link to other documents; acquiring a link destination document by referring to the link information, the link destination document being a linked-to document; measuring a second update frequency of the link destination document; extracting one or more third keywords from the link destination document, using a second keyword extraction scheme in accordance with the second update frequency, the second keyword extraction scheme including a keyword extraction algorithm selected from the plurality of keyword extraction algorithms based on an update pattern corresponding to a time span of the second update frequency among the high-frequency update pattern, the periodic update pattern, and the no-update pattern; and storing, in the storage, the link destination document and the one or more third keywords each associated with the clipped document.",14,claim 13,0,B
10606875,16,"16. The medium according to claim 15 , wherein the extracting extracts the one or more third keywords from domains of logical elements and fields related to a layout of the updated document set in accordance with the second update frequency.",15,claim 15,0,B
10606875,17,"17. The medium according to claim 13 , further comprising: extracting a word feature amount of a query document which serves as a search query; searching the storage for a relevant document which is a clipped document having a level of similarity with the word feature amount no less than a threshold; and presenting the query document, the relevant document, and at least one of an updated document associated with the relevant document, a link destination document associated with the relevant document, the one or more second keywords associated with the relevant document and the one or more third keywords associated with the relevant document.",16,claim 13,0,B
10606875,18,"18. The medium according to claim 13 , wherein the extracting extracts the one or more second keywords from domains of logical elements and fields related to a layout of the updated document set in accordance with the first update frequency.",17,claim 13,0,B
10606876,1,"1. A system for topic recommendation, comprising: a processing resource; and a non-transitory computer readable medium storing instructions executable by the processing resource to receive topic information relating to a number of events; perform a text analysis on the received topic information to generate a database of text analysis information; index the text analysis information based on the text analysis; compare a search term to the indexed topic information; responsive to the compare, display a number of topics on a display of a mobile device, wherein the number of topics are displayed in a size that corresponds to a quantity of topic information associated with each of the number of topics; and responsive to a user selecting text, arrange a schedule of the events that most closely relate to the topic corresponding to the selected text; and alter a text size of each of the topics based on a relative quantity of terms within the text analysis information that are related to the search term.",0,,1,B
10606876,2,"2. The system of claim 1 , wherein the instructions are executable by the processing resource to display the number of topics as a text cloud on a single display window of the mobile device.",1,claim 1,0,B
10606876,3,"3. The system of claim 1 , wherein each of the number of topics includes a link to a corresponding portion of events that relate to a corresponding topic.",2,claim 1,0,B
10606876,4,"4. The system of claim 1 , wherein the instructions are executable by the processing resource to recommend a portion of events from the number of events that include a relatively high quantity of topic information relating to each corresponding topic.",3,claim 1,0,B
10606876,5,"5. The system of claim 1 , wherein the number of events include presentations that include topic information relating to the topic information.",4,claim 1,0,B
10606876,6,"6. The system of claim 1 , wherein the topic information includes at least one of: an abstract of a presentation; an overview of a presentation; an article of a presentation; and a title of a presentation.",5,claim 1,0,B
10606876,7,"7. A non-transitory computer readable medium storing instructions executable by a processing resource to: receive information relating to a number of presentations that include a plurality of topics; perform text analysis on the plurality of topics to generate a database of text analysis information relating to the plurality of topics; receive a search term; compare the search term to the text analysis information; responsive to the compare, display a portion of topics from the plurality of topics in a text cloud to display on a mobile device, wherein each of the portion of topics comprise a link to a portion of the number of presentations that relate to a corresponding topic; responsive to a user selecting text in the displayed text cloud, arrange a schedule of the presentations that most closely relate to the topic corresponding to the selected text; and alter a text size of each of the portion of topics in the text cloud based on a quantity of related terms within the text analysis information that are related to the search term.",6,,0,B
10606876,8,"8. The medium of claim 7 , comprising instructions executable to dynamically update the portion of topics from the plurality of topics based on received social media information relating to the portion of topics.",7,claim 7,0,B
10606876,9,"9. The medium of claim 7 , comprising instructions executable to: receive a selection of a presentation from the portion of the number of presentations; display presentation information corresponding to the selected presentation; and display location information corresponding to the selected presentation.",8,claim 7,0,B
10606876,10,"10. A method for topic recommendation, comprising: receiving information relating to an event, wherein the event comprises a plurality of topics to be presented over a period of time; performing a text analysis on the plurality of topics; generating a database of text analysis information relating to the plurality of topics; receiving a search term; comparing the search term to the text analysis information; responsive to the comparing, displaying a portion of topics from the plurality of topics in a text cloud to display on a mobile device; recommending a number of presentations on the portion of topics at the event based on the search term and time the portion of topics are to be presented; and responsive to a user selecting text in the displayed text cloud, arranging a schedule of the presentations that most closely relate to the topic corresponding to the selected text; and alter a text size of each of the portion of topics in the text cloud based on a quantity of related terms within the text analysis information that are related to the search term.",9,,0,B
10606876,11,"11. The method of claim 10 , wherein recommending the number of presentations includes recommending a schedule of events based on the search term.",10,claim 10,0,B
10606876,12,"12. The method of claim 10 , wherein recommending the number of presentations includes recommending events that relate more closely to the search term and can be attended by a user over the period of time.",11,claim 10,0,B
10606876,13,"13. The method of claim 10 , wherein a portion of the plurality of topics are presented at overlapping times during the period of time.",12,claim 10,0,B
10606876,14,"14. The system of claim 1 , wherein the instructions are executable by the processing resource to display each of the number of topics as text with a text size that corresponds to a quantity of topic information relating to each corresponding topic.",13,claim 1,0,B
10606876,15,"15. The medium of claim 7 , comprising instructions executable to display each of the number of topics as text with a text size that corresponds to a quantity of topic information relating to each corresponding topic.",14,claim 7,0,B
10606876,16,"16. The method of claim 10 , further comprising: displaying each of the number of topics as text with a text size that corresponds to a quantity of topic information relating to each corresponding topic.",15,claim 10,0,B
10606878,1,"1. A computer-implemented method of generating data visualizations, the method comprising: accessing a set of clusters, wherein each of the set of clusters includes a portion of a set of electronic documents; displaying, in a user interface, a first representation of a first cluster of the set of clusters, the first representation having a first size indicative of an amount of the portion of the set of electronic documents included in the first cluster; displaying, in the user interface, a second representation of a second cluster of the set of clusters, the second representation having a second size indicative of an amount of the portion of the set of electronic documents included in the second cluster, the second representation displayed a first distance from the first representation, the first distance representative of a similarity between the portion of the set of electronic documents included in the first cluster and the portion of the set of electronic documents included in the second cluster; displaying, in the user interface, a third representation of a third cluster of the set of clusters, the third representation having a third size indicative of an amount of the portion of the set of electronic documents included in the third cluster, the third representation displayed a second distance from the first representation, the second distance representative of a similarity between the portion of the set of electronic documents included in the first cluster and the portion of the set of electronic documents included in the third cluster; accessing an additional cluster that is a sub-cluster of the second cluster; displaying, in the user interface, a fourth representation of the additional cluster within the second representation of the second cluster, the fourth representation having a fourth size indicative of an amount of the portion of the set of electronic documents included in the additional cluster, the fourth representation displayed a fourth distance from the first representation, the fourth distance representative of a similarity between the portion of the set of electronic documents included in the first cluster and the portion of the set of electronic documents included in the additional cluster; displaying, in the user interface, a first line object as a first radial line from the first representation of the first cluster through the second representation of the second cluster and the fourth representation of the additional cluster; and displaying, in the user interface, a second line object as a second radial line from the first representation of the first cluster through the third representation of the third cluster, wherein the second representation and the third representation at least partially surround the first representation.",0,,1,B
10606878,2,"2. The computer-implemented method of claim 1 , wherein displaying the first representation of the first cluster of the set of clusters comprises: displaying the first representation in a center portion of the user interface.",1,claim 1,0,B
10606878,3,"3. The computer-implemented method of claim 2 , further comprising: receiving a selection to replace the first representation of the first cluster with the second representation of the second cluster; determining a similarity between the portion of the set of electronic documents included in the second cluster and the portion of the set of electronic documents included in the third cluster; displaying, in the center portion of the user interface, the second representation of the second cluster; displaying, in the user interface, the first representation of the first cluster, the first representation displayed the first distance from the second representation; and displaying, in the user interface, the third representation of the third cluster, the third representation displayed a third distance from the second representation, the third distance representative of the similarity between the portion of the set of electronic documents included in the second cluster and the portion of the set of electronic documents included in the third cluster.",2,claim 2,0,B
10606878,4,"4. The computer-implemented method of claim 1 , further comprising: analyzing, by a computer processor, the set of electronic documents including: identifying a set of terms that are included in the set of electronic documents, determining a set of groupings of the set of terms based on a set of similarities among the set of terms, and generating the set of clusters corresponding to the set of groupings, each of the set of clusters including the portion of the set of electronic documents according to a respective grouping of the set of groupings.",3,claim 1,0,B
10606878,5,"5. The computer-implemented method of claim 4 , further comprising: displaying, in the user interface for each of the first cluster, the second cluster, and the third cluster, the set of terms included in the grouping for that cluster.",4,claim 4,0,B
10606878,6,"6. The computer-implemented method of claim 1 , further comprising: receiving a display modification selection via the user interface; and modifying, in the user interface according to the display modification selection, display of at least one of the second representation of the second cluster and the third representation of the third cluster.",5,claim 1,0,B
10606878,7,"7. The computer-implemented method of claim 6 , wherein receiving the display modification selection comprises receiving a similarity adjustment with a corresponding similarity metric, and wherein modifying the display comprises: relocating, in the user interface, (i) the second cluster to a modified first distance from the first cluster according to the similarity metric, and (ii) the third cluster to a modified second distance from the first cluster according to the similarity metric.",6,claim 6,0,B
10606878,8,"8. The computer-implemented method of claim 1 , wherein accessing the set of clusters comprises: sending, to a server, a query comprising a set of parameters; and receiving, from the server, data indicative of the set of clusters and reflective of the set of parameters of the query.",7,claim 1,0,B
10606878,9,"9. A system configured to generate data visualizations, comprising: a user interface; a memory configured to store non-transitory computer executable instructions; and a processor interfacing with the user interface and the memory, and configured to execute the non-transitory computer executable instructions to cause the processor to: access a set of clusters, wherein each of the set of clusters includes a portion of a set of electronic documents, cause the user interface to display an indication of a percentage of the set of electronic documents that are clustered, cause the user interface to display a first representation of a first cluster of the set of clusters, the first representation having a first size indicative of an amount of the portion of the set of electronic documents included in the first cluster, cause the user interface to display a second representation of a second cluster of the set of clusters, the second representation having a second size indicative of an amount of the portion of the set of electronic documents included in the second cluster, the second representation displayed a first distance from the first representation, the first distance representative of a similarity between the portion of the set of electronic documents included in the first cluster and the portion of the set of electronic documents included in the second cluster, cause the user interface to display a third representation of a third cluster of the set of clusters, the third representation having a third size indicative of an amount of the portion of the set of electronic documents included in the third cluster, the third representation displayed a second distance from the first representation, the second distance representative of a similarity between the portion of the set of electronic documents included in the first cluster and the portion of the set of electronic documents included in the third cluster, access an additional cluster that is a sub-cluster of the second cluster or the third cluster, cause the user interface to display a fourth representation of the additional cluster within the second representation of the second cluster, the fourth representation having a fourth size indicative of an amount of the portion of the set of electronic documents included in the additional cluster, the fourth representation displayed a fourth distance from the first representation, the fourth distance representative of a similarity between the portion of the set of electronic documents included in the first cluster and the portion of the set of electronic documents included in the additional cluster, cause the user interface to display a first line object as a first radial line from the first representation of the first cluster through the second representation of the second cluster and the fourth representation of the additional cluster, and cause the user interface to display a second line object as a second radial line from the first representation of the first cluster through the third representation of the third cluster, wherein the second representation and the third representation at least partially surround the first representation.",8,,0,B
10606878,10,"10. The system of claim 9 , wherein to cause the user interface to display the first representation of the first cluster of the set of clusters, the processor is configured to: cause the user interface to display the first representation in a center portion of the user interface.",9,claim 9,0,B
10606878,11,"11. The system of claim 10 , wherein the processor is further configured to: receive, via the user interface, a selection to replace the first representation of the first cluster with the second representation of the second cluster, determine a similarity between the portion of the set of electronic documents included in the second cluster and the portion of the set of electronic documents included in the third cluster, cause the user interface to display, in the center portion of the user interface, the second representation of the second cluster, cause the user interface to display the first representation of the first cluster, the first representation displayed the first distance from the second representation, and cause the user interface to display the third representation of the third cluster, the third representation displayed a third distance from the second representation, the third distance representative of the similarity between the portion of the set of electronic documents included in the second cluster and the portion of the set of electronic documents included in the third cluster.",10,claim 10,0,B
10606878,12,"12. The system of claim 9 , wherein the processor is further configured to: analyze the set of electronic documents including: identify a set of terms that are included in the set of electronic documents, determine a set of groupings of the set of terms based on a set of similarities among the set of terms, and generate the set of clusters corresponding to the set of groupings, each of the set of clusters including the portion of the set of electronic documents according to a respective grouping of the set of groupings.",11,claim 9,0,B
10606878,13,"13. The system of claim 12 , wherein the processor is further configured to: cause the user interface to display, for each of the first cluster, the second cluster, and the third cluster, the set of terms included in the grouping for that cluster.",12,claim 12,0,B
10606878,14,"14. The system of claim 9 , wherein the processor is further configured to: receive, via the user interface, a display modification selection via the user interface, and cause the user interface to modify, according to the display modification selection, display of at least one of the second representation of the second cluster and the third representation of the third cluster.",13,claim 9,0,B
10606878,15,"15. The system of claim 14 , wherein the display modification selection is a similarity adjustment with a corresponding similarity metric, and wherein to cause the user interface to modify the display, the processor is configured to: cause the user interface to relocate (i) the second cluster to a modified first distance from the first cluster according to the similarity metric, and (ii) the third cluster to a modified second distance from the first cluster according to the similarity metric.",14,claim 14,0,B
10606878,16,"16. The system of claim 9 , wherein to access the set of clusters, the processor is configured to: send, to a server via a transceiver, the query comprising a set of parameters, and receive, from the server via the transceiver, data indicative of the set of clusters and reflective of the set of parameters of the query.",15,claim 9,0,B
10606879,1,"1. A system comprising: one or more processors; a database storing reference fingerprints; and memory including instructions that, when executed, cause the one or more processors to at least: obtain a query fingerprint including a plurality of sub-fingerprints; divide the reference fingerprints into segments, each segment includes a plurality of reference sub-fingerprints; cause a plurality of threads to determine first bit error rates by performing, in parallel, one or more operations including determining one of the first bit error rates by comparing a portion of the plurality of sub-fingerprints of the query fingerprint with a portion of the plurality of reference sub-fingerprints of a segment; identify a first predetermined number of lowest bit error rates based on the first bit error rates, each of the first predetermined number of lowest bit error rates corresponding to one of the reference fingerprints; in response to identifying the first predetermined number of lowest bit error rates based on the first bit error rates, for each of the first predetermined number of lowest bit error rates, determine a second bit error rate by evaluating the query fingerprint against the corresponding one of the reference fingerprints; and provide a predetermined number of response candidates based on the second bit error rate determined for each of the first predetermined number of lowest bit error rates.",0,,1,B
10606879,2,"2. The system of claim 1 , wherein one or more graphics processing units (GPUs) perform the one or more operations.",1,claim 1,0,B
10606879,3,"3. The system of claim 1 , wherein the one or more processors are one or more central processing units (CPUs).",2,claim 1,0,B
10606879,4,"4. The system of claim 1 , wherein the instructions, when executed, cause the one or more processors to: divide each of the segments into a plurality of portions, where each portion includes a plurality of the reference sub-fingerprints; and determine the first bit error rate for each of the plurality of portions.",3,claim 1,0,B
10606879,5,"5. The system of claim 1 , wherein the instructions, when executed, cause the one or more processors to determine the first bit error rates by: sub-sampling the reference fingerprints by a factor of four to determine a subset of the reference sub-fingerprints; and comparing every fourth sub-fingerprint of the query fingerprint with sequential ones of the subset of the reference sub-fingerprints.",4,claim 1,0,B
10606879,6,"6. The system of claim 1 , wherein the instructions, when executed, cause the one or more processors to determine the second bit error rate for each of the first predetermined number of lowest bit error rates by: sub-sampling the reference fingerprints by a factor of thirty-two to determine a subset of the reference sub-fingerprints; and comparing every thirty-second sub-fingerprint of the query fingerprint with sequential ones of the subset of the reference sub-fingerprints.",5,claim 1,0,B
10606879,7,"7. The system of claim 1 , wherein the instructions, when executed, cause the one or more processors to cause each thread of the plurality of threads to store the first predetermined number of lowest bit error rates.",6,claim 1,0,B
10606879,8,"8. The system of claim 1 , wherein the instructions, when executed, cause the one or more processors to cause a first thread of the plurality of threads and a second thread of the plurality of threads to use inter-thread communications to share at least one of the sub-fingerprints of the query fingerprint.",7,claim 1,0,B
10606879,9,"9. The system of claim 1 , wherein the instructions, when executed, cause the one or more processors to: sub-sample the reference fingerprints by a first factor to determine a first set of the reference sub-fingerprints; sub-sample the query fingerprint by the first factor to determine a second set of the sub-fingerprints of the query fingerprint; determine the first predetermined number of lowest bit error rates based on a comparison of the first set and the second set to determine a third set of the reference fingerprints, the third set corresponding to one or more of the reference fingerprints associated with the first predetermined number of lowest bit error rates; sub-sample one or more of the third set by a second factor to determine a fourth set of the reference sub-fingerprints, the second factor greater than the first factor; sub-sample the query fingerprint by the second factor to determine a fifth set of the sub-fingerprints of the query fingerprint; and determine the predetermined number of response candidates based on the comparison of the fourth set and the fifth set.",8,claim 1,0,B
10606879,10,"10. The system of claim 4 , wherein the instructions, when executed, cause the one or more processors to: assign each of the segments to a different server on a network; and cause the different servers to determine the first bit error rate for the segments.",9,claim 4,0,B
10606879,11,"11. A method comprising: obtaining, by one or more processors, a query fingerprint including a plurality of sub-fingerprints; dividing a set of reference fingerprints into segments, each segment includes a plurality of reference sub-fingerprints; causing a plurality of threads to determine first bit error rates by performing, in parallel, one or more operations including determining one of the first bit error rates by comparing a portion of the plurality of sub-fingerprints of the query fingerprint with a portion of the plurality of reference sub-fingerprints of a segment; identifying a first predetermined number of lowest bit error rates based on the first bit error rates, each of the first predetermined number of lowest bit error rates corresponding to one of the set of reference fingerprints; in response to identifying the first predetermined number of lowest bit error rates based on the first bit error rates, for each of the first predetermined number of lowest bit error rates, determining a second bit error rate by evaluating the query fingerprint against the corresponding one of the set of reference fingerprints; and providing a predetermined number of response candidates based on the second bit error rate determined for each of the first predetermined number of lowest bit error rates.",10,,0,B
10606879,12,"12. The method of claim 11 , wherein a plurality of graphics processing units (GPUs) perform the one or more operations.",11,claim 11,0,B
10606879,13,"13. The method of claim 11 , wherein the one or more processors are one or more central processing units (CPUs).",12,claim 11,0,B
10606879,14,"14. The method of claim 11 , further including: dividing each of the segments into a plurality of portions that each include a plurality of the reference sub-fingerprints; and determining the first bit error rate for each of the plurality of portions.",13,claim 11,0,B
10606879,15,"15. The method of claim 11 , wherein determining the first bit error rates includes: sub-sampling the reference fingerprints by a factor of four to determine a subset of the reference sub-fingerprints; and comparing every fourth sub-fingerprint of the query fingerprint with sequential ones of the subset of the reference sub-fingerprints.",14,claim 11,0,B
10606879,16,"16. The method of claim 11 , wherein determining the second bit error rate determined for each of the first predetermined number of lowest bit error rates includes: sub-sampling the reference fingerprints by a factor of thirty-two to determine a subset of the reference sub-fingerprints; and comparing every thirty-second sub-fingerprint of the query fingerprint with sequential ones of the subset of the reference sub-fingerprints.",15,claim 11,0,B
10606879,17,"17. The method of claim 11 , wherein each thread of the plurality of threads stores the first predetermined number of lowest bit error rates.",16,claim 11,0,B
10606879,18,"18. The method of claim 14 , further including: assigning each of the segments to a different server on a network; and cause the different servers to determine the first bit error rate for the segments.",17,claim 14,0,B
10606879,19,"19. A non-transitory machine-readable storage medium comprising instructions that, when executed by one or more processors of a machine, cause the machine to at least: obtain a query fingerprint including a plurality of sub-fingerprints; divide a set of reference fingerprints into segments, each segment including a plurality of reference sub-fingerprints; cause a plurality of threads to determine first bit error rates by performing, in parallel, one or more operations including determining one of the first bit error rates by comparing a portion of the plurality of sub-fingerprints of the query fingerprint with a portion of the plurality of reference sub-fingerprints of a segment; identify a first predetermined number of lowest bit error rates based on the first bit error rates, each of the first predetermined number of lowest bit error rates corresponding to one of the set of reference fingerprints; in response to identifying the first predetermined number of lowest bit error rates based on the first bit error rates, for each of the first predetermined number of lowest bit error rates, determine a second bit error rate by evaluating the query fingerprint against the corresponding one of the set of reference fingerprints; and provide a predetermined number of response candidates based on the second bit error rate determined for each of the first predetermined number of lowest bit error rates.",18,,0,B
10606879,20,"20. The non-transitory machine-readable storage medium of claim 19 , wherein the instructions, when executed by the one or more processors of the machine, cause the machine to: sub-sample the reference fingerprints by a first factor to determine a first set of the reference sub-fingerprints; sub-sample the query fingerprint by the first factor to determine a second set of the sub-fingerprints of the query fingerprint; determine the first predetermined number of lowest bit error rates based on a comparison of the first set and the second set to determine a third set of the reference fingerprints, the third set corresponding to one or more of the reference fingerprints associated with the first predetermined number of lowest bit error rates; sub-sample one or more of the third set by a second factor to determine a fourth set of the reference sub-fingerprints, the second factor greater than the first factor; sub-sample the query fingerprint by the second factor to determine a fifth set of the sub-fingerprints of the query fingerprint; and determine the predetermined number of response candidates based on the comparison of the fourth set and the fifth set.",19,claim 19,0,B
10606880,1,"1. A method of dynamic, user-directed arrangement and delivery of media, comprising: within a computing environment comprised of at least one computer processor, and at least one computer-readable storage medium operably coupled to the at least one computer processor, the at least one computer processor operable to execute a plurality of program instructions to perform the steps of: receiving one or more media files designated by at least one user, or at the direction of the at least one user; identifying one or more variables relative to a display environment of the one or more media files, for dynamically influencing an interactive index for selecting the one or more media files for display of at least one media stream without user interaction the one or more variables including at least one of a social setting, a time, and an audience of the display environment; applying one or more artificial intelligence techniques to adaptively relate the one or more media files in the interactive index by continually updating the interactive index with characteristics learned from relating the one or more variables with the one or more media files, user interactions, user preferences, and inferences obtained from relating the characteristics learned as the interactive index is updated, by 1) developing a set of content rules for framing a content boundary, where the set of content rules determine the selection, arrangement and delivery of the one or more media files, and 2) determining a user affinity for the one or more media files and third party content based on the content boundary, 3) generating the at least one media stream comprised at least of selected media files for delivery to the display environment, 4) identifying changes to the at least one media stream, based on the display environment and on user activity that is not directly related to the at least one media file or the display, 5) dynamically modifying the at least one media stream in real time so that content of the at least one media stream changes in response to the one or more variables, and 6) relating the at least one media stream with one or more of a) a user interaction and a recipient interaction with the at least one media stream, b) additional inferences obtained from the user affinity, c) data obtained from one or more personal computing devices associated with a user or a recipient, and d) audio instructions by the user or recipient, to further dynamically modify the at least one media stream in real time, for direct control by the at least one user as the one or more media files and the third party content are received; and updating one or more linked social media networks designated by credentials assigned by the at least one user with selected ones of the one or more media files and the third party content.",0,,1,B
10606880,2,"2. The method of claim 1 , further comprising relating the at least one media stream with additional content that includes variables representing data and media associated with and obtained from user social media accounts, user contacts, networked sources that include the one or more personal computing devices associated with the at least one user or an account of the at least one user, external servers, and web sources that include one or more of Internet-based services, information media resources, and other networked services.",1,claim 1,0,B
10606880,3,"3. The method of claim 1 , further comprising initiating the delivery of the at least one media stream to the one or more devices designated by the credentials assigned by the user, based on the interactive index and the content boundary.",2,claim 1,0,B
10606880,4,"4. The method of claim 1 , further comprising assigning specific content to at least one specific device in the one or more devices associated with credentials assigned by the at least one user, or to a specific location of a device in the one or more devices associated with credentials assigned by the at least one user.",3,claim 1,0,B
10606880,5,"5. The method of claim 1 , further comprising applying a template to frame an initial content boundary for the at least one media stream.",4,claim 1,0,B
10606880,6,"6. The method of claim 1 , further comprising identifying at least one of a geo-location of the least one user to retrieve the third party content and additional content that is relative to the geo-location of the at least one user, and a geo-location of at least one device associated with credentials assigned by the at least one user to retrieve the third party content and additional content that is relative to the geo-location of the at least one device.",5,claim 1,0,B
10606880,7,"7. The method of claim 1 , further comprising requesting further media files from one or more additional users, and relating the at least one media stream with the further media files.",6,claim 1,0,B
10606880,8,"8. The method of claim 1 , wherein the one or more devices designated by credentials assigned by the at least one user is an internet-enabled display device.",7,claim 1,0,B
10606880,9,"9. The method of claim 8 , wherein the internet-enabled display device is one or more of a television, a computer, a screen, a mobile telephony device, a picture frame, or a networked device configured to receive data over a network.",8,claim 8,0,B
10606880,10,"10. A system of dynamic, user-directed arrangement and delivery of media comprising: a computing environment including at least one non-transitory computer-readable storage medium having program instructions stored therein and at least one computer processor operable to execute the program instructions to execute a plurality of data processing modules, the plurality of data processing modules including: a media import module embodied in at least one processor, specifically configured to receive one or more media files designated by at least one user, or at the direction of the at least one user; a tool configured to identify one or more variables relative to a display environment of the one or more media files, for dynamically influencing an interactive index for selecting the one or more media files for display of at least one media stream without user interaction the one or more variables including at least one of a social setting, a time, and an audience of the display environment; an artificial intelligence module embodied in at least one processor, specifically configured to adaptively relate the one or more media files in the interactive index by continually updating the interactive index with characteristics learned from relating the one or more variables with the one or more media files, user interactions, user preferences, and inferences obtained from relating the characteristics learned as the interactive index is continually updated, by developing a set of content rules for framing a content boundary, where the set of content rules determine the selection, arrangement and delivery of the one or more media files, determining a user affinity for the one or more media files and third party content based on the content boundary, generating the at least one media stream comprised at least of selected media files for delivery to the display environment, identifying changes to the at least one media stream, based on the display environment and on user activity that is not directly related to the at least one media file or the display, dynamically modifying the at least one media stream in real time so that content of the at least one media stream changes in response to the one or more variables, and relating the at least one media stream with one or more of a) a user interaction and a recipient interaction with the at least one media stream, b) additional inferences obtained from the user affinity, c) data obtained from one or more personal computing devices associated with a user or a recipient, and d) audio instructions by the user or recipient, to further dynamically modify the at least one media stream in real time, for direct control by the at least one user as the one or more media files and the third party content are received; and a module embodied in at least one processor, specifically configured to update one or more linked social media networks designated by credentials assigned by the at least one user with selected ones of the one or more media files and the third party content.",9,,0,B
10606880,11,"11. The system of claim 10 , wherein the at least one media stream is related with additional content that includes variables representing data and media associated with and obtained from user social media accounts, user contacts, networked sources that include the one or more personal computing devices associated with the at least one user or an account of the at least one user, external servers, and web sources that include one or more of Internet-based services, information media resources, and other networked services.",10,claim 10,0,B
10606880,12,"12. The system of claim 10 , wherein specific content is assigned to at least one specific device in the one or more devices associated with credentials assigned by the at least one user, or to a specific location of a device in the one or more devices associated with credentials assigned by the at least one user.",11,claim 10,0,B
10606880,13,"13. The system of claim 10 , wherein the artificial intelligence module is further configured to apply a template to frame an initial content boundary for the at least one media stream.",12,claim 10,0,B
10606880,14,"14. The system of claim 10 , wherein the artificial intelligence module is further configured to identify at least one of a geo-location of the least one user to retrieve the third party content and additional content that is relative to the geo-location of the at least one user, and a geo-location of at least one device associated with credentials assigned by the at least one user to retrieve the third party content and additional content that is relative to the geo-location of the at least one device.",13,claim 10,0,B
10606880,15,"15. The system of claim 10 , wherein the artificial intelligence module is further configured to request further media files from one or more additional users, and relating the at least one media stream with the further media files.",14,claim 10,0,B
10606880,16,"16. The system of claim 10 , wherein the one or more devices designated by credentials assigned by the at least one user is an internet-enabled display device.",15,claim 10,0,B
10606880,17,"17. The system of claim 16 , wherein the internet-enabled display device is one or more of a television, a computer, a screen, a mobile telephony device, a picture frame, or a networked device configured to receive data over a network.",16,claim 16,0,B
10606880,18,"18. A method of dynamic, user-directed arrangement and delivery of media, comprising: arranging a plurality of content designated by at least one user, at the direction of the at least one user, or from another user associated with the at least one user, for delivery in at least one media stream, by identifying one or more variables relative to a display environment of the plurality of content, for dynamically influencing an interactive index for selecting one or more media files in the plurality of content for display in the at least one media stream without user interaction the one or more variables including at least one of a social setting, a time, and an audience of the display environment; adaptively relating the one or more media files in the interactive index by continually updating the interactive index with characteristics learned from relating the one or more variables with the one or more media files, user interactions, user preferences, and inferences obtained from relating the characteristics learned as the interactive index is updated, developing a set of content rules for framing a content boundary, where the set of content rules determine the selection, arrangement and delivery of the one or more media files, determining a user affinity for the one or more media files and third party content based on the content boundary, generating the at least one media stream comprised at least of selected media files for delivery to the display environment, identifying changes to the at least one media stream, based on the display environment and user activity that is not directly related to the at least one media file or the display, dynamically modifying the at least one media stream in real time so that content of the at least one media stream changes in response to the one or more variables, and relating the at least one media stream with one or more of a) a user interaction and a recipient interaction with the at least one media stream, b) additional inferences obtained from the user affinity, c) data obtained from one or more personal computing devices associated with a user or a recipient, and d) audio instructions by the user or recipient, to further dynamically modify the at least one media stream in real time, for direct control by the at least one user as the one or more media files and the third party content are received; and updating one or more linked social media networks designated by credentials assigned by the at least one user with selected ones of the one or more media files and the third party content.",17,,0,B
10606880,19,"19. The method of claim 18 , further comprising identifying at least one of a geo-location of the least one user to retrieve the third party content and additional content that is relative to the geo-location of the at least one user, and a geo-location of at least one device associated with credentials assigned by the at least one user to retrieve the third party content and additional content that is relative to the geo-location of the at least one device.",18,claim 18,0,B
10606880,20,"20. The method of claim 18 , further comprising requesting further media files from one or more additional users, and relating the at least one media stream with the further media files.",19,claim 18,0,B
10606881,1,"1. A computer program product performing container sharing and scheduling in an environment having a plurality of content consuming nodes and a bypassable centralized container repository, the computer program product comprising a non-transitory computer readable storage medium having program instructions embodied therewith, the program instructions executable by a computer to cause the computer to perform a method comprising: deploying a container management service system that manages a list of layered images, the list of layered images specifying one or more container attributes for each of the layered images stored at the plurality of content consuming nodes; selecting, by a processor-based scheduler of the container management system based on the list of layered images, a given one of the plurality of content consuming nodes which (i) includes image layers residing in a container and (ii) communicates with one or more candidate nodes that include one or more missing image layers, wherein the one or more candidate nodes are determined from among the plurality of content consuming nodes based on one or more availability criterion; and bypassing, using a cluster membership registry service of the container management service system as an intermediary, wherein the cluster membership registry maintains a list of images downloaded from the plurality of content consumer nodes, the centralized container repository to satisfy a pull request by pulling the one or more missing image layers from the one or more candidate nodes and copying the one or more missing image layers to the given one of the plurality of content consuming nodes, wherein said pulling step comprises the one or more candidate nodes communicating with each other in order to satisfy the pull request.",0,,1,B
10606881,2,"2. The computer program product of claim 1 , wherein the method further comprises updating the list of layered images before launching a new container by any of the plurality of content consuming nodes.",1,claim 1,0,B
10606881,3,"3. The computer program product of claim 1 , wherein the method further comprises updating the list of layered images before performing an image garbage collection cycle on any of the plurality of content consuming nodes.",2,claim 1,0,B
10606881,4,"4. The computer program product of claim 1 , wherein the one or more candidate nodes comprise two candidate nodes, the two candidate nodes comprising a first candidate node and a second candidate node, wherein a given image layer from among the one or more missing image layers is missing from the first candidate node but present at the second candidate node, and wherein said pulling step provides a copy of the given image layer from the second candidate node to both the given one of the plurality of content consuming nodes and the first candidate node by pulling the given image layer through the first candidate node to the given one of the plurality of content consuming nodes and storing the given image layer at the first candidate node and the given one of the plurality of content consuming nodes.",3,claim 1,0,B
10606881,5,"5. The computer program product of claim 1 , wherein the one or more container attributes are selected from the group consisting of an image layer identifier, an image identifier, and a node distance.",4,claim 1,0,B
10606881,6,"6. The computer program product of claim 1 , wherein the one or more availability criterion are selected from the group consisting of CPU availability, communication bandwidth availability, and storage availability.",5,claim 1,0,B
10606881,7,"7. The computer program product of claim 1 , wherein the list of layered images comprises a respective unique identifier for each image layer of the layered images.",6,claim 1,0,B
10606881,8,"8. The computer program product of claim 1 , further comprising launching a new container by the given one of the plurality of content consuming nodes by pulling the layered images for the new container from one or more other ones of the plurality of content consuming nodes.",7,claim 1,0,B
10606881,9,"9. The computer program product of claim 8 , wherein pulling the layered images for the new container comprises bypassing a central repository that also includes copies of the layered images for the new container.",8,claim 8,0,B
10606881,10,"10. The computer program product of claim 1 , wherein the method further comprises registering a downloaded image list of each of the plurality of content consuming nodes with the container management service system.",9,claim 1,0,B
10606881,11,"11. The computer program product of claim 1 , wherein the environment is a cloud environment.",10,claim 1,0,B
10606881,12,"12. The computer program product of claim 1 , wherein software for implementing the method is provided as a service in the cloud environment.",11,claim 1,0,B
10606881,13,"13. The computer program product of claim 1 , wherein the list of images downloaded from the plurality of content consumer nodes further includes container attributes.",12,claim 1,0,B
10606881,14,"14. A system performing container sharing and scheduling in an environment having a plurality of content consuming nodes and a bypassable centralized container repository, the system comprising: a hardware-processor-based container management service system having a hardware-based processor and memory device configured to: manage a list of layered images, the list of layered images specifying one or more container attributes for each of the layered images stored at the plurality of content consuming nodes; select, based on the list of layered images, a given one of the plurality of content consuming nodes which (i) includes image layers residing in a container and (ii) communicates with one or more candidate nodes that include one or more missing image layers, wherein the one or more candidate nodes are determined from among the plurality of content consuming nodes based on one or more availability criterion; and bypass, using a cluster membership registry service of the container management service system as an intermediary, wherein the cluster membership registry maintains a list of images downloaded from the plurality of content consumer nodes, the centralized container repository to satisfy a pull request by pulling the one or more missing image layers from the one or more candidate nodes and copying the one or more missing image layers to the given one of the plurality of content consuming nodes, wherein said pulling comprises the one or more candidate nodes communicating with each other in order to satisfy the pull request.",13,,0,B
10606881,15,"15. The system of claim 14 , wherein the environment is a cloud environment.",14,claim 14,0,B
10606882,1,"1. A method of estimating remaining capacity of cosmetic product, the method comprising: a) using a body information analysis apparatus to receive a cosmetic product configuration operation to configure a plurality of cosmetic product data and configure a remaining capacity for each of the cosmetic product data, wherein each of the cosmetic product data is corresponding to a cosmetic product; b) receiving a habitual input operation to configure a habitual usage frequency and a habitual single usage amount for one of the cosmetic product data; c) configuring a reference consumption amount of the cosmetic product data based on the habitual single usage amount; d) adjusting the remaining capacity for each of the cosmetic product data based on a usage record of the body information analysis apparatus and the reference consumption amount and the habitual usage frequency of the cosmetic product data, wherein the usage record comprises time or counts of the body information analysis apparatus entering a non-standby mode or time or counts of the body information analysis apparatus entering a standby mode; e) sending a reminder message when the remaining capacity of any of the cosmetic product data is less than a safety capacity; f) receiving a verification feedback operation after sending the reminder message, configuring a verification feedback data based on the verification feedback operation, wherein the verification feedback data indicates whether an actual capacity a corresponding cosmetic product is excessively few; g) receiving a capacity feedback operation when the verification feedback data indicates that the actual capacity corresponding to the cosmetic product is excessively few, and configuring capacity feedback data based on the capacity feedback operation, wherein the capacity feedback data indicates the actual capacity of the corresponding cosmetic product; and h) modifying the remaining capacity of the cosmetic product data based on the capacity feedback data for the cosmetic product.",0,,1,B
10606882,2,"2. The method in claim 1 , wherein the step a) further comprises: a1) photo-taking an image of any of the cosmetic product by an image fetching unit of the body information analysis apparatus; a2) searching for the cosmetic product data corresponding to the image in a database; a3) receiving a cosmetic product establish operation to establish new cosmetic product data when search fails; a4) adding the searched cosmetic product data into a cosmetic cabinet dataset of a user; a5) obtaining an initial capacity for the cosmetic product data and configuring the initial capacity as the remaining capacity of the cosmetic product data.",1,claim 1,0,B
10606882,3,"3. The method in claim 2 , wherein the database stores a plurality of sample images corresponding to the cosmetic product data, the image is an appearance image of the cosmetic product, wherein in step a2) the cosmetic product data with sample image matched with the appearance image is searched for.",2,claim 2,0,B
10606882,4,"4. The method in claim 2 , wherein the database stores a plurality of identification data corresponding to the cosmetic product data, the image is a barcode image of the cosmetic product, wherein in step a2) the image is analyzed to obtain an input data, the cosmetic product data with identification data matched with the input data is searched for, wherein the input data is a barcode data for the cosmetic product.",3,claim 2,0,B
10606882,5,"5. The method in claim 1 , wherein the step d) comprises: d1) receiving a content selection operation for selecting one of tutor content data, wherein the tutor content data is corresponding to the combination of various cosmetic product data; d2) playing back a selected tutor content data when the method enters a tutor mode; d3) adjusting the remaining capacity of the cosmetic product data based on a tutor reference consumption amount and a tutor accumulation count for the body information analysis apparatus entering the tutor mode or a tutor accumulation time for the body information analysis apparatus entering the tutor mode, wherein the body information analysis apparatus obtains a suggested consumption amount corresponding to each of the cosmetic product data in the playbacked tutor content data and adjusts the remaining capacity in each of the cosmetic product data in the playbacked tutor content data based on the obtained suggested consumption amount for each of the cosmetic product data; d4) updating a cosmetic accumulation count and starting to counting time when the body information analysis apparatus enters a cosmetic mirror mode; d5) stopping to count time and obtain a single usage time when the body information analysis apparatus exits the cosmetic mirror mode; updating a cosmetic accumulation time based on the single usage time; d6) adjusting the remaining capacity of the cosmetic product data based on a cosmetic reference consumption amount and a cosmetic accumulation count for the body information analysis apparatus entering the cosmetic mirror mode or a cosmetic accumulation time for the body information analysis apparatus entering the cosmetic mirror mode, wherein the cosmetic reference consumption amount is less than the tutor reference consumption amount; d7) adjusting the remaining capacity in each of the cosmetic product data based on a default consumption amount of each cosmetic product data when a continual standby time of the body information analysis apparatus reaches a default standby time.",4,claim 1,0,B
10606882,6,"6. The method in claim 1 , further comprising a step i) after the step g) and before the step h): calculating a capacity error based on the capacity feedback data and the remaining capacity of the cosmetic product data; wherein the step h) the remaining capacity of the cosmetic product is modified based on the capacity feedback data of the cosmetic product, and the reference consumption amount is modified based on the capacity error.",5,claim 1,0,B
10606882,7,"7. A body information analysis apparatus, comprising: a display module configured to display a reminder message; an input module configured to receive a cosmetic product configuration operation and to receive a feedback operation when the reminder message is displayed; a memory module configured to store a plurality of cosmetic product data, a safety capacity, a remaining capacity and a reference consumption amount for each of the cosmetic product data, and configured to store a usage record of the body information analysis apparatus, wherein each of the cosmetic product data is corresponding to a cosmetic product, the usage record comprises time or counts of the body information analysis apparatus entering a non-standby mode or time or counts of the body information analysis apparatus entering a standby mode; and a control module electrically connected to the display module, the input module and the memory module and comprising: a configuring module configured to set up a plurality of cosmetic product data based on the cosmetic product configuration operation and set up the remaining capacity of the cosmetic product data; a reference consumption amount setting module configured to receive a habitual input operation through the input module, to set up a habitual usage frequency and a habitual single usage amount for one of the cosmetic product data based on the habitual input operation, and to set up the reference consumption amount in the cosmetic product data as the habitual single usage amount; an updating module configured to adjust the remaining capacity of the cosmetic product data based on usage record and the reference consumption amount and the habitual usage frequency of each cosmetic product data; a monitoring module configured to send the reminder message through the display module when determining that the remaining capacity of any of the cosmetic product data is less than the safety capacity; and a feedback module comprising: a verification module configured to receives a verification feedback operation through the input module after the reminder message is sent, and to set up a capacity feedback data based on the capacity feedback operation, wherein the verification feedback data indicates whether an actual capacity of a corresponding cosmetic product is excessively few; and a capacity feedback module configured to receive a capacity feedback operation through the input module when the verification feedback data indicates excessively little actual capacity, to set up a capacity feedback data based on the capacity feedback operation, wherein the capacity feedback data indicates the actual capacity of the corresponding cosmetic product; wherein the feedback module modifies the remaining capacity of the cosmetic product data based on the capacity feedback data.",6,,0,B
10606882,8,"8. The body information analysis apparatus in claim 7 , wherein the body information analysis apparatus further comprises an image fetching unit electrically connected to the control module and configured to take an image of any of the cosmetic product, the memory module is further configured to store a cosmetic cabinet dataset comprising cosmetic product data of a plurality of cosmetic products owned by a user, the memory module further comprises a database configured to store a plurality of cosmetic product data corresponding to a plurality of images; the control module further comprising: a searching module configured to search the cosmetic product data corresponding to the image of the photo-taken cosmetic product in the database; and a manual configuration module configured to receive a cosmetic product establish operation through the input module when the searching module fails in searching and sets up a new cosmetic product data based on the cosmetic product establish operation; wherein the configuring module is configured to add the cosmetic product data into the cosmetic cabinet dataset and set an initial capacity of the cosmetic product data as the remaining capacity of the cosmetic product data.",7,claim 7,0,B
10606882,9,"9. The body information analysis apparatus in claim 8 , wherein the database is configured to store a plurality of identification data for the plurality of cosmetic product data, the image fetching unit is configured to take an barcode image for the cosmetic product, the searching module is configured to analyze the barcode image to obtain an input data and search for the cosmetic product data with the identification data matched with the input data, wherein the input data is a barcode data for the cosmetic product.",8,claim 8,0,B
10606882,10,"10. The body information analysis apparatus in claim 7 , wherein the memory module is configured to store a plurality of tutor content data, a tutor reference consumption amount, a suggested consumption amount, a cosmetic reference consumption amount and a default consumption amount for each of the cosmetic product data, a tutor accumulation count or a tutor accumulation time for the body information analysis apparatus entering a tutor mode, a cosmetic accumulation count or a cosmetic accumulation time for the body information analysis apparatus entering a cosmetic mirror mode, and a default standby time, wherein each of the tutor content data is corresponding to corresponding to a combination of various cosmetic product data, wherein the cosmetic reference consumption amount is less than the tutor reference consumption amount; the control module further comprises: a tutor mode execution module configured to receive a content selection operation for one of the plurality of tutor content data through the input module and playback a selected tutor content data by the display module after the body information analysis apparatus enters tutor mode; the tutor mode execution module configured to adjust the remaining capacity in each of the cosmetic product data based on the tutor accumulation count or the tutor accumulation time with the tutor reference consumption amount for each cosmetic product data, wherein the tutor mode execution module is configured to adjust the remaining capacity in each of the cosmetic product data based on the suggested consumption amount in the cosmetic product data of playbacked tutor content data; a cosmetic mirror mode execution module configured to update the cosmetic accumulation count and then start time counting after the body information analysis apparatus enters cosmetic mirror mode, configured to stop time counting when the body information analysis apparatus exits cosmetic mirror mode and then obtain a single usage time, the cosmetic mirror mode execution module configured to update the cosmetic accumulation time based on the single usage time, the cosmetic mirror mode execution module configured to adjust the remaining capacity in each of the cosmetic product data based on the cosmetic reference consumption amount and the cosmetic accumulation count or the cosmetic accumulation time; and a standby mode execution module configured to adjust the remaining capacity in each of the cosmetic product data based on default consumption amount of each cosmetic product data when a continual standby time of the body information analysis apparatus reaches the default standby time.",9,claim 7,0,B
10606882,11,"11. The body information analysis apparatus in claim 7 , wherein the feedback module further comprises: an error calculation module configured to calculate a capacity error based on the capacity feedback data and the remaining capacity of the cosmetic product data, to modify the remaining capacity of the cosmetic product based on the capacity feedback data of the cosmetic product, and to modify the reference consumption amount based on the capacity error.",10,claim 7,0,B
10606883,1,"1. A method of identifying an initial collection of k documents I 1 , I 2 , . . . , I k from n 1 candidate documents X 1 , X 2 , . . . , X n1 in an embedding space, the initial collection of k documents I 1 , I 2 , . . . , I k to be used for user identification of a desired document, the method comprising: providing, accessibly to a computer system, a database identifying (i) the n 1 candidate documents X 1 , X 2 , . . . , X n1 in the embedding space and (ii) a distance between each pair of documents of the n 1 candidate documents X 1 , X 2 , . . . , X n1 in the embedding space, the distance between each pair of candidate documents corresponding to a predetermined measure of dissimilarity between the pair of candidate documents, wherein n 1 >k> 1 ; identifying the k initial documents I 1 , I 2 , . . . , I k to be identified to a user by, for each i'th one of k iterations, beginning with a first iteration (i=1), performing: calculating a cost score for documents of the n i candidate documents X 1 , X 2 , . . . , X ni , the cost score being calculated according to an algorithm that operates in dependence on a representativeness calculation and a diversity calculation, adding, to the initial collection of k documents I 1 , I 2 , . . . , I k , a minimum cost document, from the scored documents, having a lowest cost score, and removing, from the n i candidate documents X 1 , X 2 , . . . , X ni , the minimum cost document and all r documents that are within a predetermined distance from the minimum cost document, where r?0, and n i+1 being n i �� (r +1); and identifying toward the user the initial collection of k documents I 1 , I 2 , . . . , I k for selection of a docum",0,,1,B
10606883,2,"2. The method of claim 1 , wherein the representativeness calculation decreases the cost score for documents which are more representative of documents in the n i candidate documents, and increases the cost score for documents which are less representative of documents in the n i candidate documents, and wherein the diversity calculation decreases the cost score for documents which are more diverse from documents previously added to the initial collection and increases the cost score for documents which are less diverse from documents previously added to the initial collection.",1,claim 1,0,B
10606883,3,"3. The method of claim 2 , wherein the representativeness calculation is calculated in dependence on a distance in the embedding space from the document being scored to a ?'th closest document in the n i candidate documents, where ? is a predetermined number greater than or equal to 1.",2,claim 2,0,B
10606883,4,"4. The method of claim 2 , wherein the diversity calculation is calculated in dependence on an average distance between the document being scored from the documents previously added to the initial collection.",3,claim 2,0,B
10606883,5,"5. The method of claim 2 , wherein the cost score applies a predetermined weighting factor to one of the diversity calculation and the representativeness calculation, relative to the other of the diversity calculation and the representativeness calculation.",4,claim 2,0,B
10606883,6,"6. The method of claim 5 , wherein, as the predetermined weighting factor increases, diversity of the initial collection of k documents I 1 ,I 2 , . . . , I k increases, and as the predetermined weighting factor decreases, representativeness of the initial collection of k documents I 1 , I 2 , . . . , I k increases.",5,claim 5,0,B
10606883,7,"7. The method of claim 2 , wherein the representativeness calculation is calculated for each scored document in dependence upon the number of documents within the n i candidate documents X 1 , X 2 , . . . , X ni that are within a fixed distance in the embedding space from the document being scored.",6,claim 2,0,B
10606883,8,"8. The method of claim 2 , wherein the diversity calculation is calculated in dependence on a sum of eigenvalues of a covariance matrix of embeddings of the document being scored in the embedding space.",7,claim 2,0,B
10606883,9,"9. The method of claim 2 , wherein the diversity calculation is calculated as ??X 0 - meaned ? L2 where ? is a predetermined weighting factor, and ?X 0 - meaned ? L2 is a square root of a sum of squares of 0-meaned values of elements in a feature vector x representing the document being scored.",8,claim 2,0,B
10606883,10,"10. The method of claim 1 , wherein the cost score for each scored document is calculated using a K-medoids algorithm as follows: cost ? ( C , c ) = ? X i ? C ? ? d ? ( X i , c ) where C is a cluster, c is the cost of the document X being scored and X i represents remaining documents in the cluster C.",9,claim 1,0,B
10606883,11,"11. The method of claim 1 , wherein the cost score for each scored document is calculated using a K-medoids algorithm including a centered norm variance term as follows: cost ? ( C , c ) = ? X i ? C ? ? d ? ( X i , c ) - ? ? ? X centered ? L ? ? 2 where C is a cluster, c is the cost of the document being scored X, X i represents remaining documents in the cluster C, ? is a predetermined weighting factor and ?X centered ? L2 is a square root of a sum of squares of centered values of elements in a feature vector x representing the document being scored X.",10,claim 1,0,B
10606883,12,"12. The method of claim 1 , wherein the cost score for each scored document is calculated using a K-medoids with a mean distance term as follows: cost ? ( C , c ) = ? X i ? C ? ? d ? ( X i , c ) - ? ? ? X j ? medoids ? ? d ? ( X , X j ) count ? ? ( medoids ) where C is a cluster, c is the cost of the document being scored X, X i represents remaining documents in the cluster C, ? is a predetermined weighting factor and ? X j ? medoids ? ? d ? ( X , X j ) count ? ? ( medoids ) is an average distance between the document being scored X and documents included in a current set of medoids.",11,claim 1,0,B
10606883,13,"13. A computer-readable storage medium impressed in a non-transitory manner with computer program instructions for identifying an initial collection of k documents I 1 I 2 , . . . , I k from n i candidate documents X 1 , X 2 , . . . , X n1 in an embedding space, the initial collection of k documents 1 , I 2 , . . . , I k to be used for user identification of a desired document, the computer program instructions, when executed, causing a computer to perform a method comprising: providing, accessibly to a computer system, a database identifying (i) the n 1 candidate documents X 1 , X 2 , . . . , X n1 in the embedding space and (ii) a distance between each pair of documents of the n 1 candidate documents X 1 , X 2 , . . . , X n1 in the embedding space, the distance between each pair of candidate documents corresponding to a predetermined measure of dissimilarity between the pair of candidate documents, wherein n 1 22 k>1 ; identifying the k initial documents I 1 , I 2 , . . . , I k to be identified to a user by, for each i'th one of k iterations, beginning with a first iteration (i?1), performing: calculating a cost score for documents of the n i candidate documents X 1 , X 2 , . . . , X ni the cost score being calculated according to an algorithm that operates in dependence on a representativeness calculation and a diversity calculation, adding, to the initial collection of k documents I 1 , I 2 , . . . , I k , a minimum cost document, from the scored documents, having a lowest cost score, and removing, from the n i candidate documents X 1 , X 2 , . . . , X ni , the minimum cost document and all r documents that are within a predetermined distance from the minimum cost document, where r?0, and n i+1 being n i ?(r +1); and identifying toward the user the initial collection of k documents I 1 , I 2 , . . . , I k for selection of a document.",12,,0,B
10606883,14,"14. A system for identifying an initial collection of k documents I 1 , I 2 , . . . , I k from n i candidate documents X 1 , X 2 , . . . , X n1 in an embedding space, the initial collection of k documents I 1 , I 2 , . . . , I k to be used for user identification of a desired document, the system including: a processor; a memory storing the embedding space; and a computer-readable medium coupled to the processor, computer-readable medium having stored thereon, in a non-transitory manner, a plurality of software code portions defining logic for: a first module for providing, accessibly to a computer system, a database identifying (i) the n 1 candidate documents X 1 , X 2 , . . . , X n1 in the embedding space and (ii) a distance between each pair of documents of the n 1 candidate documents X 1 , X 2 , . . . , X n1 in the embedding space, the distance between each pair of candidate documents corresponding to a predetermined measure of dissimilarity between the pair of candidate documents, wherein n 1 >k>1; a second module for identifying the k initial documents I 1 , I 2 , . . . , I k to be identified to a user by, for each i'th one of k iterations, beginning with a first iteration (i=1), performing: calculating a cost score for documents of the ni candidate documents X 1 , X 2 , . . . , X ni the cost score being calculated according to an algorithm that operates in dependence on a representativeness calculation and a diversity calculation, adding, to the initial collection of k documents I 1 , I 2 , . . . , I k , a minimum cost document, from the scored documents, having a lowest cost score, and removing, from the n i candidate documents X 1 , X 2 , . . . , X ni , the minimum cost document and all r documents that are within a predetermined distance from the minimum cost document, where r?0, and n i+1 being n i ?(r +1); and a third module for identifying toward the user the initial collection of k documents I 1 ,I 2 , . . . , I k for selection of a document.",13,,0,B
10606883,15,"15. The system of claim 14 , wherein the representativeness calculation decreases the cost score for documents which are more representative of documents in the n i candidate documents, and increases the cost score for documents which are less representative of documents in the n i candidate documents, and wherein the diversity calculation decreases the cost score for documents which are more diverse from documents previously added to the initial collection and increases the cost score for documents which are less diverse from documents previously added to the initial collection.",14,claim 14,0,B
10606883,16,"16. The system of claim 15 , wherein the representativeness calculation is calculated in dependence on a distance in the embedding space from the document being scored to a ?'th closest document in the n i candidate documents, where ? is a predetermined number greater than or equal to 1.",15,claim 15,0,B
10606883,17,"17. The system of claim 15 , wherein the diversity calculation is calculated in dependence on an average distance between the document being scored from the documents previously added to the initial collection.",16,claim 15,0,B
10606883,18,"18. The system of claim 15 , wherein the cost score applies a predetermined weighting factor to one of the diversity calculation and the representativeness calculation, relative to the other of the diversity calculation and the representativeness calculation.",17,claim 15,0,B
10606883,19,"19. The system of claim 18 , wherein, as the predetermined weighting factor increases, diversity of the initial collection of k documents I 1 , I 2 , . . . , I k increases, and as the predetermined weighting factor decreases, representativeness of the initial collection of k documents I 1 , I 2 , . . . , I k increases.",18,claim 18,0,B
10606883,20,"20. The system of claim 15 , wherein the representativeness calculation is calculated for each scored document in dependence upon the number of documents within the n i candidate documents X 1 , X 2 , . . . , X ni that are within a fixed distance in the embedding space from the document being scored.",19,claim 15,0,B
10606883,21,"21. The system of claim 15 , wherein the diversity calculation is calculated in dependence on a sum of eigenvalues of a covariance matrix of embeddings of the document being scored in the embedding space.",20,claim 15,0,B
10606883,22,"22. The system of claim 15 , wherein the diversity calculation is calculated as ??X 0 - meaned ? L2 , where ? is a predetermined weighting factor, and ?X 0-meaned ? L2 is a square root of a sum of squares of 0-meaned values of elements in a feature vector x representing the document being scored.",21,claim 15,0,B
10606883,23,"23. The system of claim 14 , wherein the cost score for each scored document is calculated using a K-medoids algorithm as follows: cost ? ( C , c ) = ? X i ? C ? ? d ? ( X i , c ) where C is a cluster, c is the cost of the document X being scored and X i represents remaining documents in the cluster C.",22,claim 14,0,B
10606883,24,"24. The system of claim 14 , wherein the cost score for each scored document is calculated using a K-medoids algorithm including a centered norm variance term as follows: cost ? ( C , c ) = ? X i ? C ? ? d ? ( X i , c ) - ? ? ? X centered ? L ? ? 2 where C is a cluster, c is the cost of the document being scored X, X i represents remaining documents in the cluster C, ? is a predetermined weighting factor and ?X centered ? L2 is a square root of a sum of squares of centered values of elements in a feature vector x representing the document being scored X.",23,claim 14,0,B
10606883,25,"25. The system of claim 14 , wherein the cost score for each scored document is calculated using a K-medoids with a mean distance term as follows: cost ? ( C , c ) = ? X i ? C ? ? d ? ( X i , c ) - ? ? ? X j ? medoids ? ? d ? ( X , X j ) count ? ? ( medoids ) where C is a cluster, c is the cost of the document being scored X, X i represents remaining documents in the cluster C, ? is a predetermined weighting factor and ? X j ? medoids ? ? d ? ( X , X j ) count ? ? ( medoids ) is an average distance between the document being scored X and documents included in a current set of medoids.",24,claim 14,0,B
10606883,26,"26. A method for user identification of a desired document, comprising: providing, accessibly to a computer system, a database identifying (i) n 0 candidate documents X 1 , X 2 , . . . , X n0 in an embedding space and (ii) a distance between each pair of documents of the n 0 candidate documents X 1 , X 2 , . . . , X n0 in the embedding space, the distance between each pair of candidate documents corresponding to a predetermined measure of dissimilarity between the pair of candidate documents; identifying an initial (j=0) collection of k documents I 1 , I 2 , . . . , I k , n 0 >k>1, from the n 0 candidate documents X 1 , X 2 , . . . , X n0 by, for each i'th one of k iterations, beginning with a first iteration (i=1), performing: calculating a cost score for documents of the n i candidate documents X 1 , X 2 , . . . , X ni the cost score being calculated according to an algorithm that operates in dependence on a representativeness calculation and a diversity calculation, adding, to the initial collection of k documents I 1 , I 2 , . . . , I k , a minimum cost document, from the scored documents, having a lowest cost score, and removing, from the n i candidate documents X 1 , X 2 , . . . , X ni , the minimum cost document and all r documents that are within a predetermined distance from the minimum cost document, where r?0, and n i+1 being n i ?(r +1); a computer system identifying the initial (j=0) collection of k documents toward the user; for each j'th iteration in a plurality of iterations, beginning with a first iteration (j=1): in response to user selection of a j'th selected subset of the documents from the (j?1)'th collection of documents, and in dependence upon the j'th selected subset, a computer system identifying a j'th candidate space of n j candidate documents from the (j?1)'th candidate space of n j?1 candidate documents, the j'th candidate space being smaller than the (j?1)'th candidate space, identifying a j'th collection of documents which is a subset of the j'th candidate space of n j candidate documents, and identifying toward the user the j'th collection of documents; and taking action in response to user indicating commitment to a particular collection of documents identified toward the user.",25,,0,B
10606883,27,"27. A system for user identification of a desired document, the system including: a processor; a memory storing accessibly to a computer system, a database identifying (i) no candidate documents X 1 , X 2 , . . . , X n0 in an embedding space and (ii) a distance between each pair of documents of the n 0 candidate documents X 1 , X 2 , . . . , X n0 in the embedding space, the distance between each pair of candidate documents corresponding to a predetermined measure of dissimilarity between the pair of candidate documents; and a computer-readable medium coupled to the processor, computer-readable medium having stored thereon, in a non-transitory manner, a plurality of software code portions defining logic for: a first module which identifies an initial (j=0) collection of k documents I 1 , I 2 , . . . , I k , n 0 >k>1, from the n 0 candidate documents X 1 , X 2 , . . . , X n0 by, for each i'th one of k iterations, beginning with a first iteration (i=1), the first module performing: calculating a cost score for documents of the n i candidate documents X 1 , X 2 , . . . , X ni the cost score being calculated according to an algorithm that operates in dependence on a representativeness calculation and a diversity calculation, adding, to the initial collection of k documents I 1 , I 2 , . . . , I k , a minimum cost document, from the scored documents, having a lowest cost score, and removing, from the n i candidate documents X 1 , X 2 , . . . , X ni , the minimum cost document and all r documents that are within a predetermined distance from the minimum cost document, where r?0, and n i+1 being n i ?(r +1); a second module which identifies the initial (j=0) collection of k documents toward the user; a third module which, for each j'th iteration in a plurality of iterations, beginning with a first iteration (j=1), performs: in response to user selection of a j'th selected subset of the documents from the (j- 31 1)'th collection of documents, and in dependence upon the j'th selected subset, a computer system identifying a j'th candidate space of n j candidate documents from the (j?1)'th candidate space of n j?1 candidate documents, the j'th candidate space being smaller than the (j?1)'th candidate space, identifying a j'th collection of documents which is a subset of the j'th candidate space of n j candidate documents, and identifying toward the user the j'th collection of documents; and a fourth module which takes action in response to user indicating commitment to a particular collection of documents identified toward the user.",26,,0,B
10606884,1,"1. A computer-implemented method, comprising: receiving a query from a client computing device; searching at least one data store based on the query; determining at least one category, of a plurality of predetermined categories, that is associated with the query; determining a plurality of images associated with the at least one category; analyzing each image of the plurality of images to determine at least one cluster of images associated with the plurality of images; generating a first aggregate image associated with the at least one cluster of images, wherein the first aggregate image maintains or enhances features that are common to the at least one cluster of images, and wherein the first aggregate image diminishes or removes features that vary between each of the at least one cluster of images; calculating a difference metric between each image in the at least one cluster of images and the first aggregate image; removing a subset of images from the at least one cluster of images, wherein the difference metric associated with each image in the subset of images is greater than a threshold; generating, after removing the subset of images, a second aggregate image associated with the at least one cluster of images, wherein the second aggregate image maintains or enhances features that are common to the at least one cluster of images, and wherein the second aggregate image diminishes or removes features that vary between each of the at least one cluster of images; and storing the second aggregate image as a representative image associated with the at least one category.",0,,1,B
10606884,2,"2. The computer-implemented method of claim 1 , further comprising: identifying a first image corresponding to an object; receiving a second image, the second image being a rendering of the first image; determining a set of transformations by comparing the first image to the second image; and applying the set of transformations to the representative image.",1,claim 1,0,B
10606884,3,"3. The computer-implemented method of claim 1 , wherein the at least one cluster of images is associated with at least one sub-category and wherein the representative image is associated with the at least one sub-category.",2,claim 1,0,B
10606884,4,"4. The computer-implemented method of claim 3 , wherein each image in the at least one cluster of images is tagged with a label associated with the at least one sub-category.",3,claim 3,0,B
10606884,5,"5. A computer-implemented method, comprising: receiving a plurality of images, each image associated with a content item from at least one category of content of a plurality of predetermined categories of content; analyzing, using at least one processor, each image of the plurality of images to determine at least one cluster of images associated with the plurality of images; generating a first aggregate image associated with the at least one cluster of images, wherein the first aggregate image maintains or enhances features that are common to the at least one cluster of images, and wherein the first aggregate image diminishes or removes features that vary between each of the at least one cluster of images; calculating a difference metric between each image in the at least one cluster of images and the first aggregate image; removing a subset of images from the at least one cluster of images, wherein the difference metric associated with each image in the subset of images is greater than a threshold; generating a representative image based on the at least one cluster of images, wherein the representative image maintains or enhances features that are common to the at least one cluster of images, and wherein the representative image diminishes or removes features that vary between each of the at least one cluster of images; storing the representative image associated with the at least one category of content; and causing the representative image to be displayed in response to a query returning at least one item from the at least one category of content.",4,,0,B
10606884,6,"6. The computer-implemented method of claim 5 , further comprising: receiving a query from a client computing device; searching at least one data store based on the query; determining the at least one category of content associated with the query.",5,claim 5,0,B
10606884,7,"7. The computer-implemented method of claim 5 , wherein the at least one cluster is determined based on a shape associated with each image.",6,claim 5,0,B
10606884,8,"8. The computer-implemented method of claim 5 , further comprising: receiving a subsequent query; identifying a plurality of representative images associated with a plurality of sub-categories responsive to the subsequent query; and causing the plurality of representative images to be displayed in response to the subsequent query.",7,claim 5,0,B
10606884,9,"9. The computer-implemented method of claim 5 , further comprising: identifying a first image corresponding to an object; receiving a second image, the second image being a rendering of the first image; determining a set of transformations by comparing the first image to the second image; and applying the set of transformations to the representative image.",8,claim 5,0,B
10606884,10,"10. The computer-implemented method of claim 5 , wherein the at least one cluster of images is associated with at least one sub-category and wherein the representative image is associated with the at least one sub-category.",9,claim 5,0,B
10606884,11,"11. The computer-implemented method of claim 10 , wherein each image in the at least one cluster of images is tagged with a label associated with the at least one sub-category.",10,claim 10,0,B
10606884,12,"12. A computing system, comprising: at least one processor; and a memory device including instructions that, when executed by the at least one processor, cause the computing device to: receive a plurality of images, each image associated with a content item from at least one category of content of a plurality of predetermined categories of content; analyze, using at least one processor, each image of the plurality of images to determine at least one cluster of images associated with the plurality of images; generate a first aggregate image associated with the at least one cluster of images, wherein the first aggregate image maintains or enhances features that are common to the at least one cluster of images, and wherein the first aggregate image diminishes or removes features that vary between each of the at least one cluster of images; calculate a difference metric between each image in the at least one cluster of images and the first aggregate image; remove a subset of images from the at least one cluster of images, wherein the difference metric associated with each image in the subset of images is greater than a threshold; generate a representative image based on the at least one cluster of images, wherein the representative image maintains or enhances features that are common to the at least one cluster of images, and wherein the representative image diminishes but does not remove features that vary between each of the at least one cluster of images; store the representative image associated with the at least one category of content; and display the representative image in response to a query returning at least one item from the at least one category of content.",11,,0,B
10606884,13,"13. The computing system of claim 12 , wherein the instructions, when executed, further cause the computing device to: receive a query from a client computing device; search at least one data store based on the query; determine the at least one category of content associated with the query.",12,claim 12,0,B
10606884,14,"14. The computing system of claim 12 , wherein the at least one cluster is determined based on a shape associated with each image.",13,claim 12,0,B
10606884,15,"15. The computing system of claim 12 , wherein the instructions, when executed, further cause the computing device to: identify a plurality of representative images associated with a plurality of sub-categories responsive to the subsequent query; and cause the plurality of representative images to be displayed in response to the subsequent query.",14,claim 12,0,B
10606884,16,"16. The computing system of claim 12 , wherein the instructions, when executed, further cause the computing device to: identify a first image corresponding to an object; receive a second image, the second image being a rendering of the first image; determine a set of transformations by comparing the first image to the second image; and apply the set of transformations to the representative image.",15,claim 12,0,B
10606884,17,"17. The computing system of claim 12 , wherein the at least one cluster of images is associated with at least one sub-category and wherein the representative image is associated with the at least one sub-category.",16,claim 12,0,B
10606884,18,"18. The computing system of claim 17 , wherein each image in the at least one cluster of images is tagged with a label associated with the at least one sub-category.",17,claim 17,0,B
10606885,1,"1. A computer-implemented system, running on numerous parallel processors, for providing expanded data object correlations for user-generated web customizations, comprising: an insertion module that creates an initial plurality of candidate data object image representations by procreation in dependence upon a data object image having a plurality of dimensions, with at least some dimensions of the data object image modified by user-generated web customizations; a memory storing a candidate population having the plurality of candidate data object image representations; an evaluation module that scores each of the candidate data object image representations for conformity with a predefined goal using a trained neural network system and/or a rule rule-based percept filter; a competition module that discards candidate data object image representations from the candidate population which are scored as being less in conformity with the predefined goal than other candidate data object image representations in the candidate population; a procreation module that adds new data object image representations to the candidate population by procreation in dependence upon the candidate data object image representations not discarded by the competition module; a control module that iterates the evaluation module, the competition module, and the procreation module until the competition module yields a candidate pool of candidate data object image representations not yet discarded but which satisfy a convergence condition; and a harvesting module providing as recommendation for display to a user at least one of the data object images represented in the candidate pool of candidate data object image representations not selected for discarding but which satisfy the convergence condition.",0,,1,B
10606885,2,"2. The system of claim 1 , wherein procreating the data object image having the plurality of dimensions further comprises mutating one or more dimension values of the dimensions.",1,claim 1,0,B
10606885,3,"3. The system of claim 1 , wherein the data object image is selected from a recommended collection of data object images that was presented toward to the user.",2,claim 1,0,B
10606885,4,"4. The system of claim 1 , wherein the user-generated web customizations are manual modifications of one or more image features of a prior data object image.",3,claim 1,0,B
10606885,5,"5. The system of claim 4 , wherein the prior data object image is one previously recommended toward the user.",4,claim 4,0,B
10606885,6,"6. The system of claim 4 , wherein the prior data object image is one previously customized and/or selected by the user.",5,claim 4,0,B
10606885,7,"7. The system of claim 1 , wherein the procreation further comprises crossing-over two or more parent candidate data object image representations not discarded by the competition module.",6,claim 1,0,B
10606885,8,"8. The system of claim 1 , wherein the procreation further comprises crossing-over two or more parent candidate data object image representations not discarded by the competition module and mutating a resulting child data object image representation procreated by the crossing-over.",7,claim 1,0,B
10606885,9,"9. The system of claim 1 , wherein the predefined goal is visual similarity of image features of the image representations with image features of a set of target image representations.",8,claim 1,0,B
10606885,10,"10. The system of claim 1 , wherein the predefined goal is visual conformance of image features of the image representations with a set of perception metrics.",9,claim 1,0,B
10606885,11,"11. The system of claim 1 , wherein the rule-based percept filter enforces visual conformance of image features of the image representations with a set of perception metrics.",10,claim 1,0,B
10606885,12,"12. The system of claim 1 , wherein the trained neural network system further comprises a plurality of neural networks trained to achieve conformity with different predefined goals in dependence upon respective thresholds.",11,claim 1,0,B
10606885,13,"13. A computer-implemented method of providing expanded data object correlations for user-generated web customizations, including: creating an initial plurality of candidate data object image representations by procreation in dependence upon a data object image having a plurality of dimensions, with at least some dimensions of the data object image modified by user-generated web customizations; storing a candidate population having the plurality of candidate data object image representations; scoring each of the candidate data object image representations for conformity with a predefined goal using a trained neural network system and/or a rule rule-based percept filter; discarding candidate data object image representations from the candidate population which are scored as being less in conformity with the predefined goal than other candidate data object image representations in the candidate population; adding new data object image representations to the candidate population by procreation in dependence upon the candidate data object image representations not discarded; iterating the scoring, the discarding, and the adding until the discarding yields a candidate pool of candidate data object image representations not yet discarded but which satisfy a convergence condition; and providing as recommendation for display to a user at least one of the data object images represented in the candidate pool of candidate data object image representations not selected for discarding but which satisfy the convergence condition.",12,,0,B
10606885,14,"14. A non-transitory, computer-readable medium having computer executable instructions that implement the method of claim 13 .",13,claim 13,0,B
10606886,1,"1. A method for remote management of a virtual message associated to a moving object, comprising: a server rendering a remote management interface; over a network, the server receiving one or more moving objects selected via the remote management interface from a computer terminal, and a database being used to store image information with respect to every moving object, wherein the image information associated to the moving object includes color block data and line data extracted from the moving object and is used as a reference for positioning the virtual message that is configured to be associated to the moving object; the server receiving the virtual message that is a text, a picture, a video, or a sound, or a combination thereof associated to the one or more moving objects via the remote management interface from the computer terminal; the server receiving searching criteria that include any or a combination of a viewable range, a time period and a user range corresponding to the virtual message via the remote management interface from the computer terminal; and the server creating data of the virtual message associated to the one or more moving objects and the searching criteria corresponding to the virtual message.",0,,1,B
10606886,2,"2. The method of claim 1 , further comprising a budget range being one of the searching criteria corresponding to the virtual message.",1,claim 1,0,B
10606886,3,"3. The method of claim 1 , wherein the time period relates to an expiration time or a period of time to display the virtual message.",2,claim 1,0,B
10606886,4,"4. The method of claim 1 , wherein the user range is configured to restrict one or more users who are permitted to see the virtual message.",3,claim 1,0,B
10606886,5,"5. The method of claim 1 , wherein the viewable range includes a viewable distance range between the virtual message and the moving object associated to the virtual message.",4,claim 1,0,B
10606886,6,"6. The method of claim 1 , wherein the remote management interface provides an electronic map that is used to configure the viewable range associated to the moving object.",5,claim 1,0,B
10606886,7,"7. The method of claim 1 , wherein, in the server, an image processing process is used to analyze an image of the moving object for obtaining the color block data and line data associated to the moving object.",6,claim 1,0,B
10606886,8,"8. The method of claim 1 , wherein, in the server, a face recognition process converts a human face that is referred to as the moving object into the image information used to position the virtual message.",7,claim 1,0,B
10606886,9,"9. A system for remote management of a virtual message associated to a moving object, comprising: a database recording data of a plurality of moving objects and image information associated to each of the moving objects, wherein the image information associated to the moving object includes color block data and line data extracted from the moving object and is used as a reference for positioning the virtual message that is configured to be associated to the moving object; a server including one or more processors that are used to perform a method for remote management of the virtual message associated to one of the moving objects, and the method comprising: initiating a remote management interface; over a network, receiving one or more moving objects selected via the remote management interface from a computer terminal, and a database being used to store the image information with respect to every moving object; receiving the virtual message that is a text, a picture, a video, or a sound, or a combination thereof associated to the one or more moving objects via the remote management interface from the computer terminal; receiving searching criteria that include any or a combination of a viewable range, a time period and a user range corresponding to the virtual message via the remote management interface from the computer terminal; and creating data of the virtual message associated to the one or more moving objects and the searching criteria corresponding to the virtual message.",8,,0,B
10606886,10,"10. The system of claim 9 , wherein, in the server, an image processing process is used to analyze an image of the moving object for obtaining the color block data and line data associated to the moving object.",9,claim 9,0,B
10606886,11,"11. The system of claim 9 , wherein, in the server, a face recognition process converts a human face that is referred to as the moving object to the image information used to position the virtual message.",10,claim 9,0,B
10606887,1,"1. A method of identifying an image to represent relevant content features within a digital video, the method comprising: analyzing, by at least one processor, a media object comprising a plurality of frames of video content to determine a plurality of key frames within the video content; identifying, by the at least one processor, a content feature depicted in each key frame of the plurality of key frames and a confidence value indicating a likelihood that the content feature appears in each key frame of the plurality of key frames; selecting potential preview images from the plurality of key frames based on the confidence value corresponding to the content feature for each key frame of the plurality of key frames; associating, by the at least one processor, a tag with each potential preview image of the potential preview images, wherein a given tag corresponds to a given content feature depicted in a given potential preview image of the potential preview images; determining to provide the media object as a search result to a search query received from a client device; selecting a preview image for the media object from the potential preview images based on the search query relating to a particular content feature depicted in the preview image as indicated by a particular tag associated with the preview image; and providing, to the client device, the preview image for the media object in response to the search query.",0,,1,B
10606887,2,"2. The method of claim 1 , wherein: the search query comprises a search term; and selecting the preview image for the media object from the potential preview images further comprises comparing the search term with each tag corresponding to the content feature depicted in each potential preview image of the potential preview images.",1,claim 1,0,B
10606887,3,"3. The method of claim 2 , further comprising determining the preview image is relevant to the search term based on the comparison of the search term with the particular tag associated with the preview image.",2,claim 2,0,B
10606887,4,"4. The method of claim 1 , wherein the preview image is provided within a list of search results for the search query.",3,claim 1,0,B
10606887,5,"5. The method of claim 1 , wherein selecting the potential preview images from the plurality of key frames comprises: based on determining that a first key frame and a second key frame from the plurality of key frames are associated with a particular content feature: comparing a first confidence value for the first key frame with a second confidence value of the second key frame; and based on comparing the first confidence value and the second confidence value selecting the first key frame to include in the potential preview images.",4,claim 1,0,B
10606887,6,"6. The method of claim 5 , further comprising based on comparing the first confidence value for the first key frame with the second confidence value of the second key frame excluding the second key frame from the potential preview images.",5,claim 5,0,B
10606887,7,"7. The method of claim 1 , wherein selecting the potential preview images further comprises: comparing a first confidence value for a first key frame with a threshold confidence value; and based on determining that the first confidence value for the first key frame satisfies the threshold confidence value, selecting the first key frame to include in the potential preview images.",6,claim 1,0,B
10606887,8,"8. The method of claim 7 , wherein selecting the potential preview images further comprises: comparing a second confidence value for a second key frame with the threshold confidence value; and based on determining that the second confidence value does not satisfy the threshold confidence value, excluding the second key frame from the potential preview images.",7,claim 7,0,B
10606887,9,"9. A method of identifying an image to represent relevant content features within a digital video, the method comprising: identifying, by at least one processor of a media hosting server device, key frames from a plurality of frames within video content maintained on the media hosting server device; identifying, by the at least one processor, at least one content feature depicted in each of the key frames; determining, by the at least one processor, a confidence value for the at least one content feature depicted in each of the key frames, wherein the confidence value indicates a likelihood that the at least one content feature appears in each of the key frames; selecting potential preview images from the key frames based on the confidence value for the at least one content feature depicted in each of the key frames; associating tags with the potential preview images based on the at least one content feature depicted in each of the key frames, a given tag indicating a given content feature depicted in a given potential preview image; and based on receiving a search query, selecting a preview image for the video content from the potential preview images by determining that the search query is related to a particular content feature depicted in the preview image as indicated by a particular tag associated with the preview image.",8,,0,B
10606887,10,"10. The method of claim 9 , further comprising providing, to a client device corresponding with the search query, the preview image for the video content.",9,claim 9,0,B
10606887,11,"11. The method of claim 10 , wherein the preview image is provided within a list of search results for the search query.",10,claim 10,0,B
10606887,12,"12. The method of claim 9 , wherein: selecting the potential preview images comprises identifying a set of key frames from the key frames having corresponding confidence values that exceed a threshold confidence value; and associating the tags with the potential preview images comprises associating tags with the set of key frames from the key frames having corresponding confidence values that exceed the threshold confidence value.",11,claim 9,0,B
10606887,13,"13. The method of claim 12 , wherein selecting the potential preview images further comprises: determining that a first key frame and a second key frame from the plurality of key frames are associated with a particular content feature; and based on determining that the first key frame and the second key frame are associated with the particular content feature, selecting the first key frame to include in the potential preview images.",12,claim 12,0,B
10606887,14,"14. The method of claim 13 , wherein selecting the potential preview images further comprises: based on determining that the first key frame and the second key frame are associated with the particular content feature: comparing a first confidence value for the first key frame with a second confidence value of the second key frame; and based on determining that the first confidence value exceeds the second confidence value, selecting the first key frame to include in the potential preview images.",13,claim 13,0,B
10606887,15,"15. The method of claim 14 , wherein selecting the potential preview images further comprises: comparing a first confidence value for a first key frame with a threshold confidence value; and based on determining that the first confidence value for the first key frame satisfies the threshold confidence value, selecting the first key frame to include in the potential preview images.",14,claim 14,0,B
10606887,16,"16. A system comprising: at least one processor; and at least one non-transitory computer readable storage medium storing instructions thereon that, when executed by the at least one processor, cause the system to: analyze a media object comprising a plurality of frames of video content to determine a plurality of key frames within the video content; identify a content feature depicted in each key frame of the plurality of key frames and a confidence value indicating a likelihood that the content feature appears in each key frame of the plurality of key frames; select potential preview images from the plurality of key frames based on the confidence value corresponding to the content feature for each key frame of the plurality of key frames; associate a tag with each potential preview image of the potential preview images, wherein a given tag corresponds to a given content feature depicted in a given potential preview image of the potential preview images; determine to provide an indication of the media object as a search result to a search query received from a client device; and select a preview image for the media object from the potential preview images based on the search query relating to a particular content feature depicted in the preview image as indicated by a particular tag associated with the preview image.",15,,0,B
10606887,17,"17. The system of claim 16 , further comprising instructions that, when executed by the at least one processor, cause the system to determine the potential preview image is relevant to a search term within the search query based on a comparison of the search term with the particular tag associated with the potential preview image.",16,claim 16,0,B
10606887,18,"18. The system of claim 17 , further comprising instructions that, when executed by the at least one processor, cause the system to provide, to the client device, the preview image for the media object in response to the search query.",17,claim 17,0,B
10606887,19,"19. The system of claim 17 , further comprising instructions that, when executed by the at least one processor, cause the system to attach a hyperlink pointing to the media object to the preview image.",18,claim 17,0,B
10606887,20,"20. The system of claim 17 , further comprising instructions that, when executed by the at least one processor, cause the system to select the potential preview images by: determining that a first key frame and a second key frame are associated with the particular content feature; comparing a first confidence value for the first key frame with a second confidence value of the second key frame; and based on determining that the first confidence value exceeds the second confidence value, selecting the first key frame to include in the potential preview images.",19,claim 17,0,B
10606888,1,"1. An apparatus comprising a non-volatile machine-readable medium storing a program having instructions which when executed by a processor will cause the processor to manufacture an inventory of image products from frames of a digital video work, each frame comprising a still image in sequence in the work, the digital video work including audio which corresponds to objects in the still images in the digital video work from which the audio is produced, the instructions of the program for: detecting objects in each frame's image; recognizing the objects; assigning metadata to the objects, the object metadata linking spoken lines and sound in audio from the digital video work to the corresponding object in the frame's image which produces the spoken lines and sound; for each frame, generating at least one cryptographic hash of the object metadata; and writing the hash to a node of a transaction processing network.",0,,1,B
10606888,2,"2. The apparatus of claim 1 further comprising assigning metadata to each frame of the digital video work, the frame metadata including an identification of the work, provenance of the work, and an identification of the frame within the work; and for each frame, generating at least one other cryptographic hash of the frame's metadata.",1,claim 1,0,B
10606888,3,3. The apparatus of claim 1 wherein the digital video work is a whole movie.,2,claim 1,0,B
10606888,4,4. The apparatus of claim 1 wherein the digital video work is a portion of a movie.,3,claim 1,0,B
10606888,5,"5. The apparatus of claim 1 wherein at least one recognized object is at least one of a person, an animal or a good.",4,claim 1,0,B
10606888,6,6. The apparatus of claim 5 wherein metadata of a person comprises an actor's name.,5,claim 5,0,B
10606888,7,7. The apparatus of claim 1 wherein the transaction processing network is a blockchain ledger.,6,claim 1,0,B
10606888,8,8. The apparatus of claim 1 further comprising adding a watermark to the hash value before it is written to the node.,7,claim 1,0,B
10606888,9,9. The apparatus of claim 1 wherein at least some of the metadata links objects across frames.,8,claim 1,0,B
10606888,10,"10. A process for manufacturing an inventory of image products from frames of a digital video work, each frame comprising a still image in sequence in the work, the digital video work including audio which corresponds to objects in the still images in the digital video work from which the audio is produced, the process comprising: detecting objects in each frame's image; recognizing the objects; assigning metadata to the objects, the object metadata linking spoken lines and sound in audio from the digital video work to the corresponding object in the frame's image which produces the spoken lines and sound; for each frame, generating at least one cryptographic hash of the object metadata; and writing the hash to a node of a transaction processing network.",9,,0,B
10606888,11,"11. The process of claim 10 further comprising assigning metadata to each frame of the digital video work, the frame metadata including an identification of the work, provenance of the work, and an identification of the frame within the work; and for each frame, generating at least one other cryptographic hash of the frame's metadata.",10,claim 10,0,B
10606888,12,12. The process of claim 10 wherein the digital video work is a whole movie.,11,claim 10,0,B
10606888,13,13. The process of claim 10 wherein the digital video work is a portion of a movie.,12,claim 10,0,B
10606888,14,"14. The process of claim 10 wherein at least one recognized object is at least one of a person, an animal or a good.",13,claim 10,0,B
10606888,15,15. The process of claim 14 wherein metadata of a person comprises an actor's name.,14,claim 14,0,B
10606888,16,16. The process of claim 10 wherein the transaction processing network is a blockchain ledger.,15,claim 10,0,B
10606888,17,17. The process of claim 10 further comprising adding a watermark to the hash value before it is written to the node.,16,claim 10,0,B
10606888,18,"18. The process of claim 10 , wherein at least some of the metadata links objects across frames.",17,claim 10,0,B
10606889,1,"1. A method, implemented by at least one computing device, comprising: receiving a query from a viewing user; searching, based on the query, a relational media database comprising a plurality of media presentations, wherein the relational media database, for a respective media presentation of the plurality of media presentations, comprises a subtitle track being a textual representation of a dialog within the respective media presentation, a frame from the respective media presentation associated with the subtitle track, program statistics based on analysis of the subtitle track, and a statistical index associated with a respective type of the program statistics, to yield search results; and transmitting the search results to a device associated with the viewing user, the search results comprising the frame and a prompt for ordering the respective media presentation associated with the frame.",0,,1,B
10606889,2,"2. The method of claim 1 , further comprising: retrieving, from a restricted access database, additional metadata associated with the subtitle track, wherein the relational media database is distinct from the restricted access database.",1,claim 1,0,B
10606889,3,"3. The method of claim 1 , further comprising receiving metadata that identifies a particular feature of the frame.",2,claim 1,0,B
10606889,4,"4. The method of claim 3 , wherein the metadata is further defined manually by another user different from the viewing user.",3,claim 3,0,B
10606889,5,"5. The method of claim 3 , wherein the metadata comprises a viewer rating on a scene-by-scene basis for the respective media presentation.",4,claim 3,0,B
10606889,6,"6. The method of claim 1 , further comprising: receiving a user query associated with a specific dialog within the respective media presentation; searching the relational media database for video presentations corresponding to the user query and presenting a list of results; receiving a user selection of a specific video presentation from the list of results; and transmitting a specific video presentation representative frame, a portion of a subtitle track associated with the specific video presentation, and a prompt for ordering the specific video presentation.",5,claim 1,0,B
10606889,7,"7. The method of claim 6 , further comprising presenting options for selecting a second metadata associated with the specific video presentation representative frame.",6,claim 6,0,B
10606889,8,"8. The method of claim 6 , further comprising presenting individual statistics for each video presentation in the list of results.",7,claim 6,0,B
10606889,9,"9. The method of claim 6 , wherein the list of results comprises a user approval rating for respective scenes associated with the list of results.",8,claim 6,0,B
10606889,10,"10. The method of claim 6 , further comprising: receiving a user query based on a dialog in a plurality of video presentations comprising the video presentation, the plurality of video presentations being included in a user personal library; and presenting, as a result of searching the plurality of video presentations, a list of video presentations comprising the program statistics.",9,claim 6,0,B
10606889,11,"11. A system comprising: a hardware processor; and a computer-readable storage medium having instructions stored which, when executed by the hardware processor, cause the hardware processor to perform operations comprising: receiving a query from a viewing user; searching, based on the query, a relational media database comprising a plurality of media presentations, wherein the relational media database, for a respective media presentation of the plurality of media presentations, comprises a subtitle track being a textual representation of a dialog within the respective media presentation, a frame from the respective media presentation associated with the subtitle track, program statistics based on analysis of the subtitle track, and a statistical index associated with a respective type of the program statistics, to yield search results; and transmitting the search results to a device associated with the viewing user, the search results comprising the frame and a prompt for ordering the respective media presentation associated with the frame.",10,,0,B
10606889,12,"12. The system of claim 11 , wherein the computer-readable storage medium stores additional instructions which, when executed by the hardware processor, cause the hardware processor to perform operations further comprising: retrieving, from a restricted access database, additional metadata associated with the subtitle track, wherein the relational media database is distinct from the restricted access database.",11,claim 11,0,B
10606889,13,"13. The system of claim 11 , wherein the computer-readable storage medium stores additional instructions which, when executed by the hardware processor, cause the hardware processor to perform operations further comprising: receiving metadata that identifies particular features of the frame.",12,claim 11,0,B
10606889,14,"14. The system of claim 13 , wherein the metadata is further defined manually by another user different from the viewing user.",13,claim 13,0,B
10606889,15,"15. The system of claim 13 , wherein the metadata comprises a viewer rating on a scene-by-scene basis for the respective media presentation.",14,claim 13,0,B
10606889,16,"16. The system of claim 11 , wherein the computer-readable storage medium stores additional instructions which, when executed by the hardware processor, cause the hardware processor to perform operations further comprising: receiving a user query associated with a specific dialog within the respective media presentation; searching the relational media database for video presentations corresponding to the user query and presenting a list of results; receiving a user selection of a specific video presentation from the list of results; and transmitting a specific video presentation representative frame, a portion of a subtitle track associated with the specific video presentation, and a prompt for ordering the specific video presentation.",15,claim 11,0,B
10606889,17,"17. The system of claim 16 , wherein the computer-readable storage medium stores additional instructions which, when executed by the hardware processor, cause the hardware processor to perform operations further comprising: presenting options for selecting a second metadata associated with the specific video presentation representative frame.",16,claim 16,0,B
10606889,18,"18. A computer-readable storage device having instructions stored which, when executed by a processor of a computing device, cause the processor of the computing device to perform operations comprising: receiving a query from a viewing user; searching, based on the query, a relational media database comprising a plurality of media presentations, wherein the relational media database, for a respective media presentation of the plurality of media presentations, comprises a subtitle track being a textual representation of a dialog within the respective media presentation, a frame from the respective media presentation associated with the subtitle track, program statistics based on analysis of the subtitle track, and a statistical index associated with a respective type of the program statistics, to yield search results; and transmitting the search results to a device associated with the viewing user, the search results comprising the frame and a prompt for ordering the respective media presentation associated with the frame.",17,,0,B
10606890,1,"1. A computer for executing database queries, comprising: at least one computer processor; a memory connected to the at least one computer processor and having instructions recorded therein for execution by the at least one computer processor, at least some of the instructions implementing a database system having different respective portions of data of the database system stored on different storage devices at a plurality of locations; and a specialized network interface component separate from the at least one computer processor and the memory, the specialized network interface controller being connected to the at least one computer processor via an internal bus of the computer and including application domain logic, the at least one computer processor and the specialized network interface component being configured to: determine, via the at least one computer processor, that at least one portion of the data of the database system requested by a database query is remote data stored on a storage device at a remote network source and a location of the remote network source, the remote data being remote with respect to the computer and the specialized network interface component included therein; prepare, by the at least one computer processor, query parameters associated with the remote data; pass, by the at least one computer processor to the specialized network interface component, via the internal bus, the query parameters and the location of the remote network source; perform, by the specialized network interface component, in response to receiving the query parameters and the location of the remote network source, a plurality of actions without any communication from the at least one computer processor, the plurality of actions comprising: send at least one data request to the remote network source requesting the remote data upon which query operations will be performed, receive, in response to the sending of the at least one data request, at least one data response including the remote data from the storage device at the remote network source, pre-process the received remote data using data query logic included in the application domain logic of the specialized network interface component, the data query logic being configured to perform the query operations on the received remote data using the query parameters prepared by the at least one computer processor and generate query result data from the received remote data by performing the query operations using the query parameters, the query result data being different from the received remote data, and return the generated query result data to the at least one computer processor via the internal bus; perform, by the at least one computer processor, post-query operations on the generated query result data to produce a final result set for the database query; and provide, by the at least one computer processor, the final result set for the database query to an originator of the database query, wherein: the performing of the plurality of actions by the specialized network interface component improves an efficiency of the computer by relieving the at least one computer processor from performing the plurality of actions to thereby make the at least one computer processor available for performing other actions while the specialized network interface component performs the plurality of actions.",0,,1,B
10606890,2,"2. The computer of claim 1 , wherein the application domain logic is implemented as one of a graphics processor unit (GPU), a field-programmable gate array (FPGA), and an application specific integrated circuit (ASIC).",1,claim 1,0,B
10606890,3,"3. The computer of claim 1 , wherein the specialized network interface component is further configured to: determine that at least a portion of the received remote data is to be stored in local storage of the computer; and store the determined portion of the received remote data in the local storage.",2,claim 1,0,B
10606890,4,"4. The computer of claim 3 , wherein the specialized network interface component is further configured to: determine that local data is stored in a sorted order; and insert the determined portion of the received remote data into the local data and maintain the sorted order.",3,claim 3,0,B
10606890,5,"5. The computer of claim 1 , wherein the at least one computer processor is further configured to: receive, from the specialized network interface component, a plurality of groups of generated query result data, the specialized network interface component having generated the plurality of groups of query result data by pre-processing remote data received from multiple remote network sources; and generate the final result set for the query by combining the received plurality of groups of query result data.",4,claim 1,0,B
10606890,6,"6. The computer of claim 1 , wherein: the final result set for the query is based on parameters in the query.",5,claim 1,0,B
10606890,7,"7. A computer program product for executing database queries, the computer program product comprising: at least one computer readable storage medium having first program instructions and second program instructions embodied therewith, at least some of the first program instructions being for implementing a database system having different respective portions of data of the database system stored on different storage devices at a plurality of locations, the first program instructions executable by a computer processor included in a computer and the second program instructions executable by a specialized network interface component included in the computer, the specialized network interface component being separate from the computer processor and being connected to the computer processor via an internal bus of the computer, the specialized network interface component including application domain logic, the first program instructions and the second program instructions cause, respectively, the computer processor and the specialized network interface component to: determine, via the computer processor, that at least a portion of the data of the database system requested by a database query is remote data stored on a storage device at a remote network source and a location of the remote network source, the remote data being remote with respect to the computer and the specialized network interface component included in the computer; prepare, by the computer processor, query parameters associated with the remote data; pass, by the computer processor to the specialized network interface component, via the internal bus, the query parameters and the location of the remote network source; perform, by the specialized network interface component, in response to receiving the query parameters and the location of the remote network source, a plurality of actions without any communication from the computer processor, the plurality of actions comprising: send at least one data request to the remote network source requesting the remote data upon which query operations will be performed, receive, in response to the sending of the at least one data request, at least one data response including the remote data from the storage device at the remote network source, pre-process the received remote data using data query logic included in the application domain logic of the specialized network interface component, the data query logic being configured to perform the query operations on the received remote data using the query parameters prepared by the computer processor and generate query result data from the received remote data by performing the query operations using the query parameters, the query result data being different from the received remote data, and return the generated query result data to the computer processor via the internal bus; and perform, by the computer processor, post-query operations on the generated query result data to produce a final result set for the database query; and provide, by the computer processor, the final result set for the database query to an originator of the database query, wherein: the performing of the plurality of actions by the specialized network interface component improves an efficiency of the computer by relieving the computer processor from performing the plurality of actions to thereby make the computer processor available for performing other actions while the specialized network interface component performs the plurality of actions.",6,,0,B
10606890,8,"8. The computer program product of claim 7 , wherein the second program instructions executable by the specialized network interface component cause the specialized network interface component further to: determine that at least a portion of the received remote data is to be stored in local storage of the computer; and store the determined portion of the received remote data in the local storage.",7,claim 7,0,B
10606890,9,"9. The computer program product of claim 8 , wherein the second program instructions executable by the specialized network interface component cause the specialized network interface component further to: determine that local data is stored in a sorted order; and insert the determined portion of the received remote data into the local data and maintain the sorted order.",8,claim 8,0,B
10606890,10,"10. The computer program product of claim 7 , wherein the first program instructions executable by the computer processor cause the computer processor further to: receive, from the specialized network interface component, a plurality of groups of generated query result data, the specialized network interface component having generated the plurality of groups of query result data by pre-processing remote data received from multiple remote network sources; and generate the final result set for the query by combining the received plurality of groups of query result data.",9,claim 7,0,B
10606890,11,"11. The computer program product of claim 7 , wherein: the final result set for the query is based on parameters in the query.",10,claim 7,0,B
10606891,1,"1. A JavaScript Object Notation (JSON) data validation method, comprising: generating a description schema that describes valid JSON data using one or more JSON constructs, the description schema including a definition, wherein the definition includes an object definition, a string definition, or a number definition; identifying the definition as an object definition; obtaining a content model of the object definition; processing a particle of the object definition based on the content model, wherein the particle includes a sequence definition, a choice definition, or a named definition; converting the description schema to an Extensible Markup Language (XML) schema based on the processed particle; obtaining candidate JSON data for validation; converting the candidate JSON data to XML data; and validating the candidate JSON data based on the XML data conforming to the XML schema.",0,,1,B
10606891,2,"2. The method of claim 1 , wherein the converting the description schema to an XML schema comprises loading the description schema into a JavaScript Object Model (JSOM).",1,claim 1,0,B
10606891,3,"3. The method of claim 2 , wherein the converting the description schema to an XML schema further comprises converting the JSOM to the XML schema.",2,claim 2,0,B
10606891,4,"4. The method of claim 2 , wherein the loading the description schema into a JSOM comprises loading the description schema into the JSOM including at least one of an object definition, a sequence definition, and a number definition.",3,claim 2,0,B
10606891,5,"5. The method of claim 1 , wherein the validating the candidate JSON data comprises determining whether the candidate JSON data is valid or invalid.",4,claim 1,0,B
10606891,6,"6. The method of claim 1 , wherein the validating the candidate JSON data comprises validating one or more JSON files.",5,claim 1,0,B
10606891,7,"7. The method of claim 1 , wherein the generating the description schema comprises generating the description schema for defining at least one of one or more data structures and one or more datatypes of the valid JSON data.",6,claim 1,0,B
10606891,8,"8. A system, comprising: one or more processors configured to: generate a description schema that describes valid JavaScript Object Notation (JSON) data using one or more JSON constructs, the description schema including a definition, wherein the definition includes an object definition, a string definition, or a number definition; identify the definition as an object definition; obtain a content model of the object definition; process a particle of the object definition based on the content model, wherein the particle includes a sequence definition, a choice definition, or a named definition; convert the description schema to an Extensible Markup Language (XML) schema based on the processed particle; obtain candidate JSON data for validation; convert the candidate JSON data to XML data; and validate the candidate JSON data based on the XML data conforming to the XML schema.",7,,0,B
10606891,9,"9. The system of claim 8 , wherein the one or more processors are further configured to load the description schema into a JavaScript Object Model (JSOM).",8,claim 8,0,B
10606891,10,"10. The system of claim 9 , wherein the one or more processors are further configured to convert the JSOM to the XML schema.",9,claim 9,0,B
10606891,11,"11. The system of claim 9 , wherein the JSOM comprises at least one of an object definition, a sequence definition, and a number definition.",10,claim 9,0,B
10606891,12,"12. The system of claim 8 , wherein the one or more processors are configured to validate the candidate JSON data to determine whether the JSON data is valid or invalid.",11,claim 8,0,B
10606891,13,"13. The system of claim 8 , wherein the candidate JSON data comprises one or more JSON files.",12,claim 8,0,B
10606891,14,"14. The system of claim 8 , wherein the description schema defines at least one of one or more data structures and one or more datatypes of the valid JSON data.",13,claim 8,0,B
10606891,15,"15. A non-transitory computer-readable medium having computer instructions stored thereon that are executable by a processing device to perform or control performance of operations comprising: generating a description schema that describes valid JavaScript Object Notation (JSON) data using one or more JSON constructs, the description schema including a definition, wherein the definition includes an object definition, a string definition, or a number definition; identifying the definition as an object definition; obtaining a content model of the object definition; processing a particle of the object definition based on the content model, wherein the particle includes a sequence definition, a choice definition, or a named definition; converting the description schema to an Extensible Markup Language (XML) schema based on the processed particle; obtaining candidate JSON data for validation; converting the candidate JSON data to XML data; and validating the candidate JSON data based on the XML Schema and the XML data conforming to the XML schema.",14,,0,B
10606891,16,"16. The non-transitory computer-readable medium of claim 15 , the operations further comprising loading the description schema into a JavaScript Object Model (JSOM).",15,claim 15,0,B
10606891,17,"17. The non-transitory computer-readable medium of claim 16 , wherein converting the description schema to an XML schema comprises converting the JSOM to the XML schema.",16,claim 16,0,B
10606891,18,"18. The non-transitory computer-readable medium of claim 15 , wherein validating the candidate JSON data comprises validating one or more JSON files.",17,claim 15,0,B
10606891,19,"19. The non-transitory computer-readable medium of claim 15 , wherein validating the candidate JSON data comprises determining whether the candidate JSON data is valid or invalid.",18,claim 15,0,B
10606891,20,"20. The non-transitory computer-readable medium of claim 15 , wherein generating the description schema comprises generating the description schema for defining at least one of one or more data structures and one or more datatypes of the valid JSON data.",19,claim 15,0,B
10606892,1,"1. A system for partitioning a graph database, comprising: a processor; and a memory coupled with the processor, wherein the memory is configured to provide the processor with instructions which when executed cause the processor to: assign to a plurality of nodes a plurality of vertices of the graph database, wherein the vertices of the graph database are connected by edges that indicate relationships between the vertices; and designate a vertex of the graph database as a super-vertex that is split into a truncated vertex and at least one vertex representative, comprising to: identify abstract paths in the graph database, comprising to: identify traversal patterns based on database query samples for the graph database, a traversal pattern including a traversal between more than one vertex: identify common patterns in the traversal patterns, a common pattern including a commonality in a portion of or entire traversal patterns; identify abstract path patterns based on the common patterns; and identify the abstract paths based on the abstract path patterns and weights associated with the abstract path patterns; and assign one or more vertices to nodes based on the abstract paths between the vertices.",0,,1,B
10606892,2,"2. The system of claim 1 , wherein the truncated vertex is assigned to a main node and the at least one vertex representative is assigned to a different node.",1,claim 1,0,B
10606892,3,"3. The system of claim 2 , wherein a database query associated with the super-vertex received at the different node is handled by the different node using its assigned vertex representative without processing by the main node.",2,claim 2,0,B
10606892,4,"4. The system of claim 1 , wherein the truncated vertex is stored at a storage of a main node and the at least one vertex representative is stored at a storage of a different node.",3,claim 1,0,B
10606892,5,"5. The system of claim 1 , wherein the super-vertex was split in response to a determination that the super-vertex is connected to at least a threshold number of other vertices.",4,claim 1,0,B
10606892,6,"6. The system of claim 1 , wherein each vertex representative identifies one or more edges of the super-vertex that are not identified by the truncated vertex.",5,claim 1,0,B
10606892,7,"7. The system of claim 1 , wherein the vertex was designated as the super-vertex based on an indication from an administrator.",6,claim 1,0,B
10606892,8,"8. The system of claim 1 , wherein designating the vertex of the graph database as the super-vertex includes automatically detecting that the vertex meets a criteria to be designated as the super-vertex.",7,claim 1,0,B
10606892,9,"9. The system of claim 1 , wherein only edges of the super-vertex that match a criteria are eligible to be split to the at least one vertex representative from the truncated vertex.",8,claim 1,0,B
10606892,10,"10. The system of claim 9 , wherein the criteria specifies an edge directionality or edge label.",9,claim 9,0,B
10606892,11,"11. The system of claim 1 , wherein the truncated vertex retains edges directed away from the super-vertex.",10,claim 1,0,B
10606892,12,"12. The system of claim 1 , wherein the at least one vertex representative specifies a vertex-centric index including identifiers, labels, properties, or directionality of edges of the super-vertex.",11,claim 1,0,B
10606892,13,"13. The system of claim 1 , wherein the at least one vertex representative assigned to an assigned node includes an index listing any other vertices assigned to the assigned node that are also connected to the super-vertex.",12,claim 1,0,B
10606892,14,"14. The system of claim 1 , wherein in the event a connected vertex connected to the super-vertex and assigned to an assigned node that has also been assigned at least one vertex representative is removed from the assigned node, the at least one vertex representative is automatically modified to reflect the removal of the connected vertex.",13,claim 1,0,B
10606892,15,"15. The system of claim 1 , wherein the super-vertex is split into the truncated vertex and a plurality of vertex representatives.",14,claim 1,0,B
10606892,16,"16. The system of claim 15 , wherein each of the plurality of vertex representatives identifies a set of edges that are different from other vertex representatives.",15,claim 15,0,B
10606892,17,"17. The system of claim 15 , wherein the processor is configured to process a database query of the graph database associated with the super-vertex, each of a plurality of nodes assigned to each of the plurality of vertex representatives is instructed to perform processing with respect to its assigned vertex representative and results from the plurality of nodes are combined to determine a response to the database query.",16,claim 15,0,B
10606892,18,"18. The system of claim 1 , wherein the super-vertex is one of a plurality of super-vertices of the graph database.",17,claim 1,0,B
10606892,19,"19. A method for partitioning a graph database, comprising: assigning to a plurality of nodes a plurality of vertices of the graph database, wherein the vertices of the graph database are connected by edges that indicate relationships between the vertices; and using a processor to designate a vertex of the graph database as a super-vertex that is split into a truncated vertex and at least one vertex representative, comprising: identifying abstract paths in the graph database, comprising: identifying traversal patterns based on database query samples for the graph database, a traversal pattern including a traversal between more than one vertex, identifying common patterns in the traversal patterns, a common pattern including a commonality in a portion of or entire traversal patterns; identifying abstract path patterns based on the common patterns; and identifying the abstract paths based on the abstract path patterns and weights associated with the abstract path patterns; and assigning one or more vertices to nodes based on the abstract paths between the vertices.",18,,0,B
10606892,20,"20. A computer program product for partitioning a graph database, the computer program product being embodied in a non-transitory computer readable storage medium and comprising computer instructions for: assigning to a plurality of nodes a plurality of vertices of the graph database, wherein the vertices of the graph database are connected by edges that indicate relationships between the vertices; and designating a vertex of the graph database as a super-vertex that is split into a truncated vertex and at least one vertex representative, comprising: identifying abstract paths in the graph database, comprising: identifying traversal patterns based on database query samples for the graph database, a traversal pattern including a traversal between more than one vertex; identifying common patterns in the traversal patterns, a common pattern including a commonality in a portion of or entire traversal patterns; identifying abstract path patterns based on the common patterns; and identifying the abstract paths based on the abstract path patterns and weights associated with the abstract path patterns; and assigning one or more vertices to nodes based on the abstract paths between the vertices.",19,,0,B
10606893,1,"1. A method, in a data processing system comprising at least one processor and at least one memory, the at least one memory comprising instructions which are executed by the at least one processor to configure the at least one processor to perform the method, comprising: receiving, by the data processing system, a first knowledge graph comprising nodes representing entities and edges between nodes, wherein each edge represents a relationship between the nodes directly connected to each other by the edge; identifying, by the data processing system, at least one candidate missing edge connecting at least one node of the first knowledge graph to at least one other node not present in the first knowledge graph; evaluating, by the data processing system, the at least one candidate missing edge to determine if the at least one candidate missing edge should be added to the first knowledge graph; expanding, by the data processing system, the first knowledge graph to include the at least one candidate missing edge connecting the at least one node to at least one newly added node that is newly added to the first knowledge graph, to thereby generate an expanded knowledge graph, in response to the evaluation indicating that the at least one candidate missing edge should be added to the first knowledge graph; and performing, by the data processing system, an operation on the expanded knowledge graph to generate a knowledge output, wherein identifying the at least one candidate missing edge comprises: identifying a first pattern of entity types and relationship types between the entities of a subset of the knowledge graph; searching a second knowledge graph, different from the first knowledge graph, for a second pattern of entity types and relationship types that match the first pattern; and identifying at least one of an other entity or an other relationship, in the second knowledge graph, associated with the matching second pattern that is not part of the first pattern and not part of the matching second pattern, and wherein: the at least one newly added node is a newly added node having a same entity type as the identified other entity in the second knowledge graph, or the at least one candidate missing edge has a same relationship type as the identified other relationship in the second knowledge graph.",0,,1,B
10606893,2,"2. The method of claim 1 , wherein evaluating the at least one candidate missing edge comprises searching a knowledge base for instances of data corresponding to the at least one other entity or other relationship and which is associated with an entity or relationship present in the first pattern.",1,claim 1,0,B
10606893,3,"3. The method of claim 1 , further comprising: generating at least one question in natural language based on the identified at least one other entity or other relationship associated with the matching second pattern; and outputting the at least one question to one of a human user via a computing device or an automated cognitive system configured to generate an answer to the at least one question.",2,claim 1,0,B
10606893,4,"4. The method of claim 3 , further comprising: receiving an answer to the at least one question from one of the human user via the computing device or the automated cognitive system, wherein expanding the knowledge graph comprises expanding the knowledge graph to include at least one additional node or at least one edge corresponding to the answer to the at least one question.",3,claim 3,0,B
10606893,5,"5. The method of claim 4 , wherein the at least one candidate missing edge is an edge, in another knowledge graph, that is connected to a corresponding pattern of entity types and relationship types that at least partially matches the sub-graph, and which is not present in the first knowledge graph.",4,claim 4,0,B
10606893,6,"6. The method of claim 4 , wherein searching other knowledge graphs for a corresponding pattern comprises utilizing at least one of explicit matching techniques or implicit matching techniques.",5,claim 4,0,B
10606893,7,"7. The method of claim 1 , further comprising: receiving an input question; and generating a hypothesis for answering the input question based on a predefined tenet data structure, wherein the predefined tenet data structure specifies criteria for proving or disproving the hypothesis, and wherein identifying at least one candidate missing edge comprises: identifying a first pattern, of entities and relationships between entities, corresponding to the tenet data structure; identifying a sub-graph in the knowledge graph matching the first pattern; identifying entity types and relationship types in the sub-graph; and searching other knowledge graphs for a corresponding pattern of entity types and relationship types at least partially matching the sub-graph.",6,claim 1,0,B
10606893,8,"8. The method of claim 7 , further comprising: performing a natural language processing feature extraction operation on the input question to identify a focus of the input question; and retrieving the predefined tenet data structure from a plurality of predefined tenet data structures based on the focus of the input question, wherein the predefined tenet data structure comprises a first set of rules for proving a corresponding hypothesis and a second set of rules for disproving the corresponding hypothesis.",7,claim 7,0,B
10606893,9,"9. The method of claim 8 , wherein rules in the first set of rules and the second set of rules are defined as tuples specifying a first entity or entity type, a second entity or entity type, and a relationship or relationship type for linking the first entity or entity type to the second entity or entity type.",8,claim 8,0,B
10606893,10,"10. The method of claim 1 , further comprising: generating a graphical output of the extended knowledge graph, wherein the newly added candidate edge is provided in a visually distinct manner from the first knowledge graph in the graphical output.",9,claim 1,0,B
10606893,11,"11. The method of claim 1 , wherein the first knowledge graph represents data collected as part of a first criminal investigation, and wherein the other knowledge graphs represent data collected as part of other criminal investigations.",10,claim 1,0,B
10606893,12,"12. A computer program product comprising a computer readable storage medium having a computer readable program stored therein, wherein the computer readable program, when executed on a computing device, causes the computing device to: receive a first knowledge graph comprising nodes representing entities and edges between nodes, wherein each edge represents a relationship between the nodes directly connected to each other by the edge; identify at least one candidate missing edge connecting at least one node of the first knowledge graph to at least one other node not present in the first knowledge graph; evaluate the at least one candidate missing edge to determine if the at least one candidate missing edge should be added to the first knowledge graph; expand the first knowledge graph to include the at least one candidate missing edge connecting the at least one node to at least one newly added node that is newly added to the first knowledge graph, to thereby generate an expanded knowledge graph, in response to the evaluation indicating that the at least one candidate missing edge should be added to the first knowledge graph; and perform an operation on the expanded knowledge graph to generate a knowledge output, wherein identifying the at least one candidate missing edge comprises: identifying a first pattern of entity types and relationship types between the entities of a subset of the knowledge graph; searching a second knowledge graph, different from the first knowledge graph, for a second pattern of entity types and relationship types that match the first pattern; and identifying at least one of an other entity or an other relationship, in the second knowledge graph, associated with the matching second pattern that is not part of the first pattern and not part of the matching second pattern, and wherein: the at least one newly added node is a newly added node having a same entity type as the identified other entity in the second knowledge graph, or the at least one candidate missing edge has a same relationship type as the identified other relationship in the second knowledge graph.",11,,0,B
10606893,13,"13. The computer program product of claim 12 , wherein the computer readable program further causes the computing device to evaluate the at least one candidate missing edge at least by searching a knowledge base for instances of data corresponding to the at least one other entity or other relationship and which is associated with an entity or relationship present in the first pattern.",12,claim 12,0,B
10606893,14,"14. The computer program product of claim 12 , wherein the computer readable program further causes the computing device to: generate at least one question in natural language based on the identified at least one other entity or other relationship associated with the matching second pattern; and output the at least one question to one of a human user via a computing device or an automated cognitive system configured to generate an answer to the at least one question.",13,claim 12,0,B
10606893,15,"15. The computer program product of claim 14 , wherein the computer readable program further causes the computing device to: receive an answer to the at least one question from one of the human user via the computing device or the automated cognitive system, wherein expanding the knowledge graph comprises expanding the knowledge graph to include at least one additional node or at least one edge corresponding to the answer to the at least one question.",14,claim 14,0,B
10606893,16,"16. The computer program product of claim 15 , wherein the at least one candidate missing edge is an edge, in another knowledge graph, that is connected to a corresponding pattern of entity types and relationship types that at least partially matches the sub-graph, and which is not present in the first knowledge graph.",15,claim 15,0,B
10606893,17,"17. The computer program product of claim 15 , wherein the computer readable program further causes the computing device to search other knowledge graphs for a corresponding pattern at least by utilizing at least one of explicit matching techniques or implicit matching techniques.",16,claim 15,0,B
10606893,18,"18. The computer program product of claim 12 , wherein the computer readable program further causes the computing device to: receive an input question; and generate a hypothesis for answering the input question based on a predefined tenet data structure, wherein the predefined tenet data structure specifies criteria for proving or disproving the hypothesis, and wherein identifying at least one candidate missing edge comprises: identifying a first pattern, of entities and relationships between entities, corresponding to the tenet data structure; identifying a sub-graph in the knowledge graph matching the first pattern; identifying entity types and relationship types in the sub-graph; and searching other knowledge graphs for a corresponding pattern of entity types and relationship types at least partially matching the sub-graph.",17,claim 12,0,B
10606893,19,"19. The computer program product of claim 18 , wherein the computer readable program further causes the computing device to: perform a natural language processing feature extraction operation on the input question to identify a focus of the input question; and retrieve the predefined tenet data structure from a plurality of predefined tenet data structures based on the focus of the input question, wherein the predefined tenet data structure comprises a first set of rules for proving a corresponding hypothesis and a second set of rules for disproving the corresponding hypothesis.",18,claim 18,0,B
10606893,20,"20. The computer program product of claim 19 , wherein rules in the first set of rules and the second set of rules are defined as tuples specifying a first entity or entity type, a second entity or entity type, and a relationship or relationship type for linking the first entity or entity type to the second entity or entity type.",19,claim 19,0,B
10606893,21,"21. The computer program product of claim 12 , wherein the first knowledge graph represents data collected as part of a first criminal investigation, and wherein the other knowledge graphs represent data collected as part of other criminal investigations.",20,claim 12,0,B
10606893,22,"22. An apparatus comprising: a processor; and a memory coupled to the processor, wherein the memory comprises instructions which, when executed by the processor, cause the processor to: receive a first knowledge graph comprising nodes representing entities and edges between nodes, wherein each edge represents a relationship between the nodes directly connected to each other by the edge; identify at least one candidate missing edge connecting at least one node of the first knowledge graph to at least one other node not present in the first knowledge graph; evaluate the at least one candidate missing edge to determine if the at least one candidate missing edge should be added to the first knowledge graph; expand the first knowledge graph to include the at least one candidate missing edge connecting the at least one node to at least one newly added node that is newly added to the first knowledge graph, to thereby generate an expanded knowledge graph, in response to the evaluation indicating that the at least one candidate missing edge should be added to the first knowledge graph; and perform an operation on the expanded knowledge graph to generate a knowledge output, wherein identifying the at least one candidate missing edge comprises: identifying a first pattern of entity types and relationship types between the entities of a subset of the knowledge graph; searching a second knowledge graph, different from the first knowledge graph, for a second pattern of entity types and relationship types that match the first pattern; and identifying at least one of an other entity or an other relationship, in the second knowledge graph, associated with the matching second pattern that is not part of the first pattern and not part of the matching second pattern, and wherein: the at least one newly added node is a newly added node having a same entity type as the identified other entity in the second knowledge graph, or the at least one candidate missing edge has a same relationship type as the identified other relationship in the second knowledge graph.",21,,0,B
10606894,1,"1. A computer implemented method for cognitively validating semantics of a query, comprising: generating, by one or more processor, a plurality of domain language detection models respectively corresponding to each domain from a plurality of domains, wherein the plurality of domain language detection models include respective hierarchies of classification labels applicable for respective content of each domain; obtaining, by the one or more processor, a query as submitted by a user; selecting, by the one or more processor, a domain language detection model applicable to the query from the plurality of domain language detection models; determining, by the one or more processor, intent of the query by use of the domain language detection model from selecting; formulating, by the one or more processor, a preconfigured number of alternative queries based on one or more classification labels corresponding to the intent of the query from the determining, wherein each of the queries is semantically valid; and producing, by the one or more processor, the alternative queries from the formulating to the user.",0,,1,B
10606894,2,"2. The computer implemented method of claim 1 , the generating comprising: associating, respectively, words from content of a domain into classification labels, by use of natural language classification tools; and organizing the classifications labels in a hierarchy suitable for the domain.",1,claim 1,0,B
10606894,3,"3. The computer implemented method of claim 1 , the obtaining comprising: receiving the query from a search engine, responsive to sending the query by the search engine as being unsuccessful to generate a search result corresponding to the query.",2,claim 1,0,B
10606894,4,"4. The computer implemented method of claim 1 , the selecting comprising: applying preconfigured domain selection rules selected from: a category of a present page from which the query was submitted, a department of the present page, one or more user-selected tags for narrowing a search result responding to the query, a topic of the query as returned by a high level topic detector, and combinations thereof; and determining one of the plurality of domain language detection model amongst respective domain language detection models corresponding to domains that fit best to the preconfigured domain selection rules as the domain language detection models applicable to the query.",3,claim 1,0,B
10606894,5,"5. The computer implemented method of claim 1 , the determining comprising: generating a plurality of tuples, wherein each tuple includes a classification label from the domain language detection model and a confidence value, wherein the classification label indicates one of intents that may be meant by the query, and wherein the confidence value indicates how probable the query meant the classification label corresponding to the confidence value.",4,claim 1,0,B
10606894,6,"6. The computer implemented method of claim 1 , the formulating comprising: generating a first alternative query from the preconfigured number of alternative queries by use of a first classification label corresponding to the greatest confidence value, and one or more other classification label relevant to the first classification label such that the first alternative query is semantically valid and most likely to mean what the user might have meant by the query.",5,claim 1,0,B
10606894,7,"7. The computer implemented method of claim 1 , the producing further comprising: providing a search result corresponding to one of the preconfigured number of alternative queries in association with the preconfigured number of alternative queries.",6,claim 1,0,B
10606894,8,"8. The computer implemented method of claim 1 , wherein the generating a plurality of domain language detection models respectively corresponding to each domain from a plurality of domains includes generating a plurality of domain language detection models respectively corresponding to each domain from a plurality of domains, wherein different ones of the plurality of domains are differentiated by subject matter.",7,claim 1,0,B
10606894,9,"9. The computer implemented method of claim 1 , wherein the method includes receiving feedback from the user as to the accuracy of the alternative queries, and adjusting a domain language detection model for a certain domain in dependence on the feedback.",8,claim 1,0,B
10606894,10,"10. The computer implemented method of claim 1 , wherein the method includes receiving input from the user in response to the alternative queries, and submitting a query of the alternative queries based on the input.",9,claim 1,0,B
10606894,11,"11. The computer implemented method of claim 1 , wherein the determining the intent of the query by use of the domain language detection model includes selecting hierarchical classification labels of the domain language detection model based on terms of the query.",10,claim 1,0,B
10606894,12,"12. The computer implemented method of claim 1 , wherein a hierarchy of classification labels of the domain language detection model includes (a) a top level having a classification label specifying a general product category, (b) a second level below the top level having classification labels that specify product types within the general product category, and (c) a third level below the second level having classification labels, for a certain product type referenced in the second level, different brands of the certain product type.",11,claim 1,0,B
10606894,13,"13. The computer implemented method of claim 1 , wherein a hierarchy of classification labels of the domain language detection model includes (a) a top level having a classification label specifying a general product category, (b) a second level below the top level having classification labels that specify product types within the general product category, and (c) a third level below the second level having classification labels, for a certain product type referenced in the second level, different brands of the certain product type, wherein the determining the intent of the query by use of the domain language detection model includes selecting hierarchical classification labels of the domain language detection model based on terms of the query, wherein the method includes receiving feedback from the user as to the accuracy of the alternative queries, and adjusting a domain language detection model for a certain domain in dependence on the feedback, wherein the method includes receiving input from the user in response to the alternative queries, and submitting a query of the alternative queries based on the input, wherein the formatting includes generating a first alternative query from the preconfigured number of alternative queries by use of a first classification label corresponding to the greatest confidence value, and one or more other classification label relevant to the first classification label such that the first alternative query is semantically valid and most likely to mean what the user might have meant by the query, wherein the determining comprises generating a plurality of tuples, wherein each tuple includes a classification label from the domain language detection model and a confidence value, wherein the classification label indicates one of intents that may be meant by the query, and wherein the confidence value indicates how probable the query meant the classification label corresponding to the confidence value.",12,claim 1,0,B
10606894,14,"14. A computer program product comprising: a computer readable storage medium readable by one or more processor and storing instructions for execution by the one or more processor for performing a method for cognitively validating semantics of a query, comprising: generating a plurality of domain language detection models respectively corresponding to each domain from a plurality of domains, wherein the plurality of domain language detection models include respective hierarchies of classification labels applicable for respective content of each domain; obtaining a query as submitted by a user; selecting a domain language detection model applicable to the query from the plurality of domain language detection models; determining intent of the query by use of the domain language detection model from selecting; formulating a preconfigured number of alternative queries based on one or more classification labels corresponding to the intent of the query from the determining, wherein each of the queries is semantically valid; and producing the alternative queries from the formulating to the user.",13,,0,B
10606894,15,"15. The computer program product of claim 14 , the generating comprising: associating, respectively, words from content of a domain into classification labels, by use of natural language classification tools; and organizing the classifications labels in a hierarchy suitable for the domain.",14,claim 14,0,B
10606894,16,"16. The computer program product of claim 14 , the obtaining comprising: receiving the query from a search engine, responsive to sending the query by the search engine as being unsuccessful to generate a search result corresponding to the query.",15,claim 14,0,B
10606894,17,"17. The computer program product of claim 14 , the selecting comprising: applying preconfigured domain selection rules selected from: a category of a present page from which the query was submitted, a department of the present page, one or more user-selected tags for narrowing a search result responding to the query, a topic of the query as returned by a high level topic detector, and combinations thereof; and determining one of the plurality of domain language detection model amongst respective domain language detection models corresponding to domains that fit best to the preconfigured domain selection rules as the domain language detection models applicable to the query.",16,claim 14,0,B
10606894,18,"18. The computer program product of claim 14 , the determining comprising: generating a plurality of tuples, wherein each tuple includes a classification label from the domain language detection model and a confidence value, wherein the classification label indicates one of intents that may be meant by the query, and wherein the confidence value indicates how probable the query meant the classification label corresponding to the confidence value.",17,claim 14,0,B
10606894,19,"19. A system comprising: a memory; one or more processor in communication with the memory; and program instructions executable by the one or more processor via the memory to perform a method for cognitively validating semantics of a query, comprising: generating a plurality of domain language detection models respectively corresponding to each domain from a plurality of domains, wherein the plurality of domain language detection models include respective hierarchies of classification labels applicable for respective content of each domain; obtaining a query as submitted by a user; selecting a domain language detection model applicable to the query from the plurality of domain language detection models; determining intent of the query by use of the domain language detection model from selecting; formulating a preconfigured number of alternative queries based on one or more classification labels corresponding to the intent of the query from the determining, wherein each of the queries is semantically valid; and producing the alternative queries from the formulating to the user.",18,,0,B
10606894,20,"20. The system of claim 19 , the formulating comprising: generating a first alternative query from the preconfigured number of alternative queries by use of a first classification label corresponding to the greatest confidence value, and one or more other classification label relevant to the first classification label such that the first alternative query is semantically valid and most likely to mean what the user might have meant by the query.",19,claim 19,0,B
10606895,1,"1. A computer-implemented method comprising: storing social network member profile information, company information and job posting information as strings in a database; designating a first set of stored strings as entities of a first entity type in a first dictionary of standardized entities and designating a second set of stored strings as entities of a second entity type in a second dictionary of standardized entities; storing the first dictionary of standardized entities and the second dictionary of standardized entities in the database; constructing a first finite state transducer (FST) containing strings of the first entity type using the first dictionary of standardized entities and constructing a second FST containing strings of the second entity type using the second dictionary of standardized entities; detecting an input string in a search box, the search box presented on a display device of a client system as part of a search user interface (UI) of a computing application; in response to the detecting of the input string in the search box: parsing the first FST with the input string to produce a first result of the first entity type and parsing the second FST with the input string to produce a second result of the second entity type; generating, by a processor, a typeahead suggestion string based on the first result produced by parsing the first FST and the second result produced by parsing the second FST, the typeahead suggestion string representing a query that includes a first string of the first entity type and a second string of the second entity type; and communicating the typeahead suggestion string to the client system by displaying the typeahead suggestion on the search UI.",0,,1,B
10606895,2,"2. The method of claim 1 , wherein the communicating the typeahead suggestion string to the client system comprises: generating a modified search UI by including a query selection control represented by the typeahead suggestion string in the search UI; and causing presentation of the modified search UI on a display device.",1,claim 1,0,B
10606895,3,"3. The method of claim 2 , comprising: in response to detecting activation of the query selection control, including the typeahead suggestion string into the search box; processing the query that includes the first string of the first entity type and the second string of the second entity type to produce a set of search results; and causing presentation, on the display device, of one or more items from the search results.",2,claim 2,0,B
10606895,4,"4. The method of claim 3 , wherein the processing of the query that includes the first string of the first entity type and the second string of the second entity type comprises retrieving at least one job posting from the plurality of job postings that includes a string corresponding to the first string of the first entity type and a string corresponding to the second string of the second entity type.",3,claim 3,0,B
10606895,5,"5. The method of claim 1 , wherein the computing application maintains a plurality of job postings, a job posting from the plurality of job postings including information of the first entity type and information of the second entity type.",4,claim 1,0,B
10606895,6,"6. The method of claim 1 , wherein the computing application maintains a plurality of member profiles, a member profile from the plurality of member profiles including information of the first entity type and information of the second entity type.",5,claim 1,0,B
10606895,7,"7. The method of claim 1 , comprising constructing the first FST based on a first dictionary of standardized entities of the first entity type and constructing the second FST based on a second dictionary of standardized entities of the second entity type.",6,claim 1,0,B
10606895,8,"8. The method of claim 1 , wherein the first FST and the second FST are in-memory data structures.",7,claim 1,0,B
10606895,9,"9. The method of claim 1 , wherein the computing application is an on-line social network system.",8,claim 1,0,B
10606895,10,"10. The method of claim 9 , wherein the first entity type represents strings designated as professional skills in member profiles of the on-line social network system and the second entity type represents strings designated as professional titles in member profiles of the on-line social network system.",9,claim 9,0,B
10606895,11,"11. A computer-implemented system comprising: one or more processors; and a non-transitory computer readable storage medium comprising instructions that when executed by the one or processors cause the one or more processors to perform operations comprising: storing social network member profile information, company information and job posting information as strings in a database; designating a first set of stored strings as entities of a first entity type in a first dictionary of standardized entities and designating a second set of stored strings as entities of a second entity type in a second dictionary of standardized entities; storing the first dictionary of standardized entities and the second dictionary of standardized entities in the database; constructing a first finite state transducer (FST) containing strings of the first entity type using the first dictionary of standardized entities and constructing a second FST containing strings of the second entity type using the second dictionary of standardized entities; detecting an input string in a search box, the search box presented on a display device of a client system as part of a search user interface (UI) of a computing application; in response to the detecting of the input string in the search box: parsing the first FST with the input string to produce a first result of the first entity type and parsing the second FST with the input string to produce a second result of the second entity type; generating a typeahead suggestion string based on the first result produced by parsing the first FST and the second result produced by parsing the second FST, the typeahead suggestion string representing a query that includes a first string of the first entity type and a second string of the second entity type; and communicating the typeahead suggestion string to the client system by displaying the typeahead suggestion on the search UI.",10,,0,B
10606895,12,"12. The system of claim 11 , wherein the communicating the typeahead suggestion string to the client system comprises: generating a modified search UI by including a query selection control represented by the typeahead suggestion string in the search UI; and causing presentation of the modified search UI on a display device.",11,claim 11,0,B
10606895,13,"13. The system of claim 12 , comprising: in response to detecting activation of the query selection control, including the typeahead suggestion string into the search box; processing the query that includes the first string of the first entity type and the second string of the second entity type to produce a set of search results; and causing presentation, on the display device, of one or more items from the search results.",12,claim 12,0,B
10606895,14,"14. The system of claim 13 , wherein the processing of the query that includes the first string of the first entity type and the second string of the second entity type comprises retrieving at least one job posting from the plurality of job postings that includes a string corresponding to the first string of the first entity type and a string corresponding to the second string of the second entity type.",13,claim 13,0,B
10606895,15,"15. The system of claim 11 , wherein the computing application maintains a plurality of job postings, a job posting from the plurality of job postings including information of the first entity type and information of the second entity type.",14,claim 11,0,B
10606895,16,"16. The system of claim 11 , wherein the computing application maintains a plurality of member profiles, a member profile from the plurality of member profiles including information of the first entity type and information of the second entity type.",15,claim 11,0,B
10606895,17,"17. The system of claim 11 , comprising constructing the first FST based on a first dictionary of standardized entities of the first entity type and constructing the second FST based on a second dictionary of standardized entities of the second entity type.",16,claim 11,0,B
10606895,18,"18. The system of claim 11 , wherein the first FST and the second FST are in-memory data structures.",17,claim 11,0,B
10606895,19,"19. The system of claim 11 , wherein the computing application is an on-line social network system, the first entity type represents strings designated as professional skills in member profiles of the on-line social network system, and the second entity type represents strings designated as professional titles in member profiles of the on-line social network system.",18,claim 11,0,B
10606895,20,"20. A machine-readable non-transitory storage medium having instruction data executable by a machine to cause the machine to perform operations comprising: storing social network member profile information, company information and job posting information as strings in a database; designating a first set of stored strings as entities of a first entity type in a first dictionary of standardized entities and designating a second set of stored strings as entities of a second entity type in a second dictionary of standardized entities; storing the first dictionary of standardized entities and the second dictionary of standardized entities in the database; constructing a first finite state transducer (FST) containing strings of the first entity type using the first dictionary of standardized entities and constructing a second FST containing strings of the second entity type using the second dictionary of standardized entities; detecting an input string in a search box, the search box presented on a display device of a client system as part of a search user interface (UI) of a computing application; in response to the detecting of the input string in the search box: parsing the first FST with the input string to produce a first result of the first entity type and parsing the second FST with the input string to produce a second result of the second entity type; generating a typeahead suggestion string based on the first result produced by parsing the first FST and the second result produced by parsing the second FST, the typeahead suggestion string representing a query that includes a first string of the first entity type and a second string of the second entity type; and communicating the typeahead suggestion string to the client system by displaying the typeahead suggestion on the search UI.",19,,0,B
10606896,1,"1. A computer system for generating and presenting a plurality of accessibility resolution models to one or more accessibility problems associated with a computer device and an application based on a plurality of user behavior patterns, comprising: one or more processors, one or more computer-readable memories, one or more computer-readable tangible storage devices, and program instructions stored on at least one of the one or more storage devices for execution by at least one of the one or more processors via at least one of the one or more memories, wherein the computer system is capable of performing a method comprising: detecting the plurality of user behavior patterns based on user behavior on a computer device and an application associated with the computer device; generating a plurality of user groups and a plurality of user subgroups based on one or more users and the plurality of user behavior patterns, wherein generating the plurality of user groups and the plurality of user subgroups comprises identifying and associating a plurality of impairments and disabilities with the one or more users; identifying a plurality of accessibility problems with the computer device and the application based on the detected plurality of user behavior patterns, the generated plurality of user groups, and the generated plurality of user subgroups, wherein the identified plurality of accessibility problems are selected from a group comprising at least one application problem associated with the application and at least one device problem associated with the computer device based on usability of the computer device and the application; generating a plurality of accessibility profiles based on the detected plurality of user behavior patterns, the generated plurality of user groups, the generated plurality of user subgroups, and the identified plurality of accessibility problems; determining at least one correlation between the generated plurality of accessibility profiles and at least one business loss indicator, wherein determining at least one correlation comprises determining a plurality of causal connections between the at least one business loss indicator and the identified plurality of accessibility problems on the computer device and the application that are associated with each of the generated plurality of accessibility profiles; and generating and presenting the plurality of accessibility resolution models for the computer device and the application based on the identified plurality of accessibility problems, the detected plurality of user behavior patterns, the generated plurality of user groups, the generated plurality of user subgroups, and the determined at least one correlation between the generated plurality of accessibility profiles and the at least one business loss indicator.",0,,1,B
10606897,1,"1. A computer-implemented process performed by a processor in a computer, comprising: receiving an initial search query string into memory of the computer; presenting the initial search query string to sources of items comprising applications executing on the computer, the items comprising computer-readable data, wherein the data items are identified by and accessible by the computer from the sources using name strings of the data items, respectively; receiving into the memory, suggestion strings from the sources in response to presenting the initial query, wherein name strings for data items provided by the sources are determined to match the initial search query string, wherein the sources generate the name strings based on query results including name strings for the data items that match the initial search query string, and wherein the received name strings respectively correspond to the data items matching the initial search query string; computing, by the computer, a suggestion score for each of the received suggestion strings as a weighted combination of features, wherein a weight is assigned to each feature, and each feature is related to a nature of a match between the initial search query string and the data item resulting in the suggestion string, wherein the sources are assigned respective sets of weights to be applied to a set of features for the suggestion strings from the respective sources, and wherein at least a first source has different weightings for those features than a second source; combining the received suggestion strings into a list of suggestion strings in the memory, according to the computed scores for the suggestion strings, including: generating source scores for the respective sources based on the scores for the suggestion strings from the respective sources, grouping the suggestion strings into suggestion groups corresponding to their respective sources, ranking the suggestion strings within each suggestion group by the corresponding suggestion scores, and ordering the suggestion groups relative to each other according to the source scores of the corresponding sources; presenting the ordered and ranked list of suggestion strings on an output device, wherein the suggestion groups are presented as ordered relative to each other, and wherein the suggestion strings within each suggestion group are presented in order relative to each other according to the suggestion scores within the suggestion group; receiving an indication of an interactively selected suggestion string from among the presented suggestion strings, wherein the selected suggestion string corresponds to a data item matching the initial query string; and in response to receiving the indication of the selected suggestion, accessing the corresponding data item.",0,,1,B
10606897,2,"2. The computer-implemented process of claim 1 , wherein at least one of the sources comprises a file system of a computer, and wherein the name strings include file names of files matching the initial search query string.",1,claim 1,0,B
10606897,3,"3. The computer-implemented process of claim 1 , wherein at least one of the sources comprises a search tool for a file system of an operating system on the computer and at least one of the sources comprises a search engine accessed by the computer over a computer network.",2,claim 1,0,B
10606897,4,"4. The computer-implemented process of claim 1 , wherein at least one of the sources generates suggestion strings based on an aggregated history of prior query strings submitted to the sources.",3,claim 1,0,B
10606897,5,"5. The computer-implemented process of claim 1 , wherein the list of suggestion strings is stored on the computer in a history of lists of suggestion strings.",4,claim 1,0,B
10606897,6,"6. The computer-implemented process of claim 1 , wherein data representing the indication of the selected suggestion string is stored on the computer in a history selected suggestion strings.",5,claim 1,0,B
10606897,7,"7. The computer-implemented process of claim 1 , wherein data representing the list of suggestion strings and data representing the indication of the selected suggestion string are transmitted to another computer over a computer network for aggregation and storage with data from other computers connected to the computer network.",6,claim 1,0,B
10606897,8,"8. An article of manufacture, the article of manufacture not comprising a signal, the article of manufacture comprising: a memory device or a storage device, neither comprising a signal; computer program instructions stored on the memory device or the storage device which, when processed by a processing device, instruct the processing device to perform a process comprising: receiving an initial search query string into memory; sending the initial search query string to applications executed by the processing device, the applications providing data items stored on the memory device or the storage device, the data items comprising computer-readable data, wherein each data item is identified by and accessible by the processing device from the applications using a name string for the data item; receiving, into the memory, suggestion name strings from the applications in response to the initial query string, the suggestion names strings corresponding to data items from the applications matching the initial search query string, wherein the applications generate the suggestion name strings based on query results for the data items that match the initial search query string, and wherein the received resource suggestion name strings correspond to the data items from the applications matching the initial search query string; computing data item scores for the respective suggestion name strings as weighted combinations of features, wherein a weight is assigned to each feature, and each feature is related to a nature of a match between the initial search query string and the data item resulting in the suggestion, wherein each of the applications is assigned a respective set of weights to be applied to features for the suggestion name strings for that source, and wherein at least a first application has different features and different weightings for those features than a second application; combining the received suggestion name strings into a list in memory, wherein the combining is performed according to the computed data item scores, the combining including: generating order scores the respective applications based on the data item scores, each application having a respective order score, grouping the suggestion name strings into suggestion groups by application, ranking the suggestion name strings within each suggestion group by the corresponding data item scores, and ordering the suggestion groups according to the order scores of the corresponding applications; displaying the ranked and ordered list on an a display, wherein the suggestion groups are presented in order according to the order scores, and wherein the suggestion name strings within each group are displayed in order according to the corresponding ranking within the suggestion group; receiving an indication of a selected suggestion name string from among the displayed suggestion name strings, wherein the selected suggestion name string corresponds to a data item matching the initial query; and in response to receiving the indication of the selected suggestion name string, accessing the data item corresponding to the selected suggestion name string.",7,,0,B
10606897,9,"9. The article of manufacture of claim 8 , wherein the combining further comprises removing duplicate suggestion name strings.",8,claim 8,0,B
10606897,10,"10. The article of manufacture of claim 8 , wherein at least one of the applications comprises a search tool for a file system of an operating system.",9,claim 8,0,B
10606897,11,"11. The article of manufacture of claim 10 , wherein another of the applications comprises a history that generates suggestion name strings based on data related to prior queries submitted to the applications.",10,claim 10,0,B
10606897,12,"12. The article of manufacture of claim 8 , wherein at least one of the applications comprises a file system of a computer, and wherein the received suggestion name strings include file names of files matching the initial search query string.",11,claim 8,0,B
10606897,13,"13. The article of manufacture of claim 8 , wherein the list is stored in a history of lists of suggestion name strings.",12,claim 8,0,B
10606897,14,"14. The article of manufacture of claim 8 , wherein data representing the indication of the selected suggestion name string is stored in a history of selected suggestion name strings.",13,claim 8,0,B
10606897,15,"15. A computing device comprising: processing hardware; a display; a user input device; storage hardware storing information configured to, when executed by the processing hardware, cause the computing device to perform a process, the process comprising: executing a first application, the first application configured to provide first objects in the storage hardware to applications executing on the computing device, the first application further configured to provide access to the first objects based on requests comprising names of the first objects, respectively; executing a second application, the second application configured to provide second objects in the storage hardware to applications executing on the computing device, the second application further configured to provide access to the second objects based on requests comprising names of the second objects, respectively; receiving a query string inputted from the user input device and displayed on the display, and based thereon: sending the query string to the first application and receiving in return corresponding first names returned by the first application; sending the query string to the second application and receiving in return corresponding second names returned by the first application; generating first scores for the respective first names in the first set by applying a scoring function to thereto, and ordering the first names according to the first scores; generating second scores for the respective second names in the first set by applying a scoring function to thereto, and ordering the second names according to the first scores; ranking the first application and the second application relative to each other; displaying the ordered first names adjacent to each other and the ordered second names adjacent to each other, wherein the ordered first names and ordered second names are displayed relative to each other according to the ranking of the first and second applications, and wherein the first names and second names are displayed with respective icons identifying types of objects represented by the first names and second names; and wherein a displayed first name or second name is selected with the user input device and provided to the corresponding first or second application, which in turn provides access to a corresponding first or second object.",14,,0,B
10606897,16,"16. A computing device according to claim 15 , wherein the ranking the first application relative to the second application is based on features of the first names and features of the second names.",15,claim 15,0,B
10606897,17,"17. A computing device according to claim 15 , wherein the process is performed by a search application executing on the computing device.",16,claim 15,0,B
10606898,1,"1. A system comprising: a robot comprising a module to interpret natural language commands, the module comprising a function for mapping natural language commands of varying complexities to reward functions at different levels of abstraction within a hierarchical planning framework, the function comprising: a deep neural network language model that learns how to map the natural language commands to reward functions at an appropriate level of the hierarchical planning framework; an Abstract Markov Decision Process to represent a decision-making problem involving a hierarchy of the robot's states and actions, the Abstract Markov Decision Process comprising: a set of states that define an environment specified in an object-oriented fashion with object classes and attributes; a set of actions an agent can execute to transition between states or to invoke a lower-level AMDP subtask; a transition probability distribution over all possible next states given a current state and executed action; a numerical reward earned for a particular transition; a discount factor or effective time horizon under consideration; and a state projection function that maps lower-level states to higher-level (AMDP) states.",0,,1,B
10606898,2,"2. A system comprising: a robot comprising a module comprising a function for mapping natural language commands of varying complexities to reward functions at different levels of abstraction within a hierarchical planning framework, the function comprising: a deep neural network language model that learns how to map the natural language commands to reward functions at an appropriate level of the hierarchical planning framework; an Abstract Markov Decision Process to represent a decision-making problem involving a hierarchy of the robot's states and actions, the Abstract Markov Decision Process comprising: a set of states that define an environment specified in an object-oriented fashion with object classes and attributes; a set of actions an agent can execute to transition between states or to invoke a lower-level AMDP subtask; a transition probability distribution over all possible next states given a current state and executed action; a numerical reward earned for a particular transition; a discount factor or effective time horizon under consideration; and a state projection function that maps lower-level states to higher-level (AMDP) states.",1,,0,B
10606898,3,"3. A method comprising: providing a mobile-manipulator robot; and providing a module that interprets and grounds natural language commands to a mobile-manipulator robot at multiple levels of abstraction, the module comprising a deep neural network language model that learns how to map the natural language commands to reward functions at an appropriate level of a hierarchical planning framework, the functions comprising an Abstract Markov Decision Process to represent a decision-making problem involving a hierarchy of the robot's states and actions, the Abstract Markov Decision Process comprising: a set of states that define an environment specified in an object-oriented fashion with object classes and attributes; a set of actions an agent can execute to transition between states or to invoke a lower-level AMDP subtask; a transition probability distribution over all possible next states given a current state and executed action; a numerical reward earned for a particular transition; a discount factor or effective time horizon under consideration; and a state projection function that maps lower-level states to higher-level (AMDP) states.",2,,0,B
10606899,1,"1. A computer-implemented method, comprising: receiving a search query; determining a first set of categories associated with the search query, where each category of the first set of categories includes one or more words that describe one or more aspects of the search query, and each of the first set of categories associated with the search query includes a slash tag unique to a predetermined subject, the slash tag including a grouping of identifiers of locations of a plurality of documents; determining a second set of categories associated with preliminary results of the search query; and filtering the preliminary results of the search query, including removing a subset of the preliminary results of the search query based on a comparison of the first set of categories to the second set of categories.",0,,1,B
10606899,2,"2. The computer-implemented method of claim 1 , wherein a reverse lookup is performed for the search query using a dynamic inference map in order to determine the first set of categories, and determining the second set of categories associated with preliminary results of the search query includes: identifying the preliminary results of the search query by performing a search utilizing the search query and a search index, extracting textual data from each of the preliminary results of the search query by crawling the preliminary results of the search query, identifying one or more key words within the extracted textual data, utilizing latent dirichlet allocation (LDA) analysis, and mapping the one or more key words onto a predetermined set of categories to determine the second set of categories.",1,claim 1,0,B
10606899,3,"3. The computer-implemented method of claim 1 , wherein determining the first set of categories includes: categorizing one or more words within the search query, and performing a reverse lookup for the search query using a dynamic inference map to determine the first set of categories, wherein each category of the first set of categories has an associated confidence score indicating a strength of a match between the category and the search query.",2,claim 1,0,B
10606899,4,"4. The computer-implemented method of claim 1 , wherein filtering the preliminary results of the search query includes: ranking each of the preliminary results of the search query according to matching categories and associated confidence levels determined between the first set of categories and the second set of categories, and returning a predetermined number of the ranked preliminary results.",3,claim 1,0,B
10606899,5,"5. The computer-implemented method of claim 1 , wherein filtering the preliminary results includes: comparing the first set of categories to the second set of categories to determine matching categories, where each of the matching categories includes an associated confidence score, determining an overall match score for each the preliminary results of the search query, utilizing to the matching categories and the associated confidence score for each of the matching categories, and for each of the preliminary results of the search query, returning the preliminary result in response to determining that the overall match score for the preliminary result exceeds a threshold.",4,claim 1,0,B
10606899,6,"6. The computer-implemented method of claim 1 , wherein filtering the preliminary results includes returning each of the preliminary results of the search query only if its overall match score exceeds a predetermined threshold.",5,claim 1,0,B
10606899,7,"7. The computer-implemented method of claim 1 , wherein determining the second set of categories associated with preliminary results of the search query includes extracting textual data from each of the preliminary results of the search query, where: the preliminary results of the search query include a plurality of URLs, and the textual data extracted includes data extracted from a plurality of web pages pointed to by the plurality of URLs.",6,claim 1,0,B
10606899,8,"8. The computer-implemented method of claim 7 , wherein determining the second set of categories associated with preliminary results of the search query includes determining a plurality of key words from the textual data, utilizing latent dirichlet allocation (LDA) analysis.",7,claim 7,0,B
10606899,9,"9. The computer-implemented method of claim 8 , wherein determining the second set of categories associated with preliminary results of the search query includes mapping the plurality of key words to a predetermined set of categories, where each of the plurality of key words maps to one or more categories of the predetermined set of categories.",8,claim 8,0,B
10606899,10,"10. A computer program product for categorically filtering search results, the computer program product comprising a computer readable storage medium having program instructions embodied therewith, wherein the computer readable storage medium is not a transitory signal per se, the program instructions executable by a processor to cause the processor to perform a method comprising: receiving a search query, utilizing the processor; determining, utilizing the processor, a first set of categories associated with the search query, where each category of the first set of categories includes one or more words that describe one or more aspects of the search query, and each of the first set of categories associated with the search query includes a slash tag unique to a predetermined subject, the slash tag including a grouping of identifiers of locations of a plurality of documents; determining, utilizing the processor, a second set of categories associated with preliminary results of the search query; and filtering, utilizing the processor, the preliminary results of the search query, including removing a subset of the preliminary results of the search query based on a comparison of the first set of categories to the second set of categories.",9,,0,B
10606899,11,"11. The computer program product of claim 10 , wherein a reverse lookup is performed for the search query using a dynamic inference map in order to determine the first set of categories.",10,claim 10,0,B
10606899,12,"12. The computer program product of claim 10 , wherein a confidence level is associated with each category within the first set of categories.",11,claim 10,0,B
10606899,13,"13. The computer program product of claim 10 , wherein determining the second set of categories associated with preliminary results of the search query includes identifying the preliminary results of the search query by performing a search utilizing the search query.",12,claim 10,0,B
10606899,14,"14. The computer program product of claim 10 , wherein filtering the preliminary results includes removing a subset of the preliminary results of the search query according to a comparison of the first set of categories to the second set of categories.",13,claim 10,0,B
10606899,15,"15. The computer program product of claim 10 , wherein filtering the preliminary results includes determining an overall match score for each of the preliminary results of the search query.",14,claim 10,0,B
10606899,16,"16. The computer program product of claim 15 , wherein filtering the preliminary results includes returning each of the preliminary results of the search query only if its overall match score exceeds a predetermined threshold.",15,claim 15,0,B
10606899,17,"17. The computer program product of claim 10 , wherein determining the second set of categories associated with preliminary results of the search query includes extracting textual data from each of the preliminary results of the search query.",16,claim 10,0,B
10606899,18,"18. The computer program product of claim 17 , wherein determining the second set of categories associated with preliminary results of the search query includes determining a plurality of key words from the textual data, utilizing latent dirichlet allocation (LDA) analysis.",17,claim 17,0,B
10606899,19,"19. A system, comprising: a processor; and logic integrated with the processor, executable by the processor, or integrated with and executable by the processor, the logic being configured to: receive a search query; determine a first set of categories associated with the search query, where each category of the first set of categories includes one or more words that describe one or more aspects of the search query, and each of the first set of categories associated with the search query includes a slash tag unique to a predetermined subject, the slash tag including a grouping of identifiers of locations of a plurality of documents; determine a second set of categories associated with preliminary results of the search query; and filter the preliminary results of the search query, including removing a subset of the preliminary results of the search query based on a comparison of the first set of categories to the second set of categories.",18,,0,B
10606900,1,"1. An intelligent searching method based on a mobile device, comprising: acquiring an electronic data content and storing the electronic data content in a designated folder by the mobile device after the mobile device detects that a user operates to duplicate the electronic data content; scanning applications in the mobile device at regular intervals by a search program; linking, in response to detecting that one or more search portals in the applications exist, the one or more search portals to a main search portal in the mobile device, wherein the applications including the one or more search portals release search interfaces to the search program and authorize to permit the search program to call a search function in the applications; loading electronic data contents automatically by the mobile device when it is detected that the user clicks a search box on a display of the mobile device; displaying the electronic data contents in the search box in a list on the display; broadcasting the selected one of the electronic data contents to the applications in the mobile device, when it is detected that one of the electronic data contents in the list is selected; performing a search for the selected one of the electronic data contents within the applications; and displaying an icon or icons of one or more of the applications which include the selected one of the electronic data contents on the display, wherein the loading the electronic data contents automatically by the mobile device and displaying the electronic data contents in the search box in the list on the display comprises: loading the electronic data contents in the designated folder automatically after the search program in the mobile device receives and executes a command from the user; sorting the electronic data contents in sequential order by the mobile device; and displaying the sorted electronic data contents in the search box in the list on the display, wherein the sorted electronic data contents are duplicated by the user, stored in the designated folder and not typed by the user.",0,,1,B
10606900,2,"2. The intelligent searching method based on the mobile device of claim 1 , after the displaying the icon or icons of the one or more of the applications which include the selected one of the electronic data contents on the display, the method further comprises: linking to a result page of a corresponding one of the applications which includes the selected one of the electronic data contents, in response to detecting a clicking operation of the icon of the corresponding one of the applications.",1,claim 1,0,B
10606900,3,"3. The intelligent searching method based on the mobile device of claim 1 , further comprising: setting up one or more links between the main search portal and the one or more search portals in the applications in the mobile device.",2,claim 1,0,B
10606900,4,"4. The intelligent searching method based on the mobile device of claim 1 , wherein the electronic data content and the command requiring performing the search are transmitted to the applications, in response to detecting that the one of the electronic data contents in the list is selected.",3,claim 1,0,B
10606900,5,"5. An intelligent searching system based on a mobile device, comprising: at least one processor; and a memory connected with the at least one processor, the memory comprising a plurality of program instructions executable by the at least one processor, the program instructions comprising: a detecting and storing module configured to cause the at least one processor to acquire an electronic data content and to store the electronic data contents in a designated folder, after the mobile device detects that a user operates to duplicate the electronic data content; a scanning module configured to cause the at least one processor to scan applications in the mobile device at regular intervals by a search program in the mobile device; a linking module configured to cause the at least one processor to link, in response to detecting that one or more search portals in the applications exist, the one or more search portals to a main search portal in the mobile device, wherein the applications including the one or more search portals release search interfaces to the search program and authorize to permit the search program to call a search function in the applications; a content downloading and displaying module configured to cause the at least one processor to automatically load electronic data contents when it is detected that the user clicks a search box on a display of the mobile device, and configured to cause the at least one processor to display the electronic data contents in the search box in a list on the display; a calling and searching module configured to cause the at least one processor to broadcast the selected one of the electronic data contents to the applications in the mobile device, when it is detected that one of the electronic data contents in the list is selected, and to configured to cause the at least one processor to perform a search for the selected one of the electronic data contents within the applications; and a displaying module configured to cause the at least one processor to display an icon or icons of one or more of the applications which include the selected one of the electronic data contents on the display, wherein the electronic data content downloading and displaying module comprises: a content loading unit configured to cause the at least one processor to automatically load the electronic data contents in the designated folder after the search program in the mobile device receives and executes a command from the user; a sorting unit configured to cause the at least one processor to sort the electronic data contents in sequential order; and a displaying unit configured to cause the at least one processor to display the sorted electronic data contents in the search box in the list on the display, wherein the sorted electronic data contents are duplicated by the user, stored in the designated folder and not typed by the user.",4,,0,B
10606900,6,"6. The intelligent searching system based on the mobile device of claim 5 , further comprising: a link unit module configured to cause the at least one processor to link to a result page of a corresponding one of the applications which includes the selected one of the electronic data contents, in response to detecting a clicking operation of the icon of the corresponding one of the applications.",5,claim 5,0,B
10606900,7,"7. The intelligent searching system based on the mobile device of claim 5 , further comprising: a presetting module configured to cause the at least one processor to set up one or more links between the main search portal and the one or more search portals in the applications in the mobile device.",6,claim 5,0,B
10606900,8,"8. The intelligent searching system based on the mobile device of claim 5 , wherein the electronic data content and the command requiring performing the search are transmitted to the applications, in response to detecting that the one of the electronic data contents in the list is selected.",7,claim 5,0,B
10606901,1,"1. A method for performing information management for data objects in a computing system using information management, the method comprising: collecting, using a first adapter, first metadata concerning data objects stored in the computing system, wherein the first metadata already exists with the data objects prior to collecting the first metadata; examining network traffic in the computing system to identify network traffic information that identifies applications operating in the computing system, wherein the network traffic information is included in the first metadata; generating, using a second adapter, second metadata based on the data objects, wherein the second metadata is different from the first metadata and is derived from the data objects and at least a portion of the first metadata, wherein deriving the second metadata includes performing cascaded discovery for at least some of the data objects such that a portion of the first metadata is used to generate at least some of the second metadata and wherein at least a portion of the second metadata is derived from content of the data objects; classifying the data objects in the computing system to assign one or more categories to each data object, wherein each data object is classified individually using the first metadata and the second metadata, and wherein classifying data objects includes applying rules to assign one or more categories to each of the data objects, wherein results of the rules, the first metadata and the second metadata are used to assign the one or more categories to each data object are stored in a repository separate from the data objects, wherein the first metadata, the second metadata and the rules are configured to apprise an owner of the data objects about content of the data objects; determining service level objectives for each of the data objects individually by mapping the categories of the data objects to the service level objectives based on the assigned categories, wherein each data object is associated with its own service level objectives; mapping the service level objectives to services that are actually available in the computing system, wherein the services that are actually available include data disposition services, wherein the data disposition services are determined for each of the data objects individually; orchestrating the services including the data disposition services by submitting a proposal to orchestration adapters and selecting selected orchestration adapters from the orchestration adapters that are best suited to provide the services based on responses of the orchestration adapters; performing the data disposition services, orchestrated by the selected orchestration adapter for the disposition services, to the data objects that are associated with the data disposition service; and excluding data objects subject to the data disposition service from receiving other services until the data disposition service is performed, wherein providing the data disposition services includes: for first data objects that associated with a category indicating that the first data objects contain sensitive information and are stored on an insecure server, moving the first data objects to a secure server and deleting the first data objects from the insecure server; for second data objects associated with a category indicating that the second data objects require archiving, archiving the second objects and then deleting the second data objects; for third data objects associated with a category indicating that notification is required, notifying the owner of the third data objects that the third data objects are to be deleted prior to deleting the third data objects, wherein the notification provides the owner with a review period to determine whether the third data objects should be deleted; for fourth data objects associated with a category indicating that a review period is required, soft-deleting the fourth data objects by setting a bit such that the fourth data objects are hidden from at least some users, wherein the fourth data objects are deleted after the review period expires unless the deletion is stopped; and deleting fifth data objects assigned to a category indicating that the fifth data objects subject to deletion.",0,,1,B
10606901,2,"2. The method of claim 1 , wherein identifying specific data objects for deletion further comprises identifying one or more deletion indicators for the specific data objects.",1,claim 1,0,B
10606901,3,"3. The method of claim 2 , wherein identifying one or more deletion indicators for the specific data objects further comprises identifying a value of the specific data objects to an entity.",2,claim 2,0,B
10606901,4,"4. The method of claim 1 , wherein providing the data disposition services comprises: receipt of a proposal by an orchestration adaptor; evaluation, by the orchestration adapter, of the ability of the orchestration adaptor to satisfy an action specified in the proposal; and reporting, by the orchestration adapter, whether the orchestration adaptor can perform the action specified in the proposal.",3,claim 1,0,B
10606901,5,"5. The method of claim 1 , further comprising determining whether the data objects include one or more of keywords or phrases specified by a deletion policy associated with the data disposition services.",4,claim 1,0,B
10606901,6,"6. The method of claim 1 , further comprising determining if the first or the second metadata associated with the data object include one or more of keywords or phrases specified by the deletion policy associated with the data disposition services.",5,claim 1,0,B
10606901,7,"7. The method of claim 1 , further comprising broadcasting that the specific data objects are going to be deleted.",6,claim 1,0,B
10606901,8,"8. The method of claim 1 , further comprising changing an access control list on the specific data objects as a precursor to full deletion; and fully deleting the specific data objects when called for by the deletion policy.",7,claim 1,0,B
10606901,9,"9. The method of claim 1 , further comprising deleting files included in the data objects that are unrelated to a business of an entity that owns the data objects.",8,claim 1,0,B
10606901,10,"10. The method of claim 1 , further comprising identifying the specific data objects for deletion based in part on first metadata collected concerning an infrastructure of the computing system.",9,claim 1,0,B
10606901,11,"11. The method of claim 1 , further comprising retaining a copy of the specific data objects in secondary storage or in archive storage prior to deleting the specific storage from primary storage.",10,claim 1,0,B
10606901,12,"12. A method for providing information management in a computing system, the method comprising: discovering environment data about an infrastructure of a computing system, the infrastructure including hardware, software, services, applications, and services operating in the computing environment, wherein discovering applications and services includes examining network traffic information to identify the applications and services and discovering environment data includes walking IP addresses to identify servers in the computing system; classifying the data objects in the computing system based on information discovered about the data objects, the information including first metadata collected from the data objects using a first adapter and second metadata generated from the data objects using a second adapter, wherein the first metadata already exists with the data objects before being collected and is different from the second metadata and wherein the second metadata is derived from the data objects and at least a portion of the first metadata, wherein deriving the second metadata includes generating at least a portion of the second metadata from content of the data objects; applying rules that are selected to manage a scope of the one or more categories that are assigned to each of the data objects during classification, wherein the one or more categories are assigned based on the environment data, the first metadata the second metadata, and results of the rules, wherein the environment data, the first metadata, the second metadata, and results are configured to apprise an owner of the data objects about content of the data objects; mapping each of the data objects individually to one or more service level objectives based on the assigned one or more categories of each of the data objects; resolving conflicts between conflicting service level objectives in order to prioritize the service level objectives; mapping the service level objectives to services that are available to the computing system, wherein the services actually available include data disposition services; orchestrating the services including the data disposition services by submitting a proposal to orchestration adapters and selecting selected orchestration adapters from the orchestration adapters that are best suited to provide the services based on responses of the orchestration adapters; excluding the data objects subject to the data disposition services based on the assigned categories from receiving other services at the time of performing the data disposition services; and performing the data disposition services to the data objects, orchestrated by the orchestration adapter selected for the disposition services, that have been mapped to the data disposition services, wherein providing the data disposition services includes: for first data objects that associated with a category indicating that the first data objects contain sensitive information and are stored on an insecure server, moving the first data objects to a secure server and deleting the first data objects from the insecure server; for second data objects associated with a category indicating that the second data objects require archiving, archiving the second objects and then deleting the second data objects; for third data objects associated with a category indicating that notification is required, notifying the owner of the third data objects that the third data objects are to be deleted prior to deleting the third data objects, wherein the notification provides the owner with a review period to determine whether the third data objects should be deleted; for fourth data objects associated with a category indicating that a review period is required, soft-deleting the fourth data objects by setting a bit such that the fourth data objects are hidden from at least some users, wherein the fourth data objects are deleted after the review period expires unless the deletion is stopped; and deleting fifth data objects assigned to a category indicating that the fifth data objects subject to deletion.",11,,0,B
10606901,13,"13. The method of claim 12 , wherein providing the data disposition services includes examining the first and the second metadata for at least one of phrases or words that are included in a list of deletion indicators.",12,claim 12,0,B
10606901,14,"14. The method of claim 13 , further comprising applying a deletion policy during classification to determine whether to provide specific data objects with the data disposition services.",13,claim 13,0,B
10606901,15,"15. A method for performing information management for data such that policies of an entity that owns the data are implemented, the method comprising: collecting, using a first adapter, first metadata concerning data objects stored in a computing system, wherein the first metadata already exists with the data objects prior to collecting the first metadata; decoding and examining network traffic in the computing system to identify network traffic information that identifies application operating in the network, wherein the network traffic information is included in the first metadata; deriving, using a second adapter, second metadata concerning the data objects, wherein the second metadata is different from the first metadata and is derived by processing the data objects and at last a portion of the first metadata, wherein at least a portion of the second metadata is derived from content of the data objects; defining one or more policies that identify treatments for the data objects, wherein one of the policies comprises a deletion policy; classifying the data objects in the computing system such that categories are assigned to each of the data objects based at least on the first metadata and the second metadata and the one or more policies, wherein the one or more categories assigned to each data object are stored in a repository separate from the data objects, wherein the repository persists state information for each data object that reflects a processing state, wherein the state information facilitates subsequent classifications of the data objects, wherein the state information is configured to apprise an owner of content of the data objects; mapping each of the data objects individually to one or more service level objectives based on the categories assigned to each of the data objects; determining services for each of the data objects individually based on the corresponding service level objectives wherein the services include data disposition services, wherein the data disposition services are determined for specific data objects and wherein the one or more categories of the specific data objects reflect why the data objects are identified for the data disposition services; orchestrating the services including the data disposition service by submitting a proposal to orchestration adapters and selecting selected orchestration adapters from the orchestration adapters that are best suited to provide the services based on response of the orchestration adapters; excluding the one or more data objects subject to the data disposition service from receiving other services associated with the specific data objects based on the categories assigned to the one or more data objects and until the data disposition service is performed such that the other services are not applied to data objects that do not need the other services; and performing the data disposition services, orchestrated by the orchestration adapter selected for the disposition services, to the data objects that have been mapped to the data disposition services, wherein providing the data disposition services includes: for first data objects that associated with a category indicating that the first data objects contain sensitive information and are stored on an insecure server, moving the first data objects to a secure server and deleting the first data objects from the insecure server; for second data objects associated with a category indicating that the second data objects require archiving, archiving the second objects and then deleting the second data objects; for third data objects associated with a category indicating that notification is required, notifying the owner of the third data objects prior to deleting the third data objects, wherein the notification provides the owner with a review period to determine whether the third data objects should be deleted; for fourth data objects associated with a category indicating that a review period is required, soft-deleting the fourth data objects by setting a bit such that the fourth data objects are hidden from at least some users, wherein the fourth data objects are deleted after the review period expires unless the deletion is stopped; and deleting fifth data objects assigned to a category indicating that the fifth data objects subject to deletion.",14,,0,B
10606901,16,"16. The method of claim 15 , further comprising one or more of: associating the one or more policies with the one or more service level data objectives; mapping the data objects to the services using the service level data objectives when relating the assigned categories with the one or more policies, wherein the specific data objects are mapped to the data disposition services; and initiating a workflow when executing the data disposition services such that the specific data objects are subjected to a period of review prior to deletion from the computing system.",15,claim 15,0,B
10606901,17,"17. The method of claim 12 , wherein determining services for each of the data objects individually comprises: receipt of a proposal by an orchestration adaptor; evaluation, by the orchestration adapter, of the ability of the orchestration adaptor to satisfy an action specified in the proposal; and reporting, by the orchestration adapter, whether the orchestration adaptor can perform the action specified in the proposal.",16,claim 12,0,B
10606901,18,"18. The method of claim 15 , further comprising notifying an owner of reasons why the specific data objects where provided with the data disposition services.",17,claim 15,0,B
10606902,1,"1. A method for servicing document search requests, comprising: receiving, by a document management service, a document search query from a requesting user; injecting, into the document search query, a user access vector, wherein the user access vector specifies, for the requesting user, access control lists that are associated with the requesting user, wherein the user access vector is obtained from a user access vector cache, located on the document management service, and wherein the user access vector cache is populated using content in an access control repository located on a repository server; generating an entry for the requesting user in a user group cache, comprising: identifying ancestor groups of the requesting user; and associating the ancestor groups with the requesting user; identifying, in a document repository, documents that match the document search query with the injected user access vector, wherein a matching document requires a match of terms in the document search query with terms in the matching document, and a match of at least one access control list specified in the matching document and at least one of the access control lists specified in the user access vector; and making a determination that an added user was added to a user group, in a user group repository, and based on the determination: identifying, in the user group repository, an ancestor group of the added user; associating the ancestor group with the added user, in the user group cache; and purging the entry for the added user, in the user access vector cache.",0,,1,B
10606902,2,"2. The method of claim 1 , wherein populating the user access vector cache comprises: identifying, in the access control repository, access control lists for the requesting user; associating the identified access control lists with the requesting user, in the user access vector cache; retrieving, from the user group cache, the ancestor groups of the requesting user; obtaining, for the ancestor groups of the requesting user, access control lists from the access control repository; and associating the obtained access control lists for the ancestor groups of the requesting user with the requesting user.",1,claim 1,0,B
10606902,3,"3. The method of claim 1 , wherein updating at least one of the user access vector cache and the user group cache comprises making a second determination that the user group was added in the user group repository, and based on the second determination: identifying, in the user group cache, user entries that are affected by the added user group; for each of the identified user entries: associating ancestor groups to which the user group was added with a user entry; and purging the identified user entry, in the user access vector cache.",2,claim 1,0,B
10606902,4,"4. The method of claim 1 , wherein updating at least one of the user access vector cache and the user group cache comprises making a second determination that a user was removed from the user group in the user group repository, and based on the second determination: removing ancestor groups that are associated with the removed user from the user group cache; identifying, in the user group repository, ancestor groups of the removed user; for each of the identified ancestor groups, associate the ancestor group with the user entry for the removed user, in the user group cache; and purging the entry for the removed user, in the user access vector cache.",3,claim 1,0,B
10606902,5,"5. The method of claim 1 , wherein updating at least one of the user access vector cache and the user group cache comprises making a second determination that the user group was removed in the user group repository, and based on the second determination: identifying, in the user group cache, user entries with which the removed group is associated; for each of the identified user entries: identifying ancestor groups and associating the re-identified ancestor groups with the user entry; and purging the user entry in the user access vector cache.",4,claim 1,0,B
10606902,6,"6. The method of claim 1 , wherein updating at least one of the user access vector cache and the user group cache comprises making a second determination that the access control repository has changed, and based on the second determination: identifying, in the user access vector cache, access control list entries that are affected by the change; and removing the identified access control list entries from the user access vector cache.",5,claim 1,0,B
10606902,7,"7. A non-transitory computer-readable medium (CRM) comprising instructions that enable a system for servicing document search requests to: receive, by a document management service, a document search query from a requesting user; inject, into the document search query, a user access vector, wherein the user access vector specifies, for the requesting user, access control lists that are associated with the requesting user, wherein the user access vector is obtained from a user access vector cache, located on the document management service, and wherein the user access vector cache is populated using content in an access control repository located on a repository server; generate an entry for the requesting user in a user group cache, comprising: identifying ancestor groups of the requesting user; and associating the ancestor groups with the requesting user; identify, in a document repository, documents that match the document search query with the injected user access vector, wherein a matching document requires a match of terms in the document search query with terms in the matching document, and a match of at least one access control list specified in the matching document and at least one of the access control lists specified in the user access vector; and make a determination that an added user was added to a user group, in a user group repository, and based on the determination: identify, in the user group repository, an ancestor group of the added user; associate the ancestor group with the added user, in the user group cache; and purge the entry for the added user, in the user access vector cache.",6,,0,B
10606902,8,"8. The non-transitory CRM of claim 7 , wherein populating the user access vector cache comprises: identifying, in the access control repository, access control lists for the requesting user; associating the identified access control lists with the requesting user, in the user access vector cache; retrieving, from the user group cache, the ancestor groups of the requesting user; obtaining, for the ancestor groups of the requesting user, access control lists from the access control repository; and associating the obtained access control lists for the ancestor groups of the requesting user with the requesting user.",7,claim 7,0,B
10606902,9,"9. A system for servicing document search requests, comprising: a document management service; and a repository server comprising a document repository; wherein the document management service: receives a document search query from a requesting user; injects, into the document search query, a user access vector, wherein the user access vector specifies, for the requesting user, access control lists that are associated with the requesting user, wherein the user access vector is obtained from a user access vector cache, located on the document management service, and wherein the user access vector cache is populated using content in an access control repository located on the repository server; generates an entry for the requesting user in a user group cache, comprising: identifying ancestor groups of the requesting user; and associating the ancestor groups with the requesting user; identifies, in the document repository, documents that match the document search query with the injected user access vector, wherein a matching document requires a match of terms in the document search query with terms in the matching document, and a match of at least one access control list specified in the matching document and at least one of the access control lists specified in the user access vector; and makes a determination that an added user was added to a user group, in a user group repository, and based on the determination: identifies, in the user group repository, an ancestor group of the added user; associates the ancestor group with the added user, in the user group cache; and purges the entry for the added user, in the user access vector cache.",8,,0,B
10606902,10,"10. The system for servicing document search requests of claim 9 , wherein populating the user access vector cache comprises: identifying, in the access control repository, access control lists for the requesting user; associating the identified access control lists with the requesting user, in the user access vector cache; retrieving, from the user group cache, the ancestor groups of the requesting user; obtaining, for the ancestor groups of the requesting user, access control lists from the access control repository; and associating the obtained access control lists for the ancestor groups of the requesting user with the requesting user.",9,claim 9,0,B
10606903,1,"1. A method of multi-dimensional query based extraction of polarity-aware content from a plurality of documents comprising the steps of: a computer receiving an input query tuple comprising: at least one keyword, polarity, and quantification of polarity corresponding to a polarity score from a user via an interface; the computer searching metadata of indexed documents based on the input query tuple to identify documents which satisfy at least some of the input query tuple; for each document which satisfies at least some of the input query tuple from the user, the computer extracting keywords, polarity associated with the keywords, and excerpts of each of the documents including the keywords and text containing polarity context associated with the keywords; and the computer outputting for each document which satisfies at least some of the input of the input query tuple, the query results to the user via the user interface; wherein the query results outputted to the user are ordered such that, the documents with the highest polarity score are at a top of a list, followed by documents that contain all of the keywords of the input query tuple and a polarity score greater than the polarity score of the input query tuple; followed by documents which contain some of the keywords, associated polarity and polarity score, but not all of the keywords, followed by documents that contain some of the keywords and polarity, but not the polarity score, followed by documents that contain the keywords, but do not contain the polarity or polarity score of the input query tuple.",0,,1,B
10606903,2,"2. The method of claim 1 , further comprising, prior to the step of the computer receiving the input query tuple comprising: the at least one keyword, the polarity, and the quantification of polarity corresponding to the polarity score from the user via the interface, comprising the steps of: the computer extracting at least one word from each document in a document database comprising a plurality of documents; the computer determining, for each word extracted, polarity of the word based on the document; the computer calculating a polarity score for each word extracted within the document; and the computer setting and indexing, for each document in the document database, the at least one word extracted, the polarity associated with the word within the document, and the polarity score for each word extracted from the document as searchable metadata.",1,claim 1,0,B
10606903,3,"3. The method of claim 1 , wherein the query results outputted to the user comprises: a list of keywords which were used as the query; and search results comprising: keywords present within the document, polarity associated with the keywords present within the document; and polarity scores for each of the keywords present within the document.",2,claim 1,0,B
10606903,4,"4. The method of claim 3 , wherein the search results further comprises at least one excerpt from the document containing the keywords and associated polarity context in which the polarity scores and polarity are based.",3,claim 3,0,B
10606903,5,"5. The method of claim 1 , wherein when more than one document contains all of the keywords of the input query tuple and a polarity score greater than the polarity score of the input query tuple, the documents are further ordered by ranking the documents having a smaller number of keywords absent from the input query tuple with greater priority.",4,claim 1,0,B
10606903,6,"6. A computer program product for multi-dimensional query based extraction of polarity-aware content from a plurality of documents executed by a computer comprising at least one processor, one or more memories, one or more computer readable storage media, the computer program product comprising a computer readable storage medium having program instructions embodied therewith, the program instructions executable by the computer to perform a method comprising: receiving, by the computer, an input query tuple comprising: at least one keyword, polarity, and quantification of polarity corresponding to a polarity score from a user via an interface; searching, by the computer, metadata of indexed documents based on the input query tuple to identify documents which satisfy at least some of the input query tuple; for each document which satisfies at least some of the input query tuple from the user, extracting, by the computer, keywords, polarity associated with the keywords, and excerpts of each of the documents including the keywords and text containing polarity context associated with the keywords; and outputting, by the computer, for each document which satisfies at least some of the input of the input query tuple, the query results to the user via the user interface; wherein the query results outputted to the user are ordered such that, the documents with the highest polarity score are at a top of a list, followed by documents that contain all of the keywords of the input query tuple and a polarity score greater than the polarity score of the input query tuple; followed by documents which contain some of the keywords, associated polarity and polarity score, but not all of the keywords, followed by documents that contain some of the keywords and polarity, but not the polarity score, followed by documents that contain the keywords, but do not contain the polarity or polarity score of the input query tuple.",5,,0,B
10606903,7,"7. The computer program product of claim 6 , further comprising, prior to the program instructions of receiving, by the computer, the input query tuple comprising: the at least one keyword, the polarity, and the quantification of polarity corresponding to the polarity score from the user via the interface, comprising the program instructions of: extracting, by the computer, at least one word from each document in a document database comprising a plurality of documents; determining, by the computer, for each word extracted, polarity of the word based on the document; calculating, by the computer, a polarity score for each word extracted within the document; and setting and indexing, by the computer, for each document in the document database, the at least one word extracted, the polarity associated with the word within the document, and the polarity score for each word extracted from the document as searchable metadata.",6,claim 6,0,B
10606903,8,"8. The computer program product of claim 6 , wherein the query results outputted to the user comprises: a list of keywords which were used as the query; and search results comprising: keywords present within the document, polarity associated with the keywords present within the document; and polarity scores for each of the keywords present within the document.",7,claim 6,0,B
10606903,9,"9. The computer program product of claim 8 , wherein the search results further comprises at least one excerpt from the document containing the keywords and associated polarity context in which the polarity scores and polarity are based.",8,claim 8,0,B
10606903,10,"10. The computer program product of claim 6 , wherein when more than one document contains all of the keywords of the input query tuple and a polarity score greater than the polarity score of the input query tuple, the documents are further ordered by ranking the documents having a smaller number of keywords absent from the input query tuple with greater priority.",9,claim 6,0,B
10606903,11,"11. A computer system for multi-dimensional query based extraction of polarity-aware content from a plurality of documents comprising a computer comprising at least one processor, one or more memories, one or more computer readable storage media having program instructions executable by the computer to perform the program instructions comprising: receiving, by the computer, an input query tuple comprising: at least one keyword, polarity, and quantification of polarity corresponding to a polarity score from a user via an interface; searching, by the computer, metadata of indexed documents based on the input query tuple to identify documents which satisfy at least some of the input query tuple; for each document which satisfies at least some of the input query tuple from the user, extracting, by the computer, keywords, polarity associated with the keywords, and excerpts of each of the documents including the keywords and text containing polarity context associated with the keywords; and outputting, by the computer, for each document which satisfies at least some of the input of the input query tuple, the query results to the user via the user interface; wherein the query results outputted to the user are ordered such that, the documents with the highest polarity score are at a top of a list, followed by documents that contain all of the keywords of the input query tuple and a polarity score greater than the polarity score of the input query tuple; followed by documents which contain some of the keywords, associated polarity and polarity score, but not all of the keywords, followed by documents that contain some of the keywords and polarity, but not the polarity score, followed by documents that contain the keywords, but do not contain the polarity or polarity score of the input query tuple.",10,,0,B
10606903,12,"12. The computer system of claim 11 , further comprising, prior to the program instructions of receiving, by the computer, the input query tuple comprising: the at least one keyword, the polarity, and the quantification of polarity corresponding to the polarity score from the user via the interface, comprising the program instructions of: extracting, by the computer, at least one word from each document in a document database comprising a plurality of documents; determining, by the computer, for each word extracted, polarity of the word based on the document; calculating, by the computer, a polarity score for each word extracted within the document; and setting and indexing, by the computer, for each document in the document database, the at least one word extracted, the polarity associated with the word within the document, and the polarity score for each word extracted from the document as searchable metadata.",11,claim 11,0,B
10606903,13,"13. The computer system of claim 11 , wherein the query results outputted to the user comprises: a list of keywords which were used as the query; and search results comprising: keywords present within the document, polarity associated with the keywords present within the document; and polarity scores for each of the keywords present within the document.",12,claim 11,0,B
10606903,14,"14. The computer system of claim 13 , wherein the search results further comprises at least one excerpt from the document containing the keywords and associated polarity context in which the polarity scores and polarity are based.",13,claim 13,0,B
10606903,15,"15. The computer system of claim 11 , wherein when more than one document contains all of the keywords of the input query tuple and a polarity score greater than the polarity score of the input query tuple, the documents are further ordered by ranking the documents having a smaller number of keywords absent from the input query tuple with greater priority.",14,claim 11,0,B
10606904,1,"1. A method for automatically providing contextual information for a key and/or value in an electronic document displayed to a user by a computing device, the method comprising: a. displaying to a user by a computing device an electronic document; b. selecting by the user through an input device of the computing device, a key and/or value in the electronic document; c. determining, by a processor, an entity for the key and/or value in the electronic document pre-identified within the document and/or by natural language processing techniques, analyzing text patterns, presentation semantics, titles, and/or captions; d. identifying a category for the entity; e. performing a search operation by a search engine processor for electronic document(s) comprising of the category and at least one of the key or value; f. identifying, by the search engine processor, entities within the electronic document(s) found by the search engine belonging to the identified category; g. altering the electronic document displayed to the user by the computing device by incorporating within the electronic document the identified entities from the electronic document(s) found by the search engine; and h. displaying the altered electronic document to the user by the computing device.",0,,1,B
10606904,2,"2. The method as in claim 1 , wherein the category is present in a title in the document(s) found by the search engine.",1,claim 1,0,B
10606904,3,"3. The method as in claim 2 , wherein the identified entities in the document(s) found by the search engine are in a table.",2,claim 2,0,B
10606904,4,"4. The method as in claim 3 , wherein a column header of the table comprises of the key.",3,claim 3,0,B
10606904,5,"5. The method as in claim 2 , wherein the identified entities in the document(s) found by the search engine are in a list.",4,claim 2,0,B
10606904,6,"6. The method as in claim 5 , wherein a title of the list comprises of the key and/or value.",5,claim 5,0,B
10606904,7,"7. The method as in claim 1 , wherein the key is implicit.",6,claim 1,0,B
10606904,8,"8. The method as in claim 1 , wherein the identified entities are returned to the user in table or list form.",7,claim 1,0,B
10606904,9,"9. The method as in claim 1 , wherein the category for the entities is a parent category.",8,claim 1,0,B
10606904,10,"10. The method as in claim 1 , wherein the category for the entities is a subcategory.",9,claim 1,0,B
10606904,11,"11. The method as in claim 1 , wherein the key and/or value in the electronic document is highlighted.",10,claim 1,0,B
10606905,1,"1. A system comprising: one or more processors of a machine; a machine-readable storage medium storing instructions that, when executed by the one or more processors, cause the machine to perform operations comprising: receiving a first user input to save a first state of a communication session established with a client device of a user; in response to the first user input, capturing the first state of the communication session by saving a first context of the communication session at a first time at which the first user input is received, the first context comprising at least a first user action with respect to a first web page corresponding to a first item; receiving a second user input to save a second state of the communication session; in response to the second user input, capturing the second state of the communication session by saving a second context of the communication session at a second time at which the second user input is received, the second context comprising at least a second user action with respect to a second web page corresponding to a second item; generating an interactive interface in response to the first and second user input, the interactive interface including: a first visual element corresponding to the first item and a second visual element corresponding to the second item, the first visual element operable, via user selection, to generate first instructions for the client device that cause the client device to navigate to the first web page and restore the first state without additional user input; the second visual element operable, via user selection, to generate second instructions for the client device that cause the client device to navigate to the second web page and restore the second state without additional user input; and a visual comparison of the first item with the second item, the visual comparison of the first item with the second item including a display of at least a first set of attributes corresponding to the first item and a second set of attributes corresponding to the second item.",0,,1,B
10606905,2,"2. The system of claim 1 , wherein the operations further comprise: temporarily storing first session data representative of the first state of the communication session for a duration of the communication session; and temporarily storing second session data representative of the second state of the communication session for the duration of the communication session.",1,claim 1,0,B
10606905,3,"3. The system of claim 2 , wherein the operations further comprise returning the communication session to the first state using the first session data in response to user selection of the first visual element.",2,claim 2,0,B
10606905,4,"4. The system of claim 2 , wherein the operations further comprise deleting the first and second session data in response to termination of the communication session.",3,claim 2,0,B
10606905,5,"5. The system of claim 1 , wherein the interactive interface further comprises a third visual element operable, via user selection, to cause display of the visual comparison of the first item with the second item, wherein the causing of the client device to present the visual comparison is in response to user selection of the third visual element.",4,claim 1,0,B
10606905,6,"6. The system of claim 1 , wherein the first and second user input corresponds to a touch-based gesture received on a multi-touch input surface of the first client device.",5,claim 1,0,B
10606905,7,"7. The system of claim 1 , wherein the operations further comprise: receiving a third user input to save a third state of the communication session; temporarily storing session data representative of the third state of the communication session for the duration of the communication session; and updating the interactive interface to further include a third visual element corresponding to the third state of the communication session, the third visual element operable, via user selection, to return the communication session to the third state using the session data.",6,claim 1,0,B
10606905,8,"8. The system of claim 1 , wherein the first user action or the second user action comprise at least one of a button activated by the user via user input to the client device, keystrokes, or cursor or pointer movements.",7,claim 1,0,B
10606905,9,"9. The system of claim 1 , wherein the first item and the second item correspond to related items.",8,claim 1,0,B
10606905,10,"10. A method comprising: receiving a first user input to save a first state of a communication session established with a client device of a user; in response to the first user input, capturing the first state of the communication session by saving a first context of the communication session at a first time at which the first user input is received, the first context comprising at least a first user action with respect to a first web page corresponding to a first item; receiving a second user input to save a second state of the communication session; in response to the second user input, capturing, the second state of the communication session by saving a second context of the communication session at a second time at which the second user input is received, the second context comprising at least a second user action with respect to a second web page corresponding to a second item; generating an interactive interface in response to the user input, the interactive interface including: a first visual element corresponding to the first item and a second visual element corresponding to the second item, the first visual element operable, via user selection, to generate first instructions for the client device that cause the client device to navigate to the first web page and restore to the first state without additional user input; the second visual element operable, via user selection, to generate second instructions for the client device that cause the client device to navigate to the second web page and restore the second state without additional user input; and a visual comparison of the first item with the second item, the visual comparison of the first item with the second item including a display of at least a first set of attributes corresponding to the first item and a second set of attributes corresponding to the second item.",9,,0,B
10606905,11,"11. The method of claim 10 , further comprising: establishing an additional communication session with an additional client device of the user, the additional communication session including presentation of additional content; and providing instructions to the additional client device that cause the additional client device to present the interactive interface on the additional client device of the user in conjunction with the additional content.",10,claim 10,0,B
10606905,12,"12. The method of claim 10 , further comprising: temporarily storing first session data representative of the first state of the communication session for a duration of the communication session; and temporarily storing second session data representative of the second state of the communication session for the duration of the communication session.",11,claim 10,0,B
10606905,13,"13. The method of claim 12 , further comprising: determining an expiration time period has elapsed; and in response to determining the expiration time period has elapsed, deleting the first and second session data.",12,claim 12,0,B
10606905,14,"14. The method of claim 10 , wherein the first and second user input correspond to a touch-based gesture received on a multi-touch input surface of the first client device.",13,claim 10,0,B
10606905,15,"15. The method of claim 14 , wherein receiving the user input includes receiving a double tap gesture on a portion of the content displayed as part of the communication session into the interactive interface.",14,claim 14,0,B
10606905,16,"16. The method of claim 15 , further comprising: receiving a user selection of the first visual element; and restoring the first state of the communication session.",15,claim 15,0,B
10606905,17,"17. The method of claim 10 , wherein: the first item is a first product; the first set of attributes correspond to product attributes of the first product; the second item is a second product; the second set of attributes correspond to product attributes of the second product; and the first and second product belong to a common product category.",16,claim 10,0,B
10606905,18,"18. The method of claim 10 , further comprising: receiving a third user input to save a third state of the communication session; temporarily storing session data representative of the third state of the communication session for the duration of the communication session; and updating the interactive interface to further include a third visual element corresponding to a third state of the communication session, the third visual element operable, via user selection, to return the communication session to the third state.",17,claim 10,0,B
10606905,19,"19. The method of claim 10 , wherein the first user action or the second user action comprise at least one of a button activated by the user via user input to the client device, keystrokes, or cursor or pointer movements.",18,claim 10,0,B
10606905,20,"20. A non-transitory machine-readable storage medium embodying instructions that, when executed by a machine, cause the machine to perform operations comprising: receiving a first user input to save a first state of a communication session established with a client device of a user; in response to the first user input, capturing the first state of the communication session by saving a first context of the communication session at a first time at which the first user input is received, the first context comprising at least a first user action with respect to a first web page corresponding to a first item; receiving a second user input to save a second state of the communication session; in response to the second user input, capturing, the second state of the communication session by saving a second context of the communication session at a second time at which the second user input is received, the second context comprising at least a second user action with respect to a second web page corresponding to a second item; generating an interactive interface in response to the first and second user input, the interactive interface including: a first visual element corresponding to the first item and a second visual element corresponding to the second item, the first visual element operable, via user selection, to generate first instructions for the client device that cause the client device to navigate to the first web page and restore the first state without additional user input; the second visual element operable, via user selection, to generate second instructions for the client device that cause the client device to navigate to the second web page and restore the second state without additional user input; and a visual comparison of the first item with the second item, the visual comparison of the first item with the second item including a display of at least a first set of attributes corresponding to the first item and a second set of attributes corresponding to the second item.",19,,0,B
10606906,1,"1. A system for summary based privacy security for benchmarks, comprising: an interface configured to: receive an indication to opt-into a benchmark category from a tenant, wherein opting-in includes a privacy level; and provide a benchmark data request to a tenant system, wherein the benchmark data request includes a requirement to summarize tenant data for the benchmark data request to reduce detail in the tenant data compatible with the privacy level to obtain summarized tenant data: and a processor configured to: combine the summarized tenant data with prior commingled benchmark data to obtain an updated commingled benchmark database, wherein the prior commingled benchmark data includes data from a plurality of tenants; determine a benchmark compatible with the privacy level using the updated commingled benchmark database; and wherein determining the benchmark comprises: determining benchmark report data using the updated commingled benchmark database; and performing an obfuscation calculation on the benchmark report data to reduce detail in the benchmark report data compatible with the privacy level to obtain obfuscated benchmark report data.",0,,1,B
10606906,2,"2. The system of claim 1 , wherein the interface is further configured to receive the summarized tenant data.",1,claim 1,0,B
10606906,3,"3. The system of claim 1 , wherein the interface is further configured to receive a benchmark request to determine the benchmark from the tenant, wherein the tenant has the privacy level associated with the benchmark category.",2,claim 1,0,B
10606906,4,"4. The system of claim 3 , wherein the privacy level comprises a level of grouping for the benchmark category.",3,claim 3,0,B
10606906,5,"5. The system of claim 4 , wherein the level of grouping for the benchmark category comprises one or more of: employee job title, employee location, state level data, region level data, city level data, and country level data.",4,claim 4,0,B
10606906,6,"6. The system of claim 3 , wherein the privacy level comprises a statistic type.",5,claim 3,0,B
10606906,7,"7. The system of claim 6 , wherein the statistic type comprises one or more of: a mean, a mean and standard deviation, a mean and quartile values, and a mean and decile values.",6,claim 6,0,B
10606906,8,"8. The system of claim 1 , wherein summarizing tenant data comprises performing a calculation based at least in part on the privacy level.",7,claim 1,0,B
10606906,9,"9. The system of claim 1 , wherein combining the summarized tenant data with the prior commingled benchmark data comprises determining a set of representative tenant data based at least in part on the summarized tenant data.",8,claim 1,0,B
10606906,10,"10. The system of claim 9 , wherein the set of representative tenant data comprises data that produces the summarized tenant data when summarized.",9,claim 9,0,B
10606906,11,"11. The system of claim 10 , wherein the set of representative tenant data comprises data that produces the summarized tenant data when one of the following statistics is determined: a mean, a mean and standard deviation, a mean and quartile values, or a mean and decile values.",10,claim 10,0,B
10606906,12,"12. The system of claim 1 , wherein combining the summarized tenant data with the prior commingled benchmark data comprises summarizing a combined benchmark data.",11,claim 1,0,B
10606906,13,"13. The system of claim 12 , wherein combining the benchmark data with the prior commingled benchmark data comprises summarizing the combined benchmark data using one of: a mean, a mean and standard deviation, a mean and quartile values, or a mean and decile values.",12,claim 12,0,B
10606906,14,"14. The system of claim 1 , wherein the processor is additionally configured to store in the updated commingled benchmark database an indication of a level of granularity associated with a stored combined benchmark data.",13,claim 1,0,B
10606906,15,"15. The system of claim 14 , wherein the processor is additionally configured to provide the stored combined benchmark data as the benchmark.",14,claim 14,0,B
10606906,16,"16. The system of claim 1 , wherein determining the benchmark further comprises determining the obfuscation calculation based at least in part on the privacy level.",15,claim 1,0,B
10606906,17,"17. A method for summary based privacy security for benchmarks, comprising: receiving an indication to opt-in to a benchmark category from a tenant, wherein opting-in includes a privacy level; providing a benchmark data request to a tenant system, wherein the benchmark data request includes a requirement to summarize tenant data for the benchmark data request to reduce detail in the tenant data compatible with the privacy level to obtain summarized tenant data; combining, using a processor, the summarized tenant data with prior commingled benchmark data to obtain an updated commingled benchmark database, wherein the prior commingled benchmark data includes data from a plurality of tenants; determining a benchmark compatible with the privacy level using the updated commingled benchmark database; and wherein determining the benchmark comprises: determining benchmark report data using the updated commingled benchmark database; and performing an obfuscation calculation on the benchmark report data to reduce detail in the benchmark report data compatible with the privacy level to obtain obfuscated benchmark report data.",16,,0,B
10606906,18,"18. A non-transitory computer program product for summary based privacy security for benchmarks, the computer program product being embodied in a computer readable storage medium and comprising computer instructions for execution by a processor for: receiving an indication to opt-into a benchmark category from a tenant, wherein opting-in includes a privacy level; providing a benchmark data request to a tenant system, wherein the benchmark data request includes a requirement to summarize tenant data for the benchmark data request to reduce detail in the tenant data compatible with the privacy level to obtain summarized tenant data; combining the summarized tenant data with prior commingled benchmark data to obtain an updated commingled benchmark database, wherein the prior commingled benchmark data includes data from a plurality of tenants; determining a benchmark compatible with the privacy level using the updated commingled benchmark database; and wherein determining the benchmark comprises: determining benchmark report data using the updated commingled benchmark database; and performing an obfuscation calculation on the benchmark report data to reduce detail in the benchmark report data compatible with the privacy level to obtain obfuscated benchmark report data.",17,,0,B
10606907,1,"1. A method for providing interactive browsable content items, the method comprising: receiving, by one or more data processors, a search query returning a result set identifying a plurality of products, the result set defining an n-dimensional space of the plurality of products; selecting, by the one or more data processors, a first plurality of pivot points based on the n-dimensional space of products, each of the plurality of pivot points corresponding to a product of the n-dimensional space of products, each of the first plurality of pivot points selected based on a dimensional distance within the n-dimensional space of products relative to another pivot point of the first plurality of pivot points; serving, by the one or more data processors, display data indicative of the first plurality of pivot points to be displayed on a display of a client device; receiving, by the one or more data processors, a touch input from the client device selecting a pivot point of the first plurality of pivot points; selecting, by the one or more data processors, a subset of the plurality of products from the n-dimensional space responsive to the selected pivot point; serving, by the one or more data processors, display data indicative of the subset of the plurality of products to be displayed on the display of the client device; receiving, by the one or more data processors and subsequently to receiving the touch input and subsequently to serving the display data indicative of the subset of the plurality of products, a zoom out touch input from the client device; selecting, by the one or more data processors and responsive to the zoom out touch input, a second plurality of pivot points based on the subset of the plurality of products and the selected pivot point, the second plurality of pivot points different from the first plurality of pivot points; and serving, by the one or more data processors, display data indicative of the second plurality of pivot points to be displayed on the display of the client device.",0,,1,B
10606907,2,"2. The method of claim 1 , wherein the display data indicative of the first plurality of pivot points is displayed in a single slot of a resource on the display of the client device.",1,claim 1,0,B
10606907,3,"3. The method of claim 2 , wherein the resource is a search results page.",2,claim 2,0,B
10606907,4,"4. The method of claim 2 , wherein the resource is an application executing on the client device.",3,claim 2,0,B
10606907,5,"5. The method of claim 1 , wherein the touch input is a tap touch input.",4,claim 1,0,B
10606907,6,"6. The method of claim 1 , wherein the touch input is a zoom in touch input.",5,claim 1,0,B
10606907,7,"7. The method of claim 1 , wherein each of the subset of the plurality of products are selected based on a probability exploration rate, the probability exploration rate indicative of a likelihood of selection by a user based on the search query and the selected pivot point.",6,claim 1,0,B
10606907,8,"8. The method of claim 1 , further comprising: removing the subset of the plurality of products from the n-dimensional space of products.",7,claim 1,0,B
10606907,9,"9. The method of claim 1 , wherein the first plurality of pivot points are further selected based on a bid amount.",8,claim 1,0,B
10606907,10,"10. A system for providing interactive browsable content items, the system comprising: one or more data processors; and one or more storage devices storing instructions that, when executed by the one or more data processors, cause the one or more data processors to perform operations comprising: receiving a search query returning a result set identifying a plurality of products, the result set defining an n-dimensional space of the plurality of products; selecting a first plurality of pivot points based on the n-dimensional space of products, each of the plurality of pivot points corresponding to a product of the n-dimensional space of products, each of the first plurality of pivot points selected based on a dimensional distance within the n-dimensional space of products relative to another pivot point of the first plurality of pivot points; serving display data indicative of the first plurality of pivot points to be displayed on a display of a client device; receiving a touch input from the client device selecting a pivot point of the first plurality of pivot points; selecting a subset of the plurality of products from the n-dimensional space responsive to the selected pivot point; serving display data indicative of the subset of the plurality of products to be displayed on the display of the client device; receiving, subsequently to receiving the touch input and subsequently to serving the display data indicative of the subset of the plurality of products, a zoom out touch input from the client device; selecting, responsive to the zoom out touch input, a second plurality of pivot points based on the subset of the plurality of products and the selected pivot point, the second plurality of pivot points different from the first plurality of pivot points; and serving display data indicative of the second plurality of pivot points to be displayed on the display of the client device.",9,,0,B
10606907,11,"11. The system of claim 10 , wherein the display data indicative of the first plurality of pivot points is displayed in a single slot of a search results page on the display of the client device.",10,claim 10,0,B
10606907,12,"12. The system of claim 10 , wherein each of the subset of the plurality of products are selected based on a probability exploration rate, the probability exploration rate indicative of a likelihood of selection by a user based on the search query and the selected pivot point.",11,claim 10,0,B
10606907,13,"13. The system of claim 10 , wherein the touch input is a tap touch input.",12,claim 10,0,B
10606907,14,"14. The system of claim 10 , wherein the touch input is a zoom in touch input.",13,claim 10,0,B
10606907,15,"15. The system of claim 10 , wherein the one or more storage devices stores instructions that, when executed by the one or more processors, cause the one or more processors to perform operations further comprising: removing the subset of the one or more products from the n-dimensional space of products.",14,claim 10,0,B
10606907,16,"16. A non-transitory computer readable storage device storing instructions that, when executed by one or more processors, cause the one or more processors to perform operations comprising: receiving a search query returning a result set identifying a plurality of products, the result set defining an n-dimensional space of the plurality of products; selecting a first plurality of pivot points based on the n-dimensional space of products, each of the plurality of pivot points corresponding to a product of the n-dimensional space of products, each of the first plurality of pivot points selected based on a dimensional distance within the n-dimensional space of products relative to another pivot point of the first plurality of pivot points; serving display data indicative of the first plurality of pivot points to be displayed on a display of a client device; receiving a touch input from the client device selecting a pivot point of the first plurality of pivot points; selecting a subset of the plurality of products from the n-dimensional space responsive to the selected pivot point; serving display data indicative of the subset of the plurality of products to be displayed on the display of the client device receiving, subsequently to receiving the touch input and subsequently to serving the display data indicative of the subset of the plurality of products, a zoom out touch input from the client device; selecting, responsive to the zoom out touch input, a second plurality of pivot points based on the subset of the plurality of products and the selected pivot point, the second plurality of pivot points different from the first plurality of pivot points; and serving display data indicative of the second plurality of pivot points to be displayed on the display of the client device.",15,,0,B
10606907,17,"17. The computer readable storage device of claim 16 , wherein the display data indicative of the first plurality of pivot points is displayed in a single slot of a search results page on the display of the client device.",16,claim 16,0,B
10606907,18,"18. The computer readable storage device of claim 16 , wherein each of the subset of the plurality of products are selected based on a probability exploration rate, the probability exploration rate indicative of a likelihood of selection by a user based on the search query and the selected pivot point.",17,claim 16,0,B
10606907,19,"19. The computer readable storage device of claim 16 storing instructions that, when executed by one or more processors, cause the one or more processors to perform operations further comprising: removing the subset of the plurality of products from the n-dimensional space of products.",18,claim 16,0,B
10606908,1,"1. A computer-implemented method comprising: providing, by a computing system, a first element in an interface presentable to a user through which a plurality of ephemeral media content items are accessible by the user for a selected period of time, wherein the first element is a listing comprising identifiers of a plurality of content providers associated with the plurality of ephemeral media content items; providing, by the computing system, a second element in the interface through which a plurality of non-ephemeral media content items are accessible by the user, wherein the second element is a listing comprising the plurality of non-ephemeral media content items; receiving, by the computing system, a designation by a content provider that a media content item is a non-ephemeral media content item; and providing, by the computing system, the media content item for presentation in the second element in the interface based on the designation.",0,,1,B
10606908,2,"2. The computer-implemented method of claim 1 , further comprising: receiving a designation by a content provider that a media content item is an ephemeral media content item; and providing an identifier of the content provider for potential presentation in the first element based on the designation.",1,claim 1,0,B
10606908,3,"3. The computer-implemented method of claim 1 , wherein the first element is a first scrollable array comprising identifiers of a plurality of content providers associated with the plurality of ephemeral media content items and the second element is a second scrollable array comprising the plurality of non-ephemeral media content items.",2,claim 1,0,B
10606908,4,"4. The computer-implemented method of claim 1 , wherein the first element and the second element are scrollable in different directions.",3,claim 1,0,B
10606908,5,"5. The computer-implemented method of claim 1 , further comprising: indicating in the first element a type of one or more ephemeral media content items of the plurality of ephemeral media content items.",4,claim 1,0,B
10606908,6,"6. A system comprising: at least one processor; and a memory storing instructions that, when executed by the at least one processor, cause the system to perform: providing a first element in an interface presentable to a user through which a plurality of ephemeral media content items are accessible by the user for a selected period of time, wherein the first element is a listing comprising identifiers of a plurality of content providers associated with the plurality of ephemeral media content items; and providing a second element in the interface through which a plurality of non-ephemeral media content items are accessible by the user, wherein the second element is a listing comprising the plurality of non-ephemeral media content items; receiving a designation by a content provider that a media content item is a non-ephemeral media content item; and providing the media content item for presentation in the second element in the interface based on the designation.",5,,0,B
10606908,7,"7. The system of claim 6 , further comprising: receiving a designation by a content provider that a media content item is an ephemeral media content item; and providing an identifier of the content provider for potential presentation in the first element based on the designation.",6,claim 6,0,B
10606908,8,"8. The system of claim 6 , wherein the first element is a first scrollable array comprising identifiers of a plurality of content providers associated with the plurality of ephemeral media content items and the second element is a second scrollable array comprising the plurality of non-ephemeral media content items.",7,claim 6,0,B
10606908,9,"9. The system of claim 6 , wherein the first element and the second element are scrollable in different directions.",8,claim 6,0,B
10606908,10,"10. The system of claim 6 , further comprising: indicating in the first element a type of one or more ephemeral media content items of the plurality of ephemeral media content items.",9,claim 6,0,B
10606908,11,"11. A non-transitory computer-readable storage medium including instructions that, when executed by at least one processor of a computing system, cause the computing system to perform a method comprising: providing a first element in an interface presentable to a user through which a plurality of ephemeral media content items are accessible by the user for a selected period of time, wherein the first element is a listing comprising identifiers of a plurality of content providers associated with the plurality of ephemeral media content items; and providing a second element in the interface through which a plurality of non-ephemeral media content items are accessible by the user, wherein the second element is a listing comprising the plurality of non-ephemeral media content items; receiving a designation by a content provider that a media content item is a non-ephemeral media content item; and providing the media content item for presentation in the second element in the interface based on the designation.",10,,0,B
10606908,12,"12. The non-transitory computer-readable storage medium of claim 11 , wherein the first element is a first scrollable array comprising identifiers of a plurality of content providers associated with the plurality of ephemeral media content items and the second element is a second scrollable array comprising the plurality of non-ephemeral media content items.",11,claim 11,0,B
10606908,13,"13. The non-transitory computer-readable storage medium of claim 11 , wherein the first element and the second element are scrollable in different directions.",12,claim 11,0,B
10606908,14,"14. The non-transitory computer-readable storage medium of claim 11 , further comprising: receiving a designation by a content provider that a media content item is an ephemeral media content item; and providing an identifier of the content provider for potential presentation in the first element based on the designation.",13,claim 11,0,B
10606909,1,"1. A computer-implemented method for optimizing searches, the method comprising: receiving a boolean search query comprising a plurality of operands and corresponding operators and usage information corresponding to a user, wherein the usage information is stored in a cookie and comprises user browsing information, user language preferences, and user file type preferences; determining a search load of a search engine located on a search server, wherein the search load includes an amount of resources of the search server that are being utilized; in response to determining that the search load is greater than a pre-defined threshold, determining modifications to be made to the boolean search query according to the usage information; modifying the boolean search query according to the modifications; and performing a search using the modified boolean search query.",0,,1,B
10606909,2,"2. The method of claim 1 , wherein: an operand of the boolean search query is an OR operand; and modifying the boolean search query comprises removing the OR operand and a corresponding OR operator.",1,claim 1,0,B
10606909,3,"3. The method of claim 2 , wherein the OR operand comprises a resource that the user has not accessed after a selected time threshold.",2,claim 2,0,B
10606909,4,"4. The method of claim 2 , wherein the OR operand comprises a resource that has not been updated after a selected time threshold.",3,claim 2,0,B
10606909,5,"5. The method of claim 1 , wherein: the user browsing information stored in the cookie includes a list of resources that the user accesses, corresponding access times for the list of resources, and corresponding access frequencies for the list of resources, the user language preferences stored in the cookie include a first language and a second language, and the user file type preferences include one or more preferred file types and codecs.",4,claim 1,0,B
10606909,6,"6. The method of claim 5 , wherein determining modifications to be made to the boolean search query according to the usage information comprises: in response to determining the search load exceeds a first utilization threshold, removing, from the boolean search query, an operand determined to be the third least-popular operand based on the list of resources that the user accesses.",5,claim 5,0,B
10606909,7,"7. The method of claim 6 , wherein determining modifications to be made to the boolean search query according to the usage information further comprises: in response to determining the search load exceeds a second utilization threshold, removing, from the boolean search query: (i) an operand determined to be the second least-popular operand based on the list of resources that the user accesses, and (ii) a second language preference.",6,claim 6,0,B
10606909,8,"8. The method of claim 7 , wherein determining modifications to be made to the boolean search query according to the usage information further comprises: in response to determining the search load exceeds a third utilization threshold, removing, from the boolean search query: (i) an operand determined to be the next least-popular operand based on the list of resources that the user accesses, and (ii) a preferred file type.",7,claim 7,0,B
10606909,9,"9. The method of claim 1 , wherein: an operand of the boolean search query is an AND operand; and modifying the boolean search query comprises adding an additional AND operand and a corresponding AND operator.",8,claim 1,0,B
10606909,10,"10. The method of claim 9 , wherein the additional AND operand comprises a language.",9,claim 9,0,B
10606909,11,"11. The method of claim 9 , wherein the additional AND operand comprises a file type.",10,claim 9,0,B
10606910,1,"1. A method comprising: receiving, from a client device, a search query comprising a search criteria and requesting documents matching the search criteria; identifying, by an enterprise search engine, a set of search results satisfying the search criteria specified in the search query; for each search result in the set of search results, providing, by a processor, a first machine learning based model with popularity features as input; for each search result in the set of search results, applying, by the processor, the first machine learning based model to generate a first score for the search result; identifying a first set of candidate search results as a subset of the set of search results, the subset determined by ranking the set of search results based on the first score generated by the first machine learning based model; for each search result in the first set of candidate search results, providing, by the processor, a second machine learning based model with query features describing the search query as input; for each search result in the first set of candidate search results, applying, by the processor, the second machine learning based model to generate a second score for the search result; identifying a second set of candidate search results as a subset of the first set of candidate search results, the subset determined by ranking the set of search results based on the second score generated by the second machine learning based model; and providing, to the client device, a query response comprising indications of one or more search results from the second set of candidate search results.",0,,1,B
10606910,2,"2. The method of claim 1 , wherein applying the second machine learning based model consumes more resources of the processor in comparison to applying the first machine learning based model.",1,claim 1,0,B
10606910,3,"3. The method of claim 1 , wherein the first machine learning based model is a linear model, wherein the first score generated by the first machine learning based model for a search result in the set of search results is a weighted aggregate of scores corresponding to popularity features.",2,claim 1,0,B
10606910,4,"4. The method of claim 1 , wherein the second machine learning based model is one of a neural network, support vector machine, decision tree, learning classifier, or Bayesian network.",3,claim 1,0,B
10606910,5,"5. The method of claim 1 , wherein identifying, by the enterprise search engine, the set of search results satisfying the search criteria specified in the search query, comprises: generating a measure of similarity between a search result and the search query provided by the client device; and selecting the search result to be included in the set of search results based on the generated measure of similarity being above a threshold value.",4,claim 1,0,B
10606910,6,"6. The method of claim 3 , wherein the measure of similarity between the search result and the search query is a term frequency-inverse document frequency of a keyword specified in the search query.",5,claim 3,0,B
10606910,7,"7. The method of claim 1 , wherein applying the second machine learning based model to generate the second score for the search result further comprises providing record content features of the search result as input to the second machine learning based model, and wherein the query features of the search query comprise a time and a user associated with the search query.",6,claim 1,0,B
10606910,8,"8. The method of claim 7 , wherein applying the second machine learning based model to generate the second score for the search result further comprises providing a feature describing a rank of the search result in the first set of candidate search results as input to the second machine learning based model.",7,claim 7,0,B
10606910,9,"9. The method of claim 1 , further comprising: for each search result in the second set of candidate search results, applying, by a processor, a third machine learning based model to generate a third score for the search result; and identifying a selected set of search results based on the third score generated for each search result in the second set of candidate search results, wherein the indications of one or more search results in the query response are indications of search results in the selected set of search results.",8,claim 1,0,B
10606910,10,"10. The method of claim 1 , wherein the application of the third machine learning based model consumes more resources of the processor in comparison to the application of the first machine learning based model.",9,claim 1,0,B
10606910,11,"11. The method of claim 9 , wherein the third machine learning based model is applied to social features of a user associated with the client device that provided the search query to generate the third score for each search result in the second set of candidate search results.",10,claim 9,0,B
10606910,12,"12. The method of claim 1 , further comprising retrieving the second machine learning based model based on an entity specified in the search query, wherein the second machine learning based model is previously trained using a training dataset provided by the entity.",11,claim 1,0,B
10606910,13,"13. The method of claim 1 , wherein the first machine learning based model is applied to popularity features of search results in the set of search results in a parallel manner.",12,claim 1,0,B
10606910,14,"14. A non-transitory computer readable storage medium comprising instructions that, when executed by a processor, causes the processor to: receive, from a client device, a search query comprising a search criteria and requesting documents matching the search criteria; identify, by an enterprise search engine, a set of search results satisfying the search criteria specified in the search query; for each search result in the set of search results, provide, by a processor, a first machine learning based model with popularity features as input; for each search result in the set of search results, apply, by the processor, the first machine learning based model to generate a first score for the search result; identify a first set of candidate search results as a subset of the set of search results, the subset determined by ranking the set of search results based on the first score generated by the first machine learning based model; for each search result in the first set of candidate search results, provide, by the processor, a second machine learning based model with query features describing the search query as input; for each search result in the first set of candidate search results, apply, by the processor, the second machine learning based model to generate a second score for the search result; identify a second set of candidate search results as a subset of the first set of candidate search results, the subset determined by ranking the set of search results based on the second score generated by the second machine learning based model; and provide, to the client device, a query response comprising indications of one or more search results from the second set of candidate search results.",13,,0,B
10606910,15,"15. The non-transitory computer readable medium of claim 14 , wherein the instructions that cause the processor to apply the second machine learning based model consumes more resources of the processor in comparison to the instructions that cause the processor to apply the first machine learning based model.",14,claim 14,0,B
10606910,16,"16. The non-transitory computer readable medium of claim 14 , wherein the instructions that, when executed by the processor, cause the processor to identify a set of search results that are relevant to the search query, the instructions that cause the processor to identify, by the enterprise search engine, the set of search results satisfying the search criteria specified in the search query further comprises instructions that, when executed by the processor, cause the processor to: generate a measure of similarity between a search result and the search query provided by the client device; and select the search result to be included in the set of search results based on the generated measure of similarity being above a threshold value.",15,claim 14,0,B
10606910,17,"17. The non-transitory computer readable storage medium of claim 14 , wherein the instructions that cause the processor to apply the second machine learning based model to generate the second score further comprise instructions that, when executed by the processor, cause the processor to provide record content features of the search result as input to the second machine learning based model and wherein the query features of the search query comprise a time and a user associated with the search query.",16,claim 14,0,B
10606910,18,"18. The non-transitory computer readable storage medium of claim 14 , further comprising instructions that, when executed by the processor, cause the processor to: for each search result in the second set of candidate search results, apply, by a processor, a third machine learning based model to generate a third score for the search result; and identify a selected set of search results based on the third score generated for each search result in the second set of candidate search results, wherein the indications of one or more search results in the query response are indications of search results in the selected set of search results.",17,claim 14,0,B
10606910,19,"19. The non-transitory computer readable storage medium of claim 18 , wherein the instructions that cause the processor to apply the third machine learning based model consumes more resources of the processor in comparison to the instructions that cause the processor to apply the first machine learning based model.",18,claim 18,0,B
10606910,20,"20. The non-transitory computer readable storage medium of claim 14 , further comprising instructions that, when executed by the processor, cause the processor to retrieve the second machine learning based model based on an entity specified in the search query, wherein the second machine learning based model is previously trained using a training dataset provided by the entity.",19,claim 14,0,B
10606911,1,"1. A method for generating a three-dimensional (3D) volumetric model of a subject's teeth using an intraoral scanner, the method comprising: taking a plurality of images into the teeth using an infrared (IR) wavelength with the intraoral scanner as the intraoral scanner is moved over the teeth, so that multiple images of a same internal region of the teeth are imaged; determining, for each of the plurality of images into the teeth, a position of the intraoral scanner relative to the subject's teeth; using the position of the intraoral scanner to determine a list of intensity values for each point of a plurality of points corresponding to an inner volume of the patient's teeth from corresponding points on each of the plurality of images into the teeth; determining a minimum scattering coefficient for each point of the plurality of points from the list of intensity values; and forming the 3D volumetric model of the subject's teeth including internal features using the minimum scattering coefficient for each of the plurality of points corresponding to the inner volume of the patient's teeth.",0,,1,B
10606911,2,"2. The method of claim 1 , wherein the IR wavelength comprises a near-IR wavelength.",1,claim 1,0,B
10606911,3,"3. The method of claim 1 , wherein forming the 3D volumetric model comprises including a model of the gums relative to the teeth.",2,claim 1,0,B
10606911,4,"4. The method of claim 1 , further comprising capturing a 3D color model of the teeth as the intraoral scanner is moved over the teeth.",3,claim 1,0,B
10606911,5,"5. The method of claim 1 , further comprising switching between taking the plurality of images into the teeth as the intraoral scanner is moved over the teeth and capturing 3D surface image data.",4,claim 1,0,B
10606911,6,"6. The method of claim 1 , wherein taking the plurality of images comprises using a same sensor on the intraoral scanner to capture a 3D surface model data and the plurality of images into the teeth.",5,claim 1,0,B
10606911,7,"7. The method of claim 1 , wherein taking the plurality of images into the teeth comprises taking small-angle penetrative images.",6,claim 1,0,B
10606911,8,"8. The method of claim 1 , wherein forming the 3D volumetric model of the subject's teeth comprises combing a 3D surface model data with a 3D model of the internal structure.",7,claim 1,0,B
10606911,9,"9. A method for generating a three-dimensional (3D) volumetric model of a subject's teeth using an intraoral scanner, the method comprising: taking a plurality of images into the teeth using a near-infrared (near-IR) wavelength as the intraoral scanner is moved over the teeth by emitting a near-IR light from the intraoral scanner and detecting, in an image sensor in the intraoral scanner, the near-IR light returning to the intraoral scanner; determining, for each of the plurality of images into the teeth, a position of the intraoral scanner relative to the subject's teeth when each of the plurality of images is captured; using the position of the intraoral scanner relative to the subject's teeth to determine a list of intensity values for each point of a plurality of points corresponding to an inner volume of the patient's teeth from corresponding points on each of the plurality of images into the teeth; determining a scattering coefficient for each point of the plurality of points from the list of intensity values; correcting the scattering coefficients according to a volume response, and identifying a minimum scattering coefficient; and forming the 3D volumetric model of the subject's teeth including internal features using the minimum scattering coefficient for each of the plurality of points corresponding to the inner volume of the patient's teeth.",8,,0,B
10606911,10,"10. An intraoral scanning system for generating a three-dimensional (3D) volumetric model of a subject's teeth, the system comprising: a hand-held wand having at least one image sensor and a light source configured to emit light at within a near-infrared (near-IR) range of wavelengths; one or more processors operably connected to the hand-held wand, the one or more processors configured to: take a plurality of images into the teeth using an infrared (IR) wavelength with the intraoral scanner as the intraoral scanner is moved over the teeth, so that multiple images of a same internal region of the teeth are imaged; determine, for each of the plurality of images into the teeth, a position of the intraoral scanner relative to the subject's teeth; use the position of the intraoral scanner to determine a list of intensity values for each point of a plurality of points corresponding to an inner volume of the patient's teeth from corresponding points on each of the plurality of images into the teeth; determine a minimum scattering coefficient for each point of the plurality of points from the list of intensity values; and form the 3D volumetric model of the subject's teeth including internal features using the minimum scattering coefficient for each of the points corresponding to the inner volume of the patient's teeth.",9,,0,B
10606911,11,"11. The system of claim 10 , wherein the hand-held wand comprises at least one additional secondary image sensor in addition to the image sensors.",10,claim 10,0,B
10606911,12,"12. The system of claim 10 , wherein the one or more processors is configured to determine surface information by using confocal scanning, stereo vision or structured light triangulation.",11,claim 10,0,B
10606911,13,"13. The system of claim 10 , wherein the hand-held wand is configured to cycle between emitting light at the near-IR wavelength to detect internal structures and emitting light at a second spectral range to perform a surface scan, by switching between the near-IR wavelength and the second spectral range so that images taken with the second spectral range share a coordinate system with the near-IR wavelength.",12,claim 10,0,B
10606911,14,"14. The system of claim 13 , wherein the image sensor is configured to capture both 3D surface model data and the internal data of the tooth.",13,claim 13,0,B
10606911,15,"15. The system of claim 10 , wherein the plurality of light sources comprises a white light light source.",14,claim 10,0,B
10606911,16,"16. The system of claim 10 , further wherein the plurality of light sources and the image sensor are arranged so that light emitted in the second spectral range is reflected from a tooth and received by the one or more sensors at an angle of between 0�� and 1",15,claim 10,0,B
10606912,1,"1. An information processing system comprising: a database that saves, in association with each other, a content identifier that identifies content data and a communication identifier that identifies communication performed in relation to the content data; and a processor including an associator that associates a first content identifier that identifies first content data and a second content identifier that identifies second content data by using a communication identifier that identifies communication performed between a first user and a second user when the first content data and the second content data are shared in relation to the communication, wherein said database saves, in association with each other, the content identifier and a communication identifier that identifies an email attached with content data corresponding to the content identifier, wherein said associator associates the first content data held by the first user and the second content data with each other by a communication identifier that identifies an email if the first content data is transmitted to the second user by the email to cause the second user to hold the transmitted data as the second content data, wherein said database saves, in association with each other, the content identifier and a communication identifier that identifies speech communication performed while sharing and browsing content data corresponding to the content identifier, wherein said associator associates the first content data and the second content data with each other by a communication identifier that identifies speech communication between the first user and the second user if both a terminal of the first user and a terminal of the second user browse the first content data and the second content data while the speech communication is performed, wherein said database saves, in association with each other, the content identifier and a communication identifier that identifies a Web conference taken place while sharing and browsing content data corresponding to the content identifier, and wherein said associator associates the first content data and the second content data with each other by a communication identifier that identifies a Web conference in which the first user the second user participate if the first content data and the second content data are browsed at the Web conference.",0,,1,B
10606912,2,"2. The information processing system according to claim 1 , further comprising a display that displays an icon representing the first content data and an icon representing the second content data, and further displays, between icons, a link corresponding to a type of the communication.",1,claim 1,0,B
10606912,3,"3. The information processing system according to claim 1 , wherein said display displays a first timeline indicating a use history of the first content data and a second timeline indicating a use history of the second content data, and further displays, between the first timeline and the second timeline, a link corresponding to a timing and a type of the communication.",2,claim 1,0,B
10606912,4,"4. The information processing system according to claim 1 , wherein said display displays a relationship between a user and content data owned by the user in a Venn diagram.",3,claim 1,0,B
10606912,5,"5. The information processing system according to claim 1 , wherein said display hierarchically displays a relationship between respective content data.",4,claim 1,0,B
10606912,6,"6. The information processing system according to claim 1 , wherein said display displays editorial transition of each content data in a tree diagram.",5,claim 1,0,B
10606912,7,"7. The information processing system according to claim 1 , wherein said display displays a relationship between each content data and a holder user in a table.",6,claim 1,0,B
10606912,8,"8. An information processing method comprising: saving, in association with each other, a content identifier that identifies content data and a communication identifier that identifies communication performed in relation to the content data; and associating a first content identifier that identifies first content data and a second content identifier that identifies second content data by using a communication identifier that identifies communication performed between a first user and a second user when the first content data and the second content data are shared in relation to the communication, wherein said saving saves, in association with each other, the content identifier and a communication identifier that identifies an email attached with content data corresponding to the content identifier, wherein said associating associates the first content data held by the first user and the second content data with each other by a communication identifier that identifies an email if the first content data is transmitted to the second user by the email to cause the second user to hold the transmitted data as the second content data, wherein said saving saves, in association with each other, the content identifier and a communication identifier that identifies speech communication performed while sharing and browsing content data corresponding to the content identifier, wherein said associating associates the first content data and the second content data with each other by a communication identifier that identifies speech communication between the first user and the second user if both a terminal of the first user and a terminal of the second user browse the first content data and the second content data while the speech communication is performed, wherein said saving saves, in association with each other, the content identifier and a communication identifier that identifies a Web conference taken place while sharing and browsing content data corresponding to the content identifier, and wherein said associating associates the first content data and the second content data with each other by a communication identifier that identifies a Web conference in which the first user and the second user participate if the first content data and the second content data are browsed at the Web conference.",7,,0,B
10606912,9,"9. An information processing program for storing on a non-transitory computer-readable medium and for causing a computer to execute a method, the method comprising: saving, in association with each other, a content identifier that identifies content data and a communication identifier that identifies communication performed in relation to the content data; and associating a first content identifier that identifies first content data and a second content identifier that identifies second content data by using a communication identifier that identifies communication performed between a first user and a second user when the first content data and the second content data are shared in relation to the communication, wherein said saving saves, in association with each other, the content identifier and a communication identifier that identifies an email attached with content data corresponding to the content identifier, wherein said associating associates the first content data held by the first user and the second content data with each other by a communication identifier that identifies an email if the first content data is transmitted to the second user by the email to cause the second user to hold the transmitted data as the second content data, wherein said saving saves, in association with each other, the content identifier and a communication identifier that identifies speech communication performed while sharing and browsing content data corresponding to the content identifier, wherein said associating associates the first content data and the second content data with each other by a communication identifier that identifies speech communication between the first user and the second user if both a terminal of the first user and a terminal of the second user browse the first content data and the second content data while the speech communication is performed, wherein said saving saves, in association with each other, the content identifier and a communication identifier that identifies a Web conference taken place while sharing and browsing content data corresponding to the content identifier, and wherein said associating associates the first content data and the second content data with each other by a communication identifier that identifies a Web conference in which the first user and the second user participate if the first content data and the second content data are browsed at the Web conference.",8,,0,B
10606913,1,"1. A system for Internet advertising, comprising: an Internet server communicatively coupled to a web browser and operable to select a first Internet advertising panel embedded with advertising content based on previous communications with the web browser, the Internet advertising panel being operable to receive advertising dynamic content updates from the Internet server that are selected based on previous communications with the web browser, and deliver the Internet advertising panel to the web browser; and a content server communicatively coupled to the Internet server, the content server operable to send advertising content updates to the Internet server.",0,,1,B
10606913,2,"2. The system of claim 1 , wherein the Internet server is further operable to select and deliver a second Internet advertising panel to the web browser, the second Internet advertising panel being operable to receive advertising content updates from the Internet server.",1,claim 1,0,B
10606913,3,"3. The system of claim 2 , wherein the Internet server is operable to select the advertising content updates based on previous information communicated with the web browser.",2,claim 2,0,B
10606913,4,"4. The system of claim 2 , wherein the Internet server is operable to choose the advertising content updates for one of the first Internet advertising panel and the second Internet advertising panel based on previous information communicated to the other Internet advertising panel.",3,claim 2,0,B
10606913,5,"5. The system of claim 2 , wherein the Internet server is operable to select and deliver a second Internet advertising panel to the web browser based on detecting interaction with the first Internet advertising panel, and wherein the second Internet advertising panel is operable to receive advertising content updates from the Internet server.",4,claim 2,0,B
10606913,6,"6. The system of claim 5 , wherein the Internet server is operable to select the advertising content updates for one of the first Internet advertising panel and the second Internet advertising panel based on previous information communicated to the other Internet advertising panel.",5,claim 5,0,B
10606913,7,"7. The system of claim 1 , wherein the Internet advertising panel is configured to receive advertising content updates from the Internet server without requiring user intervention with the web browser.",6,claim 1,0,B
10606913,8,"8. A method for Internet advertising comprising: selecting, by an Internet server communicatively coupled to a web browser, a first Internet advertising panel based on previous communications with the web browser, the first Internet advertising panel being embedded with advertising content and operable to receive advertising dynamic content updates from the Internet server the dynamic content updates being selected based on previous communications with the web browser, and delivering, by the Internet server, the Internet advertising panel to the web browser; and sending content updates to the Internet server from a content server communicatively coupled to the Internet server.",7,,0,B
10606913,9,"9. The method of claim 8 , further comprising selecting and delivering a second Internet advertising panel to the web browser by the Internet server, the second Internet advertising panel being operable to receive advertising content updates from the Internet server.",8,claim 8,0,B
10606913,10,"10. The method of claim 9 , further comprising selecting the advertising content updates for one of the first Internet advertising panel and the second Internet advertising panel based on previous information communicated to the other Internet advertising panel.",9,claim 9,0,B
10606913,11,"11. The method of claim 9 , further comprising: selecting and delivering a second Internet advertising panel to the web browser by the Internet server based on detecting interaction with the first Internet advertising panel; and receiving advertising content updates at the second Internet advertising panel from the Internet server.",10,claim 9,0,B
10606913,12,"12. The method of claim 11 , further comprising selecting the advertising content updates for one of the first Internet advertising panel and the second Internet advertising panel based on previous information communicated to the other Internet advertising panel.",11,claim 11,0,B
10606913,13,"13. The method of claim 8 , further comprising selecting the advertising content updates based on previous information communicated with the web browser.",12,claim 8,0,B
10606913,14,"14. The method of claim 8 , further comprising receiving advertising content updates at the Internet advertising panel from the Internet server without requiring user intervention with the web browser.",13,claim 8,0,B
10606914,1,"1. A computer-implemented method for evaluating a page in a website, comprising: remotely obtaining a link structure of the website across a computing network; identifying a page set, the page set being a set of pages linked to a specific page in the website; calculating a degree of dispersion of the page set in the link structure; evaluating the specific page using the degree of dispersion to generate a score for the specific page, the score indicating a relative importance of the specific page, wherein a higher score is generated for a page corresponding to nodes with a comparatively higher total distance of paths between linked pages; and displaying customized search results based on the generated score.",0,,1,B
10606914,2,"2. The computer-implemented method according to claim 1 , wherein the specific page of which the degree of dispersion is determined to be higher than a second page is evaluated more highly than the second page.",1,claim 1,0,B
10606914,3,"3. The computer-implemented method according to claim 1 , wherein the link structure of the website is a directed acyclic graph (DAG).",2,claim 1,0,B
10606914,4,"4. The computer-implemented method according to claim 1 , wherein the degree of dispersion is calculated by determining a distance in the link structure between a pair of nodes corresponding to pages in the page set.",3,claim 1,0,B
10606914,5,"5. The computer-implemented method according to claim 1 , wherein the degree of dispersion is calculated by determining a number of edges in a path between a pair of nodes corresponding to pages in the page set via another node in the link structure.",4,claim 1,0,B
10606914,6,"6. The computer-implemented method according to claim 1 , wherein the degree of dispersion is calculated by determining an average of distance between a pair of nodes corresponding to pages in the page set via a lowest common ancestor of the pair of nodes.",5,claim 1,0,B
10606914,7,"7. An evaluating apparatus for evaluating a page in a website, comprising: an obtaining unit configured to remotely obtain a link structure of the website across a computing network; an identifying unit configured to identify a page set, the page set being a set of pages linked to a specific page in the website; a calculating unit configured to calculate a degree of dispersion of the page set in the link structure; an evaluating unit configured to evaluate the specific page using the degree of dispersion to generate a score for the specific page, the score indicating a relative importance of the specific page, wherein a higher score is generated for a page corresponding to nodes with a comparatively higher total distance of paths between linked pages; and displaying customized search results based on the generated score.",6,,0,B
10606914,8,"8. The evaluating apparatus according to claim 7 , wherein the specific page of which the degree of dispersion is determined to be higher than a second page is evaluated more highly than the second page.",7,claim 7,0,B
10606914,9,"9. The evaluating apparatus according to claim 7 , wherein the link structure of the website is a directed acyclic graph (DAG).",8,claim 7,0,B
10606914,10,"10. The evaluating apparatus according to claim 7 , wherein the degree of dispersion is calculated by determining a distance in the link structure between a pair of nodes corresponding to pages in the page set.",9,claim 7,0,B
10606914,11,"11. The evaluating apparatus according to claim 7 , wherein the degree of dispersion is calculated by determining a number of edges in a path between a pair of nodes corresponding to pages in the page set via another node in the link structure.",10,claim 7,0,B
10606914,12,"12. The evaluating apparatus according to claim 7 , wherein the degree of dispersion is calculated by determining an average of distance between a pair of nodes corresponding to pages in the page set via a lowest common ancestor of the pair of nodes.",11,claim 7,0,B
10606914,13,"13. A computer program product for evaluating a page in a website, the computer program product comprising a computer readable storage medium having program instructions embodied therewith, the program instructions executable by a computer to cause the computer to: remotely obtain a link structure of the website across a computing network; identify a page set, the page set being a set of pages linked to a specific page in the website; calculate a degree of dispersion of the page set in the link structure; evaluate the specific page using the degree of dispersion to generate a score for the specific page, the score indicating a relative importance of the specific page, wherein a higher score is generated for a page corresponding to nodes with a comparatively higher total distance of paths between linked pages; and displaying customized search results based on the generated score.",12,,0,B
10606914,14,"14. The computer program product according to claim 13 , wherein the specific page of which the degree of dispersion is determined to be higher than a second page is evaluated more highly than the second page.",13,claim 13,0,B
10606914,15,"15. The computer program product according to claim 13 , wherein the link structure of the website is a directed acyclic graph (DAG).",14,claim 13,0,B
10606914,16,"16. The computer program product according to claim 13 , wherein the degree of dispersion is calculated by determining a distance in the link structure between a pair of nodes corresponding to pages in the page set.",15,claim 13,0,B
10606914,17,"17. The computer program product according to claim 13 , wherein the degree of dispersion is calculated by determining a number of edges in a path between a pair of nodes corresponding to pages in the page set via another node in the link structure.",16,claim 13,0,B
10606914,18,"18. The computer program product according to claim 13 , wherein the degree of dispersion is calculated by determining an average of distance between a pair of nodes corresponding to pages in the page set via a lowest common ancestor of the pair of nodes.",17,claim 13,0,B
10606915,1,"1. An answer searching method based on deep question and answer, comprising: receiving a query statement; obtaining webpages containing candidate answers by searching according to the query statement; obtaining a first candidate answer, a second candidate answer and a third candidate answer based on a webpage analysis method, a deep learning method and a template matching method respectively; scoring and ranking the first candidate answer, the second candidate answer and the third candidate answer; obtaining a candidate answer having a highest score from the first candidate answer, the second candidate answer and the third candidate answer, and judging whether the highest score is larger than a preset score; when the highest score is larger than the preset score, determining the candidate answer having the largest score to be a final answer; and displaying the final answer; wherein obtaining the first candidate answer based on the webpage analysis method comprises: performing a structure analysis and a content analysis on the webpages containing candidate answers, to obtain structure information and content information of sentences in the webpages; and selecting the first candidate answer from the sentences in the webpages according to the structure information, the content information and the characteristics of the query statement; wherein obtaining the second candidate answer based on the deep learning method comprises: obtaining a sentence vector of the query statement, sentence vectors of the candidate answers contained in the webpages and structural knowledge vectors in a structural knowledge base; inputting the sentence vector of the query statement, sentence vectors of the candidate answers contained in the webpages and structural knowledge vectors in the structural knowledge base to a convolutional neural network, to generate a middle information vector; and inputting the middle information vector to a recurrent neural network, to generate the second candidate answer; wherein obtaining the third candidate answer based on the template matching method comprises: obtaining the candidate answers in the webpages containing candidate answers; performing a semantic analysis on the candidate answers to extract word characteristics of the candidate answers; obtaining candidate templates from an answer template base according to the word characteristics; obtaining a correlation between each of the candidate templates and the query statement, and determining an answer template from the candidate templates according to the correlation; and generating the third candidate answer according to the answer template.",0,,1,B
10606915,2,"2. The method according to claim 1 , wherein obtaining webpages containing candidate answers by searching according to the query statement comprises: performing an analysis processing on the query statement, and generating characteristics of the query statement, where, the analysis processing comprises at least one of word segmentation, part-of-speech tagging, named entity recognition, semantic role labeling, syntax dependency parsing, and semantic dependency analysis; obtaining the webpages containing candidate answers by searching according to the characteristics.",1,claim 1,0,B
10606915,3,"3. The method according to claim 1 , wherein displaying the final answer comprises: directly displaying the final answer at a preset position in a search result providing page.",2,claim 1,0,B
10606915,4,"4. An answer searching device based on deep question and answer, comprising: a processor; and a memory, configured to store one or more software modules executable by the processor, wherein the one or more software modules comprises: a receiving module, configured to receive a query statement; a search module, configured to obtain webpages containing candidate answers by searching according to the query statement; an obtaining module, configured to obtain a first candidate answer, a second candidate answer and a third candidate answer based on a webpage analysis method, a deep learning method and a template matching method respectively; a determining module, configured to determine a final answer according to the first candidate answer, the second candidate answer and the third candidate answer; and a displaying module, configured to display the final answer; wherein the determining module comprise: a ranking unit, configured to score and rank the first candidate answer, the second candidate answer and the third candidate answer; a second processing unit, configured to obtain a candidate answer having a highest score, and judging whether the highest score is larger than a preset score; and a determining unit, configured to determine the candidate answer having the largest score to be the final answer when the highest score is larger than the preset score; wherein the obtaining module is further configured to: perform a structure analysis and a content analysis on the webpages containing candidate answers, to obtain structure information and content information of sentences in the webpages; and select the first candidate answer from the sentences in the webpages according to the structure information, the content information and the characteristics of the query statement; wherein the obtaining module is further configured to: obtain a sentence vector of the query statement, sentence vectors of the candidate answers contained in the webpages and structural knowledge vectors in a structural knowledge base; input the sentence vector of the query statement, sentence vectors of the candidate answers contained in the webpages and structural knowledge vectors in the structural knowledge base to a convolutional neural network, to generate a middle information vector; and input the middle information vector to a recurrent neural network, to generate the second candidate answer; wherein the obtaining module is further configured to: obtain the candidate answers in the webpages containing candidate answers; perform a semantic analysis on the candidate answers to extract word characteristics of the candidate answers; obtain candidate templates from an answer template base according to the word characteristics; obtain a correlation between each of the candidate templates and the query statement, and determine an answer template from the candidate templates according to the correlation; and generate the third candidate answer according to the answer template.",3,,0,B
10606915,5,"5. The device according to claim 4 , wherein the search module comprises: a first processing unit, configured to perform an analysis processing on the query statement, and to generate characteristics of the query statement, where, the analysis processing comprises at least one of word segmentation, part-of-speech tagging, named entity recognition, semantic role labeling, syntax dependency parsing, and semantic dependency analysis; an obtaining unit, configured to obtain the webpages containing candidate answers by searching according to the characteristics.",4,claim 4,0,B
10606915,6,"6. The device according to claim 4 , wherein the displaying module is configured to: directly display the final answer at a preset position in a search result providing page.",5,claim 4,0,B
10606915,7,"7. A non-transitory computer-readable storage medium, configured to store instructions that, when executed by a processor of a terminal, cause the terminal to perform an answer searching method based on deep question and answer, the method comprising: receiving a query statement; obtaining webpages containing candidate answers by searching according to the query statement; obtaining a first candidate answer, a second candidate answer and a third candidate answer based on a webpage analysis method, a deep learning method and a template matching method respectively; scoring and ranking the first candidate answer, the second candidate answer and the third candidate answer; obtaining a candidate answer having a highest score from the first candidate answer, the second candidate answer and the third candidate answer, and judging whether the highest score is larger than a preset score; when the highest score is larger than the preset score, determining the candidate answer having the largest score to be a final answer; and displaying the final answer; wherein obtaining the first candidate answer based on the webpage analysis method comprises: performing a structure analysis and a content analysis on the webpages containing candidate answers, to obtain structure information and content information of sentences in the webpages; and selecting the first candidate answer from the sentences in the webpages according to the structure information, the content information and the characteristics of the query statement; wherein obtaining the second candidate answer based on the deep learning method comprises: obtaining a sentence vector of the query statement, sentence vectors of the candidate answers contained in the webpages and structural knowledge vectors in a structural knowledge base; inputting the sentence vector of the query statement, sentence vectors of the candidate answers contained in the webpages and structural knowledge vectors in the structural knowledge base to a convolutional neural network, to generate a middle information vector; and inputting the middle information vector to a recurrent neural network, to generate the second candidate answer; wherein obtaining the third candidate answer based on the template matching method comprises: obtaining the candidate answers in the webpages containing candidate answers; performing a semantic analysis on the candidate answers to extract word characteristics of the candidate answers; obtaining candidate templates from an answer template base according to the word characteristics; obtaining a correlation between each of the candidate templates and the query statement, and determining an answer template from the candidate templates according to the correlation; and generating the third candidate answer according to the answer template.",6,,0,B
10606916,1,"1. A computer-implemented data processing method for monitoring consent record rate change of a particular capture point, the method comprising: providing a user interface at a particular capture point for initiating a transaction between an entity and a data subject; receiving, from a respective computing device associated with each of a plurality of data subjects via the user interface, a plurality of requests to initiate a respective transaction between the entity and each of the plurality of data subjects; in response to receiving each of the plurality of requests: generating, by a consent receipt management system, a unique consent receipt key for each respective request of the plurality of requests; storing, for each respective request, a respective consent record comprising the unique consent receipt key; monitoring the particular capture point to determine a rate of consent records generated at the particular capture point; identifying a change in the rate of consent records generated at the particular capture point; determining, based at least in part on the change in the rate of consent records generated at the particular capture point, that the particular capture point is not functioning properly; and in response to identifying the change in the rate of consent records generated at the particular capture point, generating an electronic alert and transmitting the electronic alert to an individual responsible for the particular capture point.",0,,1,B
10606916,2,"2. The computer-implemented data processing method of claim 1 , where the transaction involves a collection or processing of personal data associated with the data subject by the entity.",1,claim 1,0,B
10606916,3,"3. The computer-implemented data processing method of claim 2 , the method further comprising, in response to receiving each of the plurality of requests: identifying a transaction identifier associated with the transaction; and storing the transaction identifier with each respective consent record.",2,claim 2,0,B
10606916,4,"4. The computer-implemented data processing method of claim 1 , the method further comprising, in response to determining that the particular capture point is not functioning properly, flagging one or more pieces of computer code associated with the particular capture point for modification.",3,claim 1,0,B
10606916,5,"5. The computer-implemented data processing method of claim 1 , wherein the particular capture point comprises a particular webpage.",4,claim 1,0,B
10606916,6,"6. The computer-implemented data processing method of claim 1 , the method further comprising, in response to identifying the change in the rate of consent records generated at the particular capture point, automatically initiating a consent interface consent conversion test at the particular capture point.",5,claim 1,0,B
10606916,7,"7. A consent receipt management system comprising: one or more processors; and computer memory that stores a plurality of consent records associated with a unique subject identifier, each of the plurality of consent records being associated with a respective transaction of a plurality of transactions involving a data subject and an entity, wherein the consent receipt management system is configured for: receiving, at a particular consent capture point, a request to initiate a transaction between the entity and the data subject, the transaction involving collection or processing of personal data associated with the data subject by the entity as part of a processing activity undertaken by the entity that the data subject is consenting to as part of the transaction; in response to receiving the request: identifying a transaction identifier associated with the transaction; identifying a capture point identifier for the particular consent capture point; generating, a unique consent receipt key for the transaction; and determining a unique subject identifier for the data subject; electronically storing the unique subject identifier, the unique consent receipt key, the capture point identifier, and the transaction identifier in computer memory; electronically associating the unique subject identifier, the unique consent receipt key, the capture point identifier, and the transaction identifier; generating a consent record for the transaction, the consent record comprising at least the unique subject identifier and the unique consent receipt key; monitoring the particular consent capture point to determine a consent record rate for the particular consent capture point; analyzing the consent record rate to identify a particular change in the consent record rate; determining, based at least in part on the particular change in the consent record rate, that the particular consent capture point is not functioning properly; and in response to identifying the particular change in the consent record rate, taking one or more automated actions.",6,,0,B
10606916,8,"8. The consent receipt management system of claim 7 , wherein the one or more automated actions are selected from the group consisting of: generating an electronic alert and transmitting the electronic alert to an individual responsible for the particular consent capture point; and flagging one or more pieces of computer code associated with the particular consent capture point for modification.",7,claim 7,0,B
10606916,9,"9. The consent receipt management system of claim 8 , wherein the particular change in the consent record rate comprises a reduction in the consent record rate to zero.",8,claim 8,0,B
10606916,10,"10. The consent receipt management system of claim 8 , wherein the particular change in the consent record rate comprises a reduction in the consent record rate below a particular threshold level.",9,claim 8,0,B
10606916,11,"11. The consent receipt management system of claim 10 , wherein the system is further configured for, in response to the reduction in the consent record rate below the particular threshold level, automatically implementing a modified consent capture interface at the particular consent capture point.",10,claim 10,0,B
10606916,12,"12. The consent receipt management system of claim 11 , wherein the particular consent capture point comprises a particular domain.",11,claim 11,0,B
10606916,13,"13. The consent receipt management system of claim 7 , wherein the one or more automated actions comprise automatically initiating a consent interface consent conversion test at the particular consent capture point.",12,claim 7,0,B
10606916,14,"14. A computer-implemented data processing method for managing a consent capture point, the method comprising: providing, at the consent capture point, a user interface for initiating a transaction between an entity and a data subject; receiving a request to initiate the transaction between the entity and the data subject; in response to receiving the request, generating, by a third-party consent receipt management system, a unique consent receipt key; receiving, from the data subject, a unique subject identifier; identifying a capture point identifier associated with the capture point; electronically storing the unique subject identifier, the unique consent receipt key, the capture point identifier, and a unique transaction identifier associated with the transaction in a consent record; electronically associating the unique subject identifier, the unique consent receipt key, the consent capture point identifier, and the unique transaction identifier; accessing a plurality of consent records associated with the capture point identifier; analyzing each of the plurality of consent records associated with the consent capture point identifier to determine a consent record rate for the consent capture point; monitoring the consent record rate for the consent capture point to identify a particular change to the consent record rate; determining, based at least in part on the particular change to the consent record rate, that the consent capture point is not functioning properly; and in response to identifying the particular change in the consent record rate, taking one or more automated actions.",13,,0,B
10606916,15,"15. The computer-implemented data processing method of claim 14 , wherein the one or more automated actions are selected from the group consisting of: generating an electronic alert and transmitting the electronic alert to an individual responsible for the consent capture point; and flagging one or more pieces of computer code associated with the consent capture point for modification; and automatically initiating a consent interface consent conversion test at the consent capture point.",14,claim 14,0,B
10606916,16,"16. The computer-implemented data processing method of claim 14 , the method further comprising transmitting a consent receipt to the data subject, the consent receipt comprising at least the unique subject identifier and the unique consent receipt key.",15,claim 14,0,B
10606916,17,"17. The computer-implemented data processing method of claim 16 , wherein the transaction comprises processing, by the entity, one or more pieces of personal data associated with the data subject.",16,claim 16,0,B
10606916,18,"18. The computer-implemented data processing method of claim 16 , wherein the consent receipt comprises a mechanism for the data subject to withdraw consent for the entity to process the one or more pieces of personal data.",17,claim 16,0,B
10606916,19,"19. The computer-implemented data processing method of claim 14 , wherein the consent capture point is selected from the group consisting of: a particular domain; a particular webpage; and a particular mobile application.",18,claim 14,0,B
10606917,1,"1. An alternating least square recommendation system, comprising a processor; and a memory, the memory storing instructions to cause the processor to perform: partially updating a user's feature by evaluating an update ratio and a predefined threshold ratio, the pre-defined threshold ratio being configurable based on a preference of an existing sparse matrix factorization, wherein the pre-defined threshold ratio is pre-defined by setting the pre-defined threshold ratio to a variable value according to a past acceptable update.",0,,1,B
10606917,2,"2. The system of claim 1 , further comprising comparing a result of an update with each value to a result with a full-update, wherein the value of the pre-defined threshold ratio having a highest accuracy is set as the pre-defined threshold ratio.",1,claim 1,0,B
10606917,3,"3. A computer program product, the computer program product comprising a non-transitory computer-readable storage medium having program instructions embodied therewith, the program instructions executable by a computer to cause the computer to perform: partially updating a user's feature by evaluating an update ratio and a pre-defined threshold ratio, the pre-defined threshold ratio being configurable based on a preference of an existing sparse matrix factorization, wherein the pre-defined threshold ratio is predefined by setting the pre-defined threshold ratio to a variable value according to a past acceptable update.",2,,0,B
10606917,4,"4. The computer program product of claim 3 , further comprising comparing a result of an update with each value to a result with a full-update, wherein the value of the pre-defined threshold ratio having a highest accuracy is set as the pre-defined threshold ratio.",3,claim 3,0,B
10606917,5,"5. An alternating least square recommendation method, comprising: partially updating a user's feature by evaluating an update ratio and a pre-defined threshold ratio, the pre-defined threshold ratio being configurable based on a preference of an existing sparse matrix factorization, wherein the pre-defined threshold ratio is pre-defined by setting the pre-defined threshold ratio to a variable value according to a past acceptable update.",4,,0,B
10606917,6,"6. The method of claim 5 , further comprising comparing a result of an update with each value to a result with a full-update, wherein the value of the pre-defined threshold ratio having a highest accuracy is set as the pre-defined threshold ratio.",5,claim 5,0,B
10606918,1,"1. A convolution engine, comprising: an input buffer circuit configured to receive and store data values of a plurality of channels of input data in an interleaved manner; a datapath switch circuit coupled to the input buffer circuit and configured to retrieve a group of the data values stored in the input buffer circuit including a center data value and one or more neighboring data values separated from the center data value by one or more step values as defined by configuration information, a portion of the data values between the center data value and the one or more neighboring values being skipped when the group of the data values is retrieved; and a computation core circuit coupled to the datapath switch circuit and configured to: receive the group of the data values from the datapath switch circuit and filter elements of a kernel for performing a convolution operation, and multiply each data value of the group of the data values with a corresponding filter element to obtain multiplied values.",0,,1,B
10606918,2,"2. The convolution engine of claim 1 , further comprising an output buffer coupled to the computation core circuit, the output buffer configured to store output values from the computation core circuit.",1,claim 1,0,B
10606918,3,"3. The convolution engine of claim 2 , wherein the output values stored in the output buffer are of a plurality of output channels in an interleaved manner.",2,claim 2,0,B
10606918,4,"4. The convolution engine of claim 1 , further comprising: a filter storage configured to store the filter elements; and a filter switch circuit coupled to the filter storage and the computation core circuit, the filter switch circuit configured to retrieve the filter elements from the filter storage and provide the filter elements to the computation core circuit.",3,claim 1,0,B
10606918,5,"5. The convolution engine of claim 1 , wherein the input buffer circuit stores (i) in a predetermined row and a column of memory location, first data values for a first subset of bits of a data unit in the input data, and (ii) in the row and another column adjacent to the column storing the first subset of bits, a second data value for a second subset of bits of the data unit.",4,claim 1,0,B
10606918,6,"6. The convolution engine of claim 5 , wherein the first subset of the bits is most significant bits of the data, and the second subset of the bits is least significant bits of the data.",5,claim 5,0,B
10606918,7,"7. The convolution engine of claim 1 , wherein the computation core circuit is further configured to process subsets of the multiplied values by one of (i) accumulating of the subsets of the multiplied values to obtain an output value or (ii) selecting one of the multiplied values as an output value.",6,claim 1,0,B
10606918,8,"8. The convolution engine of claim 7 , further comprising a post-processing circuit coupled to the computation core circuit, the post-processing circuit configured to perform normalized cross correlation on the output value.",7,claim 7,0,B
10606918,9,"9. The convolution engine of claim 1 , wherein the group of the data values multiplied by the computation core circuit in a cycle define a portion of an image.",8,claim 1,0,B
10606918,10,"10. A method of performing convolution, comprising: storing, by an input buffer circuit of a convolution engine, data values of a plurality of channels of input data in an interleaved manner; retrieving, by a datapath switch circuit of the convolution engine and from the input buffer circuit, a group of the data values stored in the input buffer circuit including a center data value and one or more neighboring data values separated from the center data value by one or more step values as defined by configuration information, a portion of the data values between the center data value and the one or more neighboring values skipped when the group of the data values is retrieved; receiving, by a computation core circuit of the convolution engine, the group of the data values from the datapath switch circuit and filter elements of a kernel for performing a convolution operation; and multiplying, by the computation core circuit, each data value of the group of the data values with a corresponding filter element to obtain multiplied values.",9,,0,B
10606918,11,"11. The method of claim 10 , further comprising, by an output buffer of the convolution engine, storing output values of the computation core circuit, and wherein the output values stored in the output buffer are of a plurality of output channels in an interleaved manner.",10,claim 10,0,B
10606918,12,"12. The method of claim 10 , further comprising: storing, by a filter storage of the convolution engine, the filter elements of the kernel; retrieving, by a filter switch circuit of the convolution engine, the filter elements from the filter storage; and providing, by the filter switch circuit, the filter elements to the computation core circuit.",11,claim 10,0,B
10606918,13,"13. The method of claim 10 , wherein the input buffer circuit stores (i) in a predetermined row and a column of memory location, first data values for a first subset of bits of a data unit in the input data, and (ii) in the row and another column adjacent to the column storing the first subset of bits, a second data value for a second subset of bits of the data unit.",12,claim 10,0,B
10606918,14,"14. The method of claim 13 , wherein the first subset of the bits is most significant bits of the data, and the second subset of the bits is least significant bits of the data.",13,claim 13,0,B
10606918,15,"15. The method of claim 10 , further comprising, by the computation core circuit, processing subsets of the multiplied values by the computation core circuit includes one of (i) accumulating of the subsets of the multiplied values to obtain an output value or (ii) selecting one of the multiplied values as an output value.",14,claim 10,0,B
10606918,16,"16. The method of claim 15 , further comprising, by a post-processing circuit of the convolution engine, performing a normalized cross correlation on the output value.",15,claim 15,0,B
10606918,17,"17. The method of claim 10 , wherein the group of the data values multiplied by the computation core circuit in a cycle define a portion of an image.",16,claim 10,0,B
10606918,18,"18. An image signal processor, comprising: an input buffer circuit configured to receive and store data values of a plurality of channels of input data in an interleaved manner; a datapath switch circuit coupled to the input buffer circuit and configured to retrieve a group of the data values stored in the input buffer circuit including a center data value and one or more neighboring data values separated from the center data value by one or more step values as defined by configuration information, a portion of the data values between the center data value and the one or more neighboring values skipped when the group of the data values is retrieved; and a computation core circuit coupled to the datapath switch circuit and configured to: receive the group of the data values from the datapath switch circuit and filter elements of a kernel for performing a convolution operation, and multiply each data value of the group of data values with a corresponding filter element to obtain multiplied values.",17,,0,B
10606918,19,"19. The image signal processor of claim 18 , further comprising an output buffer coupled to the computation core circuit, the output buffer configured to store output values from the computation core circuit.",18,claim 18,0,B
10606918,20,"20. The image signal processor of claim 19 , wherein the output values stored in the output buffer are of a plurality of output channels in an interleaved manner.",19,claim 19,0,B
10606919,1,"1. A method for performing prognostic surveillance operations based on sensor signals from a power plant and associated transmission grid, comprising: obtaining signals comprising time-series data obtained from sensors in the power plant and associated transmission grid during operation of the power plant and associated transmission grid; using an inferential model trained on previously received signals from the power plant and associated transmission grid to generate estimated values for the signals based on correlations between the signals; performing a pairwise differencing operation between actual values and the estimated values for the signals to produce residuals; performing a sequential probability ratio test (SPRT) on the residuals to detect incipient anomalies that arise during operation of the power plant and associated transmission grid; while performing the SPRT, dynamically updating SPRT parameters to compensate for non-Gaussian artifacts that arise in the sensor data due to changing operating conditions in the power plant and associated transmission grid by performing a bivariate optimization operation, which varies both a system disturbance magnitude parameter m and a variance parameter v, while seeking to minimize a resulting decision-time value ASN and maintaining a resulting empirical false alarm probability ? E below a threshold value ? t ; and when an incipient anomaly is detected, generating a notification regarding the anomaly.",0,,1,B
10606919,2,"2. The method of claim 1 , wherein the bivariate optimization operation involves: performing additional SPRT operations on the signals, wherein m and v are iteratively varied in both positive and negative directions to produce resulting values for ? E and ASN; and updating the m and v parameters whenever an additional SPRT operation causes a resulting ASN value to be reduced while a resulting ? E value remains less than ? t .",1,claim 1,0,B
10606919,3,"3. The method of claim 2 , wherein the bivariate optimization operation performs an initial SPRT operation using initial parameter values m=m 0 and v=v 0 ; and wherein when a resulting ? E value from the initial SPRT operation is greater than ? t , the method further comprises iteratively performing additional SPRT operations wherein v is increased until a resulting ? E value is less than ? t .",2,claim 2,0,B
10606919,4,"4. The method of claim 2 , wherein step sizes for the iterative variations of m and v are reduced as the m and v parameters converge toward optimal values that minimize a resulting ASN value while maintaining a resulting ? E value below ? t .",3,claim 2,0,B
10606919,5,"5. The method of claim 1 , wherein the inferential model is trained using a nonlinear, nonparametric (NLNP) regression technique.",4,claim 1,0,B
10606919,6,"6. The method of claim 5 , wherein the NLNP regression technique comprises a Multivariate State Estimation Technique (MSET).",5,claim 5,0,B
10606919,7,"7. The method of claim 1 , wherein the signals are obtained from one or more of the following types of components in the power plant and associated transmission grid: a pump; a turbine; a motor; a generator; a mechanical gear box; a transformer; a fluid-fluid or fluid-air heat-exchanger; and an air blower.",6,claim 1,0,B
10606919,8,"8. The method of claim 7 , wherein the signals are obtained from one or more of the following types of sensors located in components in the power plant and associated transmission grid: a voltage sensor; a current sensor; a pressure sensor; a rotational speed sensor; and a vibration sensor.",7,claim 7,0,B
10606919,9,"9. The method of claim 1 , wherein detecting the incipient anomaly comprises detecting an impending failure of a component in the power plant and associated transmission grid.",8,claim 1,0,B
10606919,10,"10. A non-transitory, computer-readable storage medium storing instructions that when executed by a computer cause the computer to perform a method for performing prognostic surveillance operations based on sensor signals from a power plant and associated transmission grid, the method comprising: obtaining signals comprising time-series data obtained from sensors in the power plant and associated transmission grid during operation of the power plant and associated transmission grid; using an inferential model trained on previously received signals from the power plant and associated transmission grid to generate estimated values for the signals based on correlations between the signals; performing a pairwise differencing operation between actual values and the estimated values for the signals to produce residuals; performing a sequential probability ratio test (SPRT) on the residuals to detect incipient anomalies that arise during operation of the power plant and associated transmission grid; while performing the SPRT, dynamically updating SPRT parameters to compensate for non-Gaussian artifacts that arise in the sensor data due to changing operating conditions in the power plant and associated transmission grid by performing a bivariate optimization operation, which varies both a system disturbance magnitude parameter m and a variance parameter v, while seeking to minimize a resulting decision-time value ASN and maintaining a resulting empirical false alarm probability ? E below a threshold value ? t ; and when an incipient anomaly is detected, generating a notification regarding the anomaly.",9,,0,B
10606919,11,"11. The non-transitory, computer-readable storage medium of claim 10 , wherein the bivariate optimization operation involves: performing additional SPRT operations on the signals, wherein m and v are iteratively varied in both positive and negative directions to produce resulting values for ? E and ASN; and updating the m and v parameters whenever an additional SPRT operation causes a resulting ASN value to be reduced while a resulting ? E value remains less than ? t .",10,claim 10,0,B
10606919,12,"12. The non-transitory, computer-readable storage medium of claim 11 , wherein the bivariate optimization operation performs an initial SPRT operation using initial parameter values m=m 0 and v=v 0 ; and wherein when a resulting ? E value from the initial SPRT operation is greater than ? t , the method further comprises iteratively performing additional SPRT operations wherein v is increased until a resulting ? E value is less than ? t .",11,claim 11,0,B
10606919,13,"13. The non-transitory, computer-readable storage medium of claim 11 , wherein step sizes for the iterative variations of m and v are reduced as the m and v parameters converge toward optimal values that minimize a resulting ASN value while maintaining a resulting ? E value below ? t .",12,claim 11,0,B
10606919,14,"14. The non-transitory, computer-readable storage medium of claim 10 , wherein the inferential model is trained using a nonlinear, nonparametric (NLNP) regression technique.",13,claim 10,0,B
10606919,15,"15. The non-transitory, computer-readable storage medium of claim 14 , wherein the NLNP regression technique comprises a Multivariate State Estimation Technique (MSET).",14,claim 14,0,B
10606919,16,"16. The non-transitory, computer-readable storage medium of claim 10 , wherein detecting the incipient anomaly comprises detecting an impending failure of a component in the power plant and associated transmission grid.",15,claim 10,0,B
10606919,17,"17. A system that performs prognostic surveillance operations based on sensor signals from a power plant and associated transmission grid, comprising: at least one processor and at least one associated memory; and an anomaly-detection mechanism that executes on the at least one processor, wherein during operation, the anomaly-detection mechanism: obtains signals comprising time-series data obtained from sensors in the power plant and associated transmission grid during operation of the power plant and associated transmission grid; uses an inferential model trained on previously received signals from the power plant and associated transmission grid to generate estimated values for the signals based on correlations between the signals; performs a pairwise differencing operation between actual values and the estimated values for the signals to produce residuals; performs a sequential probability ratio test (SPRT) on the residuals to detect incipient anomalies that arise during operation of the power plant and associated transmission grid; wherein while performing the SPRT, the anomaly-detection mechanism dynamically updates SPRT parameters to compensate for non-Gaussian artifacts that arise in the sensor data due to changing operating conditions in the power plant and associated transmission grid by performing a bivariate optimization operation, which varies both a system disturbance magnitude parameter m and a variance parameter v, while seeking to minimize a resulting decision-time value ASN and maintaining a resulting empirical false alarm probability ? E below a threshold value ? t ; and wherein when an incipient anomaly is detected, the anomaly-detection mechanism generates a notification regarding the anomaly.",16,,0,B
10606920,1,"1. A method for providing text components of a text stream in a display area, comprising: analyzing, by a computing device comprising a processor, an eye system of a user while concurrently providing a navigational menu that lists a plurality of items for viewing, wherein each item in the navigational menu comprises one of a text message, an email message, or a document; determining, based on analyzing the eye system, a selection of one of the items in the navigational menu; providing, by the computing device, the text components of the text stream associated with the selected item for presentation in the display area of a display, wherein the text components are presented in the display area such that at least one previously presented text components are scrolled off the display area as successive text components are added to the display area; analyzing, by the computing device, the eye system of the user while concurrently providing the text components of the text stream for presentation in the display area; determining, based on analyzing the eye system, a stream control command of a plurality of stream control commands that requests a change in a characteristic of the presentation of the text components; and in response to the stream control command, altering the presentation of the text components in accordance with the stream control command.",0,,1,B
10606920,2,"2. The method of claim 1 , wherein the stream control command comprises a backup stream control command, and wherein altering the presentation of the text components in accordance with the backup stream control command comprises: determining a current text component provided for presentation in the display area; identifying a previous text component previously provided for presentation in the display area; and providing the previous text component and consecutive text components of the text stream for presentation in the display area.",1,claim 1,0,B
10606920,3,"3. The method of claim 1 , wherein the stream control command comprises a jump forward stream control command, and wherein altering the presentation of the text components in accordance with the jump forward stream control command comprises: determining a current text component provided for presentation in the display area; identifying a successive text component in the text stream; and providing the successive text component and consecutive text components of the text stream for presentation in the display area.",2,claim 1,0,B
10606920,4,"4. The method of claim 1 , wherein the eye system comprises at least one eyelid of the user, and wherein determining the stream control command based on analyzing the eye system comprises determining that the at least one eyelid has remained closed for a predetermined period of time.",3,claim 1,0,B
10606920,5,"5. The method of claim 1 , wherein the eye system comprises at least one eyelid of the user, and wherein determining the stream control command based on analyzing the eye system comprises determining that the at least one eyelid has blinked a predetermined number of times within a predetermined period of time.",4,claim 1,0,B
10606920,6,"6. The method of claim 1 , wherein analyzing the eye system of the user while concurrently providing the text components of the text stream for presentation in the display area comprises: capturing video of the eye system of the user; and analyzing the video to detect a movement in the eye system.",5,claim 1,0,B
10606920,7,"7. The method of claim 1 , wherein the plurality of stream control commands further comprise an increase pace stream control command and wherein altering the presentation of the text components in accordance with the increase pace stream control command comprises increasing a pace at which the text components are scrolled off the display area and successive text components are added to the display area in response to detecting movement of a gaze of the eye system from the text components in a first direction to a first area within the display area above the text components and back to the text components.",6,claim 1,0,B
10606920,8,"8. The method of claim 1 , wherein the plurality of stream control commands further comprise a decrease pace stream control command and wherein altering the presentation of the text components in accordance with the decrease pace stream control command comprises decreasing a pace at which the text components are scrolled off the display area and successive text components are added to the display area in response to detecting movement of a gaze of the eye system from the text components in a second direction to a second area within the display area below the text components and back to the text components.",7,claim 1,0,B
10606920,9,"9. The method of claim 1 , wherein the plurality of stream control commands comprise a pause stream control command, a next text stream control command, and a previous text stream control command, wherein altering the presentation of the text components in accordance with the pause stream control command comprises pausing the scrolling text components off the display area and adding of successive text components to the display area, wherein altering the presentation of the text components in accordance with the next text stream control command comprises halting the presentation of the text stream and providing text components of a next text stream in the list of text streams for presentation in the display area, and wherein altering the presentation of the text components in accordance with the previous text stream control command comprises halting the presentation of the text stream and providing text components of a previous text stream in the list of text streams for presentation in the display area.",8,claim 1,0,B
10606920,10,"10. A system comprising: a processor; and a memory coupled with and readable by the processor and storing therein a set of instructions which, when executed by the processor, causes the processor to provide text components of a text stream in a display area by: analyzing an eye system of a user while concurrently providing a navigational menu that lists a plurality of items for viewing, wherein each item in the navigational menu comprises one of a text message, an email message, or a document; determining, based on analyzing the eye system, a selection of one of the items in the navigational menu; providing the text components of the text stream associated with the selected item for presentation in the display area of a display, wherein the text components are presented in the display area such that at least some previously presented text components are scrolled off the display area as successive text components are added to the display area; analyzing the eye system of the user while concurrently providing the text components of the text stream for presentation in the display area; determining, based on analyzing the eye system, a stream control command of a plurality of stream control commands that requests a change in a characteristic of the presentation of the text components; and in response to the stream control command, altering the presentation of the text components in accordance with the stream control command.",9,,0,B
10606920,11,"11. The system of claim 10 , wherein the plurality of stream control commands further comprise an increase pace stream control command and wherein altering the presentation of the text components in accordance with the increase pace stream control command comprises increasing a pace at which the text components are scrolled off the display area and successive text components are added to the display area in response to detecting movement of a gaze of the eye system from the text components in a first direction to a first area within the display area above the text components and back to the text components.",10,claim 10,0,B
10606920,12,"12. The system of claim 10 , wherein the plurality of stream control commands further comprise a decrease pace stream control command and wherein altering the presentation of the text components in accordance with the decrease pace stream control command comprises decreasing a pace at which the text components are scrolled off the display area and successive text components are added to the display area in response to detecting movement of a gaze of the eye system from the text components in a second direction to a second area within the display area below the text components and back to the text components.",11,claim 10,0,B
10606920,13,"13. The system of claim 10 , wherein the plurality of stream control commands comprise a pause stream control command, a next text stream control command, and a previous text stream control command, wherein altering the presentation of the text components in accordance with the pause stream control command comprises pausing the scrolling text components off the display area and adding of successive text components to the display area, wherein altering the presentation of the text components in accordance with the next text stream control command comprises halting the presentation of the text stream and providing text components of a next text stream in the list of text streams for presentation in the display area, and wherein altering the presentation of the text components in accordance with the previous text stream control command comprises halting the presentation of the text stream and providing text components of a previous text stream in the list of text streams for presentation in the display area.",12,claim 10,0,B
10606920,14,"14. A non-transitory computer-readable medium comprising a set of instructions stored therein which, when executed by a processor, causes the processor to provide text components of a text stream in a display area by: analyzing an eye system of a user while concurrently providing a navigational menu that lists a plurality of items for viewing, wherein each item in the navigational menu comprises one of a text message, an email message, or a document; determining, based on analyzing the eye system, a selection of one of the items in the navigational menu; providing the text components of the text stream associated with the selected item for presentation in the display area of a display, wherein the text components are presented in the display area such that at least one previously presented text components are scrolled off the display area as successive text components are added to the display area; analyzing the eye system of the user while concurrently providing the text components of the text stream for presentation in the display area; determining, based on analyzing the eye system, a stream control command of a plurality of stream control commands that requests a change in a characteristic of the presentation of the text components; and in response to the stream control command, altering the presentation of the text components in accordance with the stream control command.",13,,0,B
10606920,15,"15. The non-transitory computer-readable medium of claim 14 , wherein the plurality of stream control commands further comprise an increase pace stream control command and wherein altering the presentation of the text components in accordance with the increase pace stream control command comprises increasing a pace at which the text components are scrolled off the display area and successive text components are added to the display area in response to detecting movement of a gaze of the eye system from the text components in a first direction to a first area within the display area above the text components and back to the text components.",14,claim 14,0,B
10606920,16,"16. The non-transitory computer-readable medium of claim 14 , wherein the plurality of stream control commands further comprise a decrease pace stream control command and wherein altering the presentation of the text components in accordance with the decrease pace stream control command comprises decreasing a pace at which the text components are scrolled off the display area and successive text components are added to the display area in response to detecting movement of a gaze of the eye system from the text components in a second direction to a second area within the display area below the text components and back to the text components.",15,claim 14,0,B
10606920,17,"17. The non-transitory computer-readable medium of claim 14 , wherein the plurality of stream control commands comprise a pause stream control command, a next text stream control command, and a previous text stream control command, wherein altering the presentation of the text components in accordance with the pause stream control command comprises pausing the scrolling text components off the display area and adding of successive text components to the display area, wherein altering the presentation of the text components in accordance with the next text stream control command comprises halting the presentation of the text stream and providing text components of a next text stream in the list of text streams for presentation in the display area, and wherein altering the presentation of the text components in accordance with the previous text stream control command comprises halting the presentation of the text stream and providing text components of a previous text stream in the list of text streams for presentation in the display area.",16,claim 14,0,B
10606921,1,"1. A method for document production, comprising: at a server computer communicatively connected to a resource repository, a client device, and a network: receiving user login information from the client device over the network; receiving a request for a new document from the client device, the request referencing a theme; constructing the new document from formatted fragments based on the theme associated with the new document, wherein the constructing comprises: retrieving, from the resource repository, the theme, the formatted fragments associated with the theme, and meta information that describes the new document, the theme containing at least one section in a layout of the new document, each section of the at least one section having at least one formatted fragment and an access control list associated therewith, the at least one formatted fragment comprising a system-formatted message that is augmented, extended, or refined with an instruction or additional information pertaining to the system-formatted message, the access control list specifying at least one role-based user group and at least one permission for the at least one role-based user group; evaluating rules applicable to the new document, at least one rule of the rules utilizing the access control list; and assembling the new document using the formatted fragments and the meta information in accordance with the rules; rendering the new document utilizing the access control list; generating a view of the new document; and communicating the view of the new document to the client device over the network for presentation on the client device.",0,,1,B
10606921,2,"2. The method according to claim 1 , wherein the evaluating comprises: determining whether a user identified by the user login information received from the client device has permission to view or edit a section of the theme.",1,claim 1,0,B
10606921,3,"3. The method according to claim 1 , wherein the rendering comprises selecting a section for which a user identified by the user login information has at least a read permission.",2,claim 1,0,B
10606921,4,"4. The method according to claim 1 , wherein the rendering comprises rendering a section as user-editable when a user identified by the user login information has a write permission associated with the section.",3,claim 1,0,B
10606921,5,"5. The method according to claim 4 , further comprising: responsive to the user editing the section, updating the section with one or more fragments.",4,claim 4,0,B
10606921,6,"6. The method according to claim 5 , wherein the updating comprises: replacing a fragment in the section with a replacement fragment; and re-rendering the new document to reflect the user edit of the section, the re-rendered new document including the replacement fragment in the section.",5,claim 5,0,B
10606921,7,"7. The method according to claim 5 , wherein the updating comprises: deleting a fragment in the section; rearranging remaining fragments in the section; and re-rendering the new document to reflect rearrangement of the remaining fragments in the section.",6,claim 5,0,B
10606921,8,"8. A system for document production, comprising: a server computer communicatively connected to a resource repository, a client device, and a network, the server computer comprising at least one processor, at least one non-transitory computer readable medium, and stored instructions translatable by the at least one processor to perform: receiving user login information from the client device over the network; receiving a request for a new document from the client device, the request referencing a theme; constructing the new document from formatted fragments based on the theme associated with the new document, wherein the constructing comprises: retrieving, from the resource repository, the theme, the formatted fragments associated with the theme, and meta information that describes the new document, the theme containing at least one section, each section of the at least one section having at least one formatted fragment and an access control list associated therewith, the at least one formatted fragment comprising a system-formatted message that is augmented, extended, or refined with an instruction or additional information pertaining to the system-formatted message, the access control list specifying at least one role-based user group and at least one permission for the at least one role-based user group; evaluating rules applicable to the new document, at least one rule of the rules utilizing the access control list; and assembling the new document using the formatted fragments and the meta information in accordance with the rules; rendering the new document utilizing the access control list; generating a view of the new document; and communicating the view of the new document to the client device over the network for presentation on the client device.",7,,0,B
10606921,9,"9. The system of claim 8 , wherein the evaluating comprises: determining whether a user identified by the user login information received from the client device has permission to view or edit a section of the theme.",8,claim 8,0,B
10606921,10,"10. The system of claim 8 , wherein the rendering comprises selecting a section for which a user identified by the user login information has at least a read permission.",9,claim 8,0,B
10606921,11,"11. The system of claim 8 , wherein the rendering comprises rendering a section as user-editable when a user identified by the user login information has a write permission associated with the section.",10,claim 8,0,B
10606921,12,"12. The system of claim 11 , wherein the stored instructions are further translatable by the at least one processor to perform: responsive to the user editing the section, updating the section with one or more fragments.",11,claim 11,0,B
10606921,13,"13. The system of claim 12 , wherein the updating comprises: replacing a fragment in the section with a replacement fragment; and re-rendering the new document to reflect the user edit of the section, the re-rendered new document including the replacement fragment in the section.",12,claim 12,0,B
10606921,14,"14. The system of claim 12 , wherein the updating comprises: deleting a fragment in the section; rearranging remaining fragments in the section; and re-rendering the new document to reflect rearrangement of the remaining fragments in the section.",13,claim 12,0,B
10606921,15,"15. A computer program product comprising at least one non-transitory computer readable medium storing instructions translatable by a server computer communicatively connected to a resource repository, a client device, and a network to perform: receiving user login information from the client device over the network; receiving a request for a new document from the client device, the request referencing a theme; constructing the new document from formatted fragments based on the theme associated with the new document, wherein the constructing comprises: retrieving, from the resource repository, the theme, the formatted fragments associated with the theme, and meta information that describes the new document, the theme containing at least one section, each section of the at least one section having at least one formatted fragment and an access control list associated therewith, the at least one formatted fragment comprising a system-formatted message that is augmented, extended, or refined with an instruction or additional information pertaining to the system-formatted message, the access control list specifying at least one role-based user group and at least one permission for the at least one role-based user group; evaluating rules applicable to the new document, at least one rule of the rules utilizing the access control list; and assembling the new document using the formatted fragments and the meta information in accordance with the rules; rendering the new document utilizing the access control list; generating a view of the new document; and communicating the view of the new document to the client device over the network for presentation on the client device.",14,,0,B
10606921,16,"16. The computer program product of claim 15 , wherein the evaluating comprises: determining whether a user identified by the user login information received from the client device has permission to view or edit a section of the theme.",15,claim 15,0,B
10606921,17,"17. The computer program product of claim 16 , wherein the instructions are further translatable by the server computer to perform: responsive to the user editing the section, updating the section with one or more fragments, wherein the updating comprises: replacing a fragment in the section with a replacement fragment; and re-rendering the new document to reflect the user edit of the section, the re-rendered new document including the replacement fragment in the section.",16,claim 16,0,B
10606921,18,"18. The computer program product of claim 16 , wherein the instructions are further translatable by the server computer to perform: responsive to the user editing the section, updating the section with one or more fragments, wherein the updating comprises: deleting a fragment in the section; rearranging remaining fragments in the section; and re-rendering the new document to reflect rearrangement of the remaining fragments in the section.",17,claim 16,0,B
10606921,19,"19. The computer program product of claim 15 , wherein the rendering comprises selecting a section for which a user identified by the user login information has at least a read permission.",18,claim 15,0,B
10606921,20,"20. The computer program product of claim 15 , wherein the rendering comprises rendering a section as user-editable when a user identified by the user login information has a write permission associated with the section.",19,claim 15,0,B
10606922,1,"1. A computer system for generating an appendix from document content, the computer system comprising: one or more computer processors, one or more computer-readable storage media, and program instructions stored on one or more of the computer-readable storage media for execution by at least one of the one or more processors capable of performing a method, the method comprising: analyzing a document to identify a structure of the document; in response to identifying the structure of the document, extracting semantic relationships, wherein the extracting semantic relationships further comprises: extracting a semantic relationship from each identified sentence using example statistical modeling, wherein the semantic relationship comprises a subject, a predicate, and an object; responsive to extracting and identifying the semantic relationship, applying statistical distribution analysis to record a position where the subject and the object appear in the document; identifying and eliminating semantic relationships that are trivial relations, wherein trivial relations are semantic relationships that do not have content relevant to a main topic of the document, and wherein the trivial relations are at least one of: the subject being evenly distributed within a section of the document, wherein a section is selected from a group consisting of a sentence, a paragraph, a page, and a chapter; and the object being evenly distributed within the section of the document; and storing a relation as a candidate appendix topic in persistent storage for further evaluation for inclusion in the appendix, wherein the relation is a semantic relationship that is either the main topic of the document or does not have a subject or an object evenly distributed in the document; and in response to extracting semantic relationships, determining candidate appendix topics based on a degree of interdependency; in response to determining candidate appendix topics, executing a web mining operation, wherein the web mining operation calculates a measure of relevance of the mined web page to the determined candidate appendix topics, and wherein the determining further comprises: detecting at least one interdependency between two or morerelations stored in the persistent storage; graphing the at least one interdependency between the two or more relations, wherein the two or more relations comprise nodes of a graph, and the at least one interdependency comprise an edge of the graph; identifying candidate appendix topics, based on a degree of relatedness between the nodes of the graph, centrality, between-ness, and connected-ness; and storing the identified candidate appendix topics in persistent storage; and formatting the appendix based on the mined intermediate results.",0,,1,B
10606922,2,"2. The computer system of claim 1 , wherein the analyzing a document further comprises: decomposing the document into logical elements; identifying sentences within the logical elements; and storing the identified sentences in persistent storage.",1,claim 1,0,B
10606922,3,"3. The computer system of claim 2 , wherein the logical elements comprise: a paragraph; a section; a zone; and a chapter.",2,claim 2,0,B
10606922,4,"4. The computer system of claim 1 , wherein the executing a web mining operation further comprises: iteratively: mining digital content for information corresponding to the stored candidate appendix topics; applying textual analysis to the mined digital content to calculate the measure of relevance to the candidate appendix topics; analyzing the mined digital content to identify at least one relevant result from the mined digital content; storing statistically relevant mined digital content as an intermediate result in persistent storage; and applying at least one heuristic to the stored statistically relevant result to identify a final appendix topic candidate.",3,claim 1,0,B
10606922,5,"5. The computer system of claim 4 , wherein the at least one heuristic comprises at least one of: the candidate appendix topic is within a pre-determined number of paragraphs from the beginning of the at least one relevant result; the candidate appendix topic is part of a title of the at least one relevant result; and a pre-determined number of entries in decreasing relevance from a list of relevant results.",4,claim 4,0,B
10606922,6,"6. A computer program product for generating an appendix from document content, the computer program product comprising: one or more non-transitory computer-readable storage media and program instructions stored on the one or more non-transitory computer-readable storage media capable of performing a method, the method comprising: analyzing a document to identify a structure of the document; in response to identifying the structure of the document, extracting semantic relationships, wherein the extracting semantic relationships further comprises: extracting a semantic relationship from each identified sentence using example statistical modeling, wherein the semantic relationship comprises a subject, a predicate, and an object; responsive to extracting and identifying the semantic relationship, applying statistical distribution analysis to record a position where the subject and the object appear in the document; identifying and eliminating semantic relationships that are trivial relations, wherein trivial relations are semantic relationships that do not have content relevant to a main topic of the document, and wherein the trivial relations are at least one of: the subject being evenly distributed within a section of the document, wherein a section is selected from a group consisting of a sentence, a paragraph, a page, and a chapter; the object being evenly distributed within the section of the document; and storing a relation as a candidate appendix topic in persistent storage for further evaluation for inclusion in the appendix, wherein the relation is a semantic relationship that is either the main topic of the document or does not have a subject or an object evenly distributed in the document; and in response to extracting semantic relationships, determining candidate appendix topics based on a degree of interdependency; in response to determining candidate appendix topics, executing a web mining operation, wherein the web mining operation calculates a measure of relevance of the mined web page to the determined candidate appendix topics, and wherein the determining further comprises: detecting at least one interdependency between two or morerelations stored in the persistent storage; graphing the at least one interdependency between the two or more relations, wherein the two or more relations comprise nodes of a graph, and the at least one interdependency comprise an edge of the graph; identifying candidate appendix topics, based on a degree of relatedness between the nodes of the graph, centrality, between-ness, and connected-ness; and storing the identified candidate appendix topics in persistent storage; and formatting the appendix based on the mined intermediate results.",5,,0,B
10606922,7,"7. The computer program product of claim 6 , wherein the analyzing a document further comprises: decomposing the document into logical elements; identifying sentences within the logical elements; and storing the identified sentences in persistent storage.",6,claim 6,0,B
10606922,8,"8. The computer program product of claim 7 , wherein the logical elements comprise: a paragraph; a section; a zone; and a chapter.",7,claim 7,0,B
10606922,9,"9. The computer program product of claim 6 , wherein the executing a web mining operation further comprises: iteratively: mining digital content for information corresponding to the stored candidate appendix topics; applying textual analysis to the mined digital content to calculate the measure of relevance to the candidate appendix topics; analyzing the mined digital content to identify at least one relevant result from the mined digital content; storing statistically relevant mined digital content as an intermediate result in persistent storage; and applying at least one heuristic to the stored statistically relevant result to identify a final appendix topic candidate.",8,claim 6,0,B
10606922,10,"10. The computer program product of claim 9 , wherein the at least one heuristic comprises at least one of: the candidate appendix topic is within a pre-determined number of paragraphs from the beginning of the at least one relevant result; the candidate appendix topic is part of a title of the at least one relevant result; and a pre-determined number of entries in decreasing relevance from a list of relevant results.",9,claim 9,0,B
10606923,1,"1. A method comprising: maintaining, by an online system, a plurality of content publishing platforms, each content publishing platform enforcing a set of policies, the set of policies determining whether a content item qualifies for publication via the content publishing platform; receiving, by the online system, from a content provider, a content item and an indication from the content provider to publish the content item on a first content publishing platform from the plurality of content publishing platforms, the content comprising one or more of text and media; identifying metadata of the content item describing one or more attributes of the one or more text and media of the content item; comparing the metadata of the content item to the set of policies associated with a second content publishing platform that is different from the first content publishing platform indicated by the content provider; determining that the content item fails to comply with the set of policies associated with the second content publishing platform but a modification would result in compliance with the second content publishing platform; identifying, through the metadata, a component of the content item that causes the content item to fail to comply with the set of policies associated with the second content publishing platform; sending a recommendation to the content provider to publish the content item on the second publishing platform, the recommendation comprising a suggested change of the component to comply with the set of policies associated with the second content publish platform; and publishing, responsive to an approval received from the content provider, a modified content item on the second publishing platform.",0,,1,B
10606923,2,"2. The method of claim 1 , further comprises comparing the metadata of the content item to a common set of rules of the online system to confirm that the content item complies with the common set of rules.",1,claim 1,0,B
10606923,3,"3. The method of claim 2 , wherein comparing the metadata to the common set of rules comprises comparing text from the metadata with a predefined set of keywords.",2,claim 2,0,B
10606923,4,"4. The method of claim 1 , wherein the content item comprises one of an image or a video, and the metadata comprises dimensions of the image or the video.",3,claim 1,0,B
10606923,5,"5. The method of claim 1 , wherein the content item comprises an image, and the metadata comprises one or more tags associated with the image.",4,claim 1,0,B
10606923,6,"6. The method of claim 1 , further comprising: sending a second recommendation to the content provider to publish the modified content item via the first content publishing platform.",5,claim 1,0,B
10606923,7,"7. The method of claim 1 , wherein the content item comprises a media object, and a dimension of the media object is modified in the modified content item.",6,claim 1,0,B
10606923,8,"8. The method of claim 1 , wherein the content item comprises a media object, and a resolution of the media object is modified in the modified content item.",7,claim 1,0,B
10606923,9,"9. The method of claim 1 , wherein the recommendation includes the modified content item as an attachment.",8,claim 1,0,B
10606923,10,"10. The method of claim 1 , wherein the first content publishing platform is a first social networking system and the second content publishing platform is a second social networking system.",9,claim 1,0,B
10606923,11,"11. A non-transitory computer readable medium configured to store instructions, when executed by one or more processors, cause the one or more processors to perform steps comprising: maintaining, by an online system, a plurality of content publishing platforms, each content publishing platform enforcing a set of policies, the set of policies determining whether a content item qualifies for publication via the content publishing platform; receiving, by the online system, from a content provider, a content item and an indication from the content provider to publish the content item on a first content publishing platform from the plurality of content publishing platforms, the content comprising one or more of text and media; identifying metadata of the content item describing one or more attributes of the one or more text and media of the content item; comparing the metadata of the content item to the set of policies associated with a second content publishing platform that is different from the first content publishing platform indicated by the content provider; determining that the content item fails to comply with the set of policies associated with the second content publishing platform but a modification would result in compliance with the second content publishing platform; identifying, through the metadata, a component of the content item that causes the content item to fail to comply with the set of policies associated with the second content publishing platform; sending a recommendation to the content provider to publish the content item on the second publishing platform, the recommendation comprising a suggested change of the component to comply with the set of policies associated with the second content publish platform; and publishing, responsive to an approval received from the content provider, a modified content item on the second publishing platform.",10,,0,B
10606923,12,"12. The non-transitory computer readable medium of claim 11 , further comprises comparing the metadata of the content item to a common set of rules of the online system to confirm that the content item complies with the common set of rules.",11,claim 11,0,B
10606923,13,"13. The non-transitory computer readable medium of claim 12 , wherein comparing the metadata to the common set of rules comprises comparing text from the metadata with a predefined set of keywords.",12,claim 12,0,B
10606923,14,"14. The non-transitory computer readable medium of claim 11 , wherein the content item comprises one of an image or a video, and the metadata comprises dimensions of the image or the video.",13,claim 11,0,B
10606923,15,"15. The non-transitory computer readable medium of claim 11 , wherein the content item comprises an image, and the metadata comprises one or more tags associated with the image.",14,claim 11,0,B
10606923,16,"16. The non-transitory computer readable medium of claim 11 , further comprising: sending a second recommendation to the content provider to publish the modified content item via the first content publishing platform.",15,claim 11,0,B
10606923,17,"17. The non-transitory computer readable medium of claim 11 , wherein the content item comprises a media object, and a dimension of the media object is modified in the modified content item.",16,claim 11,0,B
10606923,18,"18. The non-transitory computer readable medium of claim 11 , wherein the content item comprises a media object, and a resolution of the media object is modified in the modified content item.",17,claim 11,0,B
10606923,19,"19. The non-transitory computer readable medium of claim 11 , wherein the recommendation includes the modified content item as an attachment.",18,claim 11,0,B
10606923,20,"20. The non-transitory computer readable medium of claim 11 , wherein the first content publishing platform is a first social networking system and the second content publishing platform is a second social networking system.",19,claim 11,0,B
10606924,1,"1. A method implemented by a computing device comprising: identifying, by a file manager, contextual information regarding files and folders of a file system that are accessible through an operating system, the contextual information collected from contents of a file or a folder, and from one or more other sources that comprise at least one of: an application associated with the file or the folder, a service provider, or a cloud storage service; detecting, via the file manager, a user context through the operating system, wherein the detecting of the user context comprises detecting that one or more files or folders are actively open in an application or service executing on the computing device; filtering the identified contextual information based on the detected user context, wherein the filtering filters the contextual information based on the one or more files or folders that are actively open; and presenting, through a user interface of the file system, the filtered contextual information.",0,,1,B
10606924,2,"2. The method of claim 1 , wherein the presenting exposes the filtered contextual information in a details pane positioned in a fixed location of the user interface.",1,claim 1,0,B
10606924,3,"3. The method of claim 1 , wherein the presenting exposes the filtered contextual information in an information bar positioned proximate a file address bar in the user interface.",2,claim 1,0,B
10606924,4,"4. The method of claim 1 , wherein the filtered contextual information includes a preview of the one or more files or folders.",3,claim 1,0,B
10606924,5,"5. A computing device comprising: at least a memory and a processor to implement a file manager of an operating system, the file manager configured to perform operations comprising: identifying, by the file manager, contextual information regarding files and folders of a file system that are accessible through the operating system, the contextual information collected from contents of a file or a folder, and from one or more other sources that comprise at least one of: an application associated with the file or the folder, a service provider, or a cloud storage service; detecting, via the file manager, a user context through the operating system, wherein the detecting of the user context comprises detecting that one or more files or folders are actively open in an application or service executing on the computing device; filtering the identified contextual information based on the detected user context, wherein the filtering filters the contextual information based on the one or more files or folders that are actively open; and presenting, through a user interface of the file system, the filtered contextual information.",4,,0,B
10606924,6,"6. The computing device of claim 5 , wherein contextual information comprises contents of the one or more files or folders and metadata associated with the one or more files or folders.",5,claim 5,0,B
10606924,7,"7. The computing device of claim 5 , wherein the contextual information is exposed in a details pane positioned in a fixed location of the user interface.",6,claim 5,0,B
10606924,8,"8. The computing device of claim 5 , wherein the contextual information is exposed in an information bar positioned proximate a file address bar in the user interface.",7,claim 5,0,B
10606924,9,"9. The computing device of claim 5 , wherein the file manager is further configured to expose an indication of a quick action in conjunction with the contextual information.",8,claim 5,0,B
10606924,10,"10. The computing device of claim 5 , wherein the contextual information includes a preview of the one or more files or folders.",9,claim 5,0,B
10606924,11,"11. The computing device of claim 5 , wherein the filtering exposes the contextual information in response to detection of an intuitive user action to a representation of the one or more files or folders.",10,claim 5,0,B
10606924,12,"12. The computing device of claim 11 , wherein the intuitive user action comprises a hover action over the representation of the one or more files or folders.",11,claim 11,0,B
10606924,13,"13. The computing device of claim 11 , wherein the contextual information is exposed in a pop-up element displayed proximate the representation of the one or more files or folders.",12,claim 11,0,B
10606924,14,"14. One or more computer-readable storage media comprising instructions that, when executed by a client device, implement a file manager, the file manager configured to perform operations comprising: identifying, by the file manager, contextual information regarding files and folders of a file system that are accessible through the operating system, the contextual information collected from contents of a file or a folder, and from one or more other sources that comprise at least one of: an application associated with the file or the folder, a service provider, or a cloud storage service; detecting, via the file manager, a user context through the operating system, wherein the detecting of the user context comprises detecting that one or more files or folders are actively open in an application or service executing on the computing device; filtering the identified contextual information based on the detected user context, wherein the filtering filters the contextual information based on the one or more files or folders that are actively open; and presenting, through a user interface of the file system, the filtered contextual information.",13,,0,B
10606924,15,"15. The method of claim 1 , wherein the detecting of the user context further comprises detecting locational data associated with the computing device based on access to the computing device by a user, and wherein the filtering further filters the contextual information for location-specific contextual information based on the detected locational data.",14,claim 1,0,B
10606924,16,"16. The method of claim 1 , wherein the detecting of the user context further comprises detecting collaborative access to the one or more files or folders by at least two users, and wherein the filtering further filters the contextual information to identify contextual information related to a shared workflow for the one or more files or folders by the at least two users.",15,claim 1,0,B
10606924,17,"17. The method of claim 1 , wherein the detecting of the user context further comprises detecting timestamp data associated with the computing device based on access to the computing device by a user, and wherein the filtering further filters the contextual information for contextual information based on the detected timestamp data.",16,claim 1,0,B
10606924,18,"18. The method of claim 1 , wherein the detecting of the user context further comprises detecting that a user is organizing the one or more of files and folders in the application or service, and wherein the filtering further filters the contextual information for contextual information to identify contextual information for organization of the one or more files and folders.",17,claim 1,0,B
10606924,19,"19. The computing device of claim 5 , wherein the detecting of the user context further comprises detecting that a user is organizing the one or more of files and folders in the application or service, and wherein the filtering further filters the contextual information for contextual information to identify contextual information for organization of the one or more files and folders.",18,claim 5,0,B
10606924,20,"20. The computing device of claim 5 , wherein the detecting of the user context further comprises detecting collaborative access to the one or more files or folders by at least two users, and wherein the filtering further filters the contextual information to identify contextual information related to a shared workflow for the one or more files or folders by the at least two users.",19,claim 5,0,B
10606925,1,"1. In a digital medium environment to generate responsive grid layouts for graphic design, a system comprising: a layout module implemented at least partially in hardware of at least one computing device to: generate, automatically and without user intervention, a plurality of grid layouts, the plurality of grid layouts having, respectively, at least one cell configured to be mapped to at least one design element of digital content, and the plurality of grid layouts including a first grid layout that includes a first cell having first digital content and a second cell having second digital content, the first digital content including different content than the second digital content; a scoring module implemented at least partially in the hardware to automatically and without user intervention: perform a comparison of the first digital content and the second digital content in the first grid layout to the first digital content and the second digital content in one or more other grid layouts of the plurality of grid layouts; and assign scores to the plurality of grid layouts based on aesthetic criteria and layout heuristics determined based on the comparison; and an output module implemented at least partially in the hardware to output, automatically and without user intervention, in a user interface, the first grid layout of the plurality of grid layouts for recommendation to a user based on the scores, wherein the layout module is further implemented to: receive, after output of the first grid layout, user input to select a second grid layout that includes fewer cells than the first grid layout; determine, based on the first digital content in the first cell being visually aligned with the second digital content in the second cell in the first grid layout, that the first digital content and the second digital content are to be grouped together in a third cell of the second grid layout; move the first digital content and the second digital content from the first cell and the second cell of the first grid layout, respectively, to the third cell of the second grid layout; and reformat one or more of the first digital content or the second digital content to fit into the third cell.",0,,1,C
10606925,2,"2. The system as described in claim 1 , wherein the layout module is further configured to group a subset of design elements of the digital content and maintain the group in a cell of the second grid layout.",1,claim 1,0,C
10606925,3,"3. The system as described in claim 1 , wherein the aesthetic criteria includes at least one of symmetry, cell aspect ratio, text density in a cell, or alignment of design elements.",2,claim 1,0,C
10606925,4,"4. The system as described in claim 1 , wherein the first digital content and the second digital content includes a plurality of design elements, wherein the layout module is further configured to determine a relative layout of a subset of the plurality of design elements to be placed within a cell of a grid layout of the plurality of grid layouts.",3,claim 1,0,C
10606925,5,"5. The system as described in claim 1 , wherein the plurality of grid layouts includes a third grid layout having a same number of cells as the second grid layout, and wherein the third grid layout includes a different orientation of cells than the second grid layout.",4,claim 1,0,C
10606925,6,"6. The system as described in claim 1 , wherein the layout module is further configured to, responsive to a user input changing an aspect ratio of a displayed grid layout, automatically generate a new grid layout for display for the digital content of the displayed grid layout if the aesthetic criteria of the displayed grid layout is not met.",5,claim 1,0,C
10606925,7,"7. The system as described in claim 1 , wherein the layout module is further configured to combine design elements from multiple cells into a single cell and generate a cell layout of the design elements within the single cell.",6,claim 1,0,C
10606925,8,"8. The system as described in claim 1 , wherein the layout module is further configured to divide a group of design elements in a single cell into a plurality of groups each positioned within a different cell.",7,claim 1,0,C
10606925,9,"9. In a digital medium environment to generate responsive grid layouts for graphic design, a method implemented by at least one computing device, the method comprising: displaying, by the at least one computing device, a first grid layout of a graphic design that includes a first cell adjacent a second cell and a third cell, the third cell including an instance of content in the first grid layout; receiving, by the at least one computing device, user input selecting a second grid layout that has fewer cells than the first grid layout; dynamically modifying, automatically and by the at least one computing device, the first grid layout to generate the second grid layout by combining digital content from the first cell and the second cell into a fourth cell that represents a foreground cell in the second grid layout that overlaps the third cell in the second grid layout such that digital content displayed in the fourth cell at least partially visually occludes, in the second grid layout, the instance of content displayed in the third cell; comparing, by the at least one computing device, at least one visual parameter of the digital content displayed in the fourth cell to at least one visual parameter of the digital content displayed in the third cell; and modifying, by the at least one computing device and based on said comparing, the at least one visual parameter of the digital content displayed within the fourth cell and the at least one visual parameter of the digital content displayed within the third cell.",8,,0,C
10606925,10,"10. The method as described in claim 9 , wherein the act of automatically modifying the first grid layout is performed in real time.",9,claim 9,0,C
10606925,11,"11. The method as described in claim 9 , wherein the fourth cell is dynamically modified by changing an aspect ratio of the fourth cell.",10,claim 9,0,C
10606925,12,"12. The method as described in claim 11 , wherein said modifying comprises changing an aspect ratio of the third cell relative to the change in the aspect ratio of the fourth cell.",11,claim 11,0,C
10606925,13,"13. The method as described in claim 9 , wherein the at least one visual parameter of the digital content displayed in the fourth cell includes at least one of size, alignment, spacing, or position of the digital content displayed in the fourth cell.",12,claim 9,0,C
10606925,14,"14. The method as described in claim 9 , wherein at least one of the digital content displayed in the third cell or the digital content displayed in the fourth cell includes one or more of text, an image, or a video.",13,claim 9,0,C
10606925,15,"15. The method as described in claim 9 , further comprising dynamically updating the digital content displayed in the third cell or the digital content displayed in the fourth cell based on a change to a size of the second grid layout or a change from the second grid layout to a different grid layout.",14,claim 9,0,C
10606925,16,"16. The method as described in claim 9 , wherein said distributing the first digital content comprises dividing the first digital content into groups, and distributing the groups across the first cell and the second cell.",15,claim 9,0,C
10606925,17,"17. In a digital medium environment to generate responsive grid layouts for graphic design, a system comprising: means for generating, automatically and without user intervention, a plurality of grid layout suggestions using first digital content, the plurality of grid layout suggestions being based on scores assigned to the grid layout suggestions and including a first grid layout in which the first digital content is located within a first cell, and a second grid layout in which the first digital content is located in a second, different cell; means for scoring, automatically and without user intervention, each grid layout suggestion of the plurality of grid layouts by: comparing the first digital content in first cell according to the first grid layout to the first digital content in the second cell according to the second grid layout; and assigning, based on said comparing, the scores to the first grid layout and the second grid layout based on aesthetic criteria and layout heuristics of the first grid layout and the second grid layout; means for controlling output automatically and without user intervention, in a user interface, of the first grid layout based on the assigned score for the first grid layout; and means for receiving user input to the first grid layout moving the first digital content from the first cell to a third cell in the first grid layout, and automatically and in response to receiving the user input, causing the first digital content to be moved to the third cell, and second digital content within the third cell to be moved from the third cell to the first cell; means for determining that reformatting is disabled for the first digital content such that the first digital content is prevented from being reformatted when moved to the third cell; and means for reformatting the second digital content when moved to the first cell.",16,,0,C
10606925,18,"18. The system as described in claim 17 , wherein the aesthetic criteria includes at least one of symmetry, cell aspect ratios, text density in a cell, or alignment of design elements of the digital content within a respective grid layout or within a cell of the respective grid layout.",17,claim 17,0,C
10606925,19,"19. The system as described in claim 17 , further comprising: means for modifying, in real time, the first cell of the first grid layout responsive to a user input that changes a size of the first cell; and means for automatically modifying at least one parameter of the second digital content within the first cell based on the change to the size of the first cell.",18,claim 17,0,C
10606925,20,"20. The system as described in claim 19 , further comprising: means for automatically modifying a size or position of the third cell based on the change to the size of the first cell; and means for automatically modifying at least one parameter of additional digital content displayed within the third cell based on the change to the size of the first cell.",19,claim 19,0,C
10606926,1,"1. A system comprising: a hardware processing circuitry; and at least one memory storing computer executable instructions that, when executed, configure the hardware processing circuitry to perform operations comprising: scanning a message to identify a structure of first text content included in the message, the structure identifying at least one element of the first text content, the one element having a location within the first text content; receiving an indication selecting the one element; displaying a new text input field within the first text content at the location of the selected one element; receiving reply text content into the new input field; and sending a reply to the message, wherein the reply comprises the reply text content integrated into the message at the location.",0,,1,C
10606926,2,"2. The system of claim 1 , the operations further comprising: identifying a recipient of the reply; and transmitting the structure to the recipient.",1,claim 1,0,C
10606926,3,"3. The system of claim 2 , the operations further comprising: identifying an endpoint device associated with the recipient; determining whether the endpoint device is registered with a unified messaging application; and transforming a format of the structure to a second format in response to determining the endpoint device is not registered with the unified messaging application, wherein the structure is transmitted to the recipient in the second format.",2,claim 2,0,C
10606926,4,"4. The system of claim 2 , the operations further comprising: identifying an endpoint device associated with the recipient; determining whether the endpoint device is registered with a third party email messaging application; and transforming a format of the structure to a second format in response to determining that the endpoint device is registered with the third party email messaging application, wherein the structure is transmitted to the recipient in the second format.",3,claim 2,0,C
10606926,5,"5. The system of claim 4 , wherein the transforming comprises translating a notification included in the structure renderable by a receiving application.",4,claim 4,0,C
10606926,6,"6. The system of claim 5 , wherein the transforming comprises translating the notification.",5,claim 5,0,C
10606926,7,"7. The system of claim 4 , the operations further comprising: determining a plurality of applications including a registration of the endpoint device; determining a priority of the applications, wherein the transforming transforms the structure into the second format so as to be compatible with a highest priority application of the plurality of applications.",6,claim 4,0,C
10606926,8,"8. The system of claim 7 , the operations further comprising: updating the priorities of the applications that include a registration of the endpoint device, and second transforming a different structure into another format so as to be compatible with a new highest priority application of the plurality of applications.",7,claim 7,0,C
10606926,9,"9. The system of claim 8 , wherein the priorities are updated based on a relative frequency of use of each of the applications.",8,claim 8,0,C
10606926,10,"10. A method comprising: scanning a message to identify a structure of first text content included in the message, the structure identifying at least one element of the first text content, the one element having a location within the first text content; receiving an indication selecting the one element; displaying a new text input field within the first text content at the location of the selected one element; receiving reply text content into the new input field; and sending a reply to the message, wherein the reply comprises the reply text content integrated into the message at the location.",9,,0,C
10606926,11,"11. The method of claim 10 , further comprising: identifying a recipient of the reply; and transmitting the structure to the recipient.",10,claim 10,0,C
10606926,12,"12. The method of claim 11 , further comprising: identifying an endpoint device associated with the recipient; determining whether the endpoint device is registered with a unified messaging application; and transforming a format of the structure to a second format in response to determining the endpoint device is not registered with the unified messaging application, wherein the structure is transmitted to the recipient in the second format.",11,claim 11,0,C
10606926,13,"13. The method of claim 11 , further comprising: identifying an endpoint device associated with the recipient; determining whether the endpoint device is registered with a third party email messaging application; and transforming a format of the structure to a second format in response to determining that the endpoint device is registered with the third party email messaging application, wherein the structure is transmitted to the recipient in the second format.",12,claim 11,0,C
10606926,14,"14. The method of claim 13 , wherein the transforming comprises translating a notification included in the structure renderable by a receiving application.",13,claim 13,0,C
10606926,15,"15. The method of claim 14 , wherein the transforming comprises translating the notification.",14,claim 14,0,C
10606926,16,"16. The method of claim 15 , further comprising: determining a plurality of applications including a registration of the endpoint device; determining a priority of the applications, wherein the transforming transforms the structure into the second format so as to be compatible with a highest priority application of the plurality of applications.",15,claim 15,0,C
10606926,17,"17. The method of claim 16 , further comprising: updating the priorities of the applications that include a registration of the endpoint device, and second transforming a different structure into another format so as to be compatible with a new highest priority application of the plurality of applications.",16,claim 16,0,C
10606926,18,"18. The method of claim 17 , wherein the priorities are updated based on a relative frequency of use of each of the applications.",17,claim 17,0,C
10606926,19,"19. A non-transitory computer readable storage medium comprising instructions that when executed configure hardware processing circuitry to perform operations comprising: scanning a message to identify a structure of first text content included in the message, the structure identifying at least one element of the first text content, the one element having a location within the first text content; receiving an indication selecting the one element; displaying a new text input field within the first text content at the location of the selected one element; receiving reply text content into the new input field; and sending a reply to the message, wherein the reply comprises the reply text content integrated into the message at the location.",18,,0,C
10606926,20,"20. The non-transitory computer readable storage medium of claim 19 , further comprising: identifying a recipient of the reply; transmitting the structure to the recipient; identifying an endpoint device associated with the recipient; determining whether the endpoint device is registered with a unified messaging application; and transforming a format of the structure to a second format in response to determining the endpoint device is not registered with the unified messaging application, wherein the structure is transmitted to the recipient in the second format.",19,claim 19,0,C
10606927,1,"1. A method comprising: obtaining access to a hierarchically structured document having a plurality of hierarchical levels; for each of said hierarchical levels, obtaining a word list with a word count for each word included therein; for each of said hierarchical levels, creating a tag cloud based on said words in a respective one of said hierarchical levels and said word counts thereof; displaying a table of contents including a plurality of labels associated with respective ones of said hierarchical levels; displaying a first one of said tag clouds in association with a first hierarchical level upon detecting a selection of a corresponding one of said plurality of labels associated with said first hierarchical level, wherein said display of said first tag cloud one includes a nested icon representing a second tag cloud of said tag clouds corresponding to a second hierarchical level at a different hierarchical level of said hierarchically structured document than said first hierarchical level, wherein said table of contents and said tag clouds are associated to display in-context visualization of information about select levels of said hierarchical structure document; obtaining a selection of a given one of said words in said first tag cloud; highlighting, in response to said selection of said given one of said words, all entries in said table of contents for said hierarchically structured document containing at least one instance of said given one of said words; receiving a selection of said nested icon displayed in said first tag cloud; and displaying said second tag cloud corresponding to said second hierarchical level of said hierarchically structured document upon detecting said selection of said nested icon, wherein said second tag cloud is displayed simultaneously with said first tag cloud.",0,,1,C
10606927,2,"2. The method of claim 1 , wherein said step of creating said tag cloud comprises: removing stop words from each of said word lists; determining a total number of words in each of said word lists; determining a normalized word count for each word, other than said stop words, in each of said word lists, by dividing a corresponding one of said word counts by said total number of words in a corresponding one of said lists; wherein said tag clouds are based on said normalized word counts; and displaying, simultaneously, said first and second tag clouds, wherein each displayed tag cloud is displayed in a relatively closer proximity to an associated label displayed in said table of contents than to a label displayed in said table of contents associated with a different displayed tag cloud.",1,claim 1,0,C
10606927,3,"3. The method of claim 2 , wherein said step of creating said tag cloud further comprises: for each given one of said words in each of said word lists, other than said stop words, comparing a corresponding one of said normalized word counts to a pre-defined threshold; and including each given one of said words in each of said word lists in a corresponding one of said tag clouds, only if said pre-defined threshold is exceeded.",2,claim 2,0,C
10606927,4,"4. The method of claim 2 , wherein said displaying step comprises displaying given ones of said words in said first one of said tag clouds in a font size based on said normalized word count.",3,claim 2,0,C
10606927,5,"5. The method of claim 2 , wherein said displaying step comprises displaying given ones of said words in said first one of said tag clouds in alphabetical order.",4,claim 2,0,C
10606927,6,"6. The method of claim 2 , wherein said displaying step comprises displaying given ones of said words in said first one of said tag clouds in order of occurrence in said corresponding one of said hierarchical levels.",5,claim 2,0,C
10606927,7,"7. The method of claim 1 , further comprising providing a system, wherein the system comprises distinct software modules, each of the distinct software modules being embodied on a computer-readable storage medium, and wherein the distinct software modules comprise at least a word count extraction engine module, a tag cloud generation engine module, a control logic module, and a user interface module; wherein: said obtaining of said word list is carried out by said word count extraction engine module and said control logic module executing on at least one hardware processor; said creating of said tag cloud is carried out by said tag cloud generation engine module and said control logic module executing on said at least one hardware processor; and said displaying of said at least one of said tag clouds is facilitated by said user interface module executing on said at least one hardware processor.",6,claim 1,0,C
10606928,1,"1. A method, comprising: receiving a first electronic document including a plurality of regions; identifying, by a processor, the plurality of regions in the first electronic document; and processing the first electronic document using a template to generate a second electronic document by tagging at least a subset of the plurality of regions of the first electronic document with information indicating a logical order of the plurality of the regions based on the template, the tagging information conforming to at least one accessibility standard and allowing an accessibility product to present the subset of the plurality of regions through a computing device according to the logical order without user specification of the logical order of presentation.",0,,1,C
10606928,2,"2. The method of claim 1 , wherein the template includes a set of tagging rules corresponding to a type of the first document.",1,claim 1,0,C
10606928,3,"3. The method of claim 2 , wherein the template defines the plurality of regions in association with the set of tagging rules.",2,claim 2,0,C
10606928,4,"4. The method of claim 3 , further comprising automatically detecting the plurality of regions.",3,claim 3,0,C
10606928,5,"5. The method of claim 4 , wherein the automatically detected plurality of regions are saved in the template.",4,claim 4,0,C
10606928,6,"6. The method of claim 5 , wherein the plurality of regions are automatically detected by determining a plurality of text fragments associated with at least one of the plurality of regions and determining a gap between the plurality of text fragments.",5,claim 5,0,C
10606928,7,"7. The method of claim 6 , wherein the plurality of text fragments have a reading order.",6,claim 6,0,C
10606928,8,"8. A non-transitory computer-readable storage medium storing instructions thereon, the instructions when executed by a processor cause the processor to: receive a first electronic document including a plurality of regions; identify, by a processor, the plurality of regions in the first electronic document; and process the first electronic document using a template to generate a second electronic document by tagging at least a subset of the plurality of regions of the first electronic document with information indicating a logical order of the plurality of the regions based on the template, the tagging information conforming to at least one accessibility standard and allowing an accessibility to product to present the subset of the plurality of regions through a computing device according to the logical order without user specification of the logical order of presentation.",7,,0,C
10606928,9,"9. The computer-readable storage medium of claim 8 , wherein the template includes a set of tagging rules corresponding to a type of the first document.",8,claim 8,0,C
10606928,10,"10. The computer-readable storage medium of claim 9 , wherein the template defines the plurality of regions in association with the set of tagging rules.",9,claim 9,0,C
10606928,11,"11. The computer-readable storage medium of claim 10 , wherein the instructions cause the processor to automatically detect the plurality of regions.",10,claim 10,0,C
10606928,12,"12. The computer-readable storage medium of claim 11 , wherein the automatically detected plurality of regions are saved in the template.",11,claim 11,0,C
10606928,13,"13. The computer-readable storage medium of claim 12 , wherein the plurality of regions are automatically detected by determining a plurality of text fragments associated with at least one of the plurality of regions and determining a gap between the plurality of text fragments.",12,claim 12,0,C
10606928,14,"14. The computer-readable storage medium of claim 13 , wherein the plurality of text fragments have a reading order.",13,claim 13,0,C
10606928,15,"15. A system for converting documents, comprising: a processor; and a computer readable medium, comprising instructions executable on the processor for: receiving a first electronic document including a plurality of regions; identifying, by a processor, the plurality of regions in the first electronic document; and processing the first electronic document using a template to generate a second electronic document by tagging at least a subset of the plurality of regions of the first electronic document with information indicating a logical order of the plurality of the regions based on the template, the tagging information conforming to at least one accessibility standard and allowing an accessibility to product to present the subset of the plurality of regions through a computing device according to the logical order without user specification of the logical order of presentation.",14,,0,C
10606928,16,"16. The system of claim 15 , wherein the template includes a set of tagging rules corresponding to a type of the first document.",15,claim 15,0,C
10606928,17,"17. The system of claim 16 , wherein the template defines the plurality of regions in association with the set of tagging rules.",16,claim 16,0,C
10606928,18,"18. The system of claim 17 , wherein the instructions are executable on the processor for automatically detecting the plurality of regions.",17,claim 17,0,C
10606928,19,"19. The system of claim 18 , wherein the automatically detected plurality of regions are saved in the template.",18,claim 18,0,C
10606928,20,"20. The system of claim 19 , wherein the plurality of regions are automatically detected by determining a plurality of text fragments associated with at least one of the plurality of regions and determining a gap between the plurality of text fragments.",19,claim 19,0,C
10606928,21,"21. The system of claim 20 , wherein the plurality of text fragments have a reading order.",20,claim 20,0,C
10606929,1,"1. A method comprising: obtaining a markup language document of an external web page, the external web page hosted on a domain of a third party system that is different than a domain of a social networking system, the markup language document comprising a tag describing a type of the external web page; selecting a template based on the tag that describes the type of the external web page; generating, by the social networking system, a local web page corresponding to the external web page based on the template and web page content stored in the markup language document, the generated local web page allowing one or more interactions of the social networking system that are distinct from user interactions supported by the external web page; generating, responsive to a request by the third party system, a node in a social graph maintained by the social networking system, the node representing the local web page of the third party system in the social graph, assigned to a node type based on the tag that describes the type of the external web page; receiving at least one user interaction through the local web page and performed by a user of the social networking system; responsive to receiving the at least one user interaction through the local web page, modifying, by the social networking system, the social graph by storing a connection between the node associated with the local web page of the third party system and a node corresponding to the user of the social networking system, the connection representing one or more interactions of the social networking system that are distinct from user interactions supported by the external web page; and communicating, by the social networking system to the third party system, an indication of the at least one user interaction received through the local web page.",0,,1,C
10606929,2,"2. The method of claim 1 , wherein the local web page is hosted on the domain of the social networking system and wherein the markup language document of the external web page is mapped to the local web page.",1,claim 1,0,C
10606929,3,"3. The method of claim 1 , wherein the node in the social graph of the social networking system is generated based on one or more tags in the markup language document.",2,claim 1,0,C
10606929,4,"4. The method of claim 3 , wherein each of the one or more tags in the markup language document provide information regarding one of a title, a label, a unique identifier, a microformat, a description about a node, a type of a node, a location associated with a node, a start and end time associated with a node, action links, contact information, and one or more social networking system user identifiers specifying one or more administrators of a node.",3,claim 3,0,C
10606929,5,"5. The method of claim 1 , wherein the template further comprises instructions to display the local web page on a user device when provided by the social networking system.",4,claim 1,0,C
10606929,6,"6. The method of claim 5 , wherein the template further comprises a user interface element that is included based on a type of a node described in a markup language document that encodes the information of the external web page.",5,claim 5,0,C
10606929,7,"7. The method of claim 6 , wherein the received at least one user interaction occurs through the user interface element included in the template used to generate the local web page.",6,claim 6,0,C
10606929,8,"8. The method of claim 6 , wherein generating the node in the social graph maintained by the social networking system comprises: extracting a node type from a tag in the markup language document; and generating the node having the node type within the social graph.",7,claim 6,0,C
10606929,9,"9. The method of claim 1 , wherein generating the local web page occurs in response to a received request for web page content from a user device.",8,claim 1,0,C
10606929,10,"10. The method of claim 1 , wherein the markup language document of the external web page is obtained by conducting an analysis on available content on the external web page.",9,claim 1,0,C
10606929,11,"11. A non-transitory computer-readable medium comprising instructions that, when executed by a processor of a computer, cause the processor to perform steps including: obtaining a markup language document of an external web page, the external web page hosted on a domain of a third party system that is different than a domain of a social networking system, the markup language document comprising a tag describing a type of the external web page; selecting a template based on the tag that describes the type of the external web page; generating, by the social networking system, a local web page corresponding to the external web page based on the template and web page content stored in the markup language document, the generated local web page allowing one or more interactions of the social networking system that are distinct from user interactions supported by the external web page; generating, responsive to a request by the third party system, a node in a social graph maintained by the social networking system, the node representing the local web page of the third party system in the social graph, assigned to a node type based on the tag that describes the type of the external web page; receiving at least one user interaction through the local web page and performed by a user of the social networking system; responsive to receiving the at least one user interaction through the local web page, modifying, by the social networking system, the social graph by storing a connection between the node associated with the local web page of the third party system and a node corresponding to the user of the social networking system, the connection representing one or more interactions of the social networking system that are distinct from user interactions supported by the external web page; and communicating, by the social networking system to the third party system, an indication of the at least one user interaction received through the local web page.",10,,0,C
10606929,12,"12. The non-transitory computer-readable medium of claim 11 , wherein the local web page is hosted on the domain of the social networking system and wherein the markup language document of the external web page is mapped to the local web page.",11,claim 11,0,C
10606929,13,"13. The non-transitory computer-readable medium of claim 11 , wherein the node in the social graph of the social networking system is generated based on one or more tags in the markup language document.",12,claim 11,0,C
10606929,14,"14. The non-transitory computer-readable medium of claim 13 , wherein each of the one or more tags in the markup language document provide information regarding one of a title, a label, a unique identifier, a microformat, a description about a node, a type of a node, a location associated with a node, a start and end time associated with a node, action links, contact information, and one or more social networking system user identifiers specifying one or more administrators of a node.",13,claim 13,0,C
10606929,15,"15. The non-transitory computer-readable medium of claim 11 , wherein the template further comprises instructions to display the local web page on a user device when provided by the social networking system.",14,claim 11,0,C
10606929,16,"16. The non-transitory computer-readable medium of claim 15 , wherein the template further comprises a user interface element that is included based on a type of a node described in a markup language document that encodes the information of the external web page.",15,claim 15,0,C
10606929,17,"17. The non-transitory computer-readable medium of claim 16 , wherein the received at least one user interaction occurs through the user interface element included in the template used to generate the local web page.",16,claim 16,0,C
10606929,18,"18. The non-transitory computer-readable medium of claim 16 , wherein generating the node in the social graph maintained by the social networking system comprises: extracting a node type from a tag in the markup language document; and generating the node having the node type within the social graph.",17,claim 16,0,C
10606929,19,"19. The non-transitory computer-readable medium of claim 11 , wherein generating the local web page occurs in response to a received request for web page content from a user device.",18,claim 11,0,C
10606929,20,"20. The non-transitory computer-readable medium of claim 11 , wherein the markup language document of the external web page is obtained by conducting an analysis on available content on the external web page.",19,claim 11,0,C
10606930,1,"1. A system, including a computer, for managing content displayed on a web site viewable by users of the web site through browser or mobile application, comprising: a plurality of configurable applications administered by the computer, wherein: each configurable application includes a category of content stored by the computer and displayable to users of the web site, one of the plurality of configurable applications is a biography application comprising biographical information about users of the web site, at least one of the plurality of configurable applications is generated by the computer at least in part based on inputs received from users of the web site, and the inputs include at least one of text, graphics, sounds, documents, and multi-media content; a first configurable link on the web site that points to the biography application; and a second configurable link on the web site that points to at least one of the plurality of configurable applications, wherein: the computer includes a portal through which a user acting as an administrator can manage at least one user-configurable business rule that permits the user acting as an administrator to selectively control the content viewable by other users of the web site, the computer automatically generates the first configurable link according to at least one rule that is configurable by a first user acting as an administrator, the computer automatically generates the second configurable link according to at least one rule that is configurable by the first user acting as an administrator, and at least some displayable content is generated by the computer based at least in part on a user-configured business rule that manages displayable content for one of the plurality of configurable applications by selecting from among the content stored by the computer before the displayable content generated by the computer is sent.",0,,1,C
10606930,2,2. The system of claim 1 wherein the at least one configurable link is generated by the computer based at least in part on a profile attributed to at least one user of the web site and at least one rule that is configurable by a user acting as an administrator and that applies user profiles to select what content stored on the computer can be viewed by which of the users of the web site.,1,claim 1,0,C
10606930,3,"3. The system of claim 1 , wherein the first configurable link is a uniform resource locator (URL).",2,claim 1,0,C
10606930,4,"4. The system of claim 1 , wherein: one of the plurality of configurable applications is an events application that schedules and displays events based at least in part on inputs received from at least one user of the web site; one of the plurality of configurable applications is a communications application that displays communications provided by a plurality of the users of the web site; and communications related to events scheduled in the events application are automatically displayed in the communications application.",3,claim 1,0,C
10606930,5,"5. The system of claim 1 , wherein user profiles are configured to selectively include information associating a user with a subgroup of all users of the web site, and wherein the rule determines what content can be seen by which users based at least in part on whether users are associated with a particular subgroup.",4,claim 1,0,C
10606930,6,"6. The system of claim 1 , wherein the second configurable link includes information concerning a user profile and information relating to which of the users of the web site are permitted to view the configurable application to which the second configurable link points.",5,claim 1,0,C
10606930,7,"7. A system, including a computer with a web server, for managing content returned from the server displayable on client access devices of multiple users of the system who have profiles stored on the system, the system comprising: at least a first configurable application and a second configurable application, wherein: each of the first and second configurable applications includes content that is stored on the server and that is displayable to the users of the system, one of the configurable applications is a biography application that is managed by the server and that displays biographical information that is received from and that is about one of the users of the system, at least one of the configurable applications is generated by the server at least in part based on inputs received from multiple users of the system, and the inputs include at least one of text, graphics, sounds, documents, and multi-media content; an administrator portal through which users of the system are permitted to act in the role of an administrator of certain content, wherein: a user acting in the role of an administrator may manage business rules that utilize profiles of the users of the system to control interaction of the users with the certain content, each user of the system is permitted to act in the role of an administrator at least with respect to a subset of the content returned from the server; a first user configurable link posted to the server that points to the biography application; and a second user configurable link posted to the server that points to at least one of the configurable applications, wherein: the computer automatically generates the first user configurable link according to at least one rule that is configurable by a first user acting as an administrator, the computer automatically generates the second user configurable link according to at least one rule that is configurable by the first user acting as an administrator, and at least some content is assembled and delivered to at least one user by the server based at least in part on a profile attributed to at least one user of the system and at least one rule that is configurable by a user acting in the role of an administrator and that applies user profiles to select what content stored on the server can be viewed by which of the users of the system.",6,,0,C
10606930,8,"8. A system, including a computer with a web server, for managing content returned from the web server displayable on client access devices of multiple users of the system who have profiles stored on the system, the system comprising: at least a first configurable application and a second configurable application, wherein: each of the first and second configurable applications includes content that is stored on the web server and that is displayable to the users of the system, one of the configurable applications is a biography application that is managed by the web server and that displays biographical information that is received from and that is about one of the users of the system, at least one of the configurable applications is generated by the web server at least in part based on inputs received from multiple users of the system, and the inputs include at least one of text, graphics, sounds, documents, and multi-media content; an administrator portal through which users of the system are permitted to act in the role of an administrator of certain content, wherein: a user acting in the role of an administrator may manage business rules that utilize profiles of the users of the system to control interaction of the users with the certain content, and each user of the system is permitted to act in the role of an administrator at least with respect to a subset of the content returned from the web server; a first user configurable link on the web site that points to the biography application; and a second user configurable link, generated by posting content and configuration information to the web server that points to at least one of the configurable applications, wherein: the computer automatically generates the first user configurable link according to at least one rule that is configurable by a first user acting as an administrator, the computer automatically generates the second user configurable link according to at least one rule that is configurable by the first user acting as an administrator, and at least some content is assembled and delivered to at least one user by the web server based at least in part on a profile attributed to at least one user of the system and at least one rule that is configurable by a user acting in the role of an administrator and that applies user profiles to select what content stored on the web server can be viewed by which of the users of the system.",7,,0,C
10606930,9,"9. A system comprising: a server hosting a plurality of configurable applications, wherein: each of the plurality of configurable applications includes content that is stored on the server and that is displayable to users of the system, one of the plurality of configurable applications is a biography application that is managed by the server, the biography application displays biographical information that is received from and that is about the users of the system, at least one of the plurality of configurable applications is generated by the server at least in part based on inputs received from multiple users of the system, and the inputs include at least one of text, graphics, sounds, documents, and multi-media content; a portal through which users of the system are permitted to act in a role of content creator of certain content, wherein: a user acting in the role of content creator may manage business rules to control interaction of the users of the system with the certain content, and each user of the system is permitted to act in the role of content creator at least with respect to a subset of the content returned from the server; a first user configurable link that points to the biography application; and a second user configurable link that points to at least one of the plurality of configurable applications, wherein: the computer automatically generates the first user configurable link according to at least one business rule that is configurable by a first user acting in the role of content creator, the computer automatically generates the second user configurable link according to at least one business rule that is configurable by the first user acting in the role of content creator, at least some content is assembled and delivered to at least one user by the server based at least in part on the application of at least one business rule to at least one user, and at least one business rule is configurable by a user acting in the role of content creator and applies business rules based on other user attributes to select what content stored on the server can be viewed by which of the users of the system.",8,,0,C
10606930,10,"10. A non-transitory computer-readable medium storing instructions comprising: hosting a plurality of configurable applications, wherein: each of the plurality of configurable applications includes content that is displayable to users, one of the plurality of configurable applications is a biography application, and the biography application displays biographical information that is received from and that is about the users; generating at least one of the plurality of configurable applications at least in part based on inputs received from multiple of the users, wherein the inputs include at least one of text, graphics, sounds, documents, and multi-media content; providing a network-accessible portal through which the users are permitted to act in a role of content creator of certain content, wherein: a user acting in the role of content creator may manage business rules to control interaction of the users with the certain content, and each user is permitted to act in the role of content creator at least with respect to a subset of the content returned to the users; hosting a first user configurable link that points to the biography application; hosting a second user configurable link that points to at least one of the plurality of configurable applications; automatically generating the first user configurable link according to at least one business rule that is configurable by a first user acting in the role of content creator; automatically generating the second user configurable link according to at least one business rule that is configurable by the first user acting in the role of content creator; and assembling and delivering at least some content to at least one user based at least in part on the application of at least one business rule to at least one user, and wherein at least one business rule is configurable by a user acting in the role of content creator and applies business rules based on other user attributes to select what content can be viewed by which of the users.",9,,0,C
10606931,1,"1. A system, comprising: one or more storage devices; one or more processors; and a memory comprising program instructions executable by the one or more processors to: store compressed entity information for a plurality of entities in a hierarchical conditional random field model on the one or more storage devices, wherein each entity is represented as an entity node that forms a subtree in the model, wherein mentions associated with each entity are stored as leaf nodes of the respective entity node; wherein each mention is represented in the model as a low-dimensional fixed-width feature vector comprising n features, wherein the feature vectors are compressed according to a locality sensitive hash (LSH) function H that, for a feature vector a, stores a dot product a��h i as the hash of a such that H(a) is an array of dot products of lengt",0,,1,C
10606931,2,"2. The system as recited in claim 1 , wherein the program instructions are further executable by the one or more processors to compute cosine similarity between entity nodes in the model based on the compressed feature vectors.",1,claim 1,0,C
10606931,3,"3. The system as recited in claim 1 , wherein the program instructions are further executable by the one or more processors to add compressed feature vectors to the compressed entity information without requiring the feature vectors to be added to original uncompressed entity information and recompressing the entity information.",2,claim 1,0,C
10606931,4,"4. The system as recited in claim 1 , wherein the program instructions are further executable by the one or more processors to subtract compressed feature vectors from the compressed entity information without requiring the feature vectors to be subtracted from original uncompressed entity information and recompressing the entity information.",3,claim 1,0,C
10606931,5,"5. The system as recited in claim 1 , wherein the program instructions are further executable by at least one of the one or more processors to: determine, based on the compressed entity information, that two entity nodes in the model refer to a same entity; and merge the two entity nodes in the model without requiring the compressed entity information to be decompressed.",4,claim 1,0,C
10606931,6,"6. The system as recited in claim 5 , wherein, to merge the two entity nodes, the program instructions are further executable by the one or more processors to add the compressed feature vectors of the two entity nodes without requiring the compressed entity information to be decompressed.",5,claim 5,0,C
10606931,7,"7. The system as recited in claim 1 , wherein a subtree formed by an entity node has one or more intermediate nodes that organize subsets of the entity's mentions as leaf nodes, wherein the program instructions are further executable by at least one of the one or more processors to: determine, based on the compressed entity information, that an intermediate node of an entity node refers to a different entity; and split the intermediate node from the entity node's subtree in the model to form a new subtree in the model with the intermediate node as the entity node without requiring the compressed entity information to be decompressed.",6,claim 1,0,C
10606931,8,"8. The system as recited in claim 7 , wherein, to split the intermediate node from the entity node's subtree in the model, the program instructions are further executable by the one or more processors to subtract the compressed feature vectors of the intermediate node from the entity node without requiring the compressed entity information to be decompressed.",7,claim 7,0,C
10606931,9,"9. A method, comprising: performing, by a computer system comprising one or more processors: compressing feature vectors representing mentions associated with entities according to a locality sensitive hash (LSH) function H that, for a feature vector a, stores a dot product a��h i as the hash of a such that H(a) is an array of dot products of length n; and storing the compressed feature vectors as compressed entity information for a plurality of entities in a hierarchical conditional random field model on one or more storage devices, wherein each entity is represented as an entity node that forms a subtree in the model, wherein compressed feature vectors representing mentions associated with each entity are stored as leaf nodes of the respective entity n",8,,0,C
10606931,10,"10. The method as recited in claim 9 , further comprising computing cosine similarity between entity nodes in the model based on the compressed feature vectors without decompressing the entity information.",9,claim 9,0,C
10606931,11,"11. The method as recited in claim 9 , further comprising adding a compressed feature vector to the compressed entity information without decompressing the entity information.",10,claim 9,0,C
10606931,12,"12. The method as recited in claim 9 , further comprising subtracting a compressed feature vector from the compressed entity information without decompressing the entity information.",11,claim 9,0,C
10606931,13,"13. The method as recited in claim 9 , further comprising: determining, based on the compressed entity information, that two entity nodes in the model refer to a same entity; and merging the two entity nodes in the model without requiring the compressed entity information to be decompressed.",12,claim 9,0,C
10606931,14,"14. The method as recited in claim 13 , wherein merging the two entity nodes comprises adding the compressed feature vectors of the two entity nodes without requiring the compressed entity information to be decompressed.",13,claim 13,0,C
10606931,15,"15. The method as recited in claim 9 , wherein a subtree formed by an entity node has one or more intermediate nodes that organize subsets of the entity's mentions as leaf nodes, the method further comprising: determining, based on the compressed entity information, that an intermediate node of an entity node refers to a different entity; and splitting the intermediate node from the entity node's subtree in the model to form a new subtree in the model with the intermediate node as the entity node without requiring the compressed entity information to be decompressed.",14,claim 9,0,C
10606931,16,"16. The method as recited in claim 15 , wherein splitting the intermediate node from the entity node's subtree in the model comprises subtracting the compressed feature vectors of the intermediate node from the entity node without requiring the compressed entity information to be decompressed.",15,claim 15,0,C
10606931,17,"17. A non-transitory, computer-readable storage medium storing program instructions that when executed on one or more computers cause the one or more computers to: compress feature vectors representing mentions associated with entities according to a locality sensitive hash (LSH) function H that, for a feature vector a, stores a dot product a��h i as the hash of a such that H(a) is an array of dot products of length n; and store the compressed feature vectors as compressed entity information for a plurality of entities in a hierarchical conditional random field model on one or more storage devices, wherein each entity is represented as an entity node that forms a subtree in the model, wherein compressed feature vectors representing mentions associated with each entity are stored as leaf nodes of the respective entity n",16,,0,C
10606931,18,"18. The non-transitory, computer-readable storage medium of claim 17 , wherein the program instructions when executed further cause the one or more computers to compute cosine similarity between entity nodes in the model based on the compressed feature vectors.",17,claim 17,0,C
10606931,19,"19. The non-transitory, computer-readable storage medium of claim 17 , wherein the program instructions when executed further cause the one or more computers to add a compressed feature vector to the compressed entity information without requiring the feature vector to be added to original uncompressed entity information and recompressing the entity information.",18,claim 17,0,C
10606931,20,"20. The non-transitory, computer-readable storage medium of claim 17 , wherein the program instructions when executed further cause the one or more computers to subtract a compressed feature vector from the compressed entity information without requiring the feature vector to be subtracted from original uncompressed entity information and recompressing the entity information.",19,claim 17,0,C
10606932,1,"1. A method, comprising: receiving, by a server, a hybrid markup language document sent via the Internet; determining, by the server, a boundary in the hybrid markup language document; generating, by the server, a copy of the hybrid markup language document; discarding, by the server, an electronic content that precedes the boundary in the copy of the hybrid markup language document; and generating, by the server, an output file representing a text-to-speech conversion of a remaining electronic content in the copy of the hybrid markup language document occurring after the boundary.",0,,1,C
10606932,2,"2. The method of claim 1 , further comprising scanning the hybrid markup language document to determine the boundary.",1,claim 1,0,C
10606932,3,"3. The method of claim 1 , further comprising generating a stack associated with the hybrid markup language document.",2,claim 1,0,C
10606932,4,"4. The method of claim 1 , further comprising generating a stack associated with the boundary.",3,claim 1,0,C
10606932,5,"5. The method of claim 1 , further comprising tagging the boundary.",4,claim 1,0,C
10606932,6,"6. The method of claim 1 , further comprising demarcating the boundary.",5,claim 1,0,C
10606932,7,"7. The method of claim 1 , further comprising sending the remaining electronic content occurring after the boundary to a text-to-speech system for the text-to-speech conversion.",6,claim 1,0,C
10606932,8,"8. A system, comprising: a hardware processor; and a memory device, the memory device storing instructions, the instructions when executed causing the hardware processor to perform operations, the operations comprising: receiving a hybrid markup language document sent via the Internet; determining a speaker boundary in the hybrid markup language document; generating an electronic copy of the hybrid markup language document; discarding an electronic content that precedes the speaker boundary in the electronic copy of the hybrid markup language document; and generating an output file representing a text-to-speech conversion of a remaining electronic content occurring after the speaker boundary in the electronic copy of the hybrid markup language document.",7,,0,C
10606932,9,"9. The system of claim 8 , wherein the operations further comprise scanning the hybrid markup language document to determine the speaker boundary.",8,claim 8,0,C
10606932,10,"10. The system of claim 8 , wherein the operations further comprise generating a stack associated with the hybrid markup language document.",9,claim 8,0,C
10606932,11,"11. The system of claim 8 , wherein the operations further comprise generating a stack associated with the speaker boundary.",10,claim 8,0,C
10606932,12,"12. The system of claim 8 , wherein the operations further comprise tagging the speaker boundary.",11,claim 8,0,C
10606932,13,"13. The system of claim 8 , wherein the operations further comprise demarcating the speaker boundary.",12,claim 8,0,C
10606932,14,"14. The system of claim 8 , wherein the operations further comprise sending the remaining electronic content occurring after the speaker boundary to a text-to-speech system.",13,claim 8,0,C
10606932,15,"15. A non-transitory memory device storing instructions that when executed cause a hardware processor to perform operations, the operations comprising: receiving a hybrid markup language document sent via the Internet; determining a speaker boundary in the hybrid markup language document; generating an electronic copy of the hybrid markup language document; discarding an electronic content that precedes the speaker boundary in the electronic copy of the hybrid markup language document; and generating an output file representing a text-to-speech conversion of a remaining electronic content occurring after the speaker boundary in the electronic copy of the hybrid markup language document.",14,,0,C
10606932,16,"16. The non-transitory memory device of claim 15 , wherein the operations further comprise scanning the hybrid markup language document to determine the speaker boundary.",15,claim 15,0,C
10606932,17,"17. The non-transitory memory device of claim 15 , wherein the operations further comprise generating a stack associated with the hybrid markup language document.",16,claim 15,0,C
10606932,18,"18. The non-transitory memory device of claim 15 , wherein the operations further comprise generating a stack associated with the speaker boundary.",17,claim 15,0,C
10606932,19,"19. The non-transitory memory device of claim 15 , wherein the operations further comprise tagging the speaker boundary.",18,claim 15,0,C
10606932,20,"20. The non-transitory memory device of claim 15 , wherein the operations further comprise demarcating the speaker boundary.",19,claim 15,0,C
10606933,1,"1. A method of converting a document in a page-image format into a form suitable for an arbitrarily sized display, comprising: deconstructing a document in a page image format into a set of segmented image elements which include lines of text, the lines of text found by: finding bounding boxes corresponding to characters of text; identifying a best match for a first text line; and identifying a next best text line by removing bounding boxes that participated in the best match for the first text line; prior to identifying column boundaries, using statistics about a distribution of horizontal distances between bounding boxes to estimate intercharacter and inter-words spacing; identifying the column boundaries by finding globally optimal maximum likelihood matches of a center of a left side of bounding boxes against a line model; synthesizing the deconstructed document into an intermediate data structure that is convertible into a commercially available format using a process other than optical character recognition; and distilling the intermediate data structure for redisplay by converting the intermediate data structure into a format usable for reflow on an arbitrarily sized display, wherein the intermediate data structure is automatically adaptable at the time of display to constraints of a corresponding display device or circumstance of viewing, and the text of each individual page is formatted for layout and rendered for human readable redisplay, and wherein distilling the intermediate data structure for redisplay in a format usable for reflow on an arbitrarily sized display for each individual page, includes redisplaying the document in human readable format.",0,,1,C
10606933,2,"2. The method of claim 1 , wherein deconstructing the document in a page image into the set of segmented image elements includes at least one of physical segmentation of data and logical segmentation of data.",1,claim 1,0,C
10606933,3,"3. The method of claim 1 , wherein the set of segmented image elements comprises at least one of blocks, words, groups of characters, and groups of non-text characters.",2,claim 1,0,C
10606933,4,"4. The method of claim 1 , wherein synthesizing includes converting non-text image areas, layout properties and segmented image areas into the intermediate data structure.",3,claim 1,0,C
10606933,5,"5. The method of claim 1 , wherein synthesizing the set of segmented image elements into an intermediate data structure includes integrating at least one of bitmapped images in an intelligible display layout and links to non-textual elements.",4,claim 1,0,C
10606933,6,"6. The method of claim 1 , wherein for layout analysis boundary boxes corresponding to characters in running text of the document are used to provide information about the layout of the page needed for the reflowing of the text.",5,claim 1,0,C
10606933,7,"7. The method of claim 1 , wherein distilling the intermediate data structure for redisplay in a format usable for reflow on an arbitrarily sized display for each individual page includes redisplaying the document in at least one of an electronic book format, Internet browsable format and a print format.",6,claim 1,0,C
10606933,8,"8. The method of claim 1 , wherein distilling the intermediate data structure includes converting the stored intermediate data structure into a device specific display format for display.",7,claim 1,0,C
10606933,9,"9. The method of claim 1 , wherein the intermediate data structure is adaptable to at least one of display screen size, page size, resolution, contrast, color and geometry, at the time of display.",8,claim 1,0,C
10606933,10,"10. The method of claim 1 further including: obtaining a collection of bounding boxes corresponding to connected components of the text; and finding text lines using the collection of bounding boxes by application of a branch and bound algorithm that finds maximum likelihood matches against text line models, wherein after a text line is found, the bounding box that bounds all the connected components that participated in the match is determined and all other connected components within that bounding box are assigned to the same text line, and wherein the bounding boxes and their spatial arrangement identify a rotation and skew, column boundaries, and tokens for token-based compression, reading order and/or how the text flows between different parts of the layout.",9,claim 1,0,C
10606933,11,"11. The method of claim 1 , wherein the intermediate data structure includes special image elements that are not extracted from the document, but are created as tagged or untagged elements, such special image elements are inserted into the intermediate data structure in an order that defines the desired functions and properties of other image elements, wherein a particular special image element includes a blank that represents a space between two words, and wherein special non-image markers, are inserted into the intermediate data structure so that functions and properties of at least some of the image elements are inferred from their relative position with respect to the markers within the intermediate data structure.",10,claim 1,0,C
10606933,12,"12. A system of converting a document in a page-image format into a form suitable for an arbitrarily sized display, comprising: an input/output device; a controller; a deconstructing device that deconstructs a document; a synthesizing device that synthesizes the deconstructed document into an intermediate data structure that is convertible into a commercially available format using a process other than optical character recognition; a distilling device that distills the intermediate data structure for redisplay by converting the intermediate data structure into a format usable for reflow on an arbitrarily sized display, the intermediate data structure being automatically adaptable at the time of display to constraints of the arbitrarily sized display; and a non-transitory memory, wherein: the deconstructing device first deconstructs the document in a page image format into non-text image areas, layout properties, and a set of compressed segmented image elements which include lines of text, and a column boundary, the lines of text found by: finding bounding boxes corresponding to characters of text; identifying a best match for a first text line; and identifying a next best text line by removing bounding boxes that participated in the best match for the first text line; the column boundary found by: prior to identifying the column boundary, using statistics about a distribution of horizontal distances between bounding boxes to estimate intercharacter and inter-words spacing; and identifying the column boundary by finding globally optimal maximum likelihood matches of a center of a left side of bounding boxes against a line model; the synthesizing device then synthesizes the non-text image areas, the layout properties, and the set of segmented image elements into the intermediate data structure using a process other than optical character recognition; and the distilling device then distills the intermediate data structure for redisplay in the format usable for reflow on an arbitrarily sized display, the text of each individual page being formatted for layout and rendered for display, wherein distilling the intermediate data structure for redisplay in a format usable for reflow on an arbitrarily sized display for each individual page, includes redisplaying the document in human readable format.",11,,0,C
10606933,13,"13. The system of claim 12 , wherein the deconstructing device deconstructs the document in a page image format into the set of segmented image elements that includes at least one of physical segmentation of data and logical segmentation of data.",12,claim 12,0,C
10606933,14,"14. The system of claim 12 , wherein the intermediate data structure includes at least one of bitmapped images in an intelligible display layout and links to non-textual elements.",13,claim 12,0,C
10606933,15,"15. The system of claim 12 , wherein the distilling device distills the intermediate data structure for redisplay of the document in a format usable for reflow on an arbitrarily sized display for each individual page includes redisplaying the document in at least one of an electronic book format, Internet browsable format, and a print format, wherein for layout analysis bounding boxes corresponding to characters in running text of the document are used to provide information about the layout of the page needed for the reflowing of the text.",14,claim 12,0,C
10606933,16,"16. The system of claim 12 , wherein the distilling device converts the stored intermediate data structure into a device specific display format for display.",15,claim 12,0,C
10606933,17,"17. The system of claim 12 , wherein the intermediate data structure is adaptable to at least one of display screen size, paper size, resolution, contrast, color and geometry, at the time of display.",16,claim 12,0,C
10606933,18,"18. The system of claim 12 , wherein the deconstructing device analyzes page layout and converts a sequence of page images into a sequence of document element images captured in a tagged format while maintaining pagination; and the distilling device converts the tagged format into at least one of an electronic book format, an Internet browsable format that can accept images and a print format.",17,claim 12,0,C
10606933,19,"19. The system of claim 18 , wherein the tagged format preserves at least one of reading order and logical page layout properties for each individual page of the document.",18,claim 18,0,C
10606933,20,"20. The system of claim 12 , wherein the deconstructing device includes a segmentation algorithm and a background structure analyzer.",19,claim 12,0,C
10606933,21,"21. A method for document image layout deconstruction and redisplay comprising: inputting a document to provide the document in a page image format, wherein the document is represented as page images, including being represented as at least one of bi-level images, gray-scale images, and color images; finding lines of text by: finding bounding boxes corresponding to characters of text; identifying a best match for a first text line; and identifying a next best text line by removing bounding boxes that participated in the best match for the first text line; finding a column boundary by: first, using statistics about a distribution of horizontal distances between bounding boxes to estimate intercharacter and inter-words spacing; and second, identifying the column boundary by finding globally optimal maximum likelihood matches of a center of a left side of bounding boxes against a line model; analyzing an image file in the page image format to identify text image areas and non-text image areas, wherein text image areas include at least one of blocks, columns, the lines of text, words, and the characters of text, and wherein non-text area images include at least one of illustrations, figures, graphics, line-art, photographs, handwriting, footnotes, and signatures; locating and isolating the identified text image areas and non-text image areas, wherein locating and isolating of the text image areas include at least one of locating and isolating a baseline and a top-line of each text line image, wherein the isolated line regions are modeled as line segments that run from one end of the text line image to another; selecting the isolated text image areas for further processing, wherein text line regions of the selected text image areas are located and isolated and layout properties of the selected text image areas are determined, wherein the layout properties include at least one of indentation, left and/or right justification, centering, hyphenation, and proximity to figures, and wherein layout properties include at least one of type size and typeface-family properties that indicate a function of the text within the page images; further processing the located text line regions into a set of segmented image elements; reading the segmented image elements and basic textual elements of the segmented image elements; locating and isolating the basic textual elements which include at least one of words, numbers, dates, proper names, bibliographic references, and references to figures, wherein the basic textual elements become basic image units which are configured to be reflowed and reconstructed, wherein each segmented image element is labeled with a position relative to the baseline of the text lines, wherein when the text lines are reflowed, a reconstructed baseline is referred to when placing corresponding segmented image elements so the segmented image elements appear to share a newly constructed baseline; labeling the set of segmented image elements with a baseline relative position; synthesizing the segmented image elements into an intermediate data structure; storing in memory the intermediate data structure to retain data in an intermediate format, wherein the intermediate data structure contains all information required to support the reflowing and reconstruction of the image elements of a page to be redisplayed; distilling data of the stored intermediate data structure to convert the data of the intermediate data structure into a device specific display format, wherein the stored intermediate data structure is automatically adaptable to constraints of a particular device specific display format at the time of display; and redisplaying the distilled data in human readable format.",20,,0,C
10606933,22,"22. The method according to claim 21 wherein at least one of the non-text image areas, compressed non-text image areas, the set of representative compressed image tokens, the segmented image elements and the layout characteristics are synthesized into the intermediate data structure.",21,claim 21,0,C
10606933,23,"23. The method according to claim 21 wherein the intermediate data structure contains a tagged list containing references to every textual and non-textual image element that are proximate to or references by textual image element as well as layout characteristics including at least one of indentation, hyphenation.",22,claim 21,0,C
10606933,24,"24. The method of claim 21 , wherein the intermediate data structure includes special image elements that are not extracted from the document, but are created as tagged or untagged elements, such special image elements are inserted into the intermediate data structure in an order that defines the desired functions and properties of other image elements, wherein a special image element includes a blank that represents a space between two words, and wherein special non-image markers, are inserted into the intermediate data structure so that functions and properties of at least some of the image elements are inferred from their relative position with respect to the markers within the intermediate data structure.",23,claim 21,0,C
10606934,1,"1. A computing device comprising: an electronic paper display; a processor; and a memory coupled to the processor, the memory having stored thereon platform software and application software for at least one application that includes UI elements not adapted for display on an electronic paper display, and wherein the platform software comprises a UI conversion module comprising device-executable instructions, which when executed by the processor, cause the processor to: access a UI element tree for the application; determine that the electronic paper display does not support an interaction corresponding to a first UI element type in response to determining that the electronic paper display does not support an interaction corresponding to the first UI element type, generate a modified UI element tree for the application by greying out a first UI element of the first UI element type that corresponds to the interaction that is not supported by the electronic paper display and support modifying display parameters of a second UI element based on a visual property of the electronic paper display; and render data from the application using the modified UI element tree for display on the electronic paper display; wherein the electronic paper display is a multi-stable display that reflects light.",0,,1,C
10606934,2,"2. The computing device according to claim 1 , wherein the platform software further comprises device-executable instructions, which when executed by the processor, cause the processor to: output the data rendered using the modified UI tree to the electronic paper display.",1,claim 1,0,C
10606934,3,"3. The computing device according to claim 1 , further comprising: a detachable portion comprising the electronic paper display.",2,claim 1,0,C
10606934,4,"4. The computing device according to claim 3 , wherein the detachable portion further comprises: a power source; a display data store arranged to store a set of inter-related re-rendered UI images for the application generated by the UI conversion module; and a processor arranged to select and display one of the stored re-rendered UI images on the electronic paper display.",3,claim 3,0,C
10606934,5,"5. The computing device according to claim 3 , wherein the detachable portion further comprises: a user input device; and wherein processor is arranged to select and display one of the re-rendered UI images on the electronic paper display in response to an input received via the user input device.",4,claim 3,0,C
10606934,6,"6. The computing device according to claim 1 , wherein the modified UI element tree is generated based on characteristics of the electronic paper display.",5,claim 1,0,C
10606934,7,"7. The computing device according to claim 6 , wherein the characteristics comprise one or more of: dynamic range; resolution; update rate; aspect ratio and input sensing capabilities.",6,claim 6,0,C
10606934,8,"8. The computing device according to claim 1 , wherein the modified UI element tree is generated by re-styling the second UI element dependent upon interactivity provided by the electronic paper display.",7,claim 1,0,C
10606934,9,"9. The computing device according to claim 1 , wherein the modified UI element tree is generated by expanding a view of the application to display to remove a scroll bar and using a pagination strategy to create a plurality of re-rendered UI images from the expanded view.",8,claim 1,0,C
10606934,10,"10. The computing device according to claim 9 , wherein the plurality of re-rendered UI images are partially overlapping.",9,claim 9,0,C
10606934,11,"11. The computing device according to claim 1 , wherein the modified UI element tree is generated by capturing a navigable set of data from the application and using a pagination strategy to create a plurality of re-rendered UI images from the captured data.",10,claim 1,0,C
10606934,12,"12. The computing device according to claim 1 , wherein the platform software further comprises device-executable instructions, which when executed by the processor, cause the processor to: cache the data rendered using the modified UI tree in a display data store for subsequent display on the electronic paper display.",11,claim 1,0,C
10606934,13,"13. The computing device according to claim 1 , wherein the UI conversion module further comprises device-executable instructions, which when executed by the processor, cause the processor to: check if the rendered data satisfies a target rendering fidelity; and in response to determining that the rendered data does not satisfy the target rendering fidelity, to further modify the UI element tree for the application and re-render the data from the application using the further modified UI element tree.",12,claim 1,0,C
10606934,14,"14. The computing device according to claim 1 , wherein the platform software further comprises device-executable instructions, which when executed by the processor, cause the processor to: generate a signal to trigger generation of the modified UI element tree by the UI conversion module.",13,claim 1,0,C
10606934,15,"15. The computing device according to claim 14 , wherein the signal is generated in response to a user input or in response to a change in state or anticipated change in state of the computing device.",14,claim 14,0,C
10606934,16,"16. A method of generating data for display on an electronic paper display, the data relating to an application that includes UI elements not adapted to for display on an electronic paper display and the method comprising: accessing a UI element tree for the application; determine that the electronic paper display does not support an interaction corresponding to a first UI element type; in response to determining that the electronic paper display does not support an interaction corresponding to the first UI element type, generating a modified UI element tree for the application by greying out a first UI element of the first UI element type that corresponds to the interaction that is not supported by the electronic paper display and modifying display parameters of a second UI element based on a visual property of the electronic paper display; and rendering data from the application using the modified UI element tree for display on the electronic paper display; wherein the electronic paper display is a multi-stable display that reflects light.",15,,0,C
10606934,17,"17. The method according to claim 16 , further comprising: outputting the data rendered using the modified UI tree to the electronic paper display.",16,claim 16,0,C
10606934,18,"18. The method according to claim 16 , wherein generating a modified UI element tree for the application comprises: re-styling the second UI element dependent upon interactivity provided by the electronic paper display; and expanding a view of the application to display to remove an interactive control and processing the expanded view to create a plurality of re-rendered UI images from the expanded view.",17,claim 16,0,C
10606934,19,"19. A computing device comprising: a processor; and a memory arranged to store compiler software and application software for at least one application that includes UI elements not adapted for display on an electronic paper display, and wherein the compiler software comprises a UI conversion module comprising device-executable instructions, which when executed by the processor, cause the processor to: access a UI element tree for the application; determine that the electronic paper display does not support an interaction corresponding to a first UI element type; in response to determining that the electronic paper display does not support an interaction corresponding to the first UI element type, generate a modified UI element tree for the application by greying out a first UI element of the first UI element type that corresponds to the interaction that is not supported by the electronic paper display and modifying display parameters of a second UI element based on a visual property of the electronic paper display; and store the modified UI element tree for use in rendering data from the application for display on the electronic paper display; wherein the electronic paper display is a multi-stable display that reflects light.",18,,0,C
10606935,1,"1. A system for transforming a website for dynamic web content management, said system comprising: a dynamic web content management system comprising a server; a web content library stored and managed in memory of the dynamic web content management system; a network interface for communicating via a network; the dynamic web content management system being programmed to: receive identification of elements of a number of pages of a static website that define a number of presentation templates, wherein a number of presentation templates are defined, each corresponding to a different page of the static website, and wherein identification of said elements includes a number of boxes drawn on a display of a page of the static website by a user to define a specific presentation template; receive identification of web content items of the static website that are to be under dynamic web content management; store said number of presentation templates and said content items in the web content library in association with a number of navigation nodes, each navigation node identifying a corresponding presentation template on which a corresponding web content item is to be displayed; and present a dynamic version of the static website using the web content library.",0,,1,C
10606935,2,"2. The system of claim 1 , further comprising, in the web content library, a number of hyperlinks that each link to a corresponding navigation node stored in the web content library.",1,claim 1,0,C
10606935,3,"3. The system of claim 1 , further comprising, in said web content library, a number of web content components that each further define a corresponding content item.",2,claim 1,0,C
10606935,4,"4. The system of claim 3 , further comprising an authoring user interface with fields for input information of a web content component defining the corresponding content item.",3,claim 3,0,C
10606935,5,"5. The system of claim 1 , wherein one of the boxes is designated as any of: a navigation section, a header and a footer.",4,claim 1,0,C
10606935,6,"6. The system of claim 1 for transforming a website for dynamic web content management, said system further comprising: a processor; a memory associated with the processor; a network interface for connecting the processor to a network; and a user interface; the processor to, using programing from the memory, receive user input via the user interface, the user input comprising an identification of elements of a page of a static website that define a presentation template; receive further user input via the user interface, the further user input comprising an identification of web content items of the static website that are to be under dynamic web content management; and, cooperating with the server, store said presentation template and said content items in the web content library.",5,claim 1,0,C
10606935,7,"7. The system of claim 6 , the processor to load a display of the static website in a browser, wherein receiving said identification of elements and web content items of the static web page is performed with a graphical user interface (GUI) tool.",6,claim 6,0,C
10606935,8,"8. The system of claim 6 , the processor to produce a specific presentation template for an additional webpage within said static website.",7,claim 6,0,C
10606935,9,"9. The system of claim 6 , the processor to store a navigation node in association with said presentation template and one of said web content items, said navigation node identifying the corresponding presentation template on which the corresponding web content item is to be displayed.",8,claim 6,0,C
10606935,10,"10. The system of claim 9 , the processor to, in the web content library, store a web content component that further defines a corresponding content item.",9,claim 9,0,C
10606935,11,"11. The system of claim 10 , wherein said web content component defines the corresponding content item as including an image of a specified size.",10,claim 10,0,C
10606935,12,"12. The system of claim 9 , the processor to store a hyperlink in the web content library that links to a corresponding navigation node stored in the web content library.",11,claim 9,0,C
10606935,13,"13. The system of claim 9 , the processor to associate said navigation node with said corresponding content item in said web content library using an authoring user interface with fields for inputting information defining the corresponding content item.",12,claim 9,0,C
10606935,14,"14. The system of claim 1 for transforming a website for dynamic web content management, said system further comprising: a processor; a memory associated with the processor; a network interface for connecting the processor to a network; and a user interface; the processor to, using programing from the memory, implement: an identification engine to identify aspects of a static website that are to be under dynamic web content management; and a population engine to populate the web content library with web content components, hyperlinks, presentation templates, navigation nodes, content items, or combinations thereof.",13,claim 1,0,C
10606935,15,"15. The system of claim 14 , the processor to further implement an organizing engine to organize said aspects of said static website in preparation for storing said aspects; and a storing engine to store said aspects of said static website with a specific identifier.",14,claim 14,0,C
10606935,16,"16. The system of claim 14 , the processor to further implement a presentation template producing engine to produce at least one presentation template based on a webpage for said static website using a conversion tool.",15,claim 14,0,C
10606935,17,"17. The system of claim 14 , the processor to further implement: a presentation template association engine to associate said navigation node with said presentation template in said web content library using an authoring template; and a content item association engine to associate said navigation node with said content item in said web content library using said authoring template.",16,claim 14,0,C
10606935,18,"18. The system of claim 14 , the processor to further implement a mapping engine to map said content item to said presentation template at said navigation node wherein said authoring template is associated with said content item.",17,claim 14,0,C
10606937,1,"1. A computer-implemented method, comprising: capturing, by a computing device, an IP address of a user signing into a content management system through a user computer device; determining, by the computing device, that the IP address of the user does or does not match existing user profile data in a user profile database; determining, by the computing device, that the user is modifying a portion of a digital work; determining, by the computing device, an engagement context of the user's modification of the digital work using natural language processing, wherein the engagement context is the context in which the user is modifying the digital work, including whether the user's modification constitutes a change in a meaning of a portion of the digital work or a non-substantive change to the portion of the digital; determining, by the computing device, an engagement type of the user based on the engagement context; and mapping, by the computing device, the user profile data of the user and the engagement type with the portion of the digital work.",0,,0,C
10606937,2,"2. The method of claim 1 , wherein the determining the engagement type of the user based on the engagement context comprises one of: determining, by the computing device, that the engagement type of the user is an author when the user's modification constitutes a change in the meaning of the portion of the digital work; and determining, by the computing device, that the engagement type of the user is an editor when the user's modification constitutes a non-substantive change to the portion of the digital work.",1,claim 1,0,C
10606937,3,"3. The method of claim 1 , wherein the determining that the IP address of the user does or does not match existing user profile data in the user profile database comprises determining that the IP address does match existing user profile data in the user profile database.",2,claim 1,0,C
10606937,4,"4. The method of claim 1 , wherein: the determining that the IP address of the user does or does not match the existing user profile data in the user profile database comprises determining that the IP address does not match the existing user profile data in the database and is a new IP address; and the method further comprises: storing, by the computing device, the new IP address in the user profile database.",3,claim 1,0,C
10606937,5,"5. The method of claim 1 , further comprising: receiving, by the computing device, a user request for attribution data for a portion of the modified digital work; and sending, by the computing device, the attribution data to the user computer device for display based on the received user request.",4,claim 1,0,C
10606937,6,"6. The method of claim 1 , further comprising automatically sending, by the computing device, a notification to one or more authors of the digital work based on the engagement context to notify the one or more authors of the user's modification.",5,claim 1,0,C
10606937,7,"7. The method of claim 1 , further comprising: determining, by the computing device, additional content in a collaborative digital works database to be presented to the user based on attribution data associated with the portion of the digital work; presenting, by the computing device, an option to the user to view the additional content; receiving, by the computing device, a selection of the option from the user; and sharing, by the computing device, the additional content with the user computer device.",6,claim 1,0,C
10606937,8,"8. A computer program product for dynamic contribution mapping of digital works the computer program product comprising a computer readable storage medium having program instructions embodied therewith, the program instructions executable by a computing device to cause the computing device to: capture an IP address of a user signing into a content management system for digital works; determine that the IP address of the user does or does not match existing user profile data in a user profile database; receive a request for a digital work; share the digital work with the user in response to the request; dynamically determine an engagement context of a user engaging a portion of the digital work utilizing natural language processing, wherein the engagement context is the context in which the user is engaging the digital work, including whether the user is modifying the digital work in a manner that constitutes: a change in a meaning of a portion of the digital work, or a non-substantive change to the portion of the digital work; determine an engagement type of the user based on the engagement context; and map the user profile data of the user and the engagement type with the portion of the digital work.",7,,0,C
10606937,9,"9. The computer program product of claim 8 , wherein: the determining the engagement context of the user comprises determining that user modifications to the portion of the digital work constitute a change in meaning of the portion of the digital work; and the determining the engagement type of the user based on the engagement context comprises determining that the engagement type of the user is an author.",8,claim 8,0,C
10606937,10,"10. The computer program product of claim 8 , wherein: the determining the engagement context of the user comprises determining that user modifications to the portion of the digital work constitute a non-substantive change to the portion of the digital work; and the determining the engagement type of the user based on the engagement context comprises determining that the engagement type of the user is an editor.",9,claim 8,0,C
10606937,11,"11. The computer program product of claim 8 , wherein: the determining an IP address of the credentials of the user does or does not match the existing user profile data in the user profile database comprises determining that the IP address does not match the existing user profile data in the database and is a new IP address; and the computer program product further causes the computing device to store the new IP address in the user profile database.",10,claim 8,0,C
10606937,12,"12. The computer program product of claim 8 , wherein the computer program product further causes the computing device to share the digital work over a network with the user computer device for display, the digital work being associated with attribution data listing one or more portions of the digital work attributed to one or more content contributors to the one or more portions of the digital work.",11,claim 8,0,C
10606937,13,"13. The computer program product of claim 8 , wherein the computer program product further causes the computing device to: receive a user request for attribution data for a portion of the digital work; and send the attribution data to the user computer device for display based on the received user request.",12,claim 8,0,C
10606937,14,"14. The computer program product of claim 8 , wherein the computer program product further causes the computing device to automatically send a notification to one or more authors of the digital work based on the engagement context to notify the one or more authors of a modification to the digital work.",13,claim 8,0,C
10606937,15,"15. The computer program product of claim 8 , wherein the computer program product further causes the computing device to: determine additional content in a collaborative digital works database to be presented to the user based on attribution data associated with the portion of the digital work; present an option to the user to view the additional content; receive a selection of the option from the user; and share the additional content with the user computer device.",14,claim 8,0,C
10606937,16,"16. The computer program product of claim 8 , wherein the computer program product further causes the computing device to verify that the user is authorized to contribute content to the digital work by comparing the IP address of the user and engagement type with a list of authorized IP addresses and associated engagement types.",15,claim 8,0,C
10606937,17,"17. A system for dynamic contribution mapping of digital works, comprising: a CPU, a computer readable memory and a computer readable storage medium associated with a computing device; program instructions to receive a request from a user computer device for a digital work; program instructions to share the digital work with the user computer device, wherein the digital work is associated with attribution data listing one or more portions of the digital work attributed to one or more contributors based on stored context data; program instructions to determine that a user is engaging a portion of the digital work; program instructions to determine additional content to provide to the user based on attribution data associated with the portion of the digital work in the stored context data; program instructions to present an option for the additional content to the user computer device; program instructions to receive a selection of the option from the user computer device; and program instructions to share the additional content with the user computer device, wherein the program instructions are stored on the computer readable storage medium for execution by the CPU via the computer readable memory.",16,,1,C
10606937,18,"18. The system of claim 17 , further comprising: program instructions to display an attribution section to a user of the user computer device, the attribution section including the attribution data associated with the portion of the digital work.",17,claim 17,0,C
10606937,19,"19. The system of claim 17 , wherein the attribution section includes data regarding an original author of content in the portion of the digital work, data regarding a secondary author of content in the portion of the digital work, and data regarding an editor of content in the portion of the digital work.",18,claim 17,0,C
10606938,1,"1. A non-transitory computer-readable storage medium comprising instructions stored thereon for correcting errors in copied text that, when executed by at least one processor, are configured to cause a computing system to at least: receive copied text, the copied text including a first name and a first address, the first address immediately following the first name, the first address including a street and a city; receive a replacement of the first name with a second name; determine that the second name does not correspond to the first address; based on determining that the second name does not correspond to the first address, determine a second address corresponding to the second name; and present a prompt to replace the first address with the determined second address.",0,,1,C
10606938,2,"2. The non-transitory computer-readable storage medium of claim 1 , wherein the determining that the second name does not correspond to the first address, and the determining the second address corresponding to the second name, includes performing an Internet search on the second name.",1,claim 1,0,C
10606938,3,"3. The non-transitory computer-readable storage medium of claim 1 , wherein: the street includes a first street; the city includes a first city; and the second address includes a second street and a second city.",2,claim 1,0,C
10606938,4,"4. The non-transitory computer-readable storage medium of claim 1 , wherein the instructions are further configured to cause the computing system to determine that the first name included in the copied text was a name.",3,claim 1,0,C
10606938,5,"5. The non-transitory computer-readable storage medium of claim 1 , wherein the copied text was copied from a previous document.",4,claim 1,0,C
10606938,6,"6. A method performed by a computing system, the method comprising: receiving copied text, the copied text including a first name and a first address, the first address immediately following the first name, the first address including a street and a city; receiving a replacement of the first name with a second name; determining that the second name does not correspond to the first address; based on determining that the second name does not correspond to the first address, determining a second address corresponding to the second name; and presenting a prompt to replace the first address with the determined second address.",5,,0,C
10606938,7,"7. The method of claim 6 , wherein the determining that the second name does not correspond to the first address, and the determining the second address corresponding to the second name, includes performing an Internet search on the second name.",6,claim 6,0,C
10606938,8,"8. The method of claim 6 , wherein: the street includes a first street; the city includes a first city; and the second address includes a second street and a second city.",7,claim 6,0,C
10606938,9,"9. The method of claim 6 , further comprising determining that the first name included in the copied text was a name.",8,claim 6,0,C
10606938,10,"10. The method of claim 6 , wherein the copied text was copied from a previous document.",9,claim 6,0,C
10606938,11,"11. A computing system comprising: at least one processor; and a non-transitory computer-readable storage medium comprising instructions stored thereon for correcting errors in copied text that, when executed by at least one processor, are configured to cause the computing system to at least: receive copied text, the copied text including a first name and a first address, the first address immediately following the first name, the first address including a street and a city; receive a replacement of the first name with a second name; determine that the second name does not correspond to the first address; based on determining that the second name does not correspond to the first address, determine a second address corresponding to the second name; and present a prompt to replace the first address with the determined second address.",10,,0,C
10606938,12,"12. The computing system of claim 11 , wherein the determining that the second name does not correspond to the first address, and the determining the second address corresponding to the second name, includes performing an Internet search on the second name.",11,claim 11,0,C
10606938,13,"13. The computing system of claim 11 , wherein: the street includes a first street; the city includes a first city; and the second address includes a second street and a second city.",12,claim 11,0,C
10606938,14,"14. The computing system of claim 11 , wherein the instructions are further configured to cause the computing system to determine that the first name included in the copied text was a name.",13,claim 11,0,C
10606938,15,"15. The computing system of claim 11 , wherein the copied text was copied from a previous document.",14,claim 11,0,C
10606939,1,"1. A method, in a data processing system, for applying matching data transformation information based on a user's editing of data within a document, the method comprising: receiving user input identifying an edit to the data provided by a user while editing the data of the document within an application executing on the data processing system; executing a matching algorithm based on the edit to the data to identify one or more candidate transformation operations within a transformation operation data structure that matches the edit to the data; receiving a selection of a transformation operation from the list of transformation operations by the user; automatically applying the selected transformation operation to the document; and providing an indication to the user of all the changes that were made to the document by applying the selected transformation operation.",0,,1,C
10606939,2,"2. The method of claim 1 , further comprising: responsive to the user indicating that the changes should be made permanent, making the changes permanent.",1,claim 1,0,C
10606939,3,"3. The method of claim 1 , further comprising: responsive to the user indicating that the changes should not be made permanent, undoing the changes made based on the selected transformation operation.",2,claim 1,0,C
10606939,4,"4. The method of claim 1 , wherein the transformation operations within the transformation operation data structure are categorized in terms of data types, wherein the data types comprise one or more of a string data type, a numeric data type, or a date/time/timestamp data type.",3,claim 1,0,C
10606939,5,"5. The method of claim 1 , wherein executing the matching algorithm based on the edit to the data to identify the one or more candidate transformation operations within the transformation operation data structure that matches the edit to the data comprises: comparing a value of a previous data in collected user input to a value of the data in the edit to the data; responsive to no change in the value of the data, comparing a format of the previous data to a format of the data in the edit to the data; and responsive to the format of the data changing, returning a transformation operation associated with format conversion.",4,claim 1,0,C
10606939,6,"6. The method of claim 1 , further comprising: responsive to the format of the data failing to change, providing the indication that no candidate transformation operations are identifiable.",5,claim 1,0,C
10606939,7,"7. The method of claim 1 , wherein executing the matching algorithm based on the edit to the data to identify the one or more candidate transformation operations within the transformation operation data structure that matches the edit to the data comprises: for each transformation operation in the transformation operation data structure: executing the transformation operation on a previous data value to get a new data value; determining whether the new data value matches the edit to the data; responsive to a result of applying the transformation operation on the previous data value matching the edit to the data, identifying the transformation operation as a candidate transformation operation and adding the candidate transformation to the list of transformation operations; and responsive to the result of applying the transformation operation on the previous data value failing to match the edit to the data, discarding the transformation operation as a possible candidate transformation operation.",6,claim 1,0,C
10606939,8,"8. A computer program product comprising a computer readable storage medium having a computer readable program stored therein, wherein the computer readable program, when executed on a computing device, causes the computing device to: receive user input identifying an edit to the data provided by a user while editing the data of the document within an application executing on the data processing system; execute a matching algorithm based on the edit to the data to identify one or more candidate transformation operations within a transformation operation data structure that matches the edit to the data; responsive to one or more candidate transformation operations being identified, provide a list of transformation operations that includes the one or more candidate transformation operations to the user via the data processing system; receive a selection of a transformation operation from the list of transformation operations by the user; automatically apply the selected transformation operation to the document; and provide an indication to the user of all the changes that were made to the document by applying the selected transformation operation.",7,,0,C
10606939,9,"9. The computer program product of claim 8 , wherein the computer readable program further causes the computing device to: responsive to the user indicating that the changes should be made permanent, make the changes permanent.",8,claim 8,0,C
10606939,10,"10. The computer program product of claim 8 , wherein the computer readable program further causes the computing device to: responsive to the user indicating that the changes should not be made permanent, undo the changes made based on the selected transformation operation.",9,claim 8,0,C
10606939,11,"11. The computer program product of claim 8 , wherein the transformation operations within the transformation operation data structure are categorized in terms of data types, wherein the data types comprise one or more of a string data type, a numeric data type, or a date/time/timestamp data type.",10,claim 8,0,C
10606939,12,"12. The computer program product of claim 8 , wherein the computer readable program to execute the matching algorithm based on the edit to the data to identify the one or more candidate transformation operations within the transformation operation data structure that matches the edit to the data causes the computing device to: compare a value of a previous data in collected user input to a value of the data in the edit to the data; responsive to no change in the value of the data, compare a format of the previous data to a format of the data in the edit to the data; and responsive to the format of the data changing, return a transformation operation associated with format conversion.",11,claim 8,0,C
10606939,13,"13. The computer program product of claim 8 , wherein the computer readable program further causes the computing device to: responsive to the format of the data failing to change, provide the indication that no candidate transformation operations are identifiable.",12,claim 8,0,C
10606939,14,"14. The computer program product of claim 8 , wherein the computer readable program to execute the matching algorithm based on the edit to the data to identify the one or more candidate transformation operations within the transformation operation data structure that matches the edit to the data causes the computing device to: for each transformation operation in the transformation operation data structure: execute the transformation operation on a previous data value to get a new data value; determine whether the new data value matches the edit to the data; responsive to a result of applying the transformation operation on the previous data value matching the edit to the data, identify the transformation operation as a candidate transformation operation and adding the candidate transformation to the list of transformation operations; and responsive to the result of applying the transformation operation on the previous data value failing to match the edit to the data, discard the transformation operation as a possible candidate transformation operation.",13,claim 8,0,C
10606939,15,"15. An apparatus comprising: a processor, and a memory coupled to the processor, wherein the memory comprises instructions which, when executed by the processor, cause the processor to: receive user input identifying an edit to the data provided by a user while editing the data of the document within an application executing on the data processing system; execute a matching algorithm based on the edit to the data to identify one or more candidate transformation operations within a transformation operation data structure that matches the edit to the data; responsive to one or more candidate transformation operations being identified, provide a list of transformation operations that includes the one or more candidate transformation operations to the user via the data processing system receive a selection of a transformation operation from the list of transformation operations by the user; automatically apply the selected transformation operation to the document; and provide an indication to the user of all the changes that were made to the document by applying the selected transformation operation.",14,,0,C
10606939,16,"16. The apparatus of claim 15 , wherein the instructions further cause the processor to: responsive to the user indicating that the changes should be made permanent, make the changes permanent.",15,claim 15,0,C
10606939,17,"17. The apparatus of claim 15 , wherein the instructions further cause the processor to: responsive to the user indicating that the changes should not be made permanent, undo the changes made based on the selected transformation operation.",16,claim 15,0,C
10606939,18,"18. The apparatus of claim 15 , wherein the instructions to execute the matching algorithm based on the edit to the data to identify the one or more candidate transformation operations within the transformation operation data structure that matches the edit to the data cause the processor to: compare a value of a previous data in collected user input to a value of the data in the edit to the data; responsive to no change in the value of the data, compare a format of the previous data to a format of the data in the edit to the data; and responsive to the format of the data changing, return a transformation operation associated with format conversion.",17,claim 15,0,C
10606939,19,"19. The apparatus of claim 15 , wherein the instructions further cause the processor to: responsive to the format of the data failing to change, provide the indication that no candidate transformation operations are identifiable.",18,claim 15,0,C
10606939,20,"20. The apparatus of claim 15 , wherein the instructions to execute the matching algorithm based on the edit to the data to identify the one or more candidate transformation operations within the transformation operation data structure that matches the edit to the data cause the processor to: for each transformation operation in the transformation operation data structure: execute the transformation operation on a previous data value to get a new data value; determine whether the new data value matches the edit to the data; responsive to a result of applying the transformation operation on the previous data value matching the edit to the data, identify the transformation operation as a candidate transformation operation and adding the candidate transformation to the list of transformation operations; and responsive to the result of applying the transformation operation on the previous data value failing to match the edit to the data, discard the transformation operation as a possible candidate transformation operation.",19,claim 15,0,C
10606940,1,"1. An annotation sharing method, comprising: outputting a content of an electronic book; acquiring an annotation positioned in the content; calculating a position of the acquired annotation in the content by using metadata, which represents information related to the content, without using data included in the content, the metadata including a logical structure of the content, the logical structure including one or more logical elements representing a line, a paragraph, a section, and a chapter of the content, whose ranges widen in this order; and storing the calculated position and the annotation in association with each other and in a readable manner, wherein the calculating includes reading the metadata and specifying a finest logical element for part of the content that is being output, determining whether a near logical element, which is the finest logical element near the output part of the content, is specified or not, and when it is determined that the near logical element is not specified, widening a range of the logical elements to be focused for specifying the near logical element until the position of the acquired annotation in the content is specified by calculating the position thereof, the widening being performed step by step in an order of a line, a paragraph, a section, a chapter, and a whole of the content.",0,,1,C
10606940,2,"2. The method according to claim 1 , further comprising storing, in a server via a network, the calculated position in the content and the annotation in association with each other.",1,claim 1,0,C
10606940,3,"3. The method according to claim 1 , further comprising outputting the annotation at the stored position in the content during the output of the content.",2,claim 1,0,C
10606940,4,"4. The method according to claim 3 , further comprising: reading the position of the annotation in the content and the annotation that are stored in a readable manner; and outputting the annotation in a voice at the read position in the content.",3,claim 3,0,C
10606940,5,"5. The method according to claim 1 , further comprising calculating the position of the acquired annotation in the content using at least one of information that specifies a position in a logical element of the content, information that specifies a position in meta data of the content, and information that specifies a time elapsed from a time when a feature amount of the content reproduced in a voice is produced, a time elapsed until the feature amount is produced, and information that specifies a position in a logical element where a parameter in the content reproduced in a voice is designated.",4,claim 1,0,C
10606940,6,"6. The method according to claim 1 , further comprising acquiring the annotation for the content from handwritten input or voice input.",5,claim 1,0,C
10606940,7,"7. An annotation sharing apparatus, comprising: memory configured to function as a storing unit; and one or more processors configured to function as a content presentation unit, an acquisition unit, and a position calculation unit, wherein the content presentation unit outputs a content of an electronic book; the acquisition unit acquires an annotation positioned in the content output by the content presentation unit; the position calculation unit calculates a position of the acquired annotation in the content by using metadata, which represents information related to the content, without using data included in the content, the metadata including a logical structure of the content, the logical structure including one or more logical elements representing a line, a paragraph, a section, and a chapter of the content, whose ranges widen in this order; and the storing unit stores therein the position in the content and the annotation in association with each other, wherein in calculating the position of the acquired annotation in the content, the position calculation unit reads the metadata and specifies a finest logical element for part of the content that is being output, determines whether a near logical element, which is the finest logical element near the output part of the content, is specified or not, and when it is determined that the near logical element is not specified, widens a range of the logical elements to be focused for specifying the near logical element until the position of the acquired annotation in the content is specified by calculating the position thereof, the widening being performed step by step in an order of a line, a paragraph, a section, a chapter, and a whole of the content.",6,,0,C
10606940,8,"8. An annotation sharing apparatus, comprising: memory configured to function as a storing unit; and one or more processors configured to function as an annotation presentation unit, wherein the storing unit further stores therein an annotation positioned in a content of an electronic book and a position of the annotation in the content in association with each other and in a readable manner, the position being calculated by using metadata, which represents information related to the content, without using data included in the content, the metadata including a logical structure of the content, the logical structure including one or more logical elements representing a line, a paragraph, a section, and a chapter of the content, whose ranges widen in this order; and the annotation presentation unit presents, during the output of the content, the annotation at the position in the content, the position being stored by the storing unit, and wherein the calculation of the position of the annotation in the content includes processing of reading the metadata and specifying a finest logical element for part of the content that is being output, determining whether a near logical element, which is the finest logical element near the output part of the content, is specified or not, and when it is determined that the near logical element is not specified, widening a range of the logical elements to be focused for specifying the near logical element until the position of the annotation in the content is specified by calculating the position thereof, the widening being performed step by step in an order of a line, a paragraph, a section, a chapter, and a whole of the content.",7,,0,C
10606940,9,"9. An annotation sharing apparatus, comprising: memory configured to function as a storing unit; and one or more processors configured to function as a content presentation unit, an acquisition unit, a position calculation unit, and an annotation presentation unit, wherein the content presentation unit outputs a content of an electronic book; the acquisition unit acquires an annotation positioned in the content output by the content presentation unit; the position calculation unit calculates a position of the annotation in the content, the annotation being acquired by the acquisition unit, by using metadata, which represents information related to the content, without using data included in the content, the metadata including a logical structure of the content, the logical structure including one or more logical elements representing a line, a paragraph, a section, and a chapter of the content, whose ranges widen in this order; the storing unit stores, in a server, the annotation for the content and the calculated position of the annotation in the content in association with each other and in a readable manner; and the annotation presentation unit presents, during the output of the content, the annotation at the position in the content, the position being stored by the storing unit, wherein in calculating the position of the acquired annotation in the content, the position calculation unit reads the metadata and specifies a finest logical element for part of the content that is being output, determines whether a near logical element, which is the finest logical element near the output part of the content, is specified or not, and when it is determined that the near logical element is not specified, widens a range of the logical elements to be focused for specifying the near logical element until the position of the acquired annotation in the content is specified by calculating the position thereof, the widening being performed step by step in an order of a line, a paragraph, a section, a chapter, and a whole of the content.",8,,0,C
10606940,10,"10. A computer program product comprising a non-transitory computer-readable medium including programmed instructions, the instructions causing a computer to execute: outputting a content of an electronic book; acquiring an annotation positioned in the content; calculating a position of the acquired annotation in the content by using metadata, which represents information related to the content, without using data included in the content, the metadata including a logical structure of the content, the logical structure including one or more logical elements representing a line, a paragraph, a section, and a chapter of the content, whose ranges widen in this order; and storing the calculated position in the content and the annotation in association with each other and in a readable manner, wherein the calculating includes reading the metadata and specifying a finest logical element for part of the content that is being output, determining whether a near logical element, which is the finest logical element near the output part of the content, is specified or not, and when it is determined that the near logical element is not specified, widening a range of the logical elements to be focused for specifying the near logical element until the position of the acquired annotation in the content is specified by calculating the position thereof, the widening being performed step by step in an order of a line, a paragraph, a section, a chapter, and a whole of the content.",9,,0,C
10606941,1,"1. A method comprising: interacting with a content server to display electronic content at a computing device, the electronic content associated with a plurality of annotations, each annotation specifying a respective portion of the electronic content; while displaying the electronic content, receiving an annotation input for a first annotation based on user interaction with a user interface of the computing device, the annotation input including a single user input selection indicating a plurality of boundary points defining a first region of an image; in response to receiving the single user input selection, displaying a text entry box substantially simultaneously with displaying the first region of the image, the text entry box configured to receive a first comment; receiving the first comment via the text entry box; sending the first annotation to the content server; displaying the first annotation at the computing device, the first annotation including the first comment associated with the first region of the image, wherein displaying the first annotation comprises simultaneously displaying the first region of the image and the first comment with the first region of the image visually designated by a border; while displaying the first annotation, receiving a second input to display a second annotation associated with a second portion of the electronic content, the second annotation including one or more comments associated with the second portion, the second portion representing a second spatial segment of the electronic content; and responsive to receiving the second input, displaying the second portion of the electronic content and the one or more comments associated with the second portion at the computing device.",0,,1,C
10606941,2,"2. The method of claim 1 , wherein displaying the first annotation comprises: generating a display including a first region of the display and a second region of the display; displaying the first comment in the first region of the display; and displaying the first region of the image in the second region of the display.",1,claim 1,0,C
10606941,3,"3. The method of claim 2 , wherein the second input to display the second annotation comprises a swipe gesture received at the first region of the display.",2,claim 2,0,C
10606941,4,"4. The method of claim 2 , wherein the first region of the display is scrollable to display additional comments of the first annotation.",3,claim 2,0,C
10606941,5,"5. The method of claim 1 , wherein displaying the first annotation comprises: displaying the electronic content at a zoom level such that the first region of the image is displayed with the border defining a distance between at least one side of the first region of the image and an edge of a display screen of the computing device.",4,claim 1,0,C
10606941,6,"6. The method of claim 5 , further comprising: responsive to receiving the second input to display the second annotation, panning and zooming the electronic content until a second region of the image is displayed with a second border defining a distance between at least one side of the second region of the image and the edge of the display screen.",5,claim 5,0,C
10606941,7,"7. The method of claim 1 , wherein displaying the first annotation comprises displaying a box overlaid on the electronic content and identifying the first region of the image.",6,claim 1,0,C
10606941,8,"8. The method of claim 1 , further comprising: receiving a third input to create a new annotation associated with the electronic content; displaying an adjustable selection box around a third portion of the electronic content; receiving a third comment entered by a user; and associating the third comment with the third portion of the electronic content.",7,claim 1,0,C
10606941,9,"9. The method of claim 1 , further comprising, while displaying the first annotation: receiving a fourth comment from a user of the computing device; and adding the received fourth comment to a comment chain.",8,claim 1,0,C
10606941,10,"10. The method of claim 1 , wherein the single user input selection corresponds to a selection box, wherein the selection box is one of: a freeform shape or a non-freeform shape.",9,claim 1,0,C
10606941,11,"11. The method of claim 1 , further comprising: navigating to the second annotation by one of: repositioning the electronic content to a location associated with the second annotation, selecting the second annotation from a menu, and selecting an arrow key of the computing device or an arrow button on an electronic display of the computing device.",10,claim 1,0,C
10606941,12,"12. The method of claim 1 , further comprising: pushing from the content server to the computing device a new annotation to the electronic content, wherein the first annotation and the new annotation are initially input by different users.",11,claim 1,0,C
10606941,13,"13. The method of claim 1 , wherein the second portion of the electronic content is a second region of the image.",12,claim 1,0,C
10606941,14,"14. A non-transitory computer-readable storage medium storing executable computer program instructions that are executable by a processor to: interact with a content server to display electronic content, the electronic content associated with a plurality of annotations each specifying a respective portion of the electronic content; while displaying the electronic content, receive an annotation input for a first annotation based on user interaction with a user interface of a computing device, the annotation input including a single user input selection indicating a plurality of boundary points defining a first region of an image; in response to receiving the single user input selection, display a text entry box substantially simultaneously with displaying the first region of the image, the text entry box configured to receive a first comment; receive the first comment via the text entry box; send the first annotation to the content server; display the first annotation, the first annotation including the first comment associated with the first region of the image, wherein displaying the first annotation comprises simultaneously displaying the first region of the image and the first comment with the first region of the image visually designated by a border; while displaying the first annotation, receive a second input to display a second annotation associated with a second portion of the electronic content, the second annotation including one or more comments associated with the second portion, the second portion representing a spatial segment of the electronic content; and responsive to receiving the second input, display the second portion of the electronic content and the one or more comments associated with the second portion.",13,,0,C
10606941,15,"15. The non-transitory computer-readable storage medium of claim 14 , wherein the instructions for displaying the first annotation comprise instructions that are executable by the processor to: generate a display including a first region of the display and a second region of the display; display the first comment in the first region of the display; and display the first region of the image in the second region of the display.",14,claim 14,0,C
10606941,16,"16. The non-transitory computer-readable storage medium of claim 15 , wherein the second input to display the second annotation comprises a swipe gesture received at the first region of the display.",15,claim 15,0,C
10606941,17,"17. The non-transitory computer-readable storage medium of claim 15 , wherein the first region of the display is scrollable to display additional comments of the first annotation.",16,claim 15,0,C
10606941,18,"18. The non-transitory computer-readable storage medium of claim 14 , wherein the instructions for displaying the first annotation comprise instructions that are executable by the processor to: display the electronic content at a zoom level such that the first region of the image is displayed with the border defining a distance between at least one side of the first region of the image and an edge of a display screen.",17,claim 14,0,C
10606941,19,"19. The non-transitory computer-readable storage medium of claim 18 , further comprising instructions that are executable by the processor to: responsive to receiving the second input to display the second annotation, pan and zoom the electronic content until the second portion is displayed with a second border defining a distance between at least one side of the second portion and the edge of the display screen.",18,claim 18,0,C
10606941,20,"20. The non-transitory computer-readable storage medium of claim 14 , wherein the instructions for displaying the first annotation comprise instructions that are executable by the processor to display a box overlaid on the electronic content and identifying the first region of the image.",19,claim 14,0,C
10606941,21,"21. The non-transitory computer-readable storage medium of claim 14 , further comprising instructions that are executable by the processor to: receive a third input to create a new annotation associated with the electronic content; display an adjustable selection box around a third portion of the electronic content; receive a third comment entered by a user; and associate the third comment with the third portion of the electronic content.",20,claim 14,0,C
10606941,22,"22. The non-transitory computer-readable storage medium of claim 14 , further comprising instructions that are executable by the processor to, while displaying the first annotation: receive a fourth comment from a user; and add the received fourth comment to a comment chain.",21,claim 14,0,C
10606941,23,"23. The non-transitory computer-readable storage medium of claim 14 , wherein: the first annotation is displayed at a first computing device; the second input to display the second annotation is received from a second computing device; and the second portion of the electronic content is displayed at the second computing device.",22,claim 14,0,C
10606942,1,"1. A system, comprising: a speaker configured to receive a first speech input in a first language from a first speaker and a second speech input in a second language from a second speaker, the first speech input and the second speech input being part of a dialogue between the first speaker and the second speaker; a display configured to display a form having a plurality of fields; a processor; and a memory storing instructions, when executed by the processor, cause the processor to: determine a first recognized speech result based on the first speech input; determine a second recognized speech result based on the second speech input; extract information from the second recognized speech result; identify one of the plurality of fields based on the first recognized speech result in the first language; translate at least a portion of the information extracted from the second recognized speech result from the second language to the first language; insert the translated information in the first language into the identified field; and cause the display to present the form in the first language.",0,,1,C
10606942,2,"2. The system of claim 1 , wherein the form comprises a toggle switch that is configured to cause the form to change from the first language to the second language or from the second language to the first language.",1,claim 1,0,C
10606942,3,"3. The system of claim 1 , wherein the display is capable of receiving one or more touch inputs from a user adjusting the form.",2,claim 1,0,C
10606942,4,"4. The system of claim 3 , wherein the instructions, when executed by the processor, further cause the processor to: receive a correction to the form by detecting one of the touch inputs from the user dragging a part of the information from the second recognized speech result to an empty field of the form; and enter the dragged part into the empty field.",3,claim 3,0,C
10606942,5,"5. The system of claim 1 , wherein the instructions, when executed by the processor, further cause the processor to: receive a selection of an empty field of the form; receive a correction speech input; determine a recognized correction speech result based on the correction speech input; and enter the recognized correction speech result into the empty field.",4,claim 1,0,C
10606942,6,"6. The system of claim 1 , wherein the instructions, when executed by the processor, further cause the processor to: receive selection of a filled field of the form; receive selection of a portion of the second recognized speech result; and replace contents of the filled field with the portion of the recognized speech result.",5,claim 1,0,C
10606942,7,"7. The system of claim 1 , wherein the instructions, when executed by the processor, further cause the processor to: receiving a selection of a filled field of the form; receiving a correction speech input; determining a recognized correction speech result based on the correction speech input; and replacing contents of the filled field with the recognized correction speech result.",6,claim 1,0,C
10606942,8,"8. The system of claim 7 , wherein the correction speech input is a dictated spelling.",7,claim 7,0,C
10606942,9,"9. The system of claim 7 , wherein the correction speech input is a restatement of at least a portion of the second speech input.",8,claim 7,0,C
10606942,10,"10. The system of claim 1 , wherein the information is extracted based on one or more prompts associated with the plurality of fields of the form.",9,claim 1,0,C
10606942,11,"11. The system of claim 1 , wherein the information is extracted using a semantic parser.",10,claim 1,0,C
10606942,12,"12. The system of claim 1 , wherein the information is extracted using keyword spotting.",11,claim 1,0,C
10606942,13,"13. The system of claim 1 , wherein the information is extracted via spoken term detection.",12,claim 1,0,C
10606942,14,"14. The system of claim 1 , wherein the information is extracted using an entity tagger.",13,claim 1,0,C
10606942,15,"15. A portable electronic device, comprising: a processor; and a memory storing instructions, when executed by the processor, cause the processor to: receive a first speech input in a first language from a first speaker and a second speech input in a second language from a second speaker, the first speech input and the second speech input being part of a dialogue between the first speaker and the second speaker; determine a first recognized speech result based on the first speech input; determine a second recognized speech result based on the second speech input; extract information from the second recognized speech result; identify one of a plurality of fields of a form based on the first recognized speech result in the first language; translate at least a portion of the information extracted from the second recognized speech result from the second language to the first language; insert the translated information in the first language into the identified field; and cause a display of the form in the first language.",14,,0,C
10606942,16,"16. The portable electronic device of claim 15 , wherein the form comprises a toggle switch that is configured to cause the form to change from the first language to the second language or from the second language to the first language.",15,claim 15,0,C
10606942,17,"17. The portable electronic device of claim 15 , wherein the instructions, when executed by the processor, further cause the processor to: receive a correction to the form by detecting a touch input from a user dragging a part of the information from the second recognized speech result to an empty field of the form; and enter the dragged part into the empty field.",16,claim 15,0,C
10606942,18,"18. The portable electronic device of claim 15 , wherein the instructions, when executed by the processor, further cause the processor to: receive a selection of an empty field of the form; receive a correction speech input; determine a recognized correction speech result based on the correction speech input; and enter the recognized correction speech result into the empty field.",17,claim 15,0,C
10606942,19,"19. The portable electronic device of claim 15 , wherein the instructions, when executed by the processor, further cause the processor to: receive selection of a filled field of the form; receive selection of a portion of the second recognized speech result; and replace contents of the filled field with the portion of the recognized speech result.",18,claim 15,0,C
10606942,20,"20. The portable electronic device of claim 15 , wherein the instructions, when executed by the processor, further cause the processor to: receiving a selection of a filled field of the form; receiving a correction speech input; determining a recognized correction speech result based on the correction speech input; and replacing contents of the filled field with the recognized correction speech result.",19,claim 15,0,C
10606943,1,"1. An information handling system comprising: one or more processors; a memory coupled to at least one of the processors; a set of computer program instructions stored in the memory and executed by at least one of the processors in order to perform actions of: analyzing, by a natural language fault injection system, a first text segment sent from an author client, wherein the analyzing produces a set of analysis results; selecting a first fault class, from a plurality of fault classes, based on comparing the analysis results against a set of parameters, wherein each of the plurality of fault classes define one of a plurality of types of faults to inject into the first text segment; injecting, by the natural language fault injection system, a natural language fault, based on the selected first fault class, into the first text segment to produce a second text segment, wherein the first text segment and the second text segment are written in a same natural language; selecting a reviewer from a plurality of reviewers based on the selected first fault class; sending, by the fault injection system, the second text segment to a reviewer client corresponding to the reviewer; receiving, at the fault injection system, a third text segment from the reviewer client, wherein the third text segment comprises at least one correction to the second text segment by the reviewer; generating, by the fault injection system, an efficacy score by comparing the third text segment against the first text segment, wherein the efficacy score indicates whether the reviewer corrected the natural language fault included in the second text segment; updating a reviewer profile of the reviewer based on the efficacy score; and selecting the reviewer to review an upcoming text segment based on the updated efficacy score.",0,,1,C
10606943,2,2. The information handling system of claim 1 wherein the processors perform additional actions comprising: determining that the first fault class is a noun swap fault class; and swapping a first noun in the first text segment with a second noun in the first text segment based on the first rule to produce the second text segment.,1,claim 1,0,C
10606943,3,3. The information handling system of claim 1 wherein the processors perform additional actions comprising: determining that the first fault class is a factual discrepancy fault class; and modifying at least one fact in the first text segment based on the first rule to produce the second text segment.,2,claim 1,0,C
10606943,4,4. The information handling system of claim 1 wherein the processors perform additional actions comprising: determining that the first fault class is a sentiment modifier fault class; and modifying a sentiment of the first text segment based on the first rule to produce the second text segment.,3,claim 1,0,C
10606943,5,5. The information handling system of claim 1 wherein the processors perform additional actions comprising: injecting a different natural language fault into a different first text segment based on the updated reviewer profile to produce a different second text segment; and sending the different second text segment to the reviewer to review.,4,claim 1,0,C
10606943,6,"6. The information handling system of claim 1 wherein the processors perform additional actions comprising: injecting a different natural language fault into the first text segment to produce a different second text segment, wherein the different natural language fault is based on a second fault class from the plurality of fault classes; selecting a different reviewer based on the second fault class; and sending the different second text segment to the different reviewer to review.",5,claim 1,0,C
10606943,7,"7. A computer program product stored in a non-transitory computer readable storage medium, comprising computer program code that, when executed by an information handling system, causes the information handling system to perform actions comprising: analyzing, by a natural language fault injection system, a first text segment sent from an author client, wherein the analyzing produces a set of analysis results; selecting a first fault class, from a plurality of fault classes, based on comparing the analysis results against a set of parameters, wherein each of the plurality of fault classes define one of a plurality of types of faults to inject into the first text segment; injecting, by the natural language fault injection system, a natural language fault, based on the selected first fault class, into the first text segment to produce a second text segment, wherein the first text segment and the second text segment are written in a same natural language; selecting a reviewer from a plurality of reviewers based on the selected first fault class; sending, by the fault injection system, the second text segment to a reviewer client corresponding to the reviewer; receiving, at the fault injection system, a third text segment from the reviewer client, wherein the third text segment comprises at least one correction to the second text segment by the reviewer; generating, by the fault injection system, an efficacy score by comparing the third text segment against the first text segment, wherein the efficacy score indicates whether the reviewer corrected the natural language fault included in the second text segment; updating a reviewer profile of the reviewer based on the efficacy score; and selecting the reviewer to review an upcoming text segment based on the updated efficacy score.",6,,0,C
10606943,8,8. The computer program product of claim 7 wherein the information handling system performs further actions comprising: determining that the first fault class is a noun swap fault class; and swapping a first noun in the first text segment with a second noun in the first text segment based on the first rule to produce the second text segment.,7,claim 7,0,C
10606943,9,9. The computer program product of claim 7 wherein the information handling system performs further actions comprising: determining that the first fault class is a factual discrepancy fault class; and modifying at least one fact in the first text segment based on the first rule to produce the second text segment.,8,claim 7,0,C
10606943,10,10. The computer program product of claim 7 wherein the information handling system performs further actions comprising: determining that the first fault class is a sentiment modifier fault class; and modifying a sentiment of the first text segment based on the first rule to produce the second text segment.,9,claim 7,0,C
10606943,11,11. The computer program product of claim 7 wherein the information handling system performs further actions comprising: injecting a different natural language fault into a different first text segment based on the updated reviewer profile to produce a different second text segment; and sending the different second text segment to the reviewer to review.,10,claim 7,0,C
10606944,1,"1. A method for categorizing keywords, the method comprising: receiving, by a computer, a keyword to be categorized; receiving, by the computer, a category dictionary including categories having associated respective pluralities of registered keywords; receiving, by the computer, a text corpus; identifying, by the computer, one or more registered keywords in the category dictionary having a degree of similarity to the keyword to be categorized that is equal to or greater than a predetermined value, and extracting the categories associated with the identified registered keywords; identifying, by the computer, one or more registered keywords co-occurring in the text corpus with the keyword to be categorized, and extracting the categories associated with the identified co-occurring registered keywords; determining, by the computer, a degree of importance of each extracted category based on a function of the identified registered keywords in the category dictionary and/or a function of the identified co-occurring registered keywords; and outputting, by the computer, the extracted categories, with at least an indication of each category's relative importance, as category candidates for categorizing the keyword to be categorized.",0,,1,C
10606944,2,"2. A method in accordance with claim 1 , wherein the degree of similarity is determined on the basis of the number of insertion, deletion, and/or substitution edits required to be performed on the keyword to be categorized for the resulting edited word to match a registered keyword.",1,claim 1,0,C
10606944,3,"3. A method in accordance with claim 1 , wherein the degree of importance of the extracted categories is determined on the basis of the number of identified registered keywords associated with each extracted category.",2,claim 1,0,C
10606944,4,"4. A method in accordance with claim 1 , wherein the degree of importance of an extracted category is determined on the basis of the number of identified registered keywords associated with the category that are identified registered keywords associated with another category.",3,claim 1,0,C
10606944,5,"5. A computer program product for categorizing keywords, the computer program product comprising: one or more computer-readable storage devices and program instructions stored on the one or more computer-readable storage devices, the program instructions comprising: program instructions to receive a keyword to be categorized; program instructions to receive a category dictionary including categories having associated respective pluralities of registered keywords; program instructions to receive a text corpus; program instructions to identify one or more registered keywords in the category dictionary having a degree of similarity to the keyword to be categorized that is equal to or greater than a predetermined value, and to extract the categories associated with the identified registered keywords; program instructions to identify or more registered keywords co-occurring in the text corpus with the keyword to be categorized, and to extract the categories associated with the identified co-occurring registered keywords; program instructions to determine a degree of importance of each extracted category based on a function of the identified registered keywords in the category dictionary and/or a function of the identified co-occurring registered keywords; and program instructions to output the extracted categories, with at least an indication of each category's relative importance, as category candidates for categorizing the keyword to be categorized.",4,,0,C
10606944,6,"6. A computer program product in accordance with claim 5 , wherein the degree of similarity is determined on the basis of the number of insertion, deletion, and/or substitution edits required to be performed on the keyword to be categorized for the resulting edited word to match a registered keyword.",5,claim 5,0,C
10606944,7,"7. A computer program product in accordance with claim 5 , wherein the degree of importance of the extracted categories is determined on the basis of the number of identified registered keywords associated with each extracted category.",6,claim 5,0,C
10606944,8,"8. A computer program product in accordance with claim 5 , wherein the degree of importance of an extracted category is determined on the basis of the number of identified registered keywords associated with the category that are identified registered keywords associated with another category.",7,claim 5,0,C
10606944,9,"9. A computer system for categorizing keywords, the computer system comprising: one or more computer processors, one or more computer-readable storage devices, and program instructions stored on one or more of the computer-readable storage devices for execution by at least one of the one or more processors, the program instructions comprising: program instructions to receive a keyword to be categorized; program instructions to receive a category dictionary including categories having associated respective pluralities of registered keywords; program instructions to receive a text corpus; program instructions to identify one or more registered keywords in the category dictionary having a degree of similarity to the keyword to be categorized that is equal to or greater than a predetermined value, and to extract the categories associated with the identified registered keywords; program instructions to identify or more registered keywords co-occurring in the text corpus with the keyword to be categorized, and to extract the categories associated with the identified co-occurring registered keywords; program instructions to determine a degree of importance of each extracted category based on a function of the identified registered keywords in the category dictionary and/or a function of the identified co-occurring registered keywords; and program instructions to output the extracted categories, with at least an indication of each category's relative importance, as category candidates for categorizing the keyword to be categorized.",8,,0,C
10606944,10,"10. A computer system in accordance with claim 9 , wherein the degree of similarity is determined on the basis of the number of insertion, deletion, and/or substitution edits required to be performed on the keyword to be categorized for the resulting edited word to match a registered keyword.",9,claim 9,0,C
10606944,11,"11. A computer system in accordance with claim 9 , wherein the degree of importance of the extracted categories is determined on the basis of the number of identified registered keywords associated with each extracted category.",10,claim 9,0,C
10606944,12,"12. A computer system in accordance with claim 9 , wherein the degree of importance of an extracted category is determined on the basis of the number of identified registered keywords associated with the category that are identified registered keywords associated with another category.",11,claim 9,0,C
10606945,1,"1. A computer implemented method for identifying one or more definitions for a distinguished natural language term, the method comprising: identifying, by a computing system, among entries of a first table of an electronic database, each representing a natural language term, a first entry representing the distinguished natural language term; identifying, by the computing system, among entries of a second table of the electronic database, each representing a correspondence between a term and a definition defining the term, one or more second entries related to the first entry; for each particular second entry of the identified second entries, identifying, by the computing system, among entries of a third table of the electronic database, each representing a definition, a third entry related to the particular second entry, the third table being distinct from the second table; for each of the identified entries of the third table, accessing, by the computing system in the identified entry of the third table a natural language representation of the definition represented by the entry of the third table; and attributing, by the computing system writing to the electronic database, the accessed definition natural language representations to the distinguished natural language term.",0,,1,C
10606945,2,"2. The computer implemented method of claim 1 further comprising: in relation to a distinguished one of the identified entries of the third table, identifying an entry of a fourth table corresponding to the distinguished entry of the third table, wherein the identified entry of the fourth table represents a word type corresponding to the definition represented in the distinguished entry of the third table, and wherein the word type specifies a part of speech for which a word is being used when it has the definition represented in the distinguished entry of the third table.",1,claim 1,0,C
10606945,3,"3. The computer implemented method of claim 1 further comprising: identifying a fourth entry, from among entries of a fourth table, corresponding to both the first entry of the first table and a fifth entry of the first table, wherein the identified fourth entry defines a hierarchical relationship between the distinguished natural language term of the first entry and another natural language term of the fifth entry.",2,claim 1,0,C
10606945,4,"4. The computer implemented method of claim 3 , wherein the identified fourth entry includes a field defining a type of the hierarchical relationship.",3,claim 3,0,C
10606945,5,"5. The computer implemented method of claim 4 , wherein the type of the hierarchical relationship corresponds to one of: the distinguished natural language term being a type of the other natural language term; the distinguished natural language term being part of the other natural language term; the distinguished natural language term being a linguistic child of the other natural language term; the distinguished natural language term being created by the other natural language term; or the distinguished natural language term being enforced by the other natural language term.",4,claim 4,0,C
10606945,6,"6. The computer implemented method of claim 3 , wherein the identified fourth entry contains information indicating a source from which the hierarchical relationship defined in the identified fourth entry was derived.",5,claim 3,0,C
10606945,7,"7. The computer implemented method of claim 1 further comprising identifying one or more fourth entries, from among entries of a fourth table, corresponding to the first entry of the first table, wherein each identified fourth entry defines an alternate form of the distinguished natural language term.",6,claim 1,0,C
10606945,8,"8. The computer implemented method of claim 7 further comprising, for each particular fourth entry of the identified fourth entries, identifying, from among entries of a fifth table, a corresponding entry representing a type of difference that the particular fourth entry represents as compared to the first entry.",7,claim 7,0,C
10606945,9,"9. The computer implemented method of claim 1 further comprising identifying one or more fourth entries, from among entries of a fourth table, corresponding to the first entry of the first table, wherein each identified fourth entry identifies a term that is a synonym or antonym of the distinguished natural language term.",8,claim 1,0,C
10606945,10,"10. The computer implemented method of claim 1 further comprising identifying one or more fourth entries, from among entries of a fourth table, corresponding to the first entry of the first table, wherein each identified fourth entry defines an acronym of the distinguished natural language term.",9,claim 1,0,C
10606945,11,"11. The computer implemented method of claim 1 , wherein the first table further includes a fourth entry representing another natural language term identified, through entries in the second and third tables, as having the same meaning as the distinguished natural language term; wherein the fourth entry is designated as being a harmonized term; and wherein, when the first table is accessed such that both the first and fourth entries are retrieved, the fourth entry is selected for preferred used due to the harmonized designation.",10,claim 1,0,C
10606945,12,"12. The computer implemented method of claim 1 , wherein the identified third entries of the third table each relate to a control derived from an authority document.",11,claim 1,0,C
10606945,13,"13. The computer implemented method of claim 1 further comprising: identifying, based on the attributed definition natural language representations, one or more relationships between the distinguished natural language term and one or more other natural language terms; and wherein the identified one or more relationships are used in mapping portions of a document to controls.",12,claim 1,0,C
10606945,14,"14. A computer-readable storage medium, that is not a signal, storing data accessible by a program executable by a computing system, the computer-readable storage medium comprising: a dictionary data structure, wherein the dictionary data structure includes information usable by the program to identify one or more definitions for a distinguished natural language term, the dictionary data structure comprising: a first table comprising term entries, wherein each term entry represents a natural language term, and wherein a first entry of the term entries of the first table comprises a representation of the distinguished natural language term; a second table comprising correspondence entries, wherein each correspondence entry represents a correspondence between a term and a definition defining the term, and wherein one or more second entries of the correspondence entries are related to the first entry; and a third table comprising definition entries, wherein each definition entry represents a definition of a term, and wherein, for each particular second entry of the one or more second entries, the definition entries include a third entry related to the particular second entry, wherein the second entries are useable by the program to identify the third entries, and each particular third entry of the identified third entries is useable by the program to attribute a representation of the definition represented by the particular third entry to the distinguished natural language term.",13,,0,C
10606945,15,"15. The computer-readable storage medium of claim 14 , wherein the dictionary data structure further comprises a fourth table with hierarchy entries, wherein each particular hierarchy entry corresponds to two of the term entries of the first table and defines a hierarchical relationship between the two natural language terms represented by the two term entries corresponding to the particular hierarchy entry, and wherein each particular hierarchy entry contains information indicating a source from which the hierarchical relationship defined in the particular hierarchy entry was derived.",14,claim 14,0,C
10606945,16,"16. The computer-readable storage medium of claim 14 wherein the dictionary data structure further comprises a fourth table with alternate form entries, wherein each alternate form entry corresponds to one of the term entries of the first table and defines an alternate form of the natural language term represented by the corresponding term entry, and wherein the dictionary data structure further comprises a fifth table with same level entries, wherein each same level entry corresponds to one of the term entries of the first table and identifies a term that is a synonym or antonym of the natural language term represented by the corresponding term entry.",15,claim 14,0,C
10606945,17,"17. The computer-readable storage medium of claim 14 , wherein the third entries of the third table each relate to a control derived from an authority document.",16,claim 14,0,C
10606945,18,"18. The computer-readable storage medium of claim 14 , wherein the program attributes the representations of the definitions represented by the third entries to the distinguished natural language term; wherein the program identifies, based on the attributed representations of the definitions, one or more relationships between the distinguished natural language term and one or more other natural language terms; and wherein the identified one or more relationships are used in mapping portions of a document to controls.",17,claim 14,0,C
10606945,19,"19. The computer-readable storage medium of claim 14 , wherein the dictionary data structure is used by a computing system to augment a Part of Speech Tagger.",18,claim 14,0,C
10606945,20,"20. The computer-readable storage medium of claim 14 , wherein the dictionary data structure is used by a computing system to augment a Named Entity Tagger.",19,claim 14,0,C
10606945,21,"21. The computer-readable storage medium of claim 14 , wherein the dictionary data structure is used by a computing system to augment a Natural Language Processor.",20,claim 14,0,C
10606945,22,"22. A computing system for identifying one or more definitions for a distinguished natural language term, the computing system comprising: one or more processors; and memory storing instructions that, when executed by the one or more processors, cause the computing system to perform operations comprising: identifying, among entries of a first table each representing a natural language term, a first entry representing the distinguished natural language term; identifying, among entries of a second table each representing a correspondence between a term and a definition defining the term, one or more second entries related to the first entry; for each particular second entry of the identified second entries, identifying, among entries of a third table each representing a definition, a third entry related to the particular second entry, the third table being distinct from the second table; for each of the identified entries of the third table, accessing in the identified entry of the third table a natural language representation of the definition represented by the entry of the third table; and attributing the accessed definition natural language representations to the distinguished natural language term.",21,,0,C
10606945,23,"23. The computing system of claim 22 , wherein the operations further comprise: in relation to a distinguished one of the identified entries of the third table, identifying an entry of a fourth table corresponding to the distinguished entry of the third table, wherein the identified entry of the fourth table represents a word type corresponding to the definition represented in the distinguished entry of the third table, and wherein the word type specifies a part of speech for which a word is being used when it has the definition represented in the distinguished entry of the third table.",22,claim 22,0,C
10606945,24,"24. The computing system of claim 22 , wherein the operations further comprise: identifying a fourth entry, from among entries of a fourth table, corresponding to both the first entry of the first table and a fifth entry of the first table, wherein the identified fourth entry defines a hierarchical relationship between the distinguished natural language term of the first entry and another natural language term of the fifth entry.",23,claim 22,0,C
10606945,25,"25. The computing system of claim 24 , wherein the identified fourth entry includes a field defining a type of the hierarchical relationship.",24,claim 24,0,C
10606945,26,"26. The computing system of claim 25 , wherein the type of the hierarchical relationship corresponds to one of: the distinguished natural language term being a type of the other natural language term; the distinguished natural language term being part of the other natural language term; the distinguished natural language term being a linguistic child of the other natural language term; the distinguished natural language term being created by the other natural language term; or the distinguished natural language term being enforced by the other natural language term.",25,claim 25,0,C
10606945,27,"27. The computing system of claim 24 , wherein the identified fourth entry contains information indicating a source from which the hierarchical relationship defined in the identified fourth entry was derived.",26,claim 24,0,C
10606945,28,"28. The computing system of claim 22 , wherein the operations further comprise identifying one or more fourth entries, from among entries of a fourth table, corresponding to the first entry of the first table, wherein each identified fourth entry defines an alternate form of the distinguished natural language term.",27,claim 22,0,C
10606945,29,"29. The computing system of claim 28 , wherein the operations further comprise, for each particular fourth entry of the identified fourth entries, identifying, from among entries of a fifth table, a corresponding entry representing a type of difference that the particular fourth entry represents as compared to the first entry.",28,claim 28,0,C
10606945,30,"30. The computing system of claim 22 , wherein the operations further comprise identifying one or more fourth entries, from among entries of a fourth table, corresponding to the first entry of the first table, wherein each identified fourth entry identifies a term that is a synonym or antonym of the distinguished natural language term.",29,claim 22,0,C
10606945,31,"31. The computing system of claim 22 , wherein the operations further comprise identifying one or more fourth entries, from among entries of a fourth table, corresponding to the first entry of the first table, wherein each identified fourth entry defines an acronym of the distinguished natural language term.",30,claim 22,0,C
10606945,32,"32. The computing system of claim 22 , wherein the first table further includes a fourth entry representing another natural language term identified, through entries in the second and third tables, as having the same meaning as the distinguished natural language term; wherein the fourth entry is designated as being a harmonized term; and wherein, when the first table is accessed such that both the first and fourth entries are retrieved, the fourth entry is selected for preferred used due to the harmonized designation.",31,claim 22,0,C
10606945,33,"33. The computing system of claim 22 , wherein the identified third entries of the third table each relate to a control derived from an authority document.",32,claim 22,0,C
10606945,34,"34. The computing system of claim 22 , wherein the operations further comprise: identifying, based on the attributed definition natural language representations, one or more relationships between the distinguished natural language term and one or more other natural language terms; and wherein the identified one or more relationships are used in mapping portions of a document to controls.",33,claim 22,0,C
10606946,1,"1. A system comprising: one or more processors; and memory storing instructions that, when executed by the one or more processors, configure the one or more processors to perform operations comprising: receiving a text-based object that includes an input word; searching in a vocabulary space to find one or more words that correspond morphologically to the input word; receiving contextual information associated with the input word and the one or more words that correspond morphologically to the input word; and based, at least in part, on the contextual information associated with the input word and the one or more words that correspond morphologically to the input word, modifying a morphological knowledge base during a machine learning process.",0,,1,C
10606946,2,"2. The system of claim 1 , wherein the operations further comprise: searching in a vocabulary space; and calculating morpheme similarity between or among the input word and the one or more words that correspond morphologically to the input word.",1,claim 1,0,C
10606946,3,"3. The system of claim 1 , wherein the operations further comprise: searching in a vocabulary space; and calculating syllable similarity between or among the input word and the one or more words that correspond morphologically to the input word.",2,claim 1,0,C
10606946,4,"4. The system of claim 1 , wherein the operations further comprise predicting a target word or phrase having a meaning based, at least in part, on the contextual information and the one or more words that correspond morphologically to the input word.",3,claim 1,0,C
10606946,5,"5. The system of claim 1 , wherein the operations further comprise determining the contextual information associated with the input word in a process that is parallel with and independent from determining the one or more words that correspond morphologically to the input word.",4,claim 1,0,C
10606946,6,"6. The system of claim 5 , wherein the operations further comprise calculating a weighted sum of a representation of the contextual information and a representation of the one or more words that correspond morphologically to the input word.",5,claim 5,0,C
10606946,7,"7. The system of claim 1 , wherein the input word and the one or more words that correspond morphologically to the input word are each represented by a one-hot vector.",6,claim 1,0,C
10606946,8,"8. The system of claim 1 , wherein the one or more words that correspond morphologically to the input word are collectively represented by a matrix.",7,claim 1,0,C
10606946,9,"9. The system of claim 1 , wherein the operations further comprise extracting the one or more words that correspond morphologically to the input word from one or more natural language text sentences.",8,claim 1,0,C
10606946,10,"10. The system of claim 1 , wherein the input word comprises a misspelled word.",9,claim 1,0,C
10606947,1,"1. A speech recognition apparatus comprising: one or more processors configured to: generate a word sequence based on word class probability distributions and word probabilities of words of the word sequence, generate, based on the word sequence, a word class probability distribution for word classes of a word following the word sequence, determine word probabilities with respect to candidate words, corresponding to the word following the word sequence, as results of a speech recognition model configured to predict the word following the word sequence, adjust the word probabilities with respect to the candidate words based on the word class probability distribution and a personalized language model, and output, as a speech recognition result, an extended word sequence including the word sequence and a candidate word having a highest adjusted probability value among the adjusted probability values.",0,,1,C
10606947,2,"2. The speech recognition apparatus of claim 1 , wherein: the word classes include either one or both of an entity name and a part of speech; and the entity name is any one or any combination of any two or more of a personal name, a location name, an organization name, a date, a time, a book title, a movie title, a music title, and a TV program name.",1,claim 1,0,C
10606947,3,"3. The speech recognition apparatus of claim 1 , wherein the one or more processors are configured to generate the word class probability distribution using a word class prediction model.",2,claim 1,0,C
10606947,4,"4. The speech recognition apparatus of claim 3 , wherein the word class prediction model is either one or both of: constructed in the form of a rule set based on a dictionary and a grammar; and constructed through machine learning using either one or both of a named entity recognition scheme and a part-of-speech tagging scheme.",3,claim 3,0,C
10606947,5,"5. The speech recognition apparatus of claim 3 , wherein the word class prediction model is a Recurrent Neural Network (RNN)-based model.",4,claim 3,0,C
10606947,6,"6. The speech recognition apparatus of claim 1 , wherein, for the determining of the word probabilities with respect to the candidate words, the one or more processors are configured to determine the word probabilities with respect to the candidate words using a pronunciation dictionary and a language model constructed in a data structure in a weighted finite-state transducer (WFST) form as the speech recognition model.",5,claim 1,0,C
10606947,7,"7. The speech recognition apparatus of claim 1 , wherein the one or more processors are configured to perform the generating and determining with respect to at least one extended word sequence, including the extended word sequence, with the at least one extended word sequence selectively excluding one or more of the candidate words determined to not belong to at least one word class determined based on the word class probability distribution, or with the at least one extended word sequence selectively excluding one or more extended word sequences that include the one or more candidate words.",6,claim 1,0,C
10606947,8,"8. The speech recognition apparatus of claim 1 , wherein: for the adjusting of the word probability, the one or more processors are configured to adjust the word probability by multiplying the word probability by the class probability.",7,claim 1,0,C
10606947,9,"9. The speech recognition apparatus of claim 1 , wherein the word sequence is a search result of speech recognition for the word sequence prior to the generation of the word class probability distribution and the determination of the probabilities with respect to the candidate words.",8,claim 1,0,C
10606947,10,"10. The speech recognition apparatus of claim 1 , wherein the determined probabilities with respect to the candidate words are probabilities of the candidate words or probabilities of extended word sequences that include the word sequence and respectively the candidate words.",9,claim 1,0,C
10606947,11,"11. A processor-implemented speech recognition method comprising: generating a word sequence based on word class probability distributions and word probabilities of words of the word sequence, predicting, based on the word sequence, a word class of a word following the word sequence and a word class probability of the word class; determining, based on a speech signal, a candidate word corresponding to the word following the word sequence and a word probability of the candidate word; determining whether the candidate word belongs to the word class, adjusting the word probability of the candidate word based on the class probability, in response to determining that the candidate word belongs to the word class, and outputting, as a speech recognition result, an extended word sequence including the word sequence and the determined candidate word, wherein the adjusting the probability value of the extended word sequence comprises increasing the probability value of the candidate word, in response to the candidate word belonging to the word class and being included in a personalized language model.",10,,0,C
10606947,12,"12. A speech recognition apparatus comprising: one or more processors configured to: predict, based on a word sequence, a word class of a word following a word sequence and a word class probability of the word class; extending, based on the word class, the word sequence to include a candidate word corresponding to the word class, in response to the candidate word belonging to the word class; predict, based on the extended word sequence, another word class of a word following the extended word sequence and another word class probability of the other word class; and extending, based on the other word class, the extended word sequence to include another candidate word corresponding to the other word class, in response to the other candidate word belonging to the other word class.",11,,0,C
10606947,13,"13. The speech recognition apparatus of claim 12 , wherein the one or more processors are further configured to: predict respective word class probabilities of a plurality of word classes based on the word sequence; and add the candidate word to the word sequence based on the word class probabilities, wherein the word class is one of the plurality of word classes and the word class probability is one of the plurality of word class probabilities.",12,claim 12,0,C
10606947,14,"14. The speech recognition apparatus of claim 13 , wherein: the candidate word belongs to the word class; and the adding of the candidate word comprised adding the candidate word to the word sequence in response to the word class having a highest probability among the plurality of word classes.",13,claim 13,0,C
10606947,15,"15. The speech recognition apparatus of claim 13 , wherein the one or more processors are further configured to: determine a plurality of candidate words that correspond to a speech signal; and determine whether to add one of the candidate words to the word sequence based on respective probabilities of the plurality of candidate words and the probabilities of the plurality of word classes, wherein the candidate word is one of the plurality of candidate words.",14,claim 13,0,C
10606947,16,"16. The speech recognition apparatus of claim 12 , wherein the one or more processors are further configured to: determine the candidate word based on a speech signal; and determine whether to add the candidate word to the word sequence based on the word class.",15,claim 12,0,C
10606947,17,"17. A processor-implemented speech recognition method comprising: generate a word sequence based on word class probability distributions and word probabilities of words of the word sequence, predicting, based on the word sequence, a word class or a word class probability distribution for word classes of a word following the word sequence; determining, based on a speech signal, word probabilities with respect to candidate words corresponding to the word following the word sequence using a speech recognition model; determining which of the candidate words belong to the word class or a select word class determined based on the word class probability distribution; selectively, based on a result of the determining of which candidate words belong to the word class or the select word class, adjusting the word probabilities with respect to the candidate words; and output, as a speech recognition result, an extended word sequence including the word sequence and a candidate word selected based on the selectively adjusted probabilities with respect to the candidate words.",16,,0,C
10606947,18,"18. The speech recognition method of claim 17 , wherein: the word class is either one or both of an entity name and a part of speech; and the entity name is any one or any combination of any two or more of a personal name, a location name, an organization name, a date, a time, a book title, a movie title, a music title, and a TV program name.",17,claim 17,0,C
10606947,19,"19. The speech recognition method of claim 17 , wherein the predicting the word class comprises predicting the word class using a word class prediction model.",18,claim 17,0,C
10606947,20,"20. The speech recognition method of claim 19 , wherein the word class prediction model is either one or both of: constructed in the form of a rule set based on a dictionary and a grammar; and constructed through machine learning using either one or both of a named entity recognition scheme and a part-of-speech tagging scheme.",19,claim 19,0,C
10606947,21,"21. The speech recognition method of claim 19 , wherein the word class prediction model is a Recurrent Neural Network (RNN)-based model.",20,claim 19,0,C
10606947,22,"22. The speech recognition method of claim 17 , wherein the determining the candidate word comprises searching for the candidate word using a pronunciation dictionary and a language model constructed in a data structure in a weighted finite-state transducer (WFST) form.",21,claim 17,0,C
10606947,23,"23. The speech recognition method of claim 17 , further comprising excluding the candidate word as a candidate word for a future target, in response to the candidate word not belonging to the word class.",22,claim 17,0,C
10606947,24,"24. The speech recognition method of claim 17 , wherein: the determining the word class comprises predicting a word class probability distribution of the word following the word sequence; and the adjusting the probability value of the extended word sequence comprises adjusting the probability value of the candidate word by multiplying a probability value of the candidate word by the probability value of the word class, wherein the candidate word belongs to the word class.",23,claim 17,0,C
10606947,25,"25. A non-transitory computer-readable storage medium storing instructions that, when executed by a processor, cause the processor to perform the method of claim 17 .",24,claim 17,0,C
10606948,1,"1. A method of operating a user interface for a first system and a second system of a vehicle, the method comprising: receiving, by a processor, a command variable; identifying, by the processor, a first command and a second command from the received command variable, the first command including the command variable and configured for controlling the first system, the second command including the command variable and configured for controlling the second system; determining, by the processor, a current condition of the vehicle; filtering, by the processor, the identified first and second commands, including filtering out one of the identified first and second commands that are nonapplicable for the determined current condition of the vehicle, and including determining a predicted user command is the other of the first and second commands and is applicable for the determined current condition of the vehicle; outputting, by an output device of the user interface, the predicted user command for selection by a user; receiving, by an input device, a user selection of the predicted user command output by the output device; controlling, by a controller, at least one of the first system and the second system of the vehicle according to the user selection; wherein receiving the command variable includes receiving an initial user input and a subsequent user input that adds to the initial user input; and wherein identifying the first command and the second command includes identifying a command that includes the initial user input and subsequently identifying the command that includes both the initial user input and the subsequent user input.",0,,1,C
10606948,2,"2. The method of claim 1 , wherein the vehicle is an aircraft; and wherein determining the current condition includes determining a current flight phase of the aircraft; further comprising determining the predicted user command is the other of the first and second commands and is applicable to the determined current flight phase.",1,claim 1,0,C
10606948,3,"3. The method of claim 1 , wherein determining the predicted user command includes determining those of the identified first and second commands that satisfy a vehicle specific criteria; and wherein determining the predicted user command includes determining the predicted user command is the other of the first and second commands and satisfies the vehicle specific criteria.",2,claim 1,0,C
10606948,4,"4. The method of claim 1 , further comprising receiving, from an input device, a user input; further comprising determining, by the processor, that the user input is a shortcut input; and processing, by the processor, the shortcut input to generate the command variable.",3,claim 1,0,C
10606948,5,"5. The method of claim 1 , wherein determining the predicted user command includes determining a plurality of predicted user commands; and further comprising limiting a number of the plurality of predicted user commands simultaneously output by the output device.",4,claim 1,0,C
10606948,6,"6. The method of claim 1 , wherein receiving the command variable includes receiving a text-based command variable input from the input device.",5,claim 1,0,C
10606948,7,"7. A user interface system for controlling a first system and a second system a vehicle, the user interface comprising: an input device; a command database having a first command configured for controlling the first system of the vehicle and having a second command configured for controlling the second system of the vehicle; a sensor configured to sense a current condition of the vehicle; a controller with a processor that is configured to receive a command variable that is input via the input device, the processor configured to identify the first command and the second command from the received command variable, the first command incorporating the command variable and configured for controlling the first system, the second command incorporating the command variable and configured for controlling the second system, the processor configured to filter out one of the identified first and second commands that are nonapplicable for the current condition of the vehicle sensed by the sensor, the processor configured to determine a predicted user command is the other of the identified first and second commands and is applicable for the current condition of the vehicle sensed by the sensor; an output device configured to output the predicted user command for selection by a user; the input device being configured to receive a user selection of the predicted user command; the controller configured to control at least one of the first system and the second system according to the user selection; wherein the processor is configured to receive the command variable as an initial user input and a subsequent user input that adds to the initial user input; and wherein the processor is configured to identify the first command and the second command by identifying a command that includes the initial user input and subsequently identifying the command that includes both the initial user input and the subsequent user input.",6,,0,C
10606948,8,"8. The user interface system of claim 7 , wherein the vehicle is an aircraft; and the sensor is configured to sense a current flight phase of the aircraft; wherein the processor is configured to determine the predicted user command is the other of the first and second commands and is applicable to the sensed current flight phase.",7,claim 7,0,C
10606948,9,"9. The user interface system of claim 7 , wherein the processor is configured to determine the predicted user command by determining those of the identified first and second commands that satisfy a vehicle-specific criteria; and wherein the processor is configured to determine the predicted user command is the other of the first and second commands and satisfies the vehicle-specific criteria.",8,claim 7,0,C
10606948,10,"10. The user interface system of claim 7 , wherein the input device is configured to receive a user input; wherein the processor is configured to determine that the user input is a shortcut input; and wherein the processor is configured to process the shortcut input to generate the command variable.",9,claim 7,0,C
10606948,11,"11. The user interface system of claim 7 , wherein the processor is configured to determine a plurality of predicted user commands; and wherein the processor is configured to limit a number of the plurality of predicted user commands simultaneously output by the output device.",10,claim 7,0,C
10606948,12,"12. The user interface system of claim 7 , wherein the command variable is a text-based command variable input from the input device.",11,claim 7,0,C
10606949,1,"1. An artificial intelligence based method for checking a text, the method comprising: lexing a first to-be-checked text and a second to-be-checked text respectively to obtain lexed words, determining word vectors of the lexed words to generate a first word vector sequence corresponding to the first text and a second word vector sequence corresponding to the second text; inputting the first word vector sequence and the second word vector sequence respectively into a pre-trained convolutional neural network containing at least one multi-scale convolutional layer, identifying vector sequences in a plurality of vector sequences outputted by a last multi-scale convolutional layer in the at least one multi-scale convolutional layer as eigenvector sequences, to obtain eigenvector sequence groups respectively corresponding to the texts, wherein the convolutional neural network is used for extracting characteristics of texts; combining eigenvector sequences in the obtained eigenvector sequence group corresponding to each text to generate a combined eigenvector sequence corresponding to each text; and analyzing the generated combined eigenvector sequences to determine whether the first text and the second text pass a similarity check.",0,,1,C
10606949,2,"2. The method for checking a text according to claim 1 , wherein the analyzing the generated combined eigenvector sequences to determine whether the first text and the second text pass a similarity check comprises: extracting, for each text, a maximum value in each dimension of the eigenvectors contained in a combined eigenvector sequence corresponding to each text, to generate a target eigenvector corresponding to the each text; and determining whether the first text and the second text pass the similarity check based on the generated target eigenvectors corresponding to the texts.",1,claim 1,0,C
10606949,3,"3. The method for checking a text according to claim 2 , wherein the determining whether the first text and the second text pass the similarity check based on the generated target eigenvectors corresponding to the texts comprises: inputting the generated target eigenvectors into a pre-trained similarity prediction model to obtain similarity prediction result of the first text and the second text, wherein the similarity prediction model is used for characterizing a corresponding relationship between target eigenvector sequences of a plurality of texts and similarity prediction results of the plurality of texts; and determining whether the first text and the second text pass the similarity check based on the obtained similarity prediction result.",2,claim 2,0,C
10606949,4,"4. The method for checking a text according to claim 3 , wherein the method further comprises training the similarity prediction model, comprising: extracting a preset training sample, wherein the training sample comprises a first training text, a second training text, and an identifier for indicating whether the first training text is similar to the second training text; analyzing the first training text and the second training text to generate target eigenvectors respectively corresponding to the first training sample and the second training sample; and obtaining the similarity prediction model by training using a machine learning method, using the target eigenvectors respectively corresponding to the first training sample and the second training sample as inputs, and using the identifier as an input.",3,claim 3,0,C
10606949,5,"5. The method for checking a text according to claim 2 , wherein the determining whether the first text and the second text pass the similarity check based on the generated target eigenvectors corresponding to the texts comprises: determining a similarity between a target eigenvector corresponding to the first text and a target eigenvector corresponding to the second text; determining the first text and the second text passing the similarity check in response to determining the similarity being greater than a preset similarity threshold; and determining the first text and the second text failing to pass the similarity check in response to determining the similarity being not greater than the similarity threshold.",4,claim 2,0,C
10606949,6,"6. The method for checking a text according to claim 1 , wherein a deep coherent layer and a pooling layer are arranged between adjacent multi-scale convolutional layers in the at least one multi-scale convolutional layer, the deep coherent layer is used for combining a plurality of vector sequences outputted by the multi-scale convolutional layer to generate a combined vector sequence consisting of a plurality of combined vectors, and the pooling layer is used for analyzing the combined vector sequence generated by the deep coherent layer in a preset window size and a preset window sliding step length to obtain a simplified combined vector sequence.",5,claim 1,0,C
10606949,7,"7. An artificial intelligence based apparatus for checking a text, the apparatus comprising: at least one processor; and a memory storing instructions, the instructions when executed by the at least one processor, cause the at least one processor to perform operations, the operations comprising: lexing a first to-be-checked text and a second to-be-checked text respectively to obtain lexed words, determining word vectors of the lexed words to generate a first word vector sequence corresponding to the first text and a second word vector sequence corresponding to the second text; inputting the first word vector sequence and the second word vector sequence respectively into a pre-trained convolutional neural network containing at least one multi-scale convolutional layer, identifying vector sequences in a plurality of vector sequences outputted by a last multi-scale convolutional layer in the at least one multi-scale convolutional layer as eigenvector sequences, to obtain eigenvector sequence groups respectively corresponding to the texts, wherein the convolutional neural network is used for extracting characteristics of texts; combining eigenvector sequences in the obtained eigenvector sequence group corresponding to each text to generate a combined eigenvector sequence corresponding to each text; and analyzing the generated combined eigenvector sequences to determine whether the first text and the second text pass a similarity check.",6,,0,C
10606949,8,"8. The apparatus for checking a text according to claim 7 , wherein the analyzing the generated combined eigenvector sequences to determine whether the first text and the second text pass a similarity check comprises: extracting, for each text, a maximum value in each dimension of the eigenvectors contained in a combined eigenvector sequence corresponding to the each text, to generate a target eigenvector corresponding to the each text; and determining whether the first text and the second text pass the similarity check based on the generated target eigenvectors corresponding to the texts.",7,claim 7,0,C
10606949,9,"9. The apparatus for checking a text according to claim 8 , wherein the determining whether the first text and the second text pass the similarity check based on the generated target eigenvectors corresponding to the texts comprises: inputting the generated target eigenvectors into a pre-trained similarity prediction model to obtain similarity prediction result of the first text and the second text, wherein the similarity prediction model is used for characterizing a corresponding relationship between target eigenvector sequences of a plurality of texts and similarity prediction results of the plurality of texts; and determining whether the first text and the second text pass the similarity check based on the obtained similarity prediction result.",8,claim 8,0,C
10606949,10,"10. The apparatus for checking a text according to claim 9 , wherein the operations further comprise training the similarity prediction model, comprising: extracting a preset training sample, wherein the training sample comprises a first training text, a second training text, and an identifier for indicating whether the first training text is similar to the second training text; analyzing the first training text and the second training text to generate target eigenvectors respectively corresponding to the first training sample and the second training sample; and obtaining the similarity prediction model by training using a machine learning method, using the target eigenvectors respectively corresponding to the first training sample and the second training sample as inputs, and using the identifier as an input.",9,claim 9,0,C
10606949,11,"11. The apparatus for checking a text according to claim 8 , wherein the determining whether the first text and the second text pass the similarity check based on the generated target eigenvectors corresponding to the texts comprises: determining a similarity between a target eigenvector corresponding to the first text and a target eigenvector corresponding to the second text; determining the first text and the second text passing the similarity check in response to determining the similarity being greater than a preset similarity threshold; and determining the first text and the second text failing to pass the similarity check in response to determining the similarity being not greater than the similarity threshold.",10,claim 8,0,C
10606949,12,"12. The apparatus for checking a text according to claim 7 , wherein a deep coherent layer and a pooling layer are arranged between adjacent multi-scale convolutional layers in the at least one multi-scale convolutional layer, the deep coherent layer is used for combining a plurality of vector sequences outputted by the multi-scale convolutional layer to generate a combined vector sequence consisting of a plurality of combined vectors, and the pooling layer is used for analyzing the combined vector sequence generated by the deep coherent layer in a preset window size and a preset window sliding step length to obtain a simplified combined vector sequence.",11,claim 7,0,C
10606949,13,"13. A non-transitory computer storage medium storing a computer program, the computer program when executed by one or more processors, causes the one or more processors to perform operations, the operations comprising: lexing a first to-be-checked text and a second to-be-checked text respectively to obtain lexed words, determining word vectors of the lexed words to generate a first word vector sequence corresponding to the first text and a second word vector sequence corresponding to the second text; inputting the first word vector sequence and the second word vector sequence respectively into a pre-trained convolutional neural network containing at least one multi-scale convolutional layer, identifying vector sequences in a plurality of vector sequences outputted by a last multi-scale convolutional layer in the at least one multi-scale convolutional layer as eigenvector sequences, to obtain eigenvector sequence groups respectively corresponding to the texts, wherein the convolutional neural network is used for extracting characteristics of texts; combining eigenvector sequences in the obtained eigenvector sequence group corresponding to each text to generate a combined eigenvector sequence corresponding to each text; and analyzing the generated combined eigenvector sequences to determine whether the first text and the second text pass a similarity check.",12,,0,C
10606950,1,"1. A method of controlling playback of speech-containing audio data on a computing device comprising a processor, said method being executed by the processor in the computing device and comprising: operating a media player on the computing device to play the audio data, detecting a user-initiated time-shift command to step forward or backward in the audio data, and after detecting the time-shift command at a current time in the audio data, identifying a starting point of a sentence of a plurality of contiguous selectable sentences in the audio data and operating the media player to play the audio data from the starting point, at least a portion of the audio data being organized into the plurality of contiguous selectable sentences in a time window that encompasses the current time for any value of the current time.",0,,1,C
10606950,2,"2. The method of claim 1 , wherein the starting point of the sentence is identified based on natural language processing of the audio data.",1,claim 1,0,C
10606950,3,"3. The method of claim 2 , wherein the natural language processing comprises generating text corresponding to the audio data by operating a speech recognition algorithm on the audio data, and segmenting the text into the plurality of contiguous selectable sentences by operating a sentence segmentation algorithm on the text.",2,claim 2,0,C
10606950,4,"4. The method of claim 1 , wherein the time-shift command indicates a step backward in the audio data, and wherein the starting point is identified as one of: a starting point of a set of consecutive sentences of the plurality of contiguous selectable sentences related to a current topic of the audio data at the current time; a starting point of a set of consecutive sentences of the plurality of contiguous selectable sentences with a predefined relation to the current time; a starting point of a set of consecutive sentences of the plurality of contiguous selectable sentences associated with a current speaker at the current time, or a set of consecutive sentences of the plurality of contiguous selectable sentences associated with another speaker immediately preceding the set of consecutive sentences associated with the current speaker; and a starting point of a set of sentences of the plurality of contiguous selectable sentences that provide a content summarization of a time segment in the audio data preceding the current time.",3,claim 1,0,C
10606950,5,"5. The method of claim 4 , wherein the predefined relation is defined such that the set of consecutive sentences includes a roost recently started sentence at the current time.",4,claim 4,0,C
10606950,6,"6. The method of claim 4 , wherein at least one of the starting point, a number of consecutive sentences in the set of consecutive sentences of the plurality of contiguous selectable sentences, a number of sentences in the set of sentences of the plurality of contiguous selectable sentences, and the time segment is obtained as a function of a control variable comprising one or more of: a text complexity index at the current time, the text complexity index indicating a complexity of spoken language in the audio data at the current time; a category classification of the audio data; a duration of a pausing of the media player, if the time-shift command is triggered by the pausing; an occurrence rate of time-shifting commands at the current time in the audio data for a population of different users; and a user interaction with a command interface of the computing device, such as a duration of the user interaction with the command interface, a degree of pressure applied to the command interface, or a user selection of a command element among a plurality of command elements on the command interface.",5,claim 4,0,C
10606950,7,"7. The method of claim 1 , wherein the time-shift command indicates a step forward in the audio data, and wherein the starting point is identified as one of: a starting point of a sentence of the plurality of contiguous selectable sentences related to a topic that differs from a current topic of the audio data at the current time; a starting point of a sentence of the plurality of contiguous selectable sentences with a predefined relation to the current time; and a starting point of a sentence of the plurality of contiguous selectable sentences associated with a speaker that differs from a current speaker at the current time.",6,claim 1,0,C
10606950,8,"8. The method of claim 7 , wherein the predefined relation is given as a count of started sentences of the plurality of contiguous selectable sentences after the current time.",7,claim 7,0,C
10606950,9,"9. The method of claim 4 , further comprising: allocating a respective topic identifier to sentences in the audio data; wherein the method further comprises, for identifying the starting point: identifying the current topic by the topic identifier allocated to a most recently started sentence in the audio data at the current time, and searching among the topic identifiers based on the current topic to identity the starting point.",8,claim 4,0,C
10606950,10,"10. The method of claim 9 , wherein the starting point of the sentence of the plurality of contiguous selectable sentences is identified based on natural language processing of the audio data, and wherein the natural language processing comprises generating text corresponding to the audio data by operating a speech recognition algorithm on the audio data, and segmenting the text into the plurality of contiguous selectable sentences by operating a sentence segmentation algorithm on the text, said method further comprising operating a topic segmentation algorithm on the text generated by the speech recognition algorithm to allocate the respective topic identifier to the the plurality of contiguous selectable sentences in the audio data.",9,claim 9,0,C
10606950,11,"11. The method of claim 4 , further comprising: allocating a respective speaker identifier to the plurality of contiguous selectable sentences in the audio data; wherein the method further comprises, for identifying the starting point: identifying the current speaker by the speaker identifier allocated to a most recently started sentence of the plurality of contiguous selectable sentences in the audio data, and searching among the speaker identifiers based on the current speaker to identify the starting point.",10,claim 4,0,C
10606950,12,"12. The method of claim 11 , further comprising operating a voice recognition algorithm on the audio data to allocate the respective speaker identifier to the the plurality of contiguous selectable sentences in the audio data.",11,claim 11,0,C
10606950,13,"13. The method of claim 4 , wherein the starting point of the sentence of the plurality of contiguous selectable sentences is identified based on natural language processing of the audio data, and wherein the natural language processing comprises generating text corresponding to the audio data by operating a speech recognition algorithm on the audio data, and segmenting the text into the plurality of contiguous selectable sentences by operating a sentence segmentation algorithm on the text, said method further comprising: operating an automatic summarization algorithm on the text generated by the speech recognition algorithm, within the time segment in the audio data, to generate the content summarization.",12,claim 4,0,C
10606950,14,"14. The method of claim 1 , further comprising: identifying starting times in the audio data for sentences of the plurality of contiguous selectable sentences of spoken language in the audio data, and storing the starting times in an electronic memory, which is accessible to the processor, and wherein the method further comprises, after detecting the time-shift command: searching the electronic memory, based on the current time and in view of the time-shift command, to identify the starting point among the starting times corresponding to the sentences of the plurality contiguous selectable sentences of the spoken language in the audio data, and playing the audio data at the starting point so as to play one or more sentences of the plurality of contiguous selectable sentences following upon the starting point in the audio data.",13,claim 1,0,C
10606950,15,"15. The method of claim 14 , wherein the starting point of the sentence the plurality of contiguous selectable sentences is identified based on natural language processing of the audio data, wherein the natural language processing comprises generating text corresponding to the audio data by operating a speech recognition algorithm on the audio data, and segmenting the text into the plurality of contiguous selectable sentences by operating a sentence segmentation algorithm on the text, wherein the text comprises a sequence of words, and wherein the words are stored in the electronic memory in association with a respective time point, and wherein the sentence segmentation algorithm is operated on the words, before or during playback of the audio data, to segment the words into the plurality of contiguous selectable sentences and identify the starting times.",14,claim 14,0,C
10606950,16,"16. The method of claim 1 , wherein the time-shift command is detected by detecting a user interaction with a dedicated control element in a command interface of the computer device.",15,claim 1,0,C
10606950,17,"17. The method of claim 1 , wherein the time-shift command indicates a step backward in the audio data and is detected by detecting an instruction to pause the playback of the audio data.",16,claim 1,0,C
10606950,18,"18. A non-transitory computer-readable medium comprising computer instructions which, when executed by a processor of a computing device, cause the processor to perform operations comprising: operating media player on the computing device to play speech-containing audio data, detecting a user-initiated time-shift command to step forward or backward in the audio data, and after detecting the time-shift command at a current time in the audio data, identifying a starting point of a sentence of a plurality of contiguous selectable sentences in the audio data and operating the media player to play the audio data from the starting point, at least a portion of the audio data being organized into the plurality of contiguous selectable sentences in a time window that encompasses the current time for any value of the current time.",17,,0,C
10606950,19,"19. A computing device for playback of speech-containing audio data, said computing device being configured to: operate a media player on the computing device to play the audio data, detect a user-initiated time-shift command to step forward or backward in the audio data, and after detecting the time-shift command at a current time in the audio data, identify a starting point of a sentence of a plurality of contiguous selectable sentences in the audio data and operate the media player to play the audio data from the starting point, at least a portion of the audio data being organized into the plurality of contiguous selectable sentences in a time window that encompasses the current time for any value of the current time.",18,,0,C
10606951,1,"1. A method for optimizing resource allocation to a bid request response based on a cognitive analysis of natural language artifacts, comprising: obtaining a request and a plurality of supporting artifacts in a natural language; performing a cognitive analysis of the request and supporting artifacts to extract a set of information entities; normalizing the extracted information entities using a lexical-relations based graph database to classify the set of extracted information entities as standardized concepts with which the set of extracted information entities are most closely associated; identifying, for a portion of the request, at least a subset of the set of the standardized concepts, with which the set of extracted information entities are most closely associated, as a set of parameters corresponding with a set of predetermined variables; weighting each variable of the set of predetermined variables according to a likelihood that the variable indicates a relevance of a resource to the portion of the request; and assigning a particular resource to the bid request response in response to a probability that the particular resource is relevant to the portion of the request based on the weighted variables.",0,,1,C
10606951,2,"2. The method of claim 1 , the method further comprising generating a list of probabilities that a set of resources are relevant to the portion of the request.",1,claim 1,0,C
10606951,3,"3. The method of claim 1 , the determining a probability further comprising applying a first-order supervised multi-label learning classification algorithm to the weighted set of predetermined variables.",2,claim 1,0,C
10606951,4,"4. The method of claim 1 , wherein the probability that the particular resource is relevant to the portion of the request has a variance and the method further comprises iterating the identifying, weighting, and determining until the variance is below a pre-defined threshold.",3,claim 1,0,C
10606951,5,"5. The method of claim 1 , wherein the plurality of supporting artifacts comprises an artifact selected from the group consisting of: historical data, public information, and correspondence.",4,claim 1,0,C
10606951,6,"6. The method of claim 1 , wherein at least one variable of the set of predetermined variables is a variable selected from the group consisting of: request type, deal size, techno-functional area of a deal, deal type, deal coverage, industry, sub-domain of an industry, techno-functional area of an industry, geography, client size, historical spending, inclination to a bidder, inclination to partners, bidder strength in a domain, sales organization size of a bidder, section of the request, and techno-functional entities of the request.",5,claim 1,0,C
10606951,7,"7. The method of claim 1 , wherein the likelihood that the variable indicates a relevance of a resource to the portion of the request is based on historical data processed by a self-learning system.",6,claim 1,0,C
10606951,8,"8. A computer system for optimizing resource allocation to a bid request response based on a cognitive analysis of natural language artifacts, the computer system comprising: a memory medium comprising program instructions; a bus coupled to the memory medium; and a processor, for executing the program instructions, coupled to a bid request analysis engine via the bus that when executing the program instructions causes the system to: obtain a request and a plurality of supporting artifacts in a natural language; perform a cognitive analysis of the request and supporting artifacts to extract a set of information entities; normalize the extracted information entities using a lexical-relations based graph database to classify the set of extracted information entities as standardized concepts with which the set of extracted information entities are most closely associated; identify, for a portion of the request, at least a subset of the set of the standardized concepts, with which the set of extracted information entities are most closely associated, as a set of parameters corresponding with a set of predetermined variables; weight each variable of the set of predetermined variables according to a likelihood that the variable indicates a relevance of a resource to the portion of the request; and assign a particular resource to the bid request response in response to a probability that the particular resource is relevant to the portion of the request based on the weighted variables.",7,,0,C
10606951,9,"9. The computer system of claim 8 , the instructions further causing the system to generate a list of probabilities that a set of resources are relevant to the portion of the request.",8,claim 8,0,C
10606951,10,"10. The computer system of claim 8 , the instructions further causing the system to apply a first-order supervised multi-label learning classification algorithm to the weighted set of predetermined variables.",9,claim 8,0,C
10606951,11,"11. The computer system of claim 8 , wherein the probability that the particular resource is relevant to the portion of the request has a variance and the instructions further cause the system to iterate the identifying, weighting, and determining until the variance is below a pre-defined threshold.",10,claim 8,0,C
10606951,12,"12. The computer system of claim 8 , wherein the plurality of supporting artifacts comprises an artifact selected from the group consisting of: historical data, public information, and correspondence.",11,claim 8,0,C
10606951,13,"13. The computer system of claim 8 , wherein at least one variable of the set of predetermined variables is a variable selected from the group consisting of: request type, deal size, techno-functional area of a deal, deal type, deal coverage, industry, sub-domain of an industry, techno-functional area of an industry, geography, client size, historical spending, inclination to a bidder, inclination to partners, bidder strength in a domain, sales organization size of a bidder, section of the request, and techno-functional entities of the request.",12,claim 8,0,C
10606951,14,"14. The computer system of claim 8 , wherein the likelihood that the variable indicates a relevance of a resource to the portion of the request is based on historical data processed by a self-learning system.",13,claim 8,0,C
10606951,15,"15. A computer program product for optimizing resource allocation to a bid request response based on a cognitive analysis of natural language artifacts, the computer program product comprising a computer readable hardware storage device, and program instructions stored on the computer readable hardware storage device, to: obtain a request and a plurality of supporting artifacts in a natural language; perform a cognitive analysis of the request and supporting artifacts to extract a set of information entities; normalize the extracted information entities using a lexical-relations based graph database to classify the set of extracted information entities as standardized concepts with which the set of extracted information entities are most closely associated; identify, for a portion of the request, at least a subset of the set of the standardized concepts, with which the set of extracted information entities are most closely associated, as a set of parameters corresponding with a set of predetermined variables; weight each variable of the set of predetermined variables according to a likelihood that the variable indicates a relevance of a resource to the portion of the request; and assign a particular resource to the bid request response in response to a probability that the particular resource is relevant to the portion of the request based on the weighted variables.",14,,0,C
10606951,16,"16. The computer program product of claim 15 , the computer readable storage device further comprising instructions to generate a list of probabilities that a set of resources are relevant to the portion of the request.",15,claim 15,0,C
10606951,17,"17. The computer program product of claim 15 , the computer readable storage device further comprising instructions to apply a first-order supervised multi-label learning classification algorithm to the weighted set of predetermined variables.",16,claim 15,0,C
10606951,18,"18. The computer program product of claim 15 , wherein the probability that the particular resource is relevant to the portion of the request has a variance and the computer readable storage device further comprising instructions to iterate the identifying, weighting, and determining until the variance is below a pre-defined threshold.",17,claim 15,0,C
10606951,19,"19. The computer program product of claim 15 , wherein at least one variable of the set of predetermined variables is a variable selected from the group consisting of: request type, deal size, techno-functional area of a deal, deal type, deal coverage, industry, sub-domain of an industry, techno-functional area of an industry, geography, client size, historical spending, inclination to a bidder, inclination to partners, bidder strength in a domain, sales organization size of a bidder, section of the request, and techno-functional entities of the request.",18,claim 15,0,C
10606951,20,"20. The computer program product of claim 15 , wherein the likelihood that the variable indicates a relevance of a resource to the portion of the request is based on historical data processed by a self-learning system.",19,claim 15,0,C
10606952,1,"1. A computer-implemented method, comprising: for a natural language input, performing, by a computing system, a process comprising: receiving the natural language input; performing a syntactic analysis of the natural language input to produce one or more linguistic analysis results; creating multiple semantic structures to represent the natural language input in part by using the one or more linguistic analysis results and knowledge induced from a large language corpora, wherein creating the multiple semantic structures includes creating multiple generative semantic primitive (GSP) structures by defining a predicate and one or more roles for a GSP structure of the multiple GSP structures to express a first understanding of the natural language input, the first understanding of the natural language input being based at least in part on the one or more linguistic analysis results, wherein defining the one or more roles includes mapping one or more entities in the natural language input to the one or more roles; associating a semantic structure of the multiple semantic structures with a particular theme or a particular context of the natural language input; engaging in a dialog session with a human user to receive input from the human user to use by the computing system to evaluate the multiple semantic structures as an understanding of the natural language input; and revising the multiple semantic structures based on one or more responses from the human user to improve the understanding of the natural language input, wherein revising the multiple semantic structures includes defining at least one of a new predicate or one or more new roles for at least one new GSP structure associated with the semantic structure, the at least one new GSP structure expressing a second understanding of the natural language input based at least in part on the one or more responses, wherein defining the at least one of the new predicate or the one or more new roles is based at least in part on the at least one new GSP structure having an above threshold probability of being included in the semantic structure associated with the particular theme or the particular context of the natural language input; and repeating, by the computing system, the process with the natural language input at least once to form one or more additional GSP structures for subsequent natural language inputs, wherein the subsequent natural language inputs have similar or increasingly higher reading comprehension levels.",0,,1,D
10606952,2,"2. The computer-implemented method of claim 1 , wherein the one or more linguistic analysis results comprises at least one of a syntactic parse, a predicate argument structure, entity type, or co-references of the natural language input.",1,claim 1,0,D
10606952,3,"3. The computer-implemented method of claim 1 , wherein creating the multiple semantic structures further includes forming the multiple GSP structures using the one or more linguistic analysis results, data maintained in a current world model that expresses confidences in how accurately the multiple GSP structures represent the natural language input, and the knowledge induced from the large language corpora.",2,claim 1,0,D
10606952,4,"4. The computer-implemented method of claim 3 , further comprising revising the multiple GSP structures based on the one or more responses from the human user and updating the current world model with information learned from the human user or used in revising the multiple GSP structures.",3,claim 3,0,D
10606952,5,"5. The computer-implemented method of claim 1 , wherein creating the multiple semantic structures further includes: forming the multiple GSP structures; and forming multiple frame structures composed of one or more GSP structures.",4,claim 1,0,D
10606952,6,"6. The computer-implemented method of claim 1 , wherein engaging in the dialog session comprises: generating one or more questions for the human user to answer to evaluate the multiple semantic structures; submitting the one or more questions for presentation via a computer user interface to the human user; and receiving the one or more responses from the human user.",5,claim 1,0,D
10606952,7,"7. The computer-implemented method of claim 1 , wherein engaging in the dialog session comprises engaging in multiple dialog sessions with multiple human users.",6,claim 1,0,D
10606952,8,"8. A computer-implemented method, comprising: receiving, by a computing system, multiple first natural language stories of a first reading comprehension level over a first period of time; for a story of the multiple first natural language stories, developing a story model representation of the story by conducting an understanding process comprising: parsing, by the computer system, the story to produce a syntactic representation of the story; performing, by the computer system, a predicate argument structure (PAS) analysis on the syntactic representation of the story; assigning, by the computer system, one or more entity types to one or more words in the story; determining, by the computer system, co-reference chains in the one or more words in the story; inferring, by the computing system, one or more semantic structures as a semantic representation of the story using, at least in part, the syntactic representation of the story; submitting, by the computing system to a user computing device, one or more questions for a human user to answer to evaluate the one or more semantic structures representing the story; responsive to one or more responses from the human user, revising the one or more semantic structures; and iterating the understanding process until one or more final semantic structures are defined, wherein a final version of the story model includes the one or more final semantic structures; storing, by the computing system, multiple first story models that were defined by iterating the understanding process over the first period of time for the multiple first natural language stories of the first reading comprehension level, wherein a first story model of the multiple first story models includes one or more first semantic structures; receiving, by the computing system, multiple second natural language stories of a second reading comprehension level over a second period of time, wherein the second period of time is after the first period of time; and for a second story of the multiple second natural language stories, developing an associated story model representation of the second story by conducting the understanding process for the second story over the second period of time and using, in part, information learned from conducting the understanding process of the multiple first story models for the multiple first natural language stories, wherein the associated story model representation includes at least one second semantic structure based at least in part on combining at least one of the one or more first semantic structures with another semantic structure.",7,,0,D
10606952,9,"9. The computer-implemented method of claim 8 , further comprising receiving reading comprehension questions along with the multiple first natural language stories and the multiple second natural language stories.",8,claim 8,0,D
10606952,10,"10. The computer-implemented method of claim 8 , wherein parsing the story comprises syntactically analyzing the story to produce one or more linguistic analysis results comprising at least one of a syntactic parse, a predicate argument structure, entity type, or co-references of the story.",9,claim 8,0,D
10606952,11,"11. The computer-implemented method of claim 10 , wherein inferring the one or more semantic structures as the semantic representation of the story comprises creating multiple generative semantic primitive (GSP) structures using the one or more linguistic analysis results, data maintained in a current world model that expresses confidences in how accurately the multiple GSP structures represent natural language in the story, and knowledge induced from large language corpora.",10,claim 10,0,D
10606952,12,"12. The computer-implemented method of claim 11 , wherein inferring the one or more semantic structures as the semantic representation of the story further comprises forming multiple frame structures composed of subsets of the multiple GSP structures.",11,claim 11,0,D
10606952,13,"13. The computer-implemented method of claim 8 , wherein revising the one or more semantic structures until the one or more final semantic structures are defined comprises iteratively submitting questions to the user and receiving user responses to revise the one or more semantic structures until a termination condition is reached, the termination condition being a function of a confidence value that is calculated to express an extent to which the one or more semantic structures fit the story.",12,claim 8,0,D
10606952,14,"14. The computer-implemented method of claim 8 , wherein the second natural language stories have a higher reading comprehension level than the first natural language stories.",13,claim 8,0,D
10606952,15,"15. The computer-implemented method of claim 8 , further comprising continuing to receive natural language stories of higher reading comprehension levels beyond the second natural language stories and conducting the understanding process on the natural language stories of the higher reading comprehension levels.",14,claim 8,0,D
10606952,16,"16. A computing system, comprising: a current world model maintained in a database; one or more processors to access the current world model maintained in the database; and memory coupled to the one or more processors, the memory storing computer executable instructions that, when executed by the one or more processors, perform acts comprising: processing multiple natural language stories of varying reading comprehension levels over time, the processing including inferring semantic structures as representations of the multiple natural language stories, in part by using information maintained in the current world model, and conducting dialog sessions with one or more human users to evaluate the semantic structures as understandings of the multiple natural language stories, wherein the processing includes: processing, over a first time period, a first story of the multiple natural language stories having a first reading comprehension level; performing analysis on the first story to produce a syntactic representation of the first story; performing predicate argument structure (PAS) analysis on the syntactic representation of the first story; assigning one or more entity types to one or more words in the first story; determining co-reference chains in the one or more words in the first story; inferring one or more first semantic structures as representations of the first story; processing, over a second time period after the first time period, a second story of the multiple natural language stories having a second reading comprehension level that is more difficult than the first reading comprehension level; and inferring at least one second semantic structure as a representation of the second story based at least in part on expanding at least one of the one or more first semantic structures to include a new semantic structure; and expanding the current world model in the database over time to include the semantic structures inferred from the multiple natural language stories and evaluated by the one or more human users.",15,,0,D
10606952,17,"17. The computing system of claim 16 , wherein the multiple natural language stories being processed over time are of increasingly higher reading comprehension levels.",16,claim 16,0,D
10606952,18,"18. The computing system of claim 16 , wherein the memory stores instructions perform further acts comprising: performing syntactic analysis on the multiple natural language stories to produce linguistic analysis results; creating multiple generative semantic primitive (GSP) structures to represent the multiple natural language stories in part by using the linguistic analysis results, the information maintained in the current world model, and knowledge induced from a large language corpora; and forming frame structures composed of the multiple GSP structures.",17,claim 16,0,D
10606952,19,"19. The computing system of claim 16 , wherein conducting the dialog sessions comprises: generating one or more questions for a human user to answer to evaluate the semantic structures; submitting the one or more questions for presentation via a computer user interface to the human user; and receiving one or more responses from the human user.",18,claim 16,0,D
10606952,20,"20. The computing system of claim 19 , wherein conducting the dialog sessions further comprises submitting reading comprehension questions to the human user.",19,claim 19,0,D
10606952,21,"21. The computing system of claim 19 , wherein the memory stores instructions perform further acts comprising: revising the semantic structures based on the one or more responses from the human user; and updating the current world model with information learned from the human user or used in revising the semantic structures.",20,claim 19,0,D
10606952,22,"22. A computing system, comprising: a datastore containing a current world model that expresses beliefs about how natural language is understood; one or more processors; and memory coupled to the one or more processors, the memory storing computer-executable modules comprising: a story parsing engine to syntactically analyze a natural language story to produce linguistic analysis results; a knowledge induction engine to induce information from a large language corpora to form induced information, wherein the knowledge induction engine comprises a word sense disambiguator to disambiguate word senses; a knowledge integration engine to form semantic structures that provide a semantic representation of the natural language story, the knowledge integration engine using the linguistic analysis results, information from the current world model, and the induced information to form the semantic structures, and to associate at least one semantic structure of the semantic structures with a particular context of the natural language story, wherein forming the semantic structures includes defining multiple generative semantic primitive (GSP) structures with one or more sets of roles; and a dialog engine to facilitate a dialog session with a human user by generating one or more questions, and submitting the one or more questions for presentation via a computer user interface to a computing device used by the human user and collecting one or more responses from the computing device indicative of input from the human user; wherein the knowledge integration engine revises the semantic structures based on the one or more responses from the human user and updates the current world model in the datastore, wherein revising the semantic structures includes defining at least one new GSP structure with a new set of roles for the semantic structure, the at least one new GSP structure having at least a threshold probability of being included with the semantic structure associated with the particular context of the natural language story; and wherein the story parsing engine, the knowledge integration engine, and the dialog engine process multiple stories over time to build the information in the current world model.",21,,0,D
10606952,23,"23. The computing system of claim 22 , wherein the semantic structures comprise the multiple GSP structures and frame structures composed of collections of GSP structures that are related by a common context.",22,claim 22,0,D
10606952,24,"24. The computing system of claim 22 , wherein the knowledge integration engine continues to revise the semantic structures until a termination condition is reached, the termination condition being a function of a confidence value that is calculated to express an extent to which the semantic structures fit the natural language story.",23,claim 22,0,D
10606952,25,"25. The computer-implemented method of claim 1 , wherein engaging in the dialog session comprises engaging in multiple dialog sessions with multiple human users in parallel and aggregating responses from the multiple human users to evaluate an extent to which the semantic structures represent the natural language input.",24,claim 1,0,D
10606952,26,"26. The computing system of claim 22 , wherein the dialog engine facilitates multiple dialog sessions with multiple human users in parallel and aggregates responses from the multiple human users to evaluate an extent to which the semantic structures represent the natural language story.",25,claim 22,0,D
10606953,1,"1. A method to extract relationships from text, the method comprising: receiving a training set of sentences comprising labeled objects and subjects for creating an initial relationship model; receiving a set of unlabeled sentences; determining, via a processor, objects and subjects from the set of unlabeled sentences based on the initial model; displaying the determined objects and subjects from the set of unlabeled sentences to a user for feedback and approval; receiving an indication of whether the determined objects and subjects from the set of unlabeled sentences are correct; and updating the initial relationship model based on the received indication, wherein creating the initial relationship model comprises executing a concept tagger against the training set of sentences to determine a domain and range of the sentences, wherein the domain and range is determined based upon a most frequently occurring subject-object semantic type pair.",0,,1,D
10606953,2,"2. The method of claim 1 , wherein the training set of sentences comprises less than thirty sentences.",1,claim 1,0,D
10606953,3,"3. The method of claim 1 , wherein creating the initial relationship model further comprises extracting word tokens from the training set of sentences wherein word tokens comprise words that are located between the subjects and the objects.",2,claim 1,0,D
10606953,4,"4. The method of claim 3 , wherein creating the initial relationship model further comprises determining extended word tokens comprising synonyms of the extracted word tokens.",3,claim 3,0,D
10606953,5,"5. The method of claim 4 , wherein the extended word tokens are weighted based on a similarity to the extracted word tokens.",4,claim 4,0,D
10606953,6,"6. A non-transitory computer-readable medium comprising instructions that when executed by a processor perform a method to extract relationships from text, the method comprising: receiving a training set of sentences comprising labeled objects and subjects for creating an initial relationship model; receiving a set of unlabeled sentences; determining, via a processor, objects and subjects from the set of unlabeled sentences based on the initial model; displaying the determined objects and subjects from the set of unlabeled sentences to a user for feedback and approval; receiving an indication of whether the determined objects and subjects from the set of unlabeled sentences are correct; and updating the initial relationship model based on the received indication, wherein creating the initial relationship model comprises executing a concept tagger against the training set of sentences to determine a domain and range of the sentences, wherein the domain and range is determined based upon a most frequently occurring subject-object semantic type pair.",5,,0,D
10606953,7,"7. The medium of claim 6 , wherein the training set of sentences comprises less than thirty sentences.",6,claim 6,0,D
10606953,8,"8. The medium of claim 6 , wherein creating the initial relationship model further comprises extracting word tokens from the training set of sentences wherein word tokens comprise words that are located between the subjects and the objects.",7,claim 6,0,D
10606953,9,"9. The medium of claim 6 , wherein creating the initial relationship model further comprises determining extended word tokens comprising synonyms of the extracted word tokens.",8,claim 6,0,D
10606953,10,"10. The medium of claim 9 , wherein the extended word tokens are weighted based on a similarity to the extracted word tokens.",9,claim 9,0,D
10606953,11,"11. A system to determine an asset event, the system comprising: a processor; and a non-transitory computer-readable medium comprising instructions that when executed by the processor perform a method to extract relationships from text, the method comprising: receiving a training set of sentences comprising labeled objects and subjects for creating an initial relationship model; receiving a set of unlabeled sentences; determining objects and subjects from the set of unlabeled sentences based on the initial model; displaying the determined objects and subjects from the set of unlabeled sentences to a user for feedback and approval; receiving an indication of whether the determined objects and subjects from the set of unlabeled sentences are correct; and updating the initial relationship model based on the received indication, wherein creating the initial relationship model comprises executing a concept tagger against the training set of sentences to determine a domain and range of the sentences, wherein the domain and range is determined based upon a most frequently occurring subject-object semantic type pair.",10,,0,D
10606953,12,"12. The system of claim 11 , wherein the training set of sentences comprises less than thirty sentences.",11,claim 11,0,D
10606953,13,"13. The system of claim 11 , wherein creating the initial relationship model further comprises extracting word tokens from the training set of sentences wherein word tokens comprise words that are located between the subjects and the objects.",12,claim 11,0,D
10606953,14,"14. The system of claim 13 , wherein creating the initial relationship model further comprises determining extended word tokens comprising synonyms of the extracted word tokens.",13,claim 13,0,D
10606953,15,"15. The system of claim 14 , wherein the extended word tokens are weighted based on a similarity to the extracted word tokens.",14,claim 14,0,D
10606954,1,"1. A method for text segmentation for topic modelling by a processor, comprising: analyzing real-time conversation data, wherein time intervals between messages being received into the conversation data are recorded; defining the messages as burst segments or reflection segments according to the analyzing; wherein the burst segments comprise successive messages received into the conversation data within a first time interval and the reflection segments comprise multiple messages each received into the conversation data having an inter-arrival time outside the first time interval; enhancing, using a machine learning mechanism, one or more topic modelling operations for text segmentation using the burst segments or reflection segments; and presenting, via a display, a summary of the one or more topic modelling operations to a user according to an output of a text mining analysis implementing the one or more topic modelling operations enhanced by the machine learning mechanism.",0,,1,D
10606954,2,"2. The method of claim 1 , further including using the burst segments or reflection segments to determine optimal topic model sizes.",1,claim 1,0,D
10606954,3,"3. The method of claim 1 , further including selecting a topic cluster size using the one or more enhanced topic modelling operations.",2,claim 1,0,D
10606954,4,"4. The method of claim 1 , further including selecting a topic term size using the one or more enhanced topic modelling operations.",3,claim 1,0,D
10606954,5,"5. The method of claim 1 , further including determining a percentage of unique stop words.",4,claim 1,0,D
10606954,6,"6. The method of claim 1 , further including altering a topic cluster size and a topic term size until a percentage of unique stop words are maximized.",5,claim 1,0,D
10606954,7,"7. A system for text segmentation for topic modelling in a computing environment, comprising: one or more computers with executable instructions that when executed cause the system to: analyze real-time conversation data, wherein time intervals between messages being received into the conversation data are recorded; define the messages as burst segments or reflection segments according to the analyzing; wherein the burst segments comprise successive messages received into the conversation data within a first time interval and the reflection segments comprise multiple messages each received into the conversation data having an inter-arrival time outside the first time interval; enhance, using a machine learning mechanism, one or more topic modelling operations for text segmentation using the burst segments or reflection segments; and present, via a display, a summary of the one or more topic modelling operations to a user according to an output of a text mining analysis implementing the one or more topic modelling operations enhanced by the machine learning mechanism.",6,,0,D
10606954,8,"8. The system of claim 7 , wherein the executable instructions when executed cause the system to use the burst segments or reflection segments to determine optimal topic model sizes.",7,claim 7,0,D
10606954,9,"9. The system of claim 7 , wherein the executable instructions when executed cause the system to select a topic cluster size using the one or more enhanced topic modelling operations.",8,claim 7,0,D
10606954,10,"10. The system of claim 7 , wherein the executable instructions when executed cause the system to select a topic term size using the one or more enhanced topic modelling operations.",9,claim 7,0,D
10606954,11,"11. The system of claim 7 , wherein the executable instructions when executed cause the system to determine a percentage of unique stop words.",10,claim 7,0,D
10606954,12,"12. The system of claim 7 , wherein the executable instructions when executed cause the system to alter a topic cluster size and a topic term size until a percentage of unique stop words are maximized.",11,claim 7,0,D
10606954,13,"13. A computer program product for, by a processor, text segmentation for topic modelling, the computer program product comprising a non-transitory computer-readable storage medium having computer-readable program code portions stored therein, the computer-readable program code portions comprising: an executable portion that analyzes real-time conversation data, wherein time intervals between messages being received into the conversation data are recorded; an executable portion that defines the messages as burst segments or reflection segments according to the analyzing; wherein the burst segments comprise successive messages received into the conversation data within a first time interval and the reflection segments comprise multiple messages each received into the conversation data having an inter-arrival time outside the first time interval; an executable portion that enhances, using a machine learning mechanism, one or more topic modelling operations for text segmentation using the burst segments or reflection segments; and an executable portion that presents, via a display, a summary of the one or more topic modelling operations to a user according to an output of a text mining analysis implementing the one or more topic modelling operations enhanced by the machine learning mechanism.",12,,0,D
10606954,14,"14. The computer program product of claim 13 , further including an executable portion that uses the burst segments or reflection segments to determine optimal topic model sizes.",13,claim 13,0,D
10606954,15,"15. The computer program product of claim 13 , further including an executable portion that selects a topic cluster size using the one or more enhanced topic modelling operations.",14,claim 13,0,D
10606954,16,"16. The computer program product of claim 13 , further including an executable portion that: selects a topic term size; and determine a percentage of unique stop words.",15,claim 13,0,D
10606954,17,"17. The computer program product of claim 13 , further including an executable portion that alters a topic cluster size and a topic term size until a percentage of unique stop words are maximized.",16,claim 13,0,D
10606955,1,"1. A system comprising: a database containing a corpus of text strings, the text strings respectively associated with pre-calculated vector representations of the text strings, wherein each of the pre-calculated vector representations is an aggregation of vector representations of words in the associated text string; an artificial neural network (ANN) including an encoder and a decoder, wherein the ANN has been trained with mappings between: (i) the words in the text strings, and (ii) for each respective word, one or more substrings of the text strings in which the word appears, wherein the encoder generates, from the respective words, vector representations of the respective words; and a server device configured to: receive, from a client device, an input text string, generate an input aggregate vector representation of the input text string by applying the encoder to words in the input text string, compare the input aggregate vector representation to the pre-calculated vector representations, based on the comparison, identify a relevant subset of the pre-calculated vector representations, and transmit, to the client device, the text strings from the corpus of text strings that are associated with the relevant subset of the pre-calculated vector representations.",0,,1,D
10606955,2,"2. The system of claim 1 , wherein comparing the input aggregate vector representation to the pre-calculated vector representations comprises: calculating respective cosine similarities between the input aggregate vector representation and each of the pre-calculated vector representations.",1,claim 1,0,D
10606955,3,"3. The system of claim 2 , wherein identifying the relevant subset of the pre-calculated vector representations comprises: identifying, as the relevant subset, pre-calculated vector representations associated with a set of cosine similarities that are greater than a pre-determined value.",2,claim 2,0,D
10606955,4,"4. The system of claim 2 , wherein identifying the relevant subset of the pre-calculated vector representations comprises: identifying, as the subset, pre-calculated vector representations with a set of k highest cosine similarities, wherein k is at least 2.",3,claim 2,0,D
10606955,5,"5. The system of claim 1 , wherein the vector representations of the respective words have at least 16 entries.",4,claim 1,0,D
10606955,6,"6. The system of claim 1 , wherein the decoder maps the vector representations of the respective words of a particular text string to the one or more substrings of the particular text string.",5,claim 1,0,D
10606955,7,"7. The system of claim 1 , wherein a substring of a particular text string consists of two or more words in the particular text string.",6,claim 1,0,D
10606955,8,"8. The system of claim 1 , wherein a substring of a particular text string consists of all words in the particular text string.",7,claim 1,0,D
10606955,9,"9. The system of claim 1 , wherein an input layer of the ANN contains one node for each word in a pre-established dictionary of words, wherein a hidden layer of the ANN contains one node for each entry in the vector representations of the respective words, and wherein an output layer of the ANN contains one node for each word in the pre-established dictionary.",8,claim 1,0,D
10606955,10,"10. The system of claim 1 , wherein the pre-calculated vector representations of the text strings are respective summations of the vector representations of words in the associated text strings.",9,claim 1,0,D
10606955,11,"11. The system of claim 1 , wherein the text strings are from incident reports relating to operation of a managed network.",10,claim 1,0,D
10606955,12,"12. The system of claim 11 , wherein identifying the relevant subset of the pre-calculated vector representations comprises: identifying, as the relevant subset, pre-calculated vector representations associated with incident reports that are not older than a pre-determined age.",11,claim 11,0,D
10606955,13,"13. The system of claim 1 , wherein the server device is further configured to: transmit, to the client device, a representation of a graphical user interface through which the client device can specify one or more of: one or more tables in the database that contain the text strings, first filter parameters to apply to the text strings, second filter parameters to apply to the text strings associated with the relevant subset, or a training frequency of the ANN.",12,claim 1,0,D
10606955,14,"14. A method comprising: receiving, by a server device and from a client device, an input text string, wherein a database contains a corpus of text strings, the text strings respectively associated with pre-calculated vector representations of the text strings, wherein each of the pre-calculated vector representations is an aggregation of vector representations of words in the associated text string, wherein the server device also has access to an encoder of an artificial neural network (ANN), wherein the ANN also includes a decoder, and wherein the ANN was trained with mappings between: (i) the words in the text strings, and (ii) for each respective word, one or more substrings of the text strings in which the word appears; generating, by the server device, an input aggregate vector representation of the input text string by applying the encoder to words in the input text string; comparing, by the server device, the input aggregate vector representation to the pre-calculated vector representations; based on the comparison, identifying, by the server device, a relevant subset of the pre-calculated vector representations; and transmitting, by the server device and to the client device, the text strings from the corpus of text strings that are associated with the relevant subset of the pre-calculated vector representations.",13,,0,D
10606955,15,"15. The method of claim 14 , wherein comparing the input aggregate vector representation to the pre-calculated vector representations comprises: calculating respective cosine similarities between the input aggregate vector representation and each of the pre-calculated vector representations.",14,claim 14,0,D
10606955,16,"16. The method of claim 15 , wherein identifying the relevant subset of the pre-calculated vector representations comprises: identifying, as the relevant subset, pre-calculated vector representations associated with a set of cosine similarities that are greater than a pre-determined value.",15,claim 15,0,D
10606955,17,"17. The method of claim 15 , wherein identifying the relevant subset of the pre-calculated vector representations comprises: identifying, as the subset, pre-calculated vector representations with a set of k highest cosine similarities, wherein k is at least 2.",16,claim 15,0,D
10606955,18,"18. The method of claim 14 , wherein the text strings are from incident reports relating to operation of a managed network.",17,claim 14,0,D
10606955,19,"19. The method of claim 18 , wherein identifying the relevant subset of the pre-calculated vector representations comprises: identifying, as the relevant subset, pre-calculated vector representations associated with incident reports that are not older than a pre-determined age.",18,claim 18,0,D
10606955,20,"20. An article of manufacture including a non-transitory computer-readable medium, having stored thereon program instructions that, upon execution by a computing system, cause the computing system to perform operations comprising: receiving, from a client device, an input text string, wherein a database contains a corpus of text strings, the text strings respectively associated with pre-calculated vector representations of the text strings, wherein each of the pre-calculated vector representations is an aggregation of vector representations of words in the associated text string, wherein the computing system also has access to an encoder of an artificial neural network (ANN), wherein the ANN also includes a decoder, and wherein the ANN was trained with mappings between: (i) the words in the text strings, and (ii) for each respective word, one or more sub strings of the text strings in which the word appears; generating an input aggregate vector representation of the input text string by applying the encoder to words in the input text string; comparing the input aggregate vector representation to the pre-calculated vector representations; based on the comparison, identifying a relevant subset of the pre-calculated vector representations; and transmitting, to the client device, the text strings from the corpus of text strings that are associated with the relevant subset of the pre-calculated vector representations.",19,,0,D
10606956,1,"1. A semantic Textual Similarity System comprising: a first Long Short Term Memory, LSTM, branch adapted to be operative, to determine text similarity, on a first text corpus, the first text corpus comprising a plurality of first text elements; wherein each first text element has a first number of distinct subdivisions; a second LSTM branch adapted to be operative, to determine text similarity, on a second text corpus, the second text corpus comprising a plurality of second text elements, wherein each second text element (t 1 . . . t v ) has a second number of distinct subdivisions; wherein the first LSTM branch comprises for each of the first number of distinct subdivisions a first branch LSTM level, each first branch LSTM level being adapted to be operative, for each of the first text elements, on an associated subdivision of the first text element utilising first weights to determine a hidden state vector associated to the first branch LSTM level, each first weight being associated to a subelement of a subdivision of a first text element; wherein the second LSTM branch comprises for each of the second number of distinct subdivisions a second branch LSTM level, each second branch LSTM level being adapted to be operative, for each of the second text elements, on an associated subdivision utilising a plurality of second weights to determine a hidden state vector associated to the second branch LSTM level; each second weight being associated to a subelement of a subdivision of a second text element; wherein the first weights and second weights are shared between the first LSTM branch and the second LSTM branch for iteratively determining similarity between first text elements and second text elements based on hidden state vectors.",0,,1,D
10606956,2,"2. The system according to claim 1 , wherein a first LSTM branch level is adapted to determine a hidden state vector based on second weights.",1,claim 1,0,D
10606956,3,"3. The system according to claim 1 , wherein a first LSTM branch level is adapted to determine a hidden state vector based on second weights from more than one second LSTM branch level.",2,claim 1,0,D
10606956,4,"4. The system according to claim 1 , wherein the first number of subdivisions is smaller than the second number of subdivisions.",3,claim 1,0,D
10606956,5,"5. The system according to claim 1 , wherein a subdivision of a first text element and/or a second text element consists of one sentence.",4,claim 1,0,D
10606956,6,"6. The system according to claim 1 , wherein each level of the first LSTM branch is connected to each level of the second LSTM branch for sharing weights.",5,claim 1,0,D
10606956,7,"7. The system according to claim 1 , wherein the first and the second LSTM branches are connected to a topic model.",6,claim 1,0,D
10606956,8,"8. The system according to claim 1 , wherein the system is adapted to determine similarity between an input text element and a second text element y based on learning performed on the first text corpus and the second text corpus.",7,claim 1,0,D
10606956,9,"9. The system according to claim 1 , wherein the system is adapted to evaluate similarity between first text elements and second text elements based on a plurality of channels.",8,claim 1,0,D
10606956,10,"10. The system according to claim 1 , wherein the system is adapted to evaluate similarity between first text elements and second text elements based on a Manhattan metric.",9,claim 1,0,D
10606956,11,"11. The system according to claim 1 , wherein the first text elements are queries for an industrial ticket system, and the second text elements represent a set of solutions for queried problems.",10,claim 1,0,D
10606957,1,"1. A system for translating natural language policy text into logical access control policy code, comprising: a policy composer to receive a sequence of free text natural language policy text strings provided by a user; an attribute dictionary communicably connected to the policy composer defining attributes and their logical access control policy equivalents; and a natural language policy set communicably connected to the policy composer with samples of natural language policy rules and their logical access control policy equivalents; wherein the policy composer is configured to use natural language processing to automatically identify a plurality of candidate attributes in the sequence of free text natural language policy text strings and store the candidate attributes in the attribute dictionary; wherein the policy composer is configured to identify a plurality of candidate natural language policy rules from the natural language policy set and populate the plurality of candidate natural language policy rules with the candidate attributes to generate a populated rule and evaluate whether the populated rule is a well-formed rule; and wherein the policy composer uses the attribute dictionary and the natural language policy set to translate the input natural language policy text strings into logical access control code.",0,,1,D
10606957,2,"2. The system of claim 1 , wherein the logical access control code is in XACML format.",1,claim 1,0,D
10606957,3,"3. The system of claim 1 , wherein the logical access control code is in NGAC format.",2,claim 1,0,D
10606957,4,"4. The system of claim 1 , wherein the attribute dictionary is populated with attributes from the natural language policy set.",3,claim 1,0,D
10606957,5,"5. The system of claim 1 , wherein the attribute dictionary is populated by user input.",4,claim 1,0,D
10606957,6,"6. The system of claim 1 , wherein the natural language processing comprises named entity recognition that identifies a named entity that is a string in the input free text natural language policy text strings, wherein a first natural language policy set includes metadata for the named entity from a previously translated policy.",5,claim 1,0,D
10606957,7,"7. The system of claim 1 , wherein the natural language processing comprises morphological segmentation.",6,claim 1,0,D
10606957,8,"8. A method for translating natural language policy text into logical access control policy code, comprising: receiving a sequence of free text natural language policy text strings input by a user to a policy composer; using natural language processing to automatically identify a plurality of candidate attributes in the sequence of free text natural language policy text strings and store the candidate attributes in an attribute dictionary; identifying a plurality of candidate natural language policy rules from a natural language policy set; populating the plurality of candidate natural language policy rules with the candidate attributes to generate a populated rule; determining if the populated rule is well-formed; translating the populated rule into logical access control code; and storing the logical access control code in a policy archive.",7,,0,D
10606957,9,"9. The method of claim 8 , wherein the logical access control code is in XACML format.",8,claim 8,0,D
10606957,10,"10. The method of claim 8 , wherein the logical access control code is in NGAC format.",9,claim 8,0,D
10606957,11,"11. The method of claim 8 , wherein the attribute dictionary is populated with attributes from the natural language policy set.",10,claim 8,0,D
10606957,12,"12. The method of claim 8 , wherein the attribute dictionary is populated by user input.",11,claim 8,0,D
10606957,13,"13. The method of claim 8 , wherein the natural language processing comprises named entity recognition that identifies a named entity that is a string in the input free text natural language policy text strings, wherein a first natural language policy set includes metadata for the named entity from a previously translated policy.",12,claim 8,0,D
10606957,14,"14. The method of claim 8 , wherein the natural language processing comprises morphological segmentation.",13,claim 8,0,D
10606957,15,"15. A non-transitory computer-readable medium comprising instructions for translating natural language policy text into logical access control policy code, the non-transitory computer-readable medium comprising instructions for: receiving a sequence of free text natural language policy text strings input by a user to a policy composer; using natural language processing to automatically identify a plurality of candidate attributes in the sequence of free text natural language policy text strings and store the candidate attributes in an attribute dictionary; identifying a plurality of candidate natural language policy rules from a natural language policy set; populating the plurality of candidate natural language policy rules with the candidate attributes to generate a populated rule; determining if the populated rule is well-formed; translating the populated rule into logical access control code; and storing the logical access control code in a policy archive.",14,,0,D
10606957,16,"16. The non-transitory computer-readable medium of claim 15 , wherein the logical access control code is in XACML format.",15,claim 15,0,D
10606957,17,"17. The non-transitory computer-readable medium of claim 15 , wherein the logical access control code is in NGAC format.",16,claim 15,0,D
10606957,18,"18. The non-transitory computer-readable medium of claim 15 , wherein the attribute dictionary is populated with attributes from the natural language policy set.",17,claim 15,0,D
10606957,19,"19. The non-transitory computer-readable medium of claim 15 , wherein the attribute dictionary is populated by user input.",18,claim 15,0,D
10606957,20,"20. The non-transitory computer-readable medium of claim 15 , wherein the natural language processing comprises named entity recognition that identifies a named entity that is a string in the input free text natural language policy text strings, wherein a first natural language policy set includes metadata for the named entity from a previously translated policy.",19,claim 15,0,D
10606958,1,"1. A computer system comprising: a processing unit operatively coupled to memory; an artificial intelligence platform, in communication with the processing unit and memory; a knowledge engine operatively coupled to the processing unit to train a machine learning model (MLM), the knowledge engine configured to: select a first MLM from a natural language (NL) processing library of MLMs, aligned to a knowledge domain expressed in a first knowledge graph (KG); receive NL input and query the input against the first KG, and extract one or more triplets from the first KG; apply the selected MLM to a second KG different from the first KG, and extract one or more triplets from the second KG, wherein each triplet includes a subject, object, and a relationship; for each extracted triplet: obtain a blockchain (BC) identifier associated with each triplet; and identify a triplet veracity value from a corresponding BC ledger; detect a modification of the first KG from the extracted one or more triplets from the second KG, wherein the modification is selected from the group consisting of: content and structure, and combinations thereof; and evaluate the detected modification, including employ the obtained BC identifier to assess veracity of the detected modification; and dynamically augment the first MLM responsive to the received NL input.",0,,1,D
10606958,2,"2. The system of claim 1 , wherein the detected modification is content, and further comprising the knowledge engine to classify the detected modification, wherein the classification is selected from the group consisting of: synchronic and diachronic.",1,claim 1,0,D
10606958,3,"3. The system of claim 2 , wherein the detected modification is classified as conflicting data, and further comprising the knowledge engine to leverage the assessed veracity value of the first and second data, and limit modification of the first MLM subject to the assessed veracity value.",2,claim 2,0,D
10606958,4,"4. The system of claim 2 , further comprising the knowledge engine to employ the classification as a contribution factor with the modification evaluation.",3,claim 2,0,D
10606958,5,"5. The system of claim 1 , wherein the dynamic modification augmentation of the first MLM includes the MLM to create a new MLM.",4,claim 1,0,D
10606958,6,"6. A computer program product to process natural language (NL), the computer program product comprising a computer readable storage device having program code embodied therewith, the program code executable by a processing unit to: select a first machine learning model (MLM) from a NL processing library of MLMs, aligned to a knowledge domain expressed in a first knowledge graph (KG); receive NL input and query the input against the first KG, and extract one or more triplets from the first KG; apply the selected MLM to a second KG different from the first KG, and extract one or more triplets from the second KG, wherein each triplet includes a subject, object, and a relationship, and for each extracted triplet: obtain a blockchain (BC) identifier associated with each triplet; and identify a triplet veracity value from a corresponding BC ledger; detect a modification of the first KG from the extracted one or more triplets from the second KG, wherein the modification is selected from the group consisting of: content and structure, and combinations thereof; evaluate the detected modification, including employ the obtained BC identifier to assess veracity of the detected modification; and dynamically augment the first MLM responsive to the received NL input.",5,,0,D
10606958,7,"7. The computer program product of claim 6 , wherein the detected modification is content, and further comprising program code to: classify the detected modification, wherein the classification is selected from the group consisting of: synchronic and diachronic.",6,claim 6,0,D
10606958,8,"8. The computer program product of claim 7 , further comprising program code to employ the classification as a contribution factor with the modification evaluation.",7,claim 7,0,D
10606958,9,"9. The computer program product of claim 7 , wherein the detected modification is classified as conflicting data, and further comprising program code to: leverage the assessed veracity value of the first and second data, and limit modification of the first MLM subject to the assessed veracity value.",8,claim 7,0,D
10606958,10,"10. The computer program product of claim 6 , wherein the dynamic augmentation of the first MLM includes the MLM to create a new MLM.",9,claim 6,0,D
10606958,11,"11. A method for processing natural language (NL), comprising: selecting a first machine learning model (MLM) from a NL processing library of MLMs, aligned to a knowledge domain expressed in a first knowledge graph (KG); receiving NL input and query the input against the first KG, and extracting one or more triplets from the first KG; applying the selected MLM to a second KG different from the first KG, and extracting one or more triplets from the second KG, wherein each triplet includes a subject, object, and a relationship, and for each extracted triplet: obtaining a blockchain (BC) identifier associated with each triplet; and identifying a triplet veracity value from a corresponding BC ledger; detecting a modification of the first KG from the extracted one or more triplets from the second KG, wherein the modification is selected from the group consisting of: content and structure, and combinations thereof; evaluating the detected modification, including employing the obtained BC identifier to assess veracity of the detected modification; and dynamically augmenting the first MLM responsive to the received NL input.",10,,0,D
10606958,12,"12. The method of claim 11 , wherein the detected modification is content, and further comprising: classifying the detected modification, wherein the classification is selected from the group consisting of: synchronic and diachronic.",11,claim 11,0,D
10606958,13,"13. The method of claim 12 , further comprising employing the classification as a contribution factor with the modification evaluation.",12,claim 12,0,D
10606958,14,"14. The method of claim 12 , wherein the detected modification is classified as conflicting data, and further comprising: leveraging the assessed veracity value of the first and second data, and limiting modification of the first MLM subject to the assessed veracity value.",13,claim 12,0,D
10606958,15,"15. The method of claim 11 , wherein the dynamic augmentation of the first MLM includes the MLM creating a new MLM.",14,claim 11,0,D
10606959,1,"1. In a digital medium environment to highlight key portions of text within documents, a method implemented by a client device, the method comprising: displaying, by the client device, a highlighted document comprising text and highlight overlays over or proximate to key portions of text within the highlighted document that collectively form a summary of the highlighted document; receiving, by the client device, user input to modify the highlighted document, the user input received via user interaction with the highlighted document; modifying the highlighted document based on the user input by removing at least one highlight overlay or adding at least one highlight overlay; and displaying the modified highlighted document.",0,,1,D
10606959,2,"2. A method as described in claim 1 , wherein the user input to modify the highlighted document is received via the user interaction with a selectable feedback control displayed with the highlighted document.",1,claim 1,0,D
10606959,3,"3. A method as described in claim 2 , wherein the selectable feedback control is displayed proximate a respective highlight overlay and enables user input to provide positive or negative feedback regarding the respective highlight overlay.",2,claim 2,0,D
10606959,4,"4. The method as described in claim 3 , wherein the modifying the highlighted document further comprises modifying the highlighted document by removing the respective highlight overlay in response to receiving user input to provide negative feedback via the selectable feedback control.",3,claim 3,0,D
10606959,5,"5. The method as described in claim 4 , further comprising generating negative reader feedback data regarding the respective highlight overlay in response to receiving the user input to provide the negative feedback via the selectable feedback control, and communicating the negative reader feedback data to a service provider.",4,claim 4,0,D
10606959,6,"6. The method as described in claim 3 , further comprising generating positive reader feedback data regarding the respective highlight overlay in response to receiving user input to provide positive feedback via the selectable feedback control, and communicating the positive reader feedback data to a service provider.",5,claim 3,0,D
10606959,7,"7. The method as described in claim 2 , wherein the selectable feedback control is displayed in response to a user selection of un-highlighted text within the highlighted document.",6,claim 2,0,D
10606959,8,"8. The method as described in claim 7 , further comprising: modifying the highlighted document by adding a highlight overlay over the selected un-highlighted text in response to receiving user input to provide positive feedback via the selectable feedback control; generating positive reader feedback data regarding the selected un-highlighted text; and communicating the positive reader feedback data to a service provider.",7,claim 7,0,D
10606959,9,"9. The method as described in claim 1 , wherein the highlighted document includes at least two different types of highlight overlays for at least two respective key portions based on a relative importance of each respective key portion to the highlighted document.",8,claim 1,0,D
10606959,10,"10. The method as described in claim 1 , further comprising: receiving additional user input to filter the highlight overlays based on at least one topic of the highlighted document; and modifying the highlighted document based on the additional user input by removing at least one highlight overlay which does not correspond to the at least one topic.",9,claim 1,0,D
10606959,11,"11. A method as described in claim 1 , further comprising: receiving additional user input comprising a query; processing the query using natural language processing techniques to determine at least one topic of the query; and modifying the highlighted document based on the additional user input by removing at least one highlight overlay which does not correspond to the at least one topic of the query.",10,claim 1,0,D
10606959,12,"12. The method as described in claim 1 , further comprising displaying at least one user interface element to indicate relative amounts of time users spend reading various areas of the highlighted document.",11,claim 1,0,D
10606959,13,"13. The method as described in claim 1 , wherein the key portions of the highlighted document are determined using machine learning summarization techniques.",12,claim 1,0,D
10606959,14,"14. The method as described in claim 1 , wherein the user interaction with the highlighted document comprises a selection of text within the highlighted document.",13,claim 1,0,D
10606959,15,"15. The method as described in claim 1 , wherein the user interaction with the highlighted document comprises an interaction other than input to a selectable feedback control.",14,claim 1,0,D
10606959,16,"16. The method as described in claim 1 , wherein the receiving the user input comprises at least one of tracking cursor or scrolling movement, tracking selection of text in the highlighted document, tracking a gaze of the user while reading the highlighted document.",15,claim 1,0,D
10606959,17,"17. A document highlighting system implemented in a digital medium environment, the document highlighting system comprising: at least one processor; a memory having stored thereon computer-readable instructions that are executable by the at least one processor to perform operations comprising: obtaining a plurality of documents having text; determining key portions of the text of the documents using a document summarization model, the key portions of the text forming a summary of the respective document; generating highlighted versions of the documents, the highlighted versions of the document configured to display highlight overlays over the key portions of the text forming the summary; providing the highlighted versions of the documents to client devices; obtaining reader feedback data from the client devices based on reader interactions with the highlighted versions of documents; and updating the document summarization model using machine learning techniques based on the reader feedback data.",16,,0,D
10606959,18,"18. The system as described in claim 17 , wherein the reader feedback data includes positive reader feedback regarding highlight overlays of the highlighted versions of the documents and negative reader feedback regarding highlight overlays of the highlighted versions of the documents.",17,claim 17,0,D
10606959,19,"19. The system as described in claim 17 , further comprising adjusting the key portions of an individual document based on reader feedback data associated with the individual document, wherein the adjusting includes adding or removing key portions from the highlighted version of the individual document.",18,claim 17,0,D
10606959,20,"20. A computing device comprising: a display device; at least one processor; and a memory having stored thereon computer-readable instructions that are executable by the at least one processor to perform operations comprising: displaying, on the display device, a highlighted document comprising text and highlight overlays over or proximate to key portions of text within the highlighted document that collectively form a summary of the highlighted document; receiving user input to modify the highlighted document, the user input received via user interaction with the highlighted document; modifying the highlighted document based on the user input by removing at least one highlight overlay or adding at least one highlight overlay; and displaying the modified highlighted document on the display device.",19,,0,D
10606960,1,"1. A method comprising: receiving, by a networked system, a first language construct transmitted from a device of a first entity that is directed to a second entity; identifying, by the networked system, a construct identifier corresponding to the first language construct; determining, by the networked system, a language preference of the second entity, the language preference corresponding to a language identifier of a second language; retrieving, by the networked system, a second language construct from a translated construct table by locating a row in the translated construct table that contains the construct identifier, the language identifier corresponding to the language preference of the second entity, and the second language construct, the second language construct being a translation of the first language construct into the second language corresponding to the language preference; using the second language construct to update information associated with the first entity; and transmitting the updated information to a device of the second entity.",0,,1,D
10606960,2,"2. The method of claim 1 , wherein the determining the language preference of the second entity comprises accessing stored user information of the second entity and identifying the language preference from the stored user information.",1,claim 1,0,D
10606960,3,"3. The method of claim 1 , wherein: the second entity is a website associated with the networked system; and the using the second language construct to update information associated with the first entity comprises using the second language construct to generate or update a listing for the first entity.",2,claim 1,0,D
10606960,4,"4. The method of claim 1 , wherein: the second entity is a website associated with the networked system; and the using the second language construct to update information associated with the first entity comprises using the second language construct to update user information for the first entity with the website.",3,claim 1,0,D
10606960,5,"5. The method of claim 1 , wherein identifying the construct identifier corresponding to the first language construct comprises: accessing a construct table, the construct table comprising a construct identifier field to store a unique identifier for each stored language construct and a construct field to store each language construct; locating the first language construct in the construct table; and retrieving, from the construct table, the construct identifier corresponding to the first language construct.",4,claim 1,0,D
10606960,6,"6. The method of claim 1 , wherein the using the second language construct to update information associated with the first entity comprises using the second language construct to generate a translated communication that is transmitted to the device of the second entity.",5,claim 1,0,D
10606960,7,"7. The method of claim 1 , wherein the translated construct table comprises a plurality of rows for a same first language construct, each of the plurality of rows for the same first language construct having a different language identifier and a different second language construct.",6,claim 1,0,D
10606960,8,"8. A hardware storage device storing instructions which, when executed by at least one hardware processor of a machine, cause the machine to perform operations comprising: receiving a first language construct transmitted from a device of a first entity that is directed to a second entity; identifying a construct identifier corresponding to the first language construct; determining a language preference of the second entity, the language preference corresponding to a language identifier of a second language; retrieving a second language construct from a translated construct table by locating a row in the translated construct table that contains the construct identifier, the language identifier corresponding to the language preference of the second entity, and the second language construct, the second language construct being a translation of the first language construct into the second language corresponding to the language preference; using the second language construct to update information associated with the first entity; and transmitting the updated information to a device of the second entity.",7,,0,D
10606960,9,"9. The hardware storage device of claim 8 , wherein the determining the language preference of the second entity comprises accessing stored user information of the second entity and identifying the language preference from the stored user information.",8,claim 8,0,D
10606960,10,"10. The hardware storage device of claim 8 , wherein: the second entity is a website; and the using the second language construct to update information associated with the first entity comprises using the second language construct to generate a listing for the first entity.",9,claim 8,0,D
10606960,11,"11. The hardware storage device of claim 8 , wherein: the second entity is a website; and the using the second language construct to update information associated with the first entity comprises using the second language construct to update user information for the first entity with the website.",10,claim 8,0,D
10606960,12,"12. The hardware storage device of claim 8 , wherein: the second entity is a website; and the using the second language construct to update information associated with the first entity comprises using the second language construct to update a listing for the first entity.",11,claim 8,0,D
10606960,13,"13. The hardware storage device of claim 8 , wherein the using the second language construct to update information associated with the first entity comprises using the second language construct to generate a translated communication that is transmitted to the device of the second entity.",12,claim 8,0,D
10606960,14,"14. The hardware storage device of claim 8 , wherein the operations further comprise: searching a user table for the second entity; and identifying a language identifier for the second entity from the user table, the language identifier corresponding to the language preference stored in the user table for the second entity.",13,claim 8,0,D
10606960,15,"15. A system comprising: one or more hardware processors; and a hardware storage device comprising instructions that when executed by the one or more hardware processors, cause the one or more hardware processors to perform operations comprising: receiving a first language construct transmitted from a device of a first entity that is directed to a second entity; identifying a construct identifier corresponding to the first language construct; determining a language preference of the second entity, the language preference corresponding to a language identifier of a second language; retrieving a second language construct from a translated construct table by locating a row in the translated construct table that contains the construct identifier, the language identifier corresponding to the language preference of the second entity, and the second language construct, the second language construct being a translation of the first language construct into the second language corresponding to the language preference; using the second language construct to update information associated with the first entity; and transmitting the updated information to a device of the second entity.",14,,0,D
10606960,16,"16. The system of claim 15 , wherein the determining the language preference of the second entity comprises accessing stored user information of the second entity and identifying the language preference from the stored user information.",15,claim 15,0,D
10606960,17,"17. The system of claim 15 , wherein: the second entity is a website; and the using the second language construct to update information associated with the first entity comprises using the second language construct to generate or update a listing for the first entity.",16,claim 15,0,D
10606960,18,"18. The system of claim 15 , wherein: the second entity is a website; and the using the second language construct to update information associated with the first entity comprises using the second language construct to update user information for the first entity with the web site.",17,claim 15,0,D
10606960,19,"19. The system of claim 15 , wherein the using the second language construct to update information associated with the first entity comprises using the second language construct to generate a translated communication that is transmitted to the device of the second entity.",18,claim 15,0,D
10606960,20,"20. The method of claim 1 , wherein the second entity is the networked system and the device of the second entity is a server of the networked system.",19,claim 1,0,D
10606961,1,"1. An integrated system design tool for designing waveguide system networks, the system design tool comprising: a memory; a processor coupled to the memory, the processor configured to implement: a user interface module to prompt and receive user input data over a computer network relating to a fiber optic network design; a fiber optic parameter database storing a plurality of fiber optic parameters; a location selection module for selecting a location; a satellite imagery component to provide an image to the user interface module based on the selected location; an overlay module that overlays a fiber optic network design on the image based on the selected location and the plurality of fiber optic parameters; a network analyzer module connected to said user interface module and said fiber optic parameter database to calculate fiber optic network design data based upon the user input data and the fiber optic network design determined from the overlay module; the fiber optic network design data comprising respective optical fiber type data and different optical fiber cable count data for different fiber optic network topologies, and cost data; and a user report module connected to said calculator/network analyzer module to send at least one fiber optic network design report to the user over the computer network and based upon the calculated fiber optic network design data.",0,,1,D
10606961,2,"2. The integrated system design tool according to claim 1 , wherein the optical fiber type data comprises identification of at least one of a multimode optical fiber having a first core diameter, a multimode optical fiber having a second core diameter larger than the first core diameter, or a single mode optical fiber.",1,claim 1,0,D
10606961,3,"3. The integrated system design tool according to claim 1 , wherein the processor is further configured to implement a positioning module to set a pair of connectivity points using the overlay module such that a cable length is automatically calculated based on a calculated distance between the pair of connectivity points.",2,claim 1,0,D
10606961,4,"4. The integrated system design tool according to claim 1 , wherein the stored fiber optic parameters comprise fiber optic parameters based upon at least one of an industry standard or an optical fiber cable manufacturer's guidelines.",3,claim 1,0,D
10606961,5,"5. The integrated system design tool according to claim 1 , wherein the processor is further configured to implement: a user model database connected to said calculator/network analyzer module for storing user fiber optic network design data for a given set of user input data; and a data mining module connected to said user model database to permit data mining therefrom.",4,claim 1,0,D
10606961,6,"6. The integrated system design tool according to claim 1 , wherein the fiber optic network design report includes an automatically generated bill-of-materials (BOM) listing required parts and associated vendor pricing.",5,claim 1,0,D
10606961,7,"7. The integrated system design tool according to claim 6 , wherein the processor is further configured to implement an online ordering system that automatically places one or more orders to one or more vendors based on the BOM.",6,claim 6,0,D
10606961,8,"8. The integrated system design tool according to claim 7 , wherein the online ordering system is integrated with one or more vendor backend systems such that the user may be able to view and track a status of the one or more orders generated by the online ordering system.",7,claim 7,0,D
10606961,9,"9. The integrated system design tool according to claim 6 , wherein the fiber optic network design report includes installation instructions automatically generated in accordance with the calculated fiber optic network design data.",8,claim 6,0,D
10606961,10,"10. The integrated system design tool according to claim 9 , wherein the installation instructions include instructions on how to splice cables within cabinets at one or more local convergence points and how to link a cable to cable distribution structures having 2, 4, 8, or 12 multi-port options.",9,claim 9,0,D
10606962,1,"1. A computer-implemented method for optimizing transport alignments, comprising: reading terrain data, constraint data, and cost data; organizing and storing one or more terrain pixels, comprising elevation values, in a first grid structure comprising rows and columns to enable efficient access to each terrain pixel, wherein the first grid structure comprises a matrix; creating one or more raster layers of a same dimension and orientation as the first grid structure; obtaining a horizontal transportation starting alignment by: determining a first cheapest discrete path on a second grid structure that overlays the terrain data, constraint data, and cost data, wherein the second grid structure comprises a grid graph, wherein: in the grid graph, one or more edges, of the second grid structure, connect grid points; each of the one or more edges corresponds to a cost; the first cheapest discrete path is determined based on the cost for each of the one or more edges; smoothing the first cheapest discrete path, wherein the smoothing fits curvature to the first cheapest discrete path; minimizing a distance between the smoothed first cheapest discrete path and the first cheapest discrete path using an optimization method, wherein the optimization method uses a cost function that comprises: a measured distance that measures a similarity between the smoothed first cheapest discrete path and the first cheapest discrete path; and a penalty cost that occurs due to a violation of design constraints; and optimizing the starting horizontal transport alignment using the one or more raster layers.",0,,1,D
10606962,2,"2. The computer-implemented method of claim 1 , wherein a first raster layer of the one or more raster layers comprises water data.",1,claim 1,0,D
10606962,3,"3. The computer-implemented method of claim 2 , wherein a second raster layer of the one or more raster layers comprises an avoidance zone.",2,claim 2,0,D
10606962,4,"4. The computer-implemented method of claim 1 , wherein a first layer of the one or more of the raster layers comprises hard costs that are quantifiable in monetary values.",3,claim 1,0,D
10606962,5,"5. The computer-implemented method of claim 1 , wherein a first layer of the one or more of the raster layers comprises soft costs that are not quantifiable in monetary values.",4,claim 1,0,D
10606962,6,"6. The computer-implemented method of claim 1 , wherein the obtaining a starting horizontal transport alignment comprises: (a) obtaining a start point and an end point; (b) producing the second grid structure wherein: (1) the second grid structure is coarser than the first grid structure; and (2) one or more edges, of the second grid structure, connect grid points horizontally, vertically, and diagonally; (c) for each of the one or more edges: (1) computing a cost corresponding to an alignment segment that connects the grid points of each edge; (d) determining, based on the cost for each of the one or more edges, the first cheapest discrete path on the second grid structure; (e) smoothing the first cheapest discrete path to create the smoothed cheapest discrete path; and (f) selecting the smoothed cheapest discrete path as the starting horizontal transport alignment.",5,claim 1,0,D
10606962,7,"7. The computer-implemented method of claim 6 , wherein the cost comprises earthwork and construction costs.",6,claim 6,0,D
10606962,8,"8. The computer-implemented method of claim 6 , wherein the cost comprises a weighted and scaled combination of values from stored cost layers that lay under a portion of the alignment segment.",7,claim 6,0,D
10606962,9,"9. The computer-implemented method of claim 6 , wherein the selecting the smoothed cheapest discrete path as the starting horizontal transport alignment comprises: taking the smoothest cheapest discrete path and minimizing a distance between the smoothest cheapest discrete path and the first cheapest discrete path using an optimization method.",8,claim 6,0,D
10606962,10,"10. The computer-implemented method of claim 1 , wherein the optimizing utilizes a covariance matrix adaptation evolution strategy (CMA-ES).",9,claim 1,0,D
10606962,11,"11. The computer-implemented method of claim 1 , wherein the optimizing comprises: (a) utilizing the starting horizontal transport alignment as an evaluating alignment; (b) projecting the evaluating alignment along a centerline onto the first grid structure; (c) reading one or more points where one or more tangents, of the evaluating alignment, intersect with the first grid structure; (d) storing, based on the one or more points, one or more elevation values to produce a first profile; (e) reading the one or more elevation values and a corresponding soft cost value, wherein the corresponding soft cast value cannot be measured as a monetary value and cannot be directly compared to hard costs; (f) obtaining, using the first profile, hard costs that are quantifiable in monetary values; (g) adding the soft cost value to the hard costs to determine an alignment cost; (h) changing a point of intersection configuration to provide a different evaluating alignment and repeating steps (b)-(g) for the changed point of intersection configuration to determine an additional alignment cost; (i) comparing the alignment cost and the additional alignment cost to determine the cheapest alignment cost; (j) storing the alignment corresponding to the cheapest alignment cost; and (k) returning the stored alignment to a user.",10,claim 1,0,D
10606962,12,"12. The computer-implemented method of claim 11 , further comprising: producing one or more offset second profiles, to a left and right of the centerline, to obtain additional elevation values.",11,claim 11,0,D
10606962,13,"13. The computer-implemented method of claim 11 , wherein: the optimizing is performed on multiple alignments in parallel utilizing different weights for soft costs.",12,claim 11,0,D
10606962,14,"14. The computer-implemented method of claim 11 , wherein the adding the soft cost value to the hard costs comprises: 
 h(x)+?h(x)s(x)+p(x), where h(x) is the hard costs, s(x) is the soft cost value, p(x) is a penalty cost for violating a constraint, and ? is a weight factor that weights the soft cost value relative to the hard costs.",13,claim 11,0,D
10606962,15,"15. A non-transitory computer readable storage medium encoded with computer program instructions which when accessed by a computer cause the computer to load the program instructions to a memory therein creating a special purpose data structure causing the computer to operate as a specially programmed computer, executing a method of optimizing transport alignments, comprising: reading, in the specially programmed computer, terrain data, constraint data, and cost data; organizing and storing, in the specially programmed computer, one or more terrain pixels comprising elevation values in a first grid structure comprising rows and columns to enable efficient access to each terrain pixel, wherein the first grid structure comprises a matrix; creating, in the specially programmed computer, one or more raster layers of a same dimension and orientation as the first grid structure; obtaining, in the specially programmed computer, a starting horizontal transport alignment by: determining a first cheapest discrete path on a second grid structure that overlays the terrain data, constraint data, and cost data, wherein the second grid structure comprises a grid graph, wherein: in the grid graph, one or more edges, of the second grid structure, connect grid points; each of the one or more edges corresponds to a cost; the first cheapest discrete path is determined based on the cost for each of the one or more edges; smoothing the first cheapest discrete path, wherein the smoothing fits curvature to the first cheapest discrete path; and minimizing a distance between the smoothed first cheapest discrete path and the first cheapest discrete path using an optimization method, wherein the optimization method uses a cost function that comprises: a measured distance that measures a similarity between the smoothed first cheapest discrete path and the first cheapest discrete path; and a penalty cost that occurs due to a violation of design constraints; and optimizing, in the specially programmed computer, the starting horizontal transport alignment using the one or more raster layers.",14,,0,D
10606962,16,"16. The non-transitory computer readable storage medium of claim 15 , wherein a first raster layer of the one or more raster layers comprises water data.",15,claim 15,0,D
10606962,17,"17. The non-transitory computer readable storage medium of claim 16 , wherein a second raster layer of the one or more raster layers comprises an avoidance zone.",16,claim 16,0,D
10606962,18,"18. The non-transitory computer readable storage medium of claim 15 , wherein a first layer of the one or more of the raster layers comprises hard costs that are quantifiable in monetary values.",17,claim 15,0,D
10606962,19,"19. The non-transitory computer readable storage medium of claim 15 , wherein a first layer of the one or more of the raster layers comprises soft costs that are not quantifiable in monetary values.",18,claim 15,0,D
10606962,20,"20. The non-transitory computer readable storage medium of claim 15 , wherein the obtaining a starting horizontal transport alignment comprises: (a) obtaining, in the specially programmed computer, a start point and an end point; (b) producing, in the specially programmed computer, the second grid structure wherein: (1) the second grid structure is coarser than the first grid structure; and (2) one or more edges, of the second grid structure, connect grid points horizontally, vertically, and diagonally; (c) for each of the one or more edges: (1) computing, in the specially programmed computer, a cost corresponding to an alignment segment that connects the grid points of each edge; (d) determining, in the specially programmed computer, based on the cost for each of the one or more edges, a cheapest path on the second grid structure; (e) smoothing, in the specially programmed computer, the cheapest path; and (f) selecting, in the specially programmed computer, the smoothed cheapest path as the starting horizontal transport alignment.",19,claim 15,0,D
10606962,21,"21. The non-transitory computer readable storage medium of claim 20 , wherein the cost comprises earthwork and construction costs.",20,claim 20,0,D
10606962,22,"22. The non-transitory computer readable storage medium of claim 20 , wherein the cost comprises a weighted and scaled combination of values from stored cost layers that lay under a portion of the alignment segment.",21,claim 20,0,D
10606962,23,"23. The non-transitory computer readable storage medium of claim 20 , wherein the selecting the smoothed cheapest discrete path as the starting horizontal transport alignment comprises: taking the smoothest cheapest discrete path and minimizing a distance between the smoothest cheapest discrete path and the first cheapest discrete path using an optimization method.",22,claim 20,0,D
10606962,24,"24. The non-transitory computer readable storage medium of claim 15 , wherein the optimizing utilizes a covariance matrix adaptation evolution strategy (CMA-ES).",23,claim 15,0,D
10606962,25,"25. The non-transitory computer readable storage medium of claim 15 , wherein the optimizing comprises: (a) utilizing, in the specially programmed computer, the starting horizontal transport alignment as an evaluating alignment; (b) projecting, in the specially programmed computer, the evaluating alignment along a centerline onto the first grid structure; (c) reading, in the specially programmed computer, one or more points where one or more tangents, of the evaluating alignment, intersect with the first grid structure; (d) storing, in the specially programmed computer, based on the one or more points, one or more elevation values to produce a first profile; (e) reading, in the specially programmed computer, the one or more elevation values and a corresponding soft cost value; (f) obtaining, in the specially programmed computer, using the first profile, hard costs that are quantifiable in monetary values; (g) adding, in the specially programmed computer, the soft cost value to the hard costs to determine an alignment cost; (h) changing, in the specially programmed computer, a point of intersection configuration to provide a different evaluating alignment and repeating steps (b)-(g) for the changed point of intersection configuration to determine an additional alignment cost; (i) comparing, in the specially programmed computer, the alignment cost and the additional alignment cost to determine the cheapest alignment cost; (j) storing, in the specially programmed computer, the alignment corresponding to the cheapest alignment cost; and (k) returning, in the specially programmed computer, the stored alignment to a user.",24,claim 15,0,D
10606962,26,"26. The non-transitory computer readable storage medium of claim 25 , further comprising: producing one or more offset second profiles, to a left and right of the centerline, to obtain additional elevation values.",25,claim 25,0,D
10606962,27,"27. The non-transitory computer readable storage medium of claim 25 , wherein: the optimizing is performed on multiple alignments in parallel utilizing different weights for soft costs.",26,claim 25,0,D
10606962,28,"28. The non-transitory computer readable storage medium of claim 25 , wherein the adding the soft cost value to the hard costs comprises: 
 h(x)+?h(x)s(x)+p(x), where h(x) is the hard costs, s(x) is the soft cost value, p(x) is a penalty cost for violating a constraint, and ? is a weight factor that weights the soft cost value relative to the hard costs.",27,claim 25,0,D
10606962,29,"29. A computer-implemented method for optimizing transport alignments, comprising: reading terrain data, constraint data, and cost data, wherein the cost data comprises soft costs and hard costs, wherein the soft costs cannot be expressed in monetary values and the hard costs are expressed in monetary values; organizing and storing one or more terrain pixels, comprising elevation values, in a first grid structure comprising rows and columns to enable efficient access to each terrain pixel; creating one or more raster layers of a same dimension and orientation as the first grid structure; obtaining a starting alignment; and optimizing the starting alignment using the one or more raster layers with an Evolutionary Strategy method based on covariance matrix adaptation (CMA-ES), wherein: the Evolutionary Strategy method uses directional information based on an evaluation of the cost data: the Evolutionary Strategy method repeatedly changes a Points of Intersection (PI) configuration and a curve radius of the starting alignment; the Evolutionary Strategy method evaluates a soft cost of a new road alignment; the Evolutionary Strategy adds the soft costs to a total cost by scaling the soft costs as a multiple of the hard costs, and by weighing the scaled soft costs with respect to the hard costs; the Evolutionary Strategy method optimizes the starting alignment by minimizing a distance between a smoothed first cheapest discrete path and a first cheapest discrete path using a cost function that comprises: a measured distance that measures a similarity between the smoothed first cheapest discrete path and the first cheapest discrete path; and a penalty cost that occurs due to a violation of design constraints.",28,,0,D
10606962,30,"30. The computer-implemented method of claim 29 , wherein: the optimizing stops upon a given solving time expiring.",29,claim 29,0,D
10606962,31,"31. The computer-implemented method of claim 29 , wherein: the optimizing stops upon exceeding a given number of iterations.",30,claim 29,0,D
10606962,32,"32. The computer-implemented method of claim 29 , wherein: the optimizing stops when an improvement in the total costs is less than a tolerance.",31,claim 29,0,D
10606962,33,"33. The computer-implemented method of claim 29 , wherein: the optimizing stops when a change in the starting alignment is smaller than a tolerance.",32,claim 29,0,D
10606963,1,"1. A method for capturing building information, comprising: capturing dimensions of a 360 degree image towards the floor from a first location within a room of a building using a mobile device equipped with at least one distance sensor and at least one movement sensor, wherein the capturing is performed while maintaining an intersection between the floor to a wall of the room within a field-of-view (FOV) display of the mobile device, and the capturing dimensions includes recording the distance to and azimuth angles of various points along the intersection of the floor to the wall of the room; creating a floor plan of the room using the captured dimensions; repeating the steps of capturing dimensions and creating a floor plan for at least one additional room of the building; and receiving user input to connect the floor plans for the room and the at least one additional room to create a floor plan of the building.",0,,1,D
10606963,2,"2. The method of claim 1 , wherein capturing dimensions includes capturing a 360 degree panoramic image of floor-to-wall intersections.",1,claim 1,0,D
10606963,3,"3. The method of claim 1 , wherein capturing dimensions includes auto detecting doors and window frames as shown in the image.",2,claim 1,0,D
10606963,4,"4. The method of claim 3 , wherein capturing dimensions includes: calculating, using the captured distance from the first location to the intersection, a distance from a floor location directly below the first location to the intersection of the floor to the wall of the room, wherein creating the floor plan of the room further includes using the calculated dimensions and the distance from the floor location.",3,claim 3,0,D
10606963,5,"5. The method of claim 4 , wherein capturing dimensions includes correcting the distances and angles for errors to produce a two-dimensional image of the room geometry.",4,claim 4,0,D
10606963,6,"6. The method of claim 2 , wherein capturing dimensions includes: capturing a 360 degree panoramic image of a ceiling-to-wall intersection; and aligning the panoramic image of the floor-to-wall intersection with the panoramic image of the ceiling-to-wall intersection to create a three dimensional view of the room.",5,claim 2,0,D
10606963,7,"7. The method of claim 6 , wherein capturing a 360 degree panoramic image of ceiling-to-wall intersection includes measuring the change in angle between the floor-to-wall intersections and the ceiling-to-wall intersections to determine a height of the wall.",6,claim 6,0,D
10606963,8,"8. The method of claim 1 , wherein the mobile device includes a laser pointer such that capturing dimensions includes measuring the distances from the first location to the various points of the floor-to-wall intersections based on the image size of the laser pointer when directed towards the various points of the floor-to-wall intersections.",7,claim 1,0,D
10606963,9,"9. The method of claim 8 , wherein the sensors include a camera, wherein a view from the camera is limited to only a view showing location of the laser pointer as the laser pointer is directed towards the various points of the floor-to-wall intersections.",8,claim 8,0,D
10606963,10,"10. The method of claim 1 , wherein the sensors include a camera, gyroscope, a digital compass.",9,claim 1,0,D
10606963,11,"11. The method of claim 1 , wherein the sensors include a camera, a gyroscope, an accelerometer and a digital compass.",10,claim 1,0,D
10606963,12,"12. The method of claim 11 , wherein adjacent rooms are identified by digital compass readings associated with room corners.",11,claim 11,0,D
10606963,13,"13. The method of claim 11 , wherein multiple floors are aligned based on user input or digital compass readings associated with floors.",12,claim 11,0,D
10606963,14,"14. The method of claim 1 , further comprising creating a building information model by applying measurements taken by environmental sensors of the mobile device with the captured dimensions to include environmental descriptors within the floor plan.",13,claim 1,0,D
10606963,15,"15. The method of claim 14 , further comprising repeating the step of applying measurements at a second location of the room.",14,claim 14,0,D
10606963,16,"16. The method of claim 14 , where the location of the mobile device within the room being captured is associated with environmental descriptors measured by the mobile device.",15,claim 14,0,D
10606963,17,"17. A method for capturing building information, comprising: capturing dimensions of a 360 degree image towards the floor from a first location within a room of a building using a mobile device equipped with a laser meter, wherein the capturing is performed while maintaining an intersection between the floor to a wall of the room within a field-of-view (FOV) display of the mobile device, and the capturing dimensions includes recording the distance to and azimuth angles of various points along the intersection of the floor to the wall of the room; creating a floor plan of the room using the captured dimensions; repeating the steps of capturing dimensions and creating a floor plan for at least one additional room of the building; and receiving user input to connect the floor plans for the room and the at least one additional room to create a floor plan of the building.",16,,0,D
10606963,18,"18. The method of claim 17 , wherein capturing dimensions includes capturing a 360 degree laser scan such that a projected laser beam falls onto wall surfaces of the room.",17,claim 17,0,D
10606963,19,"19. The method of claim 17 , wherein capturing dimensions includes continuously adjust the inclination of the mobile device such that projected laser beam falls onto wall surfaces of the room.",18,claim 17,0,D
10606963,20,"20. The method of claim 17 , wherein the dimensions are captured from multiple locations within the room.",19,claim 17,0,D
10606963,21,"21. The method of claim 17 , wherein the dimensions are captured from corners of the room.",20,claim 17,0,D
10606963,22,"22. The method claim 17 , wherein the mobile device also includes a gyroscope and an accelerometer.",21,claim 17,0,D
10606963,23,"23. A device for planning a security system of a building, comprising: an interactive user interface device to capture building information and user requirements having a visual display and at least one distance sensor and at least one movement sensor; and a processor operatively connected to the user interface having a memory, wherein the memory includes instructions recorded thereon that, when read by the processor, cause the processor to: capture dimensions of a 360 degree image towards the floor at from a first location within a room of a building, wherein the capturing is performed while maintaining an intersection between the floor to a wall of the room within a field-of-view (FOV) display of the mobile device, and the capturing dimensions includes recording the distance to and azimuth angles of various points along the intersection of the floor to the wall of the room; create a floor plan of the room using the captured dimensions; repeat the steps of capturing dimensions and creating a floor plan for at least one additional room; and receive user input to connect the floor plans for the room and the at least one additional room to create a floor plan of the building.",22,,0,D
10606964,1,"1. A computer-implemented method for dynamically defining and generating inlet spacing along a road in a building information model (BIM) computer aided design (CAD) three dimensional (3D) model, comprising: (a) acquiring, in a computer, a representation of the road in the BIM CAD 3D model, wherein the representation comprises a geometry for the road; (b) determining whether cost is a priority compared to construction efficiency as the priority; (c) based on the priority, defining an inlet spacing for the road; (d) determining inlet locations for inlets based on the inlet spacing; (e) determining whether the inlet spacing and inlets satisfy one or more design rules for the road; (f) determining that the inlet spacing and/or inlets fail to satisfy the one or more design rules for the road, and based thereon, selecting a different inlet spacing from a group of preset integers, and repeating the above steps beginning with the defining the inlet spacing; and (g) determining that the one or more design rules for the road are satisfied, and based thereon, outputting the inlet spacing and inlet locations for the road.",0,,1,D
10606964,2,"2. The computer-implemented method of claim 1 , further comprising: (a) beginning at a crest of the road; (b) determining a first inlet location (of the inlet locations) for a first inlet (of the inlets) as a distance from the crest based on an allowable spread, wherein the determining also comprises analyzing a performance of the first inlet, wherein the analyzing determines a depth of the first inlet and a bypass flow of the first inlet; (c) assuming a maximum structure spacing as the inlet spacing to a next inlet; (d) determining a catchment area based on a catchment length, wherein the catchment length comprises the inlet spacing; (e) determining a catchment flow based on the catchment area; (f) determining a total gutter flow based on the catchment flow and the bypass flow; (g) determining a spread and a depth based on the next inlet, wherein the spread comprises a width of the total gutter flow, and the depth comprises a flow depth at a curb of the next inlet; (h) determining whether the spread and the depth comply with a design rule, wherein when the spread and the depth fail to comply with the design rule: (i) determining whether the inlet spacing is larger than a minimum value when the spread and the depth fail to comply with the design rule; and (j) when the inlet spacing is larger than a maximum value: (i) decreasing the inlet spacing; (ii) determining the first inlet location based on the decreased inlet spacing; (iii) repeating the above steps beginning with determining the catchment area; (k) determining an intercepted flow of the next inlet; (l) determining whether the next inlet is at low point of the road; (m) outputting the inlet spacing and inlet locations for the road when the next inlet is at a low point of the road; and (n) when the next inlet is not at a low point of the road: (1) determining whether a road profile or section of the road has changed; (2) when the road profile or section of the road has changed, beginning a new group segment for the road using the maximum structure spacing as the inlet spacing to a next inlet, and repeating the above steps beginning with determining a catchment area; and (3) when the road profile or section of the road has not changed, determining a next inlet location, and repeating the above steps beginning with determining a catchment area.",1,claim 1,0,D
10606964,3,"3. The computer-implemented method of claim 2 , further comprising outputting a suggestion to change a design of the road when the inlet spacing is larger than the maximum value.",2,claim 2,0,D
10606964,4,"4. The computer-implemented method of claim 2 , further comprising: after determining the intercepted flow, checking an efficiency of the next inlet and providing a warning if the efficiency is below a threshold.",3,claim 2,0,D
10606964,5,"5. The computer-implemented method of claim 1 , further comprising: (a) determining that cost is the priority compared to construction efficiency as the priority; (b) beginning at a crest of the road; (c) determining a first inlet location (of the inlet locations) for a first inlet (of the inlets) as a distance from the crest based on an allowable spread, wherein the determining also comprises analyzing a performance of the first inlet, wherein the analyzing determines a depth of the first inlet and a bypass flow of the first inlet; (d) determining a maximum total gutter flow based on the geometry for the road; (e) determining a maximum catchment flow as the maximum total gutter flow minus a previous inlet bypass flow; (f) determining a maximum catchment area (A) as the maximum catchment flow (Q) divided by a coefficient (C) and a rainfall intensity (I) (A=Q/CI); (g) determining a catchment length as the maximum catchment area divided by a width of the catchment area; (h) determining whether the catchment length is larger than or equal to a minimum length; (i) defining the inlet spacing as the catchment length when the catchment length is larger than or equal to the minimum length, wherein a current inlet location for a current inlet is placed based on the inlet spacing from a prior inlet location; (j) determining if the geometry for the road is changing after the current inlet location; (k) updating the geometry for the road and repeating the above steps beginning with determining the maximum total gutter flow when the geometry for the road changes after the current inlet location; (l) calculating an intercepted flow by a type and size of the current inlet when the geometry for the road is not changing after the current inlet location; (m) determining whether the current inlet is at a low point of the road; (n) outputting the current inlet spacing and inlet locations for the road when the current inlet is at a low point of the road; and (n) selecting a different inlet spacing and repeating the above steps beginning with determining the maximum catchment flow when the current inlet is not at a low point of the road.",4,claim 1,0,D
10606964,6,"6. The computer-implemented method of claim 5 , further comprising: outputting a suggestion to change a design of the road when the catchment length is not larger than or equal to a minimum length.",5,claim 5,0,D
10606964,7,"7. The computer-implemented method of claim 5 , further comprising: after determining the intercepted flow, checking an efficiency of the current inlet and providing a warning if the efficiency is below a threshold.",6,claim 5,0,D
10606964,8,"8. The computer-implemented method of claim 1 , wherein the outputting comprises constructing the inlets at the inlet locations.",7,claim 1,0,D
10606964,9,"9. A computer system for dynamically defining and generating inlet spacing along a road in a building information model (BIM) computer aided design (CAD) three dimensional (3D) model comprising: (a) a computer having a memory; (b) an inlet spacing generation application executing on the computer, wherein the inlet spacing generation application: (1) acquires, in a computer, a representation of the road in the BIM CAD 3D model, wherein the representation comprises a geometry for the road; (2) determines whether cost is a priority compared to construction efficiency as the priority; (3) based on the priority, defines an inlet spacing for the road; (4) determines inlet locations for inlets based on the inlet spacing; (5) determines whether the inlet spacing and inlets satisfy one or more design rules for the road; (6) determines that the inlet spacing and/or inlets fail to satisfy the one or more design rules for the road, and based thereon, selects a different inlet spacing from a group of preset integers, and repeats the above beginning with defining the inlet spacing; and (7) determines that the one or more design rules for the road are satisfied, and based thereon, outputs the inlet spacing and inlet locations for the road.",8,,0,D
10606964,10,"10. The computer system of claim 9 , wherein the inlet spacing generation application: (a) begins at a crest of the road; (b) determines a first inlet location (of the inlet locations) for a first inlet (of the inlets) as a distance from the crest based on an allowable spread, wherein the determining the first inlet location also comprises analyzing a performance of the first inlet, wherein the analyzing determines a depth of the first inlet and a bypass flow of the first inlet; (c) assumes a maximum structure spacing as the inlet spacing to a next inlet; (d) determines a catchment area based on a catchment length, wherein the catchment length comprises the inlet spacing; (e) determines a catchment flow based on the catchment area; (f) determines a total gutter flow based on the catchment flow and the bypass flow; (g) determines a spread and a depth based on the next inlet, wherein the spread comprises a width of the total gutter flow, and the depth comprises a flow depth at a curb of the next inlet; (h) determines whether the spread and the depth comply with a design rule, wherein when the spread and the depth fail to comply with the design rule: (i) determines whether the inlet spacing is larger than a minimum value when the spread and the depth fail to comply with the design rule; and (j) when the inlet spacing is larger than a maximum value: (i) decreases the inlet spacing; (ii) determines the first inlet location based on the decreased inlet spacing; (iii) repeats the above beginning with the determines the catchment area; (k) determines an intercepted flow of the next inlet; (l) determines whether the next inlet is at low point of the road; (m) outputs the inlet spacing and inlet locations for the road when the next inlet is at a low point of the road; and (n) when the next inlet is not at a low point of the road: (1) determines whether a road profile or section of the road has changed; (2) when the road profile or section of the road has changed, begins a new group segment for the road using the maximum structure spacing as the inlet spacing to a next inlet, and repeats the above beginning with determines a catchment area; and (3) when the road profile or section of the road has not changed, determines a next inlet location, and repeating the above steps beginning with determining a catchment area.",9,claim 9,0,D
10606964,11,"11. The computer system of claim 10 , wherein the inlet spacing generation application outputs a suggestion to change a design of the road when the inlet spacing is larger than the maximum value.",10,claim 10,0,D
10606964,12,"12. The computer system of claim 10 , wherein the inlet spacing generation application: after determining the intercepted flow, checking an efficiency of the next inlet and providing a warning if the efficiency is below a threshold.",11,claim 10,0,D
10606964,13,"13. The computer system of claim 9 , wherein the inlet spacing generation application: (a) determines that cost is the priority compared to construction efficiency as the priority; (b) begins at a crest of the road; (c) determines a first inlet location (of the inlet locations) for a first inlet (of the inlets) as a distance from the crest based on an allowable spread, wherein the determines a first inlet location also analyzes a performance of the first inlet, wherein the analyzing determines a depth of the first inlet and a bypass flow of the first inlet; (d) determines a maximum total gutter flow based on the geometry for the road; (e) determines a maximum catchment flow as the maximum total gutter flow minus a previous inlet bypass flow; (f) determines a maximum catchment area (A) as the maximum catchment flow (Q) divided by a coefficient (C) and a rainfall intensity (I) (A=Q/CI); (g) determines a catchment length as the maximum catchment area divided by a width of the catchment area; (h) determines whether the catchment length is larger than or equal to a minimum length; (i) defines the inlet spacing as the catchment length when the catchment length is larger than or equal to the minimum length, wherein a current inlet location for a current inlet is placed based on the inlet spacing from a prior inlet location; (j) determines if the geometry for the road is changing after the current inlet location; (k) updates the geometry for the road and repeating the above beginning with determining the maximum total gutter flow when the geometry for the road changes after the current inlet location; (l) calculates an intercepted flow by a type and size of the current inlet when the geometry for the road is not changing after the current inlet location; (m) determines whether the current inlet is at a low point of the road; (n) outputs the current inlet spacing and inlet locations for the road when the current inlet is at a low point of the road; and (n) selects a different inlet spacing and repeating the above beginning with determining the maximum catchment flow when the current inlet is not at a low point of the road.",12,claim 9,0,D
10606964,14,"14. The computer system of claim 13 , wherein the inlet spacing generation application: outputs a suggestion to change a design of the road when the catchment length is not larger than or equal to a minimum length.",13,claim 13,0,D
10606964,15,"15. The computer system of claim 13 , wherein the inlet spacing generation application: after determining the intercepted flow, checks an efficiency of the current inlet and providing a warning if the efficiency is below a threshold.",14,claim 13,0,D
10606964,16,"16. The computer system of claim 9 , further comprising constructing the inlets at the inlet locations.",15,claim 9,0,D
10606965,1,"1. A method for emulating potentially malicious code, the method comprising the steps of: emulating a first ring of an operating system; emulating a second ring of the operating system, where the second ring has greater access to system resources than the first ring and where the first and second rings are separately emulated; executing a code payload in the emulated first ring; checking the behavior of the executing code payload for suspect behavior; and identifying the code payload as malicious code if suspect behavior is detected.",0,,1,D
10606965,2,"2. The method of claim 1 , where the step of emulating a second ring of the operating system further comprises emulating at least one of operating system and microarchitecture functionality such that the second ring emulation returns results to the executing code payload, but does not actually perform the functionality in a host platform.",1,claim 1,0,D
10606965,3,"3. The method of claim 1 , where the step of executing a code payload in the emulated first ring further includes executing the code payload in the emulated first ring at one or more offsets.",2,claim 1,0,D
10606965,4,"4. The method of claim 1 , where the step of checking the behavior of the executing code payload for suspect behavior further includes determining the suspect behavior one or more of dynamically, parametrically, and statically.",3,claim 1,0,D
10606965,5,"5. The method of claim 1 , where the suspect behavior includes one or more of invocation of certain operating system behavior, execution of predetermined instructions, execution of predetermined sequences of instructions, accesses to predetermined memory addresses, execution of self-contained functionality in the code, execution of a decrypting operation, execution of a self-mutating operation, execution of one or more instructions to load a value of an instruction pointer into a general purpose register, execution of instructions to detect whether the code payload is running in an emulator, and execution of code matching at least one of a set of signatures.",4,claim 1,0,D
10606965,6,"6. The method of claim 5 , where at least some of the suspect behavior is defined by one or more of dynamically, parametrically, or statically.",5,claim 5,0,D
10606965,7,"7. The method of claim 1 , where the step of executing a code payload in the emulated first ring further comprises: emulating the code payload in a virtual machine; and emulating operating system calls and interrupts in a separate layer that does not perform the operating system calls and interrupts, but returns an expected return value to the code payload in order to facilitate continued execution of the code payload.",6,claim 1,0,D
10606965,8,"8. A system for emulating potentially malicious code, the system comprising: one or more processors; and one or more memory devices in communication with the one or more processors, the memory devices having computer-readable instructions stored thereupon that, when executed by the processors, cause the processors to operate by: emulating a first ring of an operating system; emulating a second ring of the operating system, where the second ring has greater access to system resources than the first ring and where the first and second rings are separately emulated; executing a code payload in the emulated first ring; checking the behavior of the executing code payload for suspect behavior; and identifying the code payload as malicious code if suspect behavior is detected.",7,,0,D
10606965,9,"9. The system of claim 8 , where the emulating a second ring of the operating system further comprises emulating at least one of operating system and microarchitecture functionality such that the second ring emulation returns results to the executing code payload, but does not actually perform the functionality in a host platform.",8,claim 8,0,D
10606965,10,"10. The system of claim 8 , where the executing a code payload in the emulated first ring further includes executing the code payload in the emulated first ring at one or more offsets.",9,claim 8,0,D
10606965,11,"11. The system of claim 8 , where the checking the behavior of the executing code payload for suspect behavior further includes determining the suspect behavior one or more of dynamically, parametrically, and statically.",10,claim 8,0,D
10606965,12,"12. The system of claim 8 , where the suspect behavior includes one or more of invocation of certain operating system behavior, execution of predetermined instructions, execution of predetermined sequences of instructions, accesses to predetermined memory addresses, execution of self-contained functionality in the code, execution of a decrypting operation, execution of a self-mutating operation, execution of one or more instructions to load a value of an instruction pointer into a general purpose register, execution of instructions to detect whether the code payload is running in an emulator, and execution of code matching at least one of a set of signatures.",11,claim 8,0,D
10606965,13,"13. The system of claim 12 , where at least some of the suspect behavior is defined by one or more of dynamically, parametrically, or statically.",12,claim 12,0,D
10606965,14,"14. The system of claim 8 , where the executing a code payload in the emulated first ring further comprises: emulating the code payload in a virtual machine; and emulating operating system calls and interrupts in a separate layer that does not perform the operating system calls and interrupts, but returns an expected return value to the code payload in order to facilitate continued execution of the code payload.",13,claim 8,0,D
10606965,15,"15. A non-transitory computer readable medium storing computer code configured to a cause a processing device to operate to emulate potentially malicious code, the computer code including instructions that configure the processing device to: emulate a first ring of an operating system; emulate a second ring of the operating system, where the second ring has greater access to system resources than the first ring and where the first and second rings are separately emulated; execute a code payload in the emulated first ring; check the behavior of the executing code payload for suspect behavior; and identify the code payload as malicious code if suspect behavior is detected.",14,,0,D
10606965,16,"16. The non-transitory computer readable medium of claim 15 , where the instructions configured to cause the processing device to emulate a second ring of the operating system includes instructions to cause the processing device to emulate at least one of operating system and microarchitecture functionality such that the second ring emulation returns results to the executing code payload, but does not actually perform the functionality in a host platform.",15,claim 15,0,D
10606965,17,"17. The non-transitory computer readable medium of claim 15 , where the instructions configured to cause the processing device to execute a code payload in the emulated first ring further comprises instructions to cause the processing device to execute the code payload in the emulated first ring at one or more offsets.",16,claim 15,0,D
10606965,18,"18. The non-transitory computer readable medium of claim 15 , where the instructions configured to cause the processing device to check the behavior of the executing code payload for suspect behavior further comprise instructions to cause the processing device to determine the suspect behavior one or more of dynamically, parametrically, and statically.",17,claim 15,0,D
10606965,19,"19. The non-transitory computer readable medium of claim 15 , the suspect behavior includes one or more of invocation of certain operating system behavior, execution of predetermined instructions, execution of predetermined sequences of instructions, accesses to predetermined memory addresses, execution of self-contained functionality in the code, execution of a decrypting operation, execution of a self-mutating operation, execution of one or more instructions to load a value of an instruction pointer into a general purpose register, execution of instructions to detect whether the code payload is running in an emulator, and execution of code matching at least one of a set of signatures.",18,claim 15,0,D
10606965,20,"20. The non-transitory computer readable medium of claim 19 , where at least some of the suspect behavior is defined by one or more of dynamically, parametrically, or statically.",19,claim 19,0,D
10606965,21,"21. The non-transitory computer readable medium of claim 15 , where the instructions configured to cause the processing device to execute a code payload in the emulated first ring further comprises instructions configured to cause the processing device to: emulate the code payload in a virtual machine; and emulate operating system calls and interrupts in a separate layer that does not perform the operating system calls and interrupts, but returns an expected return value to the code payload in order to facilitate continued execution of the code payload.",20,claim 15,0,D
10606966,1,"1. A method of modeling a deformable body comprising particles, the method comprising: determining, at an analyzer, a strain energy based on an external force applied to the deformable body; calculating, at the analyzer, a particle displacement of each particle among the particles based on the strain energy; calculating, at the analyzer, an internal force in an internal portion of the deformable body based on the particle displacement for the particles; determining, at the analyzer, an overall displacement of the deformable body based on the particle displacement for the particles and the internal force; adjusting, at a controller, the overall displacement of the deformable body based on a volume of the particles; and verifying whether the volume of the particles is preserved by the overall displacement, in response to the volume of the particles not being preserved, further adjusting the overall displacement by multiplying the particle displacement by a constant so that a sum of variations in volume of all the particles satisfies a threshold and a variation in a volume of each particle is a difference from a previous time step and to a current time step.",0,,1,D
10606966,2,"2. The method of claim 1 , wherein the determining of the strain energy comprises determining the strain energy using a strain energy density function based on the external force and the particle displacement.",1,claim 1,0,D
10606966,3,"3. The method of claim 2 , wherein the strain energy density function comprises a parameter associated with an elasticity of the deformable body.",2,claim 2,0,D
10606966,4,"4. The method of claim 1 , wherein the determining of the overall displacement comprises: defining a variation in the internal force; and determining the overall displacement of the deformable body based on the variation in the internal force.",3,claim 1,0,D
10606966,5,"5. The method of claim 1 , wherein the verifying comprises verifying whether an overall volume of the particles relocated by the overall displacement is preserved.",4,claim 1,0,D
10606966,6,"6. The method of claim 5 , wherein the verifying of whether the overall volume of the particles is preserved comprises verifying whether the overall volume of the particles is preserved based on a comparison between the overall volume of the particles before and after the particles are relocated by the overall displacement.",5,claim 5,0,D
10606966,7,"7. The method of claim 5 , wherein the verifying of whether the overall volume of the particles is preserved comprises verifying whether the overall volume of the particles relocated by the overall displacement is within a predetermined range.",6,claim 5,0,D
10606966,8,"8. The method of claim 1 , further comprising: receiving a modeling condition comprising constraints and the external force for modeling of the deformable body.",7,claim 1,0,D
10606966,9,"9. The method of claim 1 , wherein the external force changes at each of a plurality of time steps over time.",8,claim 1,0,D
10606966,10,10. A non-transitory computer-readable medium storing a program for causing a processor to perform the method of claim 1 .,9,claim 1,0,D
10606966,11,"11. An apparatus to model a deformable body comprising particles, the apparatus comprising: a processor configured to determine a strain energy based on an external force applied to the deformable body; calculate a particle displacement of each particle among the particles based on the strain energy; calculate an internal force in an internal portion of the deformable body based on the particle displacement for the particles; determine an overall displacement of the deformable body based on the particle displacement for the particles and the internal force; adjust the overall displacement of the deformable body based on a volume of the particles; verify whether the volume of the particles is preserved by the overall displacement, and wherein the processor is further configured to adjust the overall displacement by multiplying the particle displacement by a constant so that a sum of variations in volume of all the particles satisfies a threshold and a variation in a volume of each particle is a difference from a previous time step and to a current time step, in response to the volume of the particles not being preserved.",10,,0,D
10606966,12,"12. The apparatus of claim 11 , wherein the processor is further configured to determine the strain energy using a strain energy density function based on the external force and the particle displacement.",11,claim 11,0,D
10606966,13,"13. The apparatus of claim 11 , wherein the processor is further configured to define a variation in the internal force, and determine the overall displacement of the deformable body based on the variation in the internal force.",12,claim 11,0,D
10606966,14,"14. The apparatus of claim 11 , wherein the processor is further configured to verify whether an overall volume of the particles relocated by the overall displacement is preserved.",13,claim 11,0,D
10606966,15,"15. The apparatus of claim 14 , wherein the processor is further configured to verify whether the overall volume of the particles is preserved based on a comparison between the overall volume of the particles before and after the particles are relocated by the overall displacement.",14,claim 14,0,D
10606966,16,"16. The apparatus of claim 14 , wherein the processor is further configured to verify whether the overall volume of the particles relocated by the overall displacement is within a predetermined range.",15,claim 14,0,D
10606966,17,"17. The apparatus of claim 11 , wherein the processor is further configured to receive a modeling condition comprising constraints and the external force for modeling of the deformable body.",16,claim 11,0,D
10606966,18,"18. The apparatus of claim 11 , wherein the external force changes at each of a plurality of time steps over time.",17,claim 11,0,D
10606967,1,"1. A computer-implemented method, comprising: receiving actual distributed temperature sensing (DTS) data and pressure data in response to a stimulation treatment applied to a hydrocarbon field through a well in the hydrocarbon field; building a pre-stimulation model that includes reservoir parameters, the pre-stimulation model generating simulated DTS and pressure data as a function of the reservoir parameters, the reservoir parameters comprising a permeability parameter and a skin parameter of the hydrocarbon field; determining whether a thermal match between the actual DTS and pressure data and the simulated DTS and pressure data is obtained; in response to determining that the thermal match between the actual DTS and pressure data and the simulated DTS and pressure data is not obtained: updating the reservoir parameters, wherein updating the reservoir parameters comprises updating the permeability parameter and the skin parameter; updating the pre-stimulation model based on the updated reservoir parameters; and re-generating the simulated DTS and pressure data based on the updated pre-stimulation model until the thermal match between the actual DTS and pressure data and the simulated DTS and pressure data is obtained; determining whether the updated permeability parameter and the updated skin parameter match a performed pressure transient analysis (PTA); and in response to determining that the updated permeability parameter and the updated skin parameter do not match the PTA: updating the reservoir parameters, wherein updating the reservoir parameters comprises the updated permeability parameter and the updated skin parameter; updating the pre-stimulation model based on the updated reservoir parameters; and re-generating the simulated DTS and pressure data based on the updated pre-stimulation model until the thermal match between the actual DTS and pressure data and the simulated DTS and pressure data is obtained and the updated permeability parameter and the updated skin parameter match the PTA.",0,,1,D
10606967,2,"2. The computer-implemented method of claim 1 , further comprising: receiving input well data associated with the stimulation treatment for the hydrocarbon field through the well in the hydrocarbon field; and preparing the stimulation treatment based on input well data, wherein preparing the stimulation treatment of the hydrocarbon field comprises one or more of: designing a coiled tubing stimulation; testing the well infectivity; monitoring movement of injected fluid in the well; creating a pressure transient event to be analyzed for the permeability parameter and the skin parameter; or monitoring a warmback profile of the hydrocarbon field.",1,claim 1,0,D
10606967,3,"3. The computer-implemented method of claim 2 , wherein preparing a stimulation treatment of the hydrocarbon field comprises obtaining pre-stimulation DTS data and pressure data associated with the well in the hydrocarbon field, the method further comprising: determining whether the obtained pre-stimulation DTS data and pressure data are sufficient for executing the stimulation treatment; and in response to determining that the obtained pre-stimulation DTS data and pressure data not sufficient for executing the stimulation treatment, obtaining more pre-stimulation DTS and pressure data by creating more events in the preparing the stimulation treatment.",2,claim 2,0,D
10606967,4,"4. The computer-implemented method of claim 3 , further comprising, in response to determining that the obtained pre-stimulation DTS data and pressure data are sufficient for executing the stimulation treatment, performing the stimulation treatment.",3,claim 3,0,D
10606967,5,"5. The computer-implemented method of claim 4 , wherein performing the stimulation treatment comprises one or more of: detecting high intake zones of the well based on the pre-stimulation DTS data; optimizing stimulation fluid pumping schedule by adjusting a flow rate to match an actual well condition; or pumping stimulation fluid into the well according to a stimulation fluid pumping schedule.",4,claim 4,0,D
10606967,6,"6. The computer-implemented method of claim 2 , wherein the input well data comprises one or more of a wellbore diagram, directional survey, while-drilling mobility data, processed lithological data or petro-physical logs.",5,claim 2,0,D
10606967,7,"7. The computer-implemented method of claim 1 , further comprising evaluating the stimulation treatment, wherein evaluating the stimulation treatment comprises one or more of: obtaining actual DTS data while injecting a post-flush fluid into the well; comparing an injection/fall-off of a pre-flush into the well with an injection/fall-off of the post-flush into the well to evaluate chemical diversion and stimulation efficiency; detecting improvements in flow paths or pressure response; or performing a production logging tool (PLT) run.",6,claim 1,0,D
10606967,8,"8. The computer-implemented method of claim 1 , wherein building a pre-stimulation model comprises one or more of: applying a change of the reservoir parameters to match a transient event; or building the pre-stimulation model to match a thermal event.",7,claim 1,0,D
10606967,9,"9. The computer-implemented method of claim 1 , further comprising fine-tuning the actual DTS and pressure data and the simulated DTS and pressure data for building the pre-stimulation model.",8,claim 1,0,D
10606967,10,"10. The computer-implemented method of claim 1 , further comprising: comparing the reservoir parameters with a result of a production logging tool (PLT) run; or outputting the reservoir parameters.",9,claim 1,0,D
10606967,11,"11. A non-transitory computer-readable medium storing instructions executable by a computer system to perform operations comprising: receiving actual distributed temperature sensing (DTS) data and pressure data in response to a stimulation treatment applied to a hydrocarbon field through a well in the hydrocarbon field; building a pre-stimulation model that includes reservoir parameters, the pre-stimulation model generating simulated DTS and pressure data as a function of the reservoir parameters, the reservoir parameters comprising a permeability parameter and a skin parameter of the hydrocarbon field; determining whether a thermal match between the actual DTS and pressure data and the simulated DTS and pressure data is obtained; in response to determining that the thermal match between the actual DTS and pressure data and the simulated DTS and pressure data is not obtained: updating the reservoir parameters, wherein updating the reservoir parameters comprises updating the permeability parameter and the skin parameter; updating the pre-stimulation model based on the updated reservoir parameters; and re-generating the simulated DTS and pressure data based on the updated pre-stimulation model until the thermal match between the actual DTS and pressure data and the simulated DTS and pressure data is obtained; determining whether the updated permeability parameter and the updated skin parameter match a performed pressure transient analysis (PTA); and in response to determining that the updated permeability parameter and the updated skin parameter do not match the PTA: updating the reservoir parameters, wherein updating the reservoir parameters comprises the updated permeability parameter and the updated skin parameter; updating the pre-stimulation model based on the updated reservoir parameters; and re-generating the simulated DTS and pressure data based on the updated pre-stimulation model until the thermal match between the actual DTS and pressure data and the simulated DTS and pressure data is obtained and the updated permeability parameter and the updated skin parameter match the PTA.",10,,0,D
10606967,12,"12. The non-transitory computer-readable medium of claim 11 , wherein the operations further comprises: receiving input well data associated with the stimulation treatment for the hydrocarbon field through the well in the hydrocarbon field; and preparing the stimulation treatment based on input well data, wherein preparing the stimulation treatment of the hydrocarbon field comprises one or more of: designing a coiled tubing stimulation; testing the well infectivity; monitoring movement of injected fluid in the well; creating a pressure transient event to be analyzed for the permeability parameter and the skin parameter; or monitoring a warmback profile of the hydrocarbon field.",11,claim 11,0,D
10606967,13,"13. The non-transitory computer-readable medium of claim 12 , wherein preparing a stimulation treatment of the hydrocarbon field comprises obtaining pre-stimulation DTS data and pressure data associated with the well in the hydrocarbon field, the opeations further comprising: determining whether the obtained pre-stimulation DTS data and pressure data are sufficient for executing the stimulation treatment; and in response to determining that the obtained pre-stimulation DTS data and pressure data not sufficient for executing the stimulation treatment, obtaining more pre-stimulation DTS and pressure data by creating more events in the preparing the stimulation treatment.",12,claim 12,0,D
10606967,14,"14. The non-transitory computer-readable medium of claim 11 , wherein the operations further comprises evaluating the stimulation treatment, wherein evaluating the stimulation treatment comprises one or more of: obtaining actual DTS data while injecting a post-flush fluid into the well; comparing an injection/fall-off of a pre-flush into the well with an injection/fall-off of the post-flush into the well to evaluate chemical diversion and stimulation efficiency; detecting improvements in flow paths or pressure response; or performing a production logging tool (PLT) run.",13,claim 11,0,D
10606967,15,"15. The non-transitory computer-readable medium of claim 11 , wherein building a pre-stimulation model comprises one or more of: applying a change of the reservoir parameters to match a transient event; or building the pre-stimulation model to match a thermal event.",14,claim 11,0,D
10606967,16,"16. A computer-implemented system comprising: memory; and data processing apparatus operable to: receive actual distributed temperature sensing (DTS) data and pressure data in response to a stimulation treatment applied to a hydrocarbon field through a well in the hydrocarbon field; build a pre-stimulation model that includes reservoir parameters, the pre-stimulation model generating simulated DTS and pressure data as a function of the reservoir parameters, the reservoir parameters comprising a permeability parameter and a skin parameter of the hydrocarbon field; determine whether a thermal match between the actual DTS and pressure data and the simulated DTS and pressure data is obtained; in response to determining that the thermal match between the actual DTS and pressure data and the simulated DTS and pressure data is not obtained: update the reservoir parameters, wherein updating the reservoir parameters comprises updating the permeability parameter and the skin parameter; update the pre-stimulation model based on the updated reservoir parameters; and re-generate the simulated DTS and pressure data based on the updated pre-stimulation model until the thermal match between the actual DTS and pressure data and the simulated DTS and pressure data is obtained; determine whether the updated permeability parameter and the updated skin parameter match a performed pressure transient analysis (PTA); and in response to determining that the updated permeability parameter and the updated skin parameter do not match the PTA: update the reservoir parameters, wherein updating the reservoir parameters comprises the updated permeability parameter and the updated skin parameter; update the pre-stimulation model based on the updated reservoir parameters; and re-generate the simulated DTS and pressure data based on the updated pre-stimulation model until the thermal match between the actual DTS and pressure data and the simulated DTS and pressure data is obtained and the updated permeability parameter and the updated skin parameter match the PTA.",15,,0,D
10606967,17,"17. The computer-implemented system of claim 16 , the data processing apparatus further operable to: receive input well data associated with the stimulation treatment for the hydrocarbon field through the well in the hydrocarbon field; and prepare the stimulation treatment based on input well data, wherein preparing the stimulation treatment of the hydrocarbon field comprises one or more of: designing a coiled tubing stimulation; testing the well infectivity; monitoring movement of injected fluid in the well; creating a pressure transient event to be analyzed for the permeability parameter and the skin parameter; or monitor a warmback profile of the hydrocarbon field.",16,claim 16,0,D
10606967,18,"18. The computer-implemented system of claim 16 , the data processing apparatus further operable to: obtain actual DTS data while injecting a post-flush fluid into the well; compare an injection/fall-off of a pre-flush into the well with an injection/fall-off of the post-flush into the well to evaluate chemical diversion and stimulation efficiency; detect improvements in flow paths or pressure response; or perform a production logging tool (PLT) run.",17,claim 16,0,D
10606967,19,"19. The computer-implemented system of claim 16 , the data processing apparatus further operable to fine-tune the actual DTS and pressure data and the simulated DTS and pressure data for building the pre-stimulation model.",18,claim 16,0,D
10606967,20,"20. The computer-implemented system of claim 16 , the data processing apparatus further operable to: compare the reservoir parameters with a result of a production logging tool (PLT) run; or output the reservoir parameters.",19,claim 16,0,D
10606968,1,"1. A non-transitory computer readable medium having stored thereon a plurality of software code portions defining logic for simulating a temporal process in a body, the logic comprising: providing a first system of node equations, including a first node equation for each of a first plurality of nodes of a uniform grid of nodes imposed on the body, the grid having three independent dimensions and having a uniform node spacing which is within ��10% of 0.27 nanometers, the first node equation for each particular one of the first nodes indicating a field value at the particular node in dependence upon quantities of a moveable particle within a first predetermined neighborhood around the particular node; providing a second system of node equations, including a second node equation for each of a second plurality of nodes in the grid, the second node equation for each subject one of the second nodes indicating a flux of the moveable particles at the subject node in dependence upon the field values within a seconedetermined neighborhood around the subject node, the second plurality of nodes including all of the first plurality of nodes or the first plurality of nodes including all of the second plurality of nodes or both; iterating through a plurality of the time steps to approximate quantities of the moveable particle at each of the nodes in the second plurality of nodes at the end of the plurality of time steps, and at each given time step in the plurality of time steps: approximating a field distribution for the given time step at each of the second plurality of nodes in dependence upon the first node equations and in further dependence upon a distribution of the moveable particles immediately prior to the given time step, and approximating a distribution of the moveable particles for the given time step in dependence upon the second node equations and in further dependence upon the field distribution approximated for the given time step.",0,,1,D
10606968,2,"2. The computer readable medium of claim 1 , wherein the moveable particles are charged particles, and wherein the field values are electric field values.",1,claim 1,0,D
10606968,3,"3. The computer readable medium of claim 1 , wherein the three independent dimensions are mutually orthogonal.",2,claim 1,0,D
10606968,4,"4. The computer readable medium of claim 1 , wherein approximating a field distribution for the given time step at each of the second plurality of nodes in dependence upon the first node equations comprises solving the first system of node equations as a set of simultaneous equations.",3,claim 1,0,D
10606968,5,"5. The computer readable medium of claim 1 , wherein the second system of node equations includes a system of discrete time probability equations, and wherein approximating a distribution of the moveable particles for the given time step comprises determining a particle quantity change at each of the nodes in the second plurality of nodes randomly in dependence upon the probability equation for that node.",4,claim 1,0,D
10606968,6,"6. The computer readable medium of claim 1 , wherein the second system of node equations includes a system of discrete time continuity equations, at least one of the discrete time continuity equations for each node in the second plurality of nodes, and wherein approximating a distribution of the moveable particles for the given time step comprises solving the system of continuity equations as a set of simultaneous equations.",5,claim 1,0,D
10606968,7,"7. The computer readable medium of claim 1 , wherein the first node equations for each particular one of the first nodes indicates the field value at the particular node in dependence upon quantities of the moveable particle within the first predetermined neighborhood assigned to nodes around the particular node, and wherein the first predetermined neighborhood around the particular node consists of the particular node and all nodes in the first plurality of nodes which in the grid are immediately adjacent to the particular node.",6,claim 1,0,D
10606968,8,"8. The computer readable medium of claim 1 , wherein the second node equation for each subject one of the second nodes indicates the flux of the moveable particles at the subject node in dependence upon the field values assigned to nodes within the second predetermined neighborhood around the subject node, and wherein the second predetermined neighborhood around the subject node consists of the subject node and all nodes in the second plurality of nodes which in the grid are immediately adjacent to the subject node.",7,claim 1,0,D
10606968,9,"9. The computer readable medium of claim 1 , wherein the first and second pluralities of nodes are the same.",8,claim 1,0,D
10606968,10,"10. The computer readable medium of claim 1 , wherein the moveable particles are disposed in the body in a crystal lattice structure whose vertex positions differ from the node positions in the uniform grid, wherein the logic comprises assigning each of the moveable particles to a corresponding node of the second plurality of nodes, wherein each of the first node equations indicates the field value at the particular node in dependence upon quantities of the moveable particle assigned to nodes in the second plurality of nodes which are within the first predetermined neighborhood of the particular node, and wherein approximating a field distribution for the given time step at each of the second plurality of nodes comprises evaluating the first node equations at the particular node in dependence upon the quantity of the moveable particle assigned to each node in the second plurality of nodes which are within the first predetermined neighborhood of the particular node, and further in dependence upon the distance to that node from the particular node.",9,claim 1,0,D
10606968,11,"11. The computer readable medium of claim 1 , wherein the moveable particles are disposed in the body in a crystal lattice structure whose vertex positions differ from the node positions in the uniform grid, wherein the logic comprises assigning each of the moveable particles to a corresponding node of the second plurality of nodes, and storing, in association with each node to which a particle is assigned, an identification of an actual position in the body of the particle assigned to the node, wherein each of the first node equations indicates the field value at the particular node further in dependence upon a distance to each of the moveable particles which are within the first predetermined neighborhood of the particular node, and wherein approximating a field distribution for the given time step at each of the second plurality of nodes comprises: determining, for each particular one of the nodes in the first plurality of nodes, whether the first predetermined neighborhood around the particular node includes a material border in the body; if the first predetermined neighborhood does include a material border, then for a particular one of the moveable particles within the first predetermined neighborhood, evaluating the first node equations at the particular node in dependence upon the actual distance to the particular particle as indicated by the actual position of the particle as stored in association with the node to which the particle is assigned; and if the first predetermined neighborhood does not include a material border, then evaluating the first node equations at the particular node in dependence upon the quantity of the moveable particle assigned to each node in the second plurality of nodes which are within the first predetermined neighborhood of the particular node, and further in dependence upon the distance to that node from the particular node.",10,claim 1,0,D
10606968,12,"12. The computer readable medium of claim 1 , wherein the moveable particles are disposed in the body in a crystal lattice structure whose vertex positions differ from the node positions in the uniform grid, wherein approximating a field distribution comprises assigning field values to nodes of the first plurality of nodes, wherein each of the second node equations indicates the flux of the moveable particles at the subject node in dependence upon the field values assigned to nodes within the second predetermined neighborhood around the subject node, and wherein approximating a distribution of the moveable particles for the given time step comprises evaluating the second node equations at the subject node in dependence upon the field value assigned to each node in the first plurality of nodes which are within the second predetermined neighborhood of the subject node, and further in dependence upon the distance to that node from the subject node.",11,claim 1,0,D
10606968,13,"13. The computer readable medium of claim 1 , wherein the code portions further define logic for reporting to a user values determined for the distribution of the moveable particles at the end of the plurality of time steps.",12,claim 1,0,D
10606968,14,"14. A computer-implemented method for simulating a temporal process in a body, comprising: providing a first system of node equations, including a first node equation for each of a first plurality of nodes of a uniform grid of nodes imposed on the body, the grid having three independent dimensions and having a uniform node spacing which is within ��10% of 0.27 nanometers, the first node equation for each particular one of the first nodes indicating a field value at the particular node in dependence upon quantities of a moveable particle within a first predetermined neighborhood around the particular node; providing a second system of node equations, including a second node equation for each of a second plurality of nodes in the grid, the second node equation for each subject one of the second nodes indicating a flux of the moveable particles at the subject node in dependence upon the field values within a second predetermined neighborhood around the subject node, the second plurality of nodes including al the first plurality of nodes or the first plurality of nodes including all of the second plurality of nodes or both; a computer system iterating through a plurality of the time steps to approximate quantities of the moveable particle at each of the nodes in the second plurality of nodes at the end of the plurality of time steps, and at each given time step in the plurality of time steps: a computer system approximating a field distribution for the given time step at each of the second plurality of nodes in dependence upon the first node equations and in further dependence upon a distribution of the moveable particles immediately prior to the given time step, and a computer system approximating a distribution of the moveable particles for the given time step in dependence upon the second node equations and in further dependence upon the field distribution approximated for the given time step.",13,,0,D
10606968,15,"15. A non-transitory computer readable medium having stored thereon a plurality of software code portions defining logic for simulating a temporal process in a body portion, the body portion including first particles of a first particle type, the logic comprising: assigning each of the first particles in the body portion to a corresponding one of a plurality of nodes in a uniform grid of nodes imposed on the body portion, the grid having three independent dimensions and having a uniform node spacing which is within ��10% of 0.27 nanometers, the first particles being disposed in a crystal lattice structure having vertices which do not coincide with any nodes of the uniform grid; providing a system of discrete time probability node equations, at least one of the node equations for each of the plurality of nodes of the grid to which a particle is assigned, each of the node equations describing probability of a predetermined physical event type occurring at the respective grid node during a predetermined timeiod, in dependence upon a material property of the particle assigned to the respective grid node, and further in dependence upon a distance to an adjacent particle in the body; and iterating through a first plurality of time steps in a simulation period, at each particular time step re-assigning the first particles in the body portion to nodes in the plurality of nodes in dependence upon the node equations and the particle assignments at the beginning of the particular time step, wherein iterating through the first plurality of time steps comprises, for a given one of the node equations during one of the iterations, approximating the distance to the adjacent particle as the distance between the given node and the grid node to which the adjacent particle is assigned.",14,,0,D
10606968,16,"16. The non-transitory computer readable medium of claim 15 , wherein each of the assignments of a first particle to a grid node comprises storing, in association with each grid node to which a particle is assigned, an identification of an actual position in the body portion of the particle assigned to the respective grid node, and wherein the logic comprises: determining, for each particular one of the grid nodes to which a particle is assigned, whether the particular node is within a predetermined neighborhood of a material border; if the particular node is within the predetermined neighborhood of a material border, then for the particular node equation, determining the distance to an adjacent particle in dependence upon the actual particle positions as stored in association with the particular node and the node to which the adjacent particle is assigned; and if the particular node is not within the predetermined neighborhood, then for the particular node equation, approximating the distance to the adjacent particle as the distance between the particular grid node and the grid node to which the adjacent particle is assigned.",15,claim 15,0,D
10606968,17,"17. A computer-implemented method for simulating a temporal process in a body portion, the body portion including first particles of a first particle type, comprising: a computer system assigning each of the first particles in the body portion to a corresponding one of a plurality of nodes in a uniform grid of nodes imposed on the body portion, the grid having three independent dimensions and having a uniform node spacing which is within ��10% of 0.27 nanometers, the first particles being disposed in a crystal lattice structure having vertices which do not coincide with any nodes of the uniform grid; providing a system of discrete time probability node equations, at least one of the node equations for each of the plurality of nodes of the grid to which a particle is assigned, each of the node equations describing probability of a predetermined physical event type occurring at the respective grid node during a predetermined time period, in dependence upon a material property of the particle assigned to thepective grid node, and further in dependence upon a distance to an adjacent particle in the body; and a computer system iterating through a first plurality of time steps in a simulation period, at each particular time step re-assigning the first particles in the body portion to nodes in the plurality of nodes in dependence upon the node equations and the particle assignments at the beginning of the particular time step, wherein iterating through the first plurality of time steps comprises, for a given one of the node equations during one of the iterations, approximating the distance to the adjacent particle as the distance between the given node and the grid node to which the adjacent particle is assigned.",16,,0,D
10606969,1,"1. A method of predicting electrostatic charges in a liquid container, the method comprising: generating a computer geometric model of the liquid container according to a design of the liquid container; generating executable code to reproduce fluid dynamics and electrostatic charge conservation during transfer of liquid into the liquid container; executing a simulating application, via a computer processor configured to access the computer geometric model and the executable code, to at least: perform a simulation of the transfer of liquid into the liquid container subject to the fluid dynamics and electrostatic charge conservation, and from the simulation, produce a prediction of electrostatic charges in the liquid container during the transfer of liquid; and iterate the simulation to update the electrostatic charge conservation to thereby refine the prediction of electrostatic charges in the liquid container during the transfer of liquid; and outputting the prediction of electrostatic charges in the liquid container to enable certification of the design of the liquid container based thereon.",0,,1,D
10606969,2,"2. The method of claim 1 , wherein generating the executable code includes receiving selected fluid dynamics models from a database of fluid dynamics models including momentum, boundary conditions, volumetric flow rate, or volume charge density.",1,claim 1,0,D
10606969,3,"3. The method of claim 2 , wherein generating the executable code includes receiving selected electrostatic charge transport models representative of electrostatic charge conservation from a database of electrostatic charge transport models including conduction, convection, diffusion, or mobility.",2,claim 2,0,D
10606969,4,"4. The method of claim 3 , wherein executing the simulating application includes solving the selected electrostatic charge transport models during and after transfer of liquid into the liquid container.",3,claim 3,0,D
10606969,5,"5. The method of claim 4 , wherein generating the computer geometric model includes generating a finite element model comprising a system modeled by a set of finite elements interconnected by nodes.",4,claim 4,0,D
10606969,6,"6. The method of claim 5 , wherein solving the selected electrostatic charge transport models includes, for each node of the nodes, extracting data from the node and solving for an electric potential at the node using on the electrostatic charge transport models during transfer of liquid into the liquid container.",5,claim 5,0,D
10606969,7,"7. The method of claim 6 , wherein executing the simulating application to iterate the simulation includes retrieving the electric potential data at each node of the nodes, and integrating the electric potential data at each node of the nodes with the electrostatic charge transport models such that electrostatic charge conservation during the transfer of liquid into the liquid container is updated.",6,claim 6,0,D
10606969,8,"8. The method of claim 1 , wherein executing the simulating application includes calculating boundary conditions inside the liquid container including liquid container inlet boundary conditions at which liquid is transferred into the liquid container, air-liquid boundary conditions, conducting liquid container boundary wall conditions, dielectric liquid container boundary wall conditions, and mixed liquid container boundary conditions.",7,claim 1,0,D
10606969,9,"9. The method of claim 1 , wherein outputting the prediction of electrostatic charges in the liquid container includes, in at least one other instance: producing a modified design of the liquid container based on the prediction of electrostatic charges in the liquid container; generating a modified computer geometric model of the liquid container according to the modified design; and re-executing the simulating application via the computer processor configured to access the modified computer geometric model and the executable code.",8,claim 1,0,D
10606969,10,"10. An apparatus for predicting electrostatic charges in a liquid container, the apparatus comprising a processor and a memory storing executable instructions that, in response to execution by the processor, cause the apparatus to at least: generate a computer geometric model of the liquid container according to a design of the liquid container; generate executable code to reproduce fluid dynamics and electrostatic charge conservation during transfer of liquid into the liquid container; execute a simulating application, via the processor configured to access the computer geometric model and the executable code, to at least: perform a simulation of the transfer of liquid into the liquid container subject to the fluid dynamics and electrostatic charge conservation, and from the simulation, produce a prediction of electrostatic charges in the liquid container during the transfer of liquid; and iterate the simulation to update the electrostatic charge conservation to thereby refine the prediction of electrostatic charges in the liquid container during the transfer of liquid; and output the prediction of electrostatic charges in the liquid container to enable certification of the design of the liquid container based thereon.",9,,0,D
10606969,11,"11. The apparatus of claim 10 , wherein the apparatusbeing configured to generate the executable code includes being caused to receive selected fluid dynamics models from a database of fluid dynamics models including momentum, volumetric flow rate, boundary conditions, or volume charge density.",10,claim 10,0,D
10606969,12,"12. The apparatus of claim 11 , wherein the apparatus being configured to generate the executable code includes being caused to receive selected electrostatic charge transport models representative of electrostatic charge conservation from a database of electrostatic charge transport models including conduction, convection, diffusion, or mobility.",11,claim 11,0,D
10606969,13,"13. The apparatus of claim 12 , wherein the apparatus being configured to execute the simulating application includes being caused to solve the selected electrostatic charge transport models during and after transfer of liquid into the liquid container.",12,claim 12,0,D
10606969,14,"14. The apparatus of claim 13 , wherein the apparatus being configured to generate the computer geometric model includes being caused to generate a finite element model comprising a system modeled by a set of finite elements interconnected by nodes.",13,claim 13,0,D
10606969,15,"15. The apparatus of claim 14 , wherein the apparatus being configured to solve the selected electrostatic charge transport models during transfer of liquid into the liquid container includes being caused to, for each node of the nodes, extract data from the node and solve for an electric potential at the node using on the electrostatic charge transport models during transfer of liquid into the liquid container.",14,claim 14,0,D
10606969,16,"16. The apparatus of claim 15 , wherein the apparatus being configured to execute the simulating application to iterate the simulation includes being caused to retrieve the electric potential data at each node of the nodes, and integrate the electric potential data at each node of the nodes with the electrostatic charge transport models such that electrostatic charge conservation during the transfer of liquid into the liquid container is updated.",15,claim 15,0,D
10606969,17,"17. The apparatus of claim 10 , wherein the apparatus being configured to execute the simulating application includes being caused to calculate boundary conditions inside the liquid container including liquid container inlet boundary conditions at which liquid is transferred into the liquid container, air-liquid boundary conditions, conducting liquid container boundary wall conditions, dielectric liquid container boundary wall conditions, and mixed liquid container boundary conditions.",16,claim 10,0,D
10606969,18,"18. The apparatus of claim 10 , wherein the apparatus being configured to output the prediction of electrostatic charges in the liquid container includes being caused to, in at least one other instance: produce a modified design of the liquid container based on the prediction of electrostatic charges in the liquid container; generate a modified computer geometric model of the liquid container according to the modified design; and re-execute the simulating application via the computer processor configured to access the modified computer geometric model and the executable code.",17,claim 10,0,D
10606969,19,"19. A computer-readable storage medium that is non-transitory and has computer-readable program code portions stored therein that in response to execution by a processor, cause an apparatus to at least: generate a computer geometric model of a liquid container according to a design of the liquid container; generate executable code to reproduce fluid dynamics and electrostatic charge conservation during transfer of liquid into the liquid container; execute a simulating application, via the processor configured to access the computer geometric model and the executable code, to at least: perform a simulation of the transfer of liquid into the liquid container subject to the fluid dynamics and electrostatic charge conservation, and from the simulation, produce a prediction of electrostatic charges in the liquid container during the transfer of liquid; and iterate the simulation to update the electrostatic charge conservation to thereby refine the prediction of electrostatic charges in the liquid container during the transfer of liquid; and output the prediction of electrostatic charges in the liquid container to enable certification of the design of the liquid container based thereon.",18,,0,D
10606969,20,"20. The computer-readable storage medium of claim 19 , wherein the apparatus being configured to generate the executable code includes being caused to receive selected fluid dynamics models from a database of fluid dynamics models including momentum, boundary conditions, volumetric flow rate, or volume charge density.",19,claim 19,0,D
10606969,21,"21. The computer-readable storage medium of claim 20 , wherein the apparatus being configured to generate the executable code includes being caused to receive selected electrostatic charge transport models representative of electrostatic charge conservation from a database of electrostatic charge transport models including conduction, convection, diffusion, or mobility.",20,claim 20,0,D
10606969,22,"22. The computer-readable storage medium of claim 21 , wherein the apparatus being configured to execute the simulating application includes being caused to solve the selected electrostatic charge transport models during and after transfer of liquid into the liquid container.",21,claim 21,0,D
10606969,23,"23. The computer-readable storage medium of claim 22 , wherein the apparatus being configured to generate the computer geometric model includes being caused to generate a finite element model comprising a system modeled by a set of finite elements interconnected by nodes.",22,claim 22,0,D
10606969,24,"24. The computer-readable storage medium of claim 23 , wherein the apparatus being configured to solve the selected electrostatic charge transport models during transfer of liquid into the liquid container includes being caused to, for each node of the nodes, extract data from the node and solve for an electric potential at the node using on the electrostatic charge transport models during transfer of liquid into the liquid container.",23,claim 23,0,D
10606969,25,"25. The computer-readable storage medium of claim 24 , wherein the apparatus being configured to execute the simulating application to iterate the simulation includes being caused to retrieve the electric potential data at each node of the nodes, and integrate the electric potential data at each node of the nodes with the electrostatic charge transport models such that electrostatic charge conservation during the transfer of liquid into the liquid container is updated.",24,claim 24,0,D
10606969,26,"26. The computer-readable storage medium of claim 25 , wherein the apparatus being configured to execute the simulating application includes being caused to calculate boundary conditions inside the liquid container including liquid container inlet boundary conditions at which liquid is transferred into the liquid container, air-liquid boundary conditions, conducting liquid container boundary wall conditions, dielectric liquid container boundary wall conditions, and mixed liquid container boundary conditions.",25,claim 25,0,D
10606969,27,"27. The computer-readable storage medium of claim 26 , wherein the apparatus being configured to output the prediction of electrostatic charges in the liquid container includes being caused to, in at least one other instance: produce a modified design of the liquid container based on the prediction of electrostatic charges in the liquid container; generate a modified computer geometric model of the liquid container according to the modified design; and re-execute the simulating application via the computer processor configured to access the modified computer geometric model and the executable code.",26,claim 26,0,D
10606970,1,"1. A computer-implemented method for statistical static timing analysis of an integrated circuit, the method comprising: specifying, by a user, a criteria for paths and tests for the integrated circuit; performing, by a processor, a statistical static timing analysis for each of the paths of the integrated circuit to create slack canonicals; projecting, by the processor, the slack canonicals for each of the paths of the integrated circuit to a worst value; applying a filter to the slack canonicals; determining, by the processor, worst timing corners based at least in part on applying the filter to the slack canonicals and based at least in part on the worst value; performing a selection based on the worst timing corners, wherein the selection is at least one of selecting a number of timing corners or selecting a margin; and delivering a timing setup to an optimization tool, the timing setup being based at least in part on the selection.",0,,1,D
10606970,2,"2. The computer-implemented method of claim 1 , wherein the number of timing corners is determined by an efficiency of the optimization tool.",1,claim 1,0,D
10606970,3,"3. The computer-implemented method of claim 1 , wherein the margin is selected to provide a desired coverage for a number of selected timing corners.",2,claim 1,0,D
10606970,4,"4. The computer-implemented method of claim 1 , wherein applying the filter enables a user to define the worst value based on a desired test.",3,claim 1,0,D
10606970,5,"5. The computer-implemented method of claim 1 , wherein applying the filter enables a user to define the worst value based on a desired outcome.",4,claim 1,0,D
10606970,6,"6. The computer-implemented method of claim 1 , wherein applying the filter enables a user to define the worst value based on which of a plurality of parameters are of particular importance.",5,claim 1,0,D
10606970,7,"7. The computer-implemented method of claim 1 , wherein applying the filter enables a user to exclude at least one path.",6,claim 1,0,D
10606970,8,"8. The computer-implemented method of claim 1 , wherein the worst timing corners are determined using pre-determined test metrics.",7,claim 1,0,D
10606970,9,"9. The computer-implemented method of claim 1 , further comprising performing, by the processor, a subsequent statistical static timing analysis of the integrated circuit using the selection.",8,claim 1,0,D
10606970,10,"10. A system comprising: a memory comprising computer readable instructions; and a processing device for executing the computer readable instructions for performing a method for statistical static timing analysis of an integrated circuit, the method comprising: specifying, by a user, a criteria for paths and tests for the integrated circuit; performing, by a processor, a statistical static timing analysis for each of the paths of the integrated circuit to create slack canonicals; projecting, by the processor, the slack canonicals for each of the paths of the integrated circuit to a worst value; applying a filter to the slack canonicals; determining, by the processor, worst timing corners based at least in part on applying the filter to the slack canonicals and based at least in part on the worst value; performing a selection based on the worst timing corners, wherein the selection is at least one of selecting a number of timing corners or selecting a margin; and delivering a timing setup to an optimization tool, the timing setup being based at least in part on the selection.",9,,0,D
10606970,11,"11. The system of claim 10 , wherein the number of timing corners is determined by an efficiency of the optimization tool.",10,claim 10,0,D
10606970,12,"12. The system of claim 10 , wherein the margin is selected to provide a desired coverage for a number of selected timing corners.",11,claim 10,0,D
10606970,13,"13. The system of claim 10 , wherein applying the filter enables a user to define the worst value based on a desired test.",12,claim 10,0,D
10606970,14,"14. The system of claim 10 , wherein applying the filter enables a user to define the worst value based on a desired outcome.",13,claim 10,0,D
10606970,15,"15. The system of claim 10 , wherein applying the filter enables a user to define the worst value based on which of a plurality of parameters are of particular importance.",14,claim 10,0,D
10606970,16,"16. The system of claim 10 , wherein applying the filter enables a user to exclude at least one path.",15,claim 10,0,D
10606970,17,"17. The system of claim 10 , wherein the worst timing corners are determined using pre-determined test metrics.",16,claim 10,0,D
10606970,18,"18. The system of claim 10 , wherein the method further comprises performing, by the processor, a subsequent statistical static timing analysis of the integrated circuit using the selection.",17,claim 10,0,D
10606970,19,"19. A computer program product comprising: a computer readable storage medium having program instructions embodied therewith, the program instructions executable by a processing device to cause the processing device to perform a method for statistical static timing analysis of an integrated circuit, the method comprising: specifying, by a user, a criteria for paths and tests for the integrated circuit; performing, by a processor, a statistical static timing analysis for each of the paths of the integrated circuit to create slack canonicals; projecting, by the processor, the slack canonicals for each of the paths of the integrated circuit to a worst value; applying a filter to the slack canonicals; determining, by the processor, worst timing corners based at least in part on applying the filter to the slack canonicals and based at least in part on the worst value; performing a selection based on the worst timing corners, wherein the selection is at least one of selecting a number of timing corners or selecting a margin; and delivering a timing setup to an optimization tool, the timing setup being based at least in part on the selection.",18,,0,D
10606970,20,"20. The computer program product of claim 19 , wherein the method further comprises performing, by the processor, a subsequent statistical static timing analysis of the integrated circuit using the selection.",19,claim 19,0,D
10606971,1,"1. A system, comprising a processor to: receive a netlist comprising a complex coverage event that depends on at least one singular independent signal; detect that the complex coverage event can be separated into the singular independent signal and a logic state based on a structural logic analysis; and test the netlist based on the singular independent signal.",0,,1,D
10606971,2,"2. The system of claim 1 , wherein the processor is to separate the singular independent signal from the logic state in the complex coverage event to generate a partial coverage event comprising the logic state.",1,claim 1,0,D
10606971,3,"3. The system of claim 2 , wherein the processor is to determine an operation window in which the singular independent signal effects the complex coverage event based on the partial coverage event.",2,claim 2,0,D
10606971,4,"4. The system of claim 3 , wherein the processor is to drive the singular independent signal at the operation window to simulate the complex coverage event.",3,claim 3,0,D
10606971,5,"5. The system of claim 1 , wherein the processor is to: detect that the complex coverage event can be separated into a plurality of singular independent signals including the singular independent signal and the logic state based on the structural logic analysis; separate the plurality of singular independent signals from the logic state in the complex coverage event to generate a partial coverage event comprising the logic state; determine one or more operation windows in which the plurality of singular independent signals effect the complex coverage event based on the partial coverage event; and drive the plurality of singular independent signals at the one or more operation windows to simulate the complex coverage event.",4,claim 1,0,D
10606971,6,"6. The system of claim 1 , wherein the singular independent signal comprises an asynchronous interface signal.",5,claim 1,0,D
10606971,7,"7. The system of claim 1 , wherein the singular independent signal comprises an interrupt.",6,claim 1,0,D
10606971,8,"8. A computer-implemented method, comprising: receiving, via a processor, a netlist comprising a complex coverage event that depends on a singular independent signal; detecting, via the processor, that complex coverage event can be separated into the singular independent signal and a logic state based on a structural logic analysis; and testing, via the processor, the netlist based on the singular independent signal.",7,,0,D
10606971,9,"9. The computer-implemented method of claim 8 , comprising separating, via the processor, the singular independent signal from the complex coverage event to generate a partial coverage event comprising the logic state.",8,claim 8,0,D
10606971,10,"10. The computer-implemented method of claim 9 , comprising determining, via the processor, an operation window in which the singular independent signal effects the complex coverage event based on the partial coverage event.",9,claim 9,0,D
10606971,11,"11. The computer-implemented method of claim 10 , comprising driving, via the processor, the singular independent signal at the operation window to simulate the complex coverage event.",10,claim 10,0,D
10606971,12,"12. The computer-implemented method of claim 9 , comprising: detecting, via the processor, that the complex coverage event can be separated into a plurality of singular independent signals including the singular independent signal and the logic state based on the structural logic analysis; extracting, via the processor, the plurality of singular independent signals to generate the partial coverage event comprising the logic state; determining, via the processor, one or more operation windows in which the plurality of singular independent signals effect the complex coverage event based on the partial coverage event; and driving, via the processor, the plurality of singular independent signals at the one or more operation windows to simulate the complex coverage event.",11,claim 9,0,D
10606971,13,"13. The computer-implemented method of claim 8 , comprising analyzing coverage holes in the netlist to identify complex coverage events that depend on asynchronous interface signals.",12,claim 8,0,D
10606971,14,"14. The computer-implemented method of claim 8 , wherein the structural logic analysis comprises determining a number of paths for each signal received at a counter and identifying signals with more than one path as part of the logic state.",13,claim 8,0,D
10606971,15,"15. A computer program product comprising a computer-readable storage medium having program code embodied therewith, wherein the computer readable storage medium is not a transitory signal per se, the program code executable by a processor to cause the processor to: receive a netlist comprising a complex coverage event that depends on a singular independent signal; detect that complex coverage event can be separated into the singular independent signal and a logic state based on a structural logic analysis; and test the netlist based on the singular independent signal.",14,,0,D
10606971,16,"16. The computer program product of claim 15 , comprising program code executable by the processor to separate the singular independent signal from the complex coverage event to generate a partial coverage event comprising the logic state.",15,claim 15,0,D
10606971,17,"17. The computer program product of claim 16 , comprising program code executable by the processor to determine an operation window in which the singular independent signal effects a hard-to-hit coverage event based on the partial coverage event.",16,claim 16,0,D
10606971,18,"18. The computer program product of claim 17 , comprising program code executable by the processor to drive the singular independent signal at the operation window to simulate the hard-to-hit coverage event.",17,claim 17,0,D
10606971,19,"19. The computer program product of claim 16 , comprising program code executable by the processor to: detect that the complex coverage event can be separated into a plurality of singular independent signals including the singular independent signal and the logic state based on the structural logic analysis; separate the plurality of singular independent signals from the logic state to generate the partial coverage event comprising the logic state; determine one or more operation windows in which the plurality of singular independent signals effect the complex coverage event based on the partial coverage event; and drive the plurality of singular independent signals at the one or more operation windows to simulate the complex coverage event.",18,claim 16,0,D
10606971,20,"20. The computer program product of claim 15 , comprising program code executable by the processor to determine a number of paths for each signal received at a counter and identifying signals with more than one path as part of the logic state.",19,claim 15,0,D
10606972,1,"1. A design method including a high level synthesis process, the design method comprising: generating a hardware description of a circuit and high level synthesis report information from a source code in which a behavior of the circuit is described in a software language based on a high level synthesis constraint, the hardware description describing a circuit including a plurality of stages each stage having a stage circuit and an inter-stage register provided between each two stages of the plurality of stages; determining a bypass stage selection pattern based on bypass constraint information including a constraint condition related to a bypass of the inter-stage register and the high level synthesis report information, the bypass stage selection pattern including a plurality of patterns each pattern having a combination of stages of inter-stage registers for which a bypass setting is performed among stages of bypass setting-capable inter-stage registers; and generating bypass report information based on the bypass stage selection pattern, the bypass report information including combination information of the inter-stage registers for which the bypass setting is performed corresponding to a priority condition.",0,,1,D
10606972,2,"2. The design method according to claim 1 , wherein in the generating the hardware description, the high level synthesis constraint includes a constraint in which the circuit is able to operate at a requested fastest clock frequency, and a delay time of the plurality of stages of the circuit conforming to the hardware description is not more than a period of the requested fastest clock frequency.",1,claim 1,0,D
10606972,3,"3. The design method according to claim 2 , wherein the bypass constraint information includes the constraint condition having any of or any combination of a number of stages of the bypass setting-capable inter-stage registers, a stage of a specific bypass setting-capable inter-stage register, a stage of a specific inter-stage register for which the bypass setting is inhibited, and a minimum value of a number of consecutive stages of inter-stage registers for which the bypass setting is inhibited, and the bypass stage selection pattern includes a plurality of the combinations of the stages of the inter-stage registers for which the bypass setting is performed in which the constraint condition in the bypass constraint information being satisfied.",2,claim 2,0,D
10606972,4,"4. The design method according to claim 3 , wherein the high level synthesis report information includes a delay time of each stage of the plurality of stages and a number of the inter-stage registers of said each stage, the priority condition includes one of: a first priority condition in which a shorter maximum stage delay time in each combination of the plurality of the combinations is prioritized, and a second priority condition in which a greater total number of the inter-stage registers for which the bypass setting is performed in each combination of the plurality of the combinations is prioritized, and the bypass report information includes a ranking in an ascending order or a descending order of the shorter maximum stage delay time in a case of the first priority condition, and includes a ranking in a descending order or an ascending order of a total number of the inter-stage registers for which the bypass setting is performed in a case of the second priority condition.",3,claim 3,0,D
10606972,5,"5. The design method according to claim 1 , wherein each one of the bypass setting-capable inter-stage registers includes a latch circuit which retains an output signal of each said stage, a bypass wiring which bypasses the latch circuit, a selector which selects the latch circuit or the bypass wiring based on a bypass control signal, and a clock gate which allows or does not allow passage of a clock based on the bypass control signal, and the bypass setting of the bypass setting-capable inter-stage register is performed according to the bypass control signal.",4,claim 1,0,D
10606972,6,"6. The design method according to claim 5 , further comprising: generating, in accordance with a mode setting value corresponding to each pattern in the bypass stage selection pattern, the bypass control signal for the bypass setting or a bypass non-setting corresponding to the combination of the stages of the inter-stage registers for which the bypass setting is performed in each pattern; and adding to the hardware description a description of a bypass setting circuit configured to supply the bypass control signal to the bypass setting-capable inter-stage register.",5,claim 5,0,D
10606972,7,"7. The design method according to claim 5 , wherein in the determining the bypass stage selection pattern, the bypass setting-capable inter-stage register is selected by excluding the inter-stage register in a specific stage which is specified by the constraint condition and in which the bypass setting is inhibited, from the inter-stage register included in the circuit conforming to the hardware description.",6,claim 5,0,D
10606972,8,"8. A non-transitory computer-readable storage medium that stores therein a program causing a computer to execute a design program including a high level synthesis process comprising: generating a hardware description of a circuit and high level synthesis report information from a source code in which a behavior of the circuit is described in a software language based on a high level synthesis constraint, the hardware description describing a circuit including a plurality of stages each stage having a stage circuit and an inter-stage register provided between each two stages of the plurality of stages; determining a bypass stage selection pattern based on bypass constraint information including a constraint condition related to a bypass of the inter-stage register and the high level synthesis report information, the bypass stage selection pattern including a plurality of patterns each pattern having a combination of stages of inter-stage registers for which a bypass setting is performed among stages of bypass setting-capable inter-stage registers; and generating bypass report information based on the bypass stage selection pattern, the bypass report information including combination information of the inter-stage registers for which the bypass setting is performed corresponding to a priority condition.",7,,0,D
10606972,9,"9. The non-transitory computer-readable storage medium according to claim 8 , wherein in the generating the hardware description, the high level synthesis constraint includes a constraint in which the circuit is able to operate at a requested fastest clock frequency, and a delay time of the plurality of stages of the circuit conforming to the hardware description is not more than a period of the requested fastest clock frequency.",8,claim 8,0,D
10606972,10,"10. The non-transitory computer-readable storage medium according to claim 9 , wherein, the bypass constraint information includes the constraint condition having any of or any combination of a number of stages of the bypass setting-capable inter-stage registers, a stage of a specific bypass setting-capable inter-stage register, a stage of a specific inter-stage register for which the bypass, setting is inhibited, and a minimum value of a number of consecutive stages of inter-stage registers for which the bypass setting is inhibited, and the bypass stage selection pattern includes a plurality of the combinations of the stages of the inter-stage registers for which the bypass setting is performed in which the constraint condition in the bypass constraint information being satisfied.",9,claim 9,0,D
10606972,11,"11. A design apparatus comprising: a processor; and a memory being accessible by the processor; wherein the processor executes a design program including a high level synthesis process comprising: generating a hardware description of a circuit and high level synthesis report, information from a source code in which a behavior of the circuit is described in a software language based on a high level synthesis constraint, the hardware description describing a circuit including a plurality of stages each stage having a stage circuit and an inter-stage register provided between each two stages of the plurality of stages; determining a bypass stage selection pattern based on bypass constraint information including a constraint condition related to a bypass of the inter-stage register and the high level synthesis report information, the bypass stage selection pattern including a plurality of patterns each pattern having a combination of stages of inter-stage registers for which a bypass setting is performed among stages of bypass setting-capable inter-stage registers; and generating bypass report information based on the bypass stage selection pattern, the bypass report information including combination information of the inter-stage registers for which the bypass setting is performed corresponding to a predetermined priority condition.",10,,0,D
10606972,12,"12. The design apparatus according to claim 11 , wherein in the generating the hardware description, the high level synthesis constraint includes a constraint in which the circuit is able to operate, at a requested fastest clock frequency, and a delay time of the plurality of stages of the circuit conforming to the hardware description is not more than a period of the requested fastest clock frequency.",11,claim 11,0,D
10606972,13,"13. The design apparatus according to claim 12 , wherein the bypass constraint information includes the constrain condition having any of or any combination of a number of stages of the bypass setting-cable inter-stage registers, a stage of a specific bypass setting-capable inter-stage register, a stage of a specific inter-stage register for which the bypass setting is inhibited, and a minimum value of a number of consecutive stages of inter-stage registers for which the bypass setting is inhibited, and the bypass stage selection pattern includes a plurality of the combinations of the stages of the inter-stage registers for which the bypass setting is performed in which the constraint condition in the bypass constraint information being satisfied.",12,claim 12,0,D
10606973,1,"1. A magnetic random access memory (MRAM) circuit comprising: a cell; a bottom electrode located entirely within the cell; a magnetic tunnel junction (MTJ) structure located in the cell and above the bottom electrode; and an access transistor including a first terminal, a second terminal, and a gate terminal; wherein: the MTJ structure is centered at the center of the cell; the bottom electrode is not centered at the center of the cell; and as viewed from directly above the bottom electrode, the first terminal of the access transistor is entirely underneath the bottom electrode.",0,,1,D
10606973,2,"2. The MRAM circuit of claim 1 , wherein a ratio of a length of the bottom electrode along an axis to a length of the MTJ structure along the same axis is equal to or greater than 1.9.",1,claim 1,0,D
10606973,3,"3. The MRAM circuit of claim 2 , wherein the ratio is 2.1 when the MRAM circuit is fabricated at a 32 nm complementary metal-oxide semiconductor (CMOS) process technology.",2,claim 2,0,D
10606973,4,"4. The MRAM circuit of claim 2 , wherein the ratio is 1.9 when the MRAM circuit is fabricated at a 45 nm CMOS process technology.",3,claim 2,0,D
10606973,5,"5. The MRAM circuit of claim 2 , wherein the ratio is 2.0 when the MRAM circuit is fabricated at a 65 nm CMOS process technology.",4,claim 2,0,D
10606973,6,"6. A magnetic random access memory (MRAM) circuit comprising: a cell; a bottom electrode located entirely within the cell; a magnetic tunnel junction (MTJ) structure located in the cell and above the bottom electrode; and an access transistor including a first terminal, a second terminal, and a gate terminal; wherein: the MTJ structure is centered at the center of the cell and the bottom electrode is not centered at the center of the cell; as viewed from directly above the bottom electrode, the first terminal of the access transistor is entirely underneath the bottom electrode; and a ratio of a length of the bottom electrode along an axis to a length of the MTJ structure along the same axis is equal or greater than 1.9.",5,,0,D
10606973,7,"7. The MRAM circuit of claim 6 , wherein the ratio is 2.1 when the MRAM circuit is fabricated at a 32 nm complementary metal-oxide semiconductor (CMOS) process technology.",6,claim 6,0,D
10606973,8,"8. The MRAM circuit of claim 6 , wherein the ratio is 1.9 when the MRAM circuit is fabricated at a 45 nm CMOS process technology.",7,claim 6,0,D
10606973,9,"9. The MRAM circuit of claim 6 , wherein the ratio is 2.0 when the MRAM circuit is fabricated at a 65 nm CMOS process technology.",8,claim 6,0,D
10606974,1,"1. A system for interactively editing an electronic circuit design defined by a plurality of electronic components mutually placed relative to one another and interconnected by a plurality of nets routed therebetween, having dynamic visual guidance for relative placement of mutually paired electronic components, the system comprising: a display visually rendering at least a part of an electronic circuit design to graphically represent a physical layout thereof; a user interface for entry of user-controlled movement of a first component of the electronic circuit design within the visually rendered physical layout; and, a graphic layout controller executed on a processor coupled to said display, said graphic layout controller including: a component pairing portion adaptively pairing with the first component at each selected location thereof within the visually rendered physical layout at least two of a plurality of second components of the electronic circuit design eligible for pairing with the first component, the first and second components being paired according to predetermined proximity criteria, and a placement guiding portion actuated responsive to said component pairing portion to generate for each paired set of first and second components visual indicia output on the display, the visual indicia representing a mutual placement zone between the first component and each second component paired therewith, the mutual placement zone defining a locus of valid placement locations of the paired first and second components one with respect to the other according to predetermined placement criteria therefor, wherein the visual indicia include an outline indicating a border of a locus of valid first component placement locations with respect to each second component of the at least two second components and the placement guiding portion generates a straight line placeholder that is output on the display, the straight line placeholder connecting the first component with a given second component of the at least two second components in response to moving the first component within the locus of valid first component placement associated with the given second component.",0,,0,D
10606974,2,"2. The system of claim 1 , wherein the component pairing portion pairs the first component with the second component closest to the selected location of the first component.",1,claim 1,0,D
10606974,3,"3. The system of claim 1 , wherein the predetermined placement criteria include a predefined maximum distance between the first component and the second component.",2,claim 1,0,D
10606974,4,"4. The system of claim 1 , wherein the component pairing portion generates visual indicia indicating each second component of the electronic circuit design eligible for pairing with the first component.",3,claim 1,0,D
10606974,5,"5. The system of claim 1 , wherein the first component is a bypass capacitance portion and the plurality of second components is a plurality of power pins in a power domain.",4,claim 1,0,D
10606974,6,"6. A system for interactively editing an electronic circuit design defined by a plurality of electronic components mutually placed relative to one another and interconnected by a plurality of nets routed therebetween, having dynamic visual guidance for relative placement of mutually paired electronic components, the system comprising: a display visually rendering at least a part of an electronic circuit design to graphically represent a physical layout thereof; a user interface for entry of user-controlled movement of a bypass capacitance portion of the electronic circuit design within the visually rendered physical layout; and, a graphic layout controller executed on a processor coupled to said display, said graphic layout controller including: a component pairing portion adaptively pairing with the bypass capacitance portion at each selected location thereof within the visually rendered physical layout at least two of a plurality of power pins in a power domain associated with the bypass capacitance portion, the bypass capacitance portion and power pin being paired according to predetermined proximity criteria, and a placement guiding portion actuated responsive to said component pairing portion to generate for each paired set of bypass capacitance portion and power pin visual indicia output on the display, the power pin visual indicia representing a mutual placement zone between the bypass capacitance portion and each power pin paired therewith, the mutual placement zone defining a locus of valid placement locations of the paired bypass capacitance portion and power pin one with respect to the other according to predetermined placement criteria therefor, wherein the visual indicia include an outline indicating a border of a locus of valid placement locations for the bypass capacitor portion with respect to each power pin of the at least two power pins and the placement guiding portion generates a straight line placeholder that is output on the display, the straight line placeholder connecting the bypass capacitor portion with a given power pin of the at least two power pin in response to moving the bypass capacitor portion within the locus of valid locations for the bypass capacitor portion associated with the given power pin.",5,,0,D
10606974,7,"7. The system of claim 6 , wherein the predetermined placement criteria include a predefined maximum distance between the bypass capacitance portion and the power pin.",6,claim 6,0,D
10606974,8,"8. The system of claim 6 , wherein the component pairing portion generates visual indicia indicating each power pin of the electronic circuit design eligible for pairing with the bypass capacitance portion.",7,claim 6,0,D
10606974,9,"9. A method for interactively editing an electronic circuit design defined by a plurality of electronic components mutually placed relative to one another and interconnected by a plurality of nets routed therebetween, having dynamic visual guidance for relative placement of mutually paired electronic components, the method comprising: visually rendering on a display at least a part of an electronic circuit design to graphically represent a physical layout thereof; providing a user interface for entry of user-controlled movement of a first component of the electronic circuit design within the visually rendered physical layout; adaptively pairing with the first component at each selected location thereof within the visually rendered physical layout at least two of a plurality of second components of the electronic circuit design eligible for pairing with the first component, the first and second components being paired according to predetermined proximity criteria; generating for each paired set of first and second components visual indicia output on the display, the visual indicia representing a mutual placement zone between the first component and each second component paired therewith, the mutual placement zone defining a locus of valid placement locations of the paired first and second components one with respect to the other according to predetermined placement criteria therefor, wherein the visual indicia include an outline indicating a border of a locus of valid first component placement locations with respect to each second component of the at least two second components; and generating, in response to moving the first component within the locus of valid first component placement associated with a given second component of the at least two second components, a straight line placeholder that is output on the display, the straight line placeholder connecting the first component with the given second component.",8,,1,D
10606974,10,"10. The method of claim 9 , wherein the predetermined placement criteria include a predefined maximum distance between the first component and the second component.",9,claim 9,0,D
10606974,11,"11. The method of claim 9 , further comprising generating visual indicia indicating each second component of the electronic circuit design eligible for pairing with the first component.",10,claim 9,0,D
10606974,12,"12. The method of claim 9 , wherein the first component is a bypass capacitance portion and the plurality of second components is a plurality of power pins in a power domain.",11,claim 9,0,D
10606975,1,"1. A method for generating physical design layout patterns, comprising steps of: selecting one or more physical design layouts, a given one of the physical design layouts for a given patterned structure comprising a set of physical design layout patterns for features in at least one layer of the given patterned structure; converting the physical design layout patterns into coordinate arrays, a given coordinate array comprising feature center coordinates for the features in a given one of the physical design layout patterns; training, utilizing the coordinate arrays, a generative adversarial network (GAN) comprising a discriminator neural network and a generator neural network; and generating one or more synthetic coordinate arrays utilizing the trained generator neural network of the GAN, a given one of the synthetic coordinate arrays comprising feature center coordinates of features for a new physical design layout pattern; wherein converting the physical design layout patterns into coordinate arrays comprises generating the given coordinate array by populating designated entries of the given coordinate array with center coordinates for one or more features in a given field of view of the given physical design layout represented by the given physical design layout; and wherein the method is performed by at least one processing device comprising a processor coupled to a memory.",0,,1,D
10606975,2,"2. The method of claim 1 , wherein the features comprise vias of the given patterned structure.",1,claim 1,0,D
10606975,3,"3. The method of claim 1 , wherein the features comprise lines for the given patterned structure.",2,claim 1,0,D
10606975,4,"4. The method of claim 1 , wherein the given coordinate array has a size of M*N, where M is a number of values for representing the center coordinates of respective ones of the features in a designated coordinate system and Nis a maximum number of features in the given field of view of the given physical design layout represented by the given physical design layout pattern.",3,claim 1,0,D
10606975,5,"5. The method of claim 4 , wherein when the given field of view comprises fewer than N features, the given coordinate array is padded with null values outside a range of possible coordinates for the given field of view of the given physical design layout pattern.",4,claim 4,0,D
10606975,6,"6. The method of claim 1 , wherein the features comprise fixed-size rectangular features.",5,claim 1,0,D
10606975,7,"7. The method of claim 6 , wherein the given coordinate array comprises designated entries for coordinates of respective ones of the centers of the fixed-size rectangular features.",6,claim 6,0,D
10606975,8,"8. The method of claim 7 , wherein the coordinates of the centers of the fixed-size rectangular features comprise coordinates in a Cartesian coordinate system, wherein a first designated set of entries of the given coordinate array provide x-coordinates of the centers of the fixed-size rectangular features, and wherein a second designated set of entries of the given coordinate array provide y-coordinates of the centers of the fixed-size rectangular features.",7,claim 7,0,D
10606975,9,"9. The method of claim 1 , wherein the given physical design layout comprises features of at least two different sizes.",8,claim 1,0,D
10606975,10,"10. The method of claim 9 , wherein the coordinates of the centers of the features comprise coordinates in a Cartesian coordinate system, wherein a first designated set of entries of the given coordinate array provide x-coordinates of the centers of features of a first size, wherein a second designated set of entries of the given coordinate array provide y-coordinates of the centers of the features of the first size, wherein a third designated set of entries of the given coordinate array provide x-coordinates of the centers of features of a second size different than the first size, and wherein a fourth designated set of entries of the given coordinate array provide y-coordinates of the centers of the features of the second size.",9,claim 9,0,D
10606975,11,"11. The method of claim 1 , wherein at least one of the discriminator and generator neural networks comprise a series of fully connected neural network layers.",10,claim 1,0,D
10606975,12,"12. The method of claim 1 , further comprising applying post-processing to the generated synthetic coordinate arrays using one or more design rule checks.",11,claim 1,0,D
10606975,13,"13. The method of claim 1 , further comprising converting the generated synthetic coordinate arrays to a format used in an electronic design automation (EDA) software.",12,claim 1,0,D
10606975,14,"14. The method of claim 1 , further comprising utilizing the given synthetic coordinate array to evaluate manufacturability of the new physical design layout pattern.",13,claim 1,0,D
10606975,15,"15. A computer program product, the computer program product comprising a computer readable storage medium having program instructions embodied therewith, the program instructions executable by at least one computing device to cause the at least one computing device to perform steps of: selecting one or more physical design layouts, a given one of the physical design layouts for a given patterned structure comprising a set of physical design layout patterns for features in at least one layer of the given patterned structure; converting the physical design layout patterns into coordinate arrays, a given coordinate array comprising feature center coordinates for the features in a given one of the physical design layout patterns; training, utilizing the coordinate arrays, a generative adversarial network (GAN) comprising a discriminator neural network and a generator neural network; and generating one or more synthetic coordinate arrays utilizing the trained generator neural network of the GAN, a given one of the synthetic coordinate arrays comprising feature center coordinates of features for a new physical design layout pattern; wherein converting the physical design layout patterns into coordinate arrays comprises generating the given coordinate array by populating designated entries of the given coordinate array with center coordinates for one or more features in a given field of view of the given physical design layout represented by the given physical design layout.",14,,0,D
10606975,16,"16. The computer program product of claim 15 , wherein the given coordinate array has a size of M*N, where M is a number of values for representing the center coordinates of respective ones of the features in a designated coordinate system and N is a maximum number of features in the given field of view of the given physical design layout represented by the given physical design layout pattern.",15,claim 15,0,D
10606975,17,"17. The computer program product of claim 15 , wherein the program instructions further cause the at least one computing device to perform the step of utilizing the given synthetic coordinate array to evaluate manufacturability of the new physical design layout pattern.",16,claim 15,0,D
10606975,18,"18. An apparatus comprising: a memory; and at least one processor coupled to the memory and configured for: selecting one or more physical design layouts, a given one of the physical design layouts for a given patterned structure comprising a set of physical design layout patterns for features in at least one layer of the given patterned structure; converting the physical design layout patterns into coordinate arrays, a given coordinate array comprising feature center coordinates for the features in a given one of the physical design layout patterns; training, utilizing the coordinate arrays, a generative adversarial network (GAN) comprising a discriminator neural network and a generator neural network; and generating one or more synthetic coordinate arrays utilizing the trained generator neural network of the GAN, a given one of the synthetic coordinate arrays comprising feature center coordinates of features for a new physical design layout pattern; wherein converting the physical design layout patterns into coordinate arrays comprises generating the given coordinate array by populating designated entries of the given coordinate array with center coordinates for one or more features in a given field of view of the given physical design layout represented by the given physical design layout.",17,,0,D
10606975,19,"19. The apparatus of claim 18 , wherein the given coordinate array has a size of M*N, where M is a number of values for representing the center coordinates of respective ones of the features in a designated coordinate system and Nis a maximum number of features in the given field of view of the given physical design layout represented by the given physical design layout pattern.",18,claim 18,0,D
10606975,20,"20. The apparatus of claim 18 , wherein the at least one processor is further configured for utilizing the given synthetic coordinate array to evaluate manufacturability of the new physical design layout pattern.",19,claim 18,0,D
10606976,1,"1. A computer implemented method for using a router to produce a first integrated circuit structure according to an engineering change order comprising: using a computer system having at least one processor to perform a process, the process comprising: importing an initial detail routing topology for the first integrated circuit structure; receiving an engineering change order instructing the router to change a portion of the initial detail routing topology for the first integrated circuit structure; responsive to the engineering change in the initial detail routing topology, performing a global routing operation which routes global wires for the portion of the initial detail routing topology for the first integrated circuit structure, wherein, for each global wire routed, a specific global wiring track is selected for the global wire within each edge of a set of global tiles in a routing topology for the first integrated circuit; and using a detail router for completing each global track assignment as a set of detail wires for fabrication of the first integrated circuit structure.",0,,1,D
10606976,2,"2. The method as recited in claim 1 , further comprising determining a cost for global routing, wherein, for each global wire routed, a cost is determined and using a wiring track which is already used in the routing topology is penalized in the cost determination; and causing the first integrated circuit structure to be fabricated using the completed set of detail wires.",1,claim 1,0,D
10606976,3,"3. The method as recited in claim 1 , further comprising determining a cost for global routing, wherein, for each global wire routed, a cost is determined and using a wiring track which is used in the initial routing topology is penalized according to a criticality of a respective net using the wiring track in the cost determination.",2,claim 1,0,D
10606976,4,"4. The method as recited in claim 1 , further comprising determining a cost for global routing, wherein, for each global wire routed, a cost is determined and switching between wiring tracks is penalized in the cost determination.",3,claim 1,0,D
10606976,5,"5. The method as recited in claim 1 , further comprising determining an aggregate cost for global routing for the engineering change order, wherein the global wires are routed to minimize the aggregate cost, wherein routing on a used wire track and switching between wiring tracks is penalized in the aggregate cost determination.",4,claim 1,0,D
10606976,6,"6. The method as recited in claim 5 , wherein the aggregate costs are determined according to a weighted algorithm which uses a higher weight for a cost of routing on a used track than a weight for a cost of switching tracks.",5,claim 5,0,D
10606976,7,"7. The method as recited in claim 1 , further comprising selecting specific global wiring tracks to maximize use of unused wiring tracks.",6,claim 1,0,D
10606976,8,"8. The method as recited in claim 1 , further comprising: ordering a set of global wiring nets according to criticality; and routing the set of global wiring nets in the global routing operation in order of criticality.",7,claim 1,0,D
10606976,9,"9. The method as recited in claim 1 , further comprising: ordering a set of wiring nets according to criticality, wherein the set of wiring nets comprise a set of nets existing in the portion of the initial detail routing topology for the first integrated circuit structure; and preferentially selecting wiring nets of a lower criticality for rip up if needed to route global wires according to the engineering change order.",8,claim 1,0,D
10606976,10,"10. The method as recited in claim 1 , further comprising: routing a first global wire in a specific wiring track which is used by an existing global wire; placing the existing global wire in a global wire rip up bucket; routing a second global wire in a specific wiring track which is used by an existing detail wire; and placing the existing detail wire in a detail wire rip up bucket.",9,claim 1,0,D
10606976,11,"11. A computer readable memory storing a control program for controlling an automatic routing according to an engineering change order in a first integrated circuit, said control program comprising instructions to cause a computer system having at least one processor to perform the process of: importing an initial detail routing topology for the first integrated circuit structure; receiving an engineering change order instructing the router to change a portion of the initial detail routing topology for the first integrated circuit structure; and responsive to the engineering change in the initial detail routing topology, performing a global routing operation which routes global wires for the portion of the initial detail routing topology for the first integrated circuit structure, wherein, for each global wire routed, a specific global wiring track is selected for the global wire within each edge of a set of global tiles in a routing topology for the first integrated circuit; and using a detail router for completing each global track assignment as a set of detail wires for fabrication of the first integrated circuit structure.",10,,0,D
10606976,12,"12. The computer readable memory as recited in claim 11 , further comprising determining a cost for global routing, wherein, for each global wire routed, a cost is determined and using a wiring track which is already used in the routing topology is penalized in the cost determination.",11,claim 11,0,D
10606976,13,"13. The computer readable memory as recited in claim 11 , further comprising determining an aggregate cost for global routing for the engineering change order, wherein the global wires are routed to minimize the aggregate cost, wherein routing on a used wire track and switching between wiring tracks is penalized in the aggregate cost determination.",12,claim 11,0,D
10606976,14,"14. The computer readable memory as recited in claim 11 , further comprising selecting specific global wiring tracks to maximize use of unused wiring tracks.",13,claim 11,0,D
10606976,15,"15. The computer readable memory as recited in claim 11 , further comprising: ordering a set of global wiring nets according to criticality; and routing the set of global wiring nets in the global routing operation in order of criticality.",14,claim 11,0,D
10606976,16,"16. The computer readable memory as recited in claim 11 , further comprising: ordering a set of wiring nets according to criticality, wherein the set of wiring nets comprise a set of nets existing in the portion of the initial detail routing topology for the first integrated circuit structure; and preferentially selecting wiring nets of a lower criticality for rip up if needed to route global wires according to the engineering change order.",15,claim 11,0,D
10606976,17,"17. The computer readable memory as recited in claim 11 , further comprising: routing a first global wire in a specific wiring track which is used by an existing global wire; placing the existing global wire in a global wire rip up bucket; routing a second global wire in a specific wiring track which is used by an existing detail wire; and placing the existing detail wire in a detail wire rip up bucket.",16,claim 11,0,D
10606976,18,"18. Apparatus, comprising: a processor; a computer memory holding computer program instructions executed by the processor for controlling an automatic routing according to an engineering change order in a first integrated circuit, the computer program instructions when executed carrying out the actions comprising: importing an initial detail routing topology for the first integrated circuit structure; receiving an engineering change order instructing the router to change a portion of the initial detail routing topology for the first integrated circuit structure; responsive to the engineering change in the initial detail routing topology, performing a global routing operation which routes global wires for the portion of the initial detail routing topology for the first integrated circuit structure, wherein, for each global wire routed, a specific global wiring track is selected for the global wire within each edge of a set of global tiles in a routing topology for the first integrated circuit; and using a detail router for completing each global track assignment as a set of detail wires for fabrication of the first integrated circuit structure.",17,,0,D
10606976,19,"19. The apparatus as recited in claim 18 , further comprising determining an aggregate cost for global routing for the engineering change order, wherein the global wires are routed to minimize the aggregate cost, wherein routing on a used wire track and switching between wiring tracks is penalized in the aggregate cost determination.",18,claim 18,0,D
10606976,20,"20. The apparatus as recited in claim 18 , further comprising: ordering a set of global wiring nets according to criticality; and routing the set of global wiring nets in the global routing operation in order of criticality.",19,claim 18,0,D
10606977,1,"1. A method for verifying a design of an electronic circuit, the method comprising: simulating the design; and displaying a directed graph representative of the simulated design, wherein the directed graph is a navigable and graphical view of cause-effect data from a symbolic simulation, wherein the directed graph comprising a plurality of shapes each having a different color, wherein at least one of the shapes is associated with a plurality of variables of the design, wherein a direction of at least one of the paths of the directed graph is defined by a temporal relationship between at least first and second variables of the design.",0,,1,D
10606977,2,2. The method of claim 1 wherein the direction of the at least one path of the graph is further defined by a testbench applied to simulate the design.,1,claim 1,0,D
10606977,3,3. The method of claim 1 wherein the directed graph includes a plurality of paths each showing a propagating direction associated with at least one variable through the path.,2,claim 1,0,D
10606977,4,4. The method of claim 3 wherein the plurality of paths are displayed concurrently with associated portions of the design or a testbench applied to simulate the design.,3,claim 3,0,D
10606977,5,5. The method of claim 1 further comprising: displaying at least a subset of the plurality of variables that transition at substantially a same time along a horizontal or vertical direction.,4,claim 1,0,D
10606977,6,6. The method of claim 1 further comprising annotating the directed graph with values of the plurality of variables resulting from the simulation.,5,claim 1,0,D
10606977,7,7. The method of claim 6 further comprising: specifying a target coverage; and displaying values of the plurality of variables required to achieve the specified target coverage.,6,claim 6,0,D
10606977,8,"8. A computer system configured to: Simulate, via a processor, a circuit design; and display a directed graph representative of the simulated design, wherein the directed graph is a navigable and graphical view of cause-effect data from a symbolic simulation, wherein the directed graph comprising a plurality of shapes each having a different color, wherein at least one of the shapes is associated with a plurality of variables of the design, wherein a direction of at least one of the paths of the directed graph is defined by a temporal relationship between at least first and second plurality of variables.",7,,0,D
10606977,9,9. The computer system of claim 8 wherein the direction of the at least one path of the graph is further defined by a testbench applied to simulate the design.,8,claim 8,0,D
10606977,10,10. The computer system of claim 8 wherein the directed graph includes a plurality of paths each showing a propagating direction associated with at least one variable through the path.,9,claim 8,0,D
10606977,11,11. The computer system of claim 10 wherein computer system is further configured to display the plurality of paths concurrently with associated portions of the design or a testbench applied to simulate the design.,10,claim 10,0,D
10606977,12,12. The computer system of claim 8 wherein computer system is further configured to display at least a subset of the plurality of variables that transition at substantially a same time a long a horizontal or vertical direction.,11,claim 8,0,D
10606977,13,13. The computer system of claim 8 wherein the computer system is further configured to annotate the directed graph with values of the plurality of variables resulting from the simulation.,12,claim 8,0,D
10606977,14,14. The computer system of claim 13 where in the computer system is further configured to: specify a target coverage; and display values of the plurality of variables required to achieve the specified target coverage.,13,claim 13,0,D
10606977,15,"15. A method for navigating a large data set during a symbolic simulation to determine a reason for unreachability comprising: performing, via a processor, a symbolic simulation of the large data set to generate a plurality of symbol values; generating a directed graph to show how the symbol values flowed during the symbolic simulation, wherein the directed graph is navigable and graphical view of cause-effect data from a symbolic simulation, wherein the symbol values colored and shaped for various analysis wherein at least one of the shapes is associated with a plurality of variables, wherein a direction of at least one of the paths of the directed graph is defined by a temporal relationship between at least first and second variables.",14,,0,D
10606978,1,"1. A computer-implemented method, comprising: determining, by a system operatively coupled to a processor that executes instructions stored in a memory, that a first defined shape within a shape layout satisfies a layout specification and a second defined shape within the shape layout satisfies a defined rule; coloring, by the system, the shape layout with a plurality of colors in accordance with a defined design rule based on the determining; determining, by the system, respective vertical rectangles of one or more vertical shapes within the shape layout comprise a first width of one that is aligned to a square grid and separated by a space of a second width of at least one; and determining, by the system, respective Z-shapes of one or more Z-shapes within the shape layout occupy five squares and are adjacent to no more than four vertical rectangles.",0,,1,D
10606978,2,"2. The computer-implemented method of claim 1 , wherein the coloring the shape layout comprises identifying masks for the shape layout.",1,claim 1,0,D
10606978,3,"3. The computer-implemented method of claim 1 , wherein the first defined shape is a vertical rectangle and the second defined shape is a Z-shape.",2,claim 1,0,D
10606978,4,"4. The computer-implemented method of claim 1 , further comprising determining, by the system, at least one of the one or more Z-shapes and at least one of the vertical rectangles are aligned to the square grid and are located apart at a distance greater than or equal to one.",3,claim 1,0,D
10606978,5,"5. The computer-implemented method of claim 1 , wherein two shapes are adjacent based on a determination that a distance between the two shapes is one.",4,claim 1,0,D
10606978,6,"6. The computer-implemented method of claim 3 , wherein the coloring the shape layout comprises: splitting, by the system, the shape layout into columns comprising a width of two; splitting, by the system, a set of available four colors into a first color-pair and a second color-pair; labeling, by the system, odd columns with the first color-pair and even columns with the second color-pair; coloring, by the system, vertical shapes and parts of one or more Z-shapes in the columns from top to bottom; removing, by the system, color from the parts of the one or more Z-shapes; and coloring, by the system, the one or more Z-shapes without creating conflicts with the coloring of the vertical shapes.",5,claim 3,0,D
10606978,7,"7. The computer-implemented method of claim 3 , wherein vertical shapes and parts of one or more Z-shapes are linearly ordered in columns from top to bottom.",6,claim 3,0,D
10606978,8,"8. The computer-implemented method of claim 1 , wherein the plurality of colors comprises four colors.",7,claim 1,0,D
10606979,1,"1. A method for verifying a circuit design, comprising: determining, using computer hardware, latency change values for pins of components of the circuit design, wherein the circuit design is modified by at least one of inserting a flip-flop or removing a flip-flop; determining, using the computer hardware, a total latency for each synchronous input pin and for each synchronous output pin of the components of the circuit design based, at least in part, upon summing the latency change values; comparing, using the computer hardware, the total latencies of the synchronous input pins of at least one of the components of the circuit design having two or more synchronous input pins to determine a mismatch; detecting, using the computer hardware, a latency error within the circuit design based upon the comparing; and generating, using the computer hardware, a notification of the latency error in the circuit design, wherein the notification specifies a type of the latency error detected.",0,,1,D
10606979,2,"2. The method of claim 1 , wherein the notification specifies a location within the circuit design where the latency error is detected.",1,claim 1,0,D
10606979,3,"3. The method of claim 1 , wherein the detecting the latency error further comprises: detecting a mismatch of the total latencies on primary outputs of the circuit design.",2,claim 1,0,D
10606979,4,"4. The method of claim 1 , further comprising: detecting a strongly connected component within the circuit design.",3,claim 1,0,D
10606979,5,"5. The method of claim 4 , wherein the detecting the latency error further comprises: detecting at least one of an entry point or an exit point of the strongly connected component of the circuit design having a mismatched total latency.",4,claim 4,0,D
10606979,6,"6. The method of claim 4 , wherein the detecting the latency error further comprises: detecting a non-zero latency change value for a selected synchronous input pin or a selected synchronous output pin of a component within the strongly connected component of the circuit design.",5,claim 4,0,D
10606979,7,"7. The method of claim 1 , further comprising: automatically modifying the circuit design by performing at least one of flip-flop insertion or deletion to correct the latency error.",6,claim 1,0,D
10606979,8,"8. A system for verifying a circuit design, comprising: a memory configured to store program code; and a processor coupled to the memory, wherein the processor, in response to executing the program code, is configured to initiate operations including: determining latency change values for pins of components of the circuit design, wherein the circuit design is modified by at least one of inserting a flip-flop or removing a flip-flop; determining a total latency for each synchronous input pin and for each synchronous output pin of the components of the circuit design based, at least in part, upon summing the latency change values; comparing the total latencies of the synchronous input pins of at least one of the components of the circuit design having two or more synchronous input pins to determine a mismatch; detecting a latency error within the circuit design based upon the comparing; and generating a notification of the latency error in the circuit design, wherein the notification specifies a type of the latency error detected.",7,,0,D
10606979,9,"9. The system of claim 8 , wherein the notification specifies a location within the circuit design where the latency error is detected.",8,claim 8,0,D
10606979,10,"10. The system of claim 8 , wherein the detecting the latency error further comprises: detecting a mismatch of the total latencies on primary outputs of the circuit design.",9,claim 8,0,D
10606979,11,"11. The system of claim 8 , wherein the processor is configured to initiate operations further comprising: detecting a strongly connected component within the circuit design.",10,claim 8,0,D
10606979,12,"12. The system of claim 11 , wherein the detecting the latency error further comprises: detecting at least one of an entry point or an exit point of the strongly connected component of the circuit design having a mismatched total latency.",11,claim 11,0,D
10606979,13,"13. The system of claim 11 , wherein the detecting the latency error further comprises: detecting a non-zero latency change value for a selected synchronous input pin or a selected synchronous output pin of a component within the strongly connected component of the circuit design.",12,claim 11,0,D
10606979,14,"14. The system of claim 8 , wherein the processor is configured to initiate operations further comprising: automatically modifying the circuit design by performing at least one of flip-flop insertion or deletion to correct the latency error.",13,claim 8,0,D
10606979,15,"15. A computer program product, comprising: a computer readable storage medium having program code stored thereon, the program code executable by computer hardware to initiate operations including: determining latency change values for pins of components of a circuit design, wherein the circuit design is modified by at least one of inserting a flip-flop or removing a flip-flop; determining a total latency for each synchronous input pin and for each synchronous output pin of the components of the circuit design based, at least in part, upon summing the latency change values; comparing the total latencies of the synchronous input pins of at least one of the components of the circuit design having two or more synchronous input pins to determine a mismatch; detecting a latency error within the circuit design based upon the comparing; and generating a notification of the latency error in the circuit design, wherein the notification specifies a type of the latency error detected.",14,,0,D
10606979,16,"16. The computer program product of claim 15 , wherein the notification specifies a location within the circuit design where the latency error is detected.",15,claim 15,0,D
10606979,17,"17. The computer program product of claim 15 , wherein the detecting the latency error further comprises: detecting a mismatch of the total latencies on primary outputs of the circuit design.",16,claim 15,0,D
10606979,18,"18. The computer program product of claim 15 , wherein the program code executable by the computer hardware to initiate operations further comprising: detecting a strongly connected component within the circuit design.",17,claim 15,0,D
10606979,19,"19. The computer program product of claim 18 , wherein the program code executable by the computer hardware to initiate operations further comprising: detecting at least one of an entry point or an exit point of the strongly connected component of the circuit design having a mismatched total latency.",18,claim 18,0,D
10606979,20,"20. The computer program product of claim 18 , wherein the program code executable by the computer hardware to initiate operations further comprising: detecting a non-zero latency change value for a selected synchronous input pin or a selected synchronous output pin of a component within the strongly connected component of the circuit design.",19,claim 18,0,D
10606980,1,"1. A method for reducing chemo-epitaxy directed-self assembly (DSA) defects of a layout of a guiding pattern, the method comprising: inserting a first external dummy along an external edge of the guiding pattern in a vertical direction; inserting a second external dummy at a fixed distance from a second edge of the first external dummy; and forming a fin keep mask via the guiding pattern, wherein the second external dummy includes at least two edges that are parallel to each other.",0,,1,D
10606980,2,"2. The method of claim 1 , further comprising: expanding a shape of the guiding pattern by a predetermined distance in both lateral directions to form the fin keep mask; and determining if all of consecutive shapes of the layout of the guiding pattern have been processed.",1,claim 1,0,D
10606980,3,"3. The method of claim 2 , wherein the fin keep mask comprises a stand-alone mask.",2,claim 2,0,D
10606980,4,"4. The method of claim 2 , wherein the fin keep mask is combined with existing fin end trim masks.",3,claim 2,0,D
10606980,5,"5. The method of claim 1 , further comprising inserting an anti-taper structure on the first external dummy if a second distance from the external edge of the guiding pattern to an edge of the first external dummy adjacent to the external edge is greater than a first distance which is determined from the external edge of the guiding pattern to the edge of the first external dummy, wherein the anti-taper structure is disposed between the external edge of the guiding pattern and the edge of the first external dummy.",4,claim 1,0,D
10606980,6,"6. The method of claim 5 , wherein a distance between an edge of the anti-taper structure and the external edge of the guiding pattern equals the first distance.",5,claim 5,0,D
10606980,7,"7. The method of claim 5 , wherein the anti-taper structure is inserted on the first external dummy such that a distance between an edge of the anti-taper structure and the external edge of the guiding pattern equals the first distance between the external edge of the guiding pattern and the first external dummy.",6,claim 5,0,D
10606980,8,"8. The method of claim 5 , wherein the anti-taper structure protrudes in the vertical direction from the first external dummy towards the guiding pattern.",7,claim 5,0,D
10606980,9,"9. The method of claim 1 , wherein an edge of the second external dummy is parallel to the second edge of the first external dummy.",8,claim 1,0,D
10606980,10,"10. The method of claim 1 , wherein a second edge of the first external dummy is one-dimensional, and wherein an internal dummy is inserted such that a distance between a first edge of the internal dummy and a first portion of the guiding pattern is less than 4 LO, where LO is a material constant so a design dimension can be expressed in an integer number.",9,claim 1,0,D
10606980,11,"11. The method of claim 1 , further comprising inserting a plurality of external dummies extending in a lateral direction of the guiding pattern such that edges of the plurality of external dummies correspond to edges of the guiding pattern.",10,claim 1,0,D
10606980,12,"12. The method of claim 1 , wherein a distance between a first edge of an internal dummy, of which is inserted between a first portion of the guiding pattern and a second portion of the guiding pattern, and the first portion of the guiding pattern is equal to a distance between a second edge of the internal dummy and the second portion of the guiding pattern.",11,claim 1,0,D
10606980,13,"13. The method of claim 12 , wherein a width of the internal dummy is set variably such that the distance between the first edge of the internal dummy and the first portion of the guiding pattern is always equal to the distance between the second edge of the internal dummy and the second portion of the guiding pattern.",12,claim 12,0,D
10606980,14,"14. The method of claim 13 , wherein a width of the internal dummy is set variably.",13,claim 13,0,D
10606980,15,"15. The method of claim 13 , wherein a width of a first portion of the internal dummy is greater than a width of a second portion of the internal dummy, and wherein a vertical spacing between the first portion of the guiding pattern and the second portion of the guiding pattern comprises a pinning trench width.",14,claim 13,0,D
10606980,16,"16. The method of claim 13 , wherein a distance from the first edge to the first portion of the guiding pattern is less than a distance from the second edge to the first portion of the guiding pattern.",15,claim 13,0,D
10606980,17,"17. A non-transitory computer-readable recording medium recording a program for reducing chemo-epitaxy directed-self assembly (DSA) defects of a layout of a guiding pattern, the program causing a computer to perform: inserting a first external dummy along an external edge of the guiding pattern in a vertical direction; inserting a second external dummy at a fixed distance from a second edge of the first external dummy; and forming a fin keep mask via the guiding pattern, wherein the second external dummy includes at least two edges that are parallel to each other.",16,,0,D
10606980,18,"18. A computer system for reducing chemo-epitaxy directed-self assembly (DSA) defects of a layout of a guiding pattern, said computer system comprising: a processor; and a memory, the memory storing instructions to cause the processor to perform: inserting a first external dummy along an external edge of the guiding pattern in a vertical direction; inserting a second external dummy at a fixed distance from a second edge of the first external dummy; and forming a fin keep mask via the guiding pattern, wherein the second external dummy includes at least two edges that are parallel to each other.",17,,0,D
10606980,19,"19. The system of claim 18 , further comprising: expanding a shape of the guiding pattern by a predetermined distance in both lateral directions to form the fin keep mask; and determining if all of consecutive shapes of the layout of the guiding pattern have been processed.",18,claim 18,0,D
10606980,20,"20. The system of claim 19 , wherein the fin keep mask comprises a stand-alone mask.",19,claim 19,0,D
10606981,1,"1. A computer-implemented method for space frame design, comprising: constructing a load stress map in a geometrical boundary representation of a design space; defining a plurality of attachment points and load application points in the design space; creating a starting network of interconnecting lines between each two of the plurality of attachment points and load application points in the design space; assigning load application factors to each line of the starting network of interconnecting lines based on values of the load stress map; generating a plurality of potential space frame designs by selectively culling different subsets of lines of the starting network of interconnecting lines for each potential space frame design according to variable culling parameters; evaluating a performance score of each of the plurality of potential space frame designs with respect to a number of predefined optimization parameters; combining the culling parameters for the potential space frame designs the performance score of which is above a predefined performance threshold; and iterating the steps of generating the plurality of potential space frame designs and evaluating the performance score of each of the plurality of potential space frame designs on the basis of the combined culling parameters.",0,,1,D
10606981,2,"2. The computer-implemented method according to claim 1 , wherein the culling parameters are selected from the group of global line density, local line density and line length.",1,claim 1,0,D
10606981,3,"3. The computer-implemented method according to claim 1 , further comprising enriching the starting network of interconnecting lines with reinforcement lines between a node on one of the interconnecting lines and one of the plurality of attachment points and load application points in the design space or between two nodes on neighboring ones of the interconnecting lines.",2,claim 1,0,D
10606981,4,"4. The computer-implemented method according to claim 3 , wherein the culling parameters are selected from the group of node position on the interconnecting lines and length of the reinforcement lines.",3,claim 3,0,D
10606981,5,"5. The computer-implemented method according to claim 1 , wherein evaluating the performance score of each of the plurality of potential space frame designs is performed using a finite element analysis.",4,claim 1,0,D
10606981,6,"6. The computer-implemented method according to claim 1 , wherein the potential space frame designs are clustered in a multi-variate optimization parameter diagram to find space frame designs near a Pareto frontier.",5,claim 1,0,D
10606981,7,"7. The computer-implemented method according to claim 1 , wherein the iteration of the steps of generating the plurality of potential space frame designs and evaluating the performance score of each of the plurality of potential space frame designs is terminated when an increment in performance score for subsequently generated potential space frame designs falls below a termination threshold.",6,claim 1,0,D
10606981,8,"8. The computer-implemented method according to claim 1 , further comprising generating a truss model with a microstructural framework for each line in the starting network of interconnecting lines of selected ones of the potential space frame designs on the basis of corresponding values of the load stress map.",7,claim 1,0,D
10606981,9,"9. The computer-implemented method according to claim 8 , wherein the truss models are employed as input geometry for an additive manufacturing, AM, process for manufacturing a plurality of space frame rods.",8,claim 8,0,D
10606981,10,"10. The computer-implemented method according to claim 8 , further comprising sub-dividing a plurality of space frame rods into a number of partial space frame rods having a predefined maximum length.",9,claim 8,0,D
10606981,11,"11. A non-transitory computer-readable medium including instructions that, when executed by a processor, cause the processor to perform the steps of: constructing a load stress map in a geometrical boundary representation of a design space; defining a plurality of attachment points and load application points in the design space; creating a starting network of interconnecting lines between each two of the plurality of attachment points and load application points in the design space; assigning load application factors to each line of the starting network of interconnecting lines based on values of the load stress map; generating a plurality of potential space frame designs by selectively culling different subsets of lines of the starting network of interconnecting lines for each potential space frame design according to variable culling parameters; evaluating a performance score of each of the plurality of potential space frame designs with respect to a number of predefined optimization parameters; combining the culling parameters for the potential space frame designs the performance score of which is above a predefined performance threshold; and iterating the steps of generating the plurality of potential space frame designs and evaluating the performance score of each of the plurality of potential space frame designs on the basis of the combined culling parameters.",10,,0,D
10606981,12,"12. The non-transitory computer-readable medium according to claim 11 , wherein the culling parameters are selected from the group of global line density, local line density and line length.",11,claim 11,0,D
10606981,13,"13. The non-transitory computer-readable medium according to claim 11 , further comprising enriching the starting network of interconnecting lines with reinforcement lines between a node on one of the interconnecting lines and one of the plurality of attachment points and load application points in the design space or between two nodes on neighboring ones of the interconnecting lines.",12,claim 11,0,D
10606981,14,"14. The non-transitory computer-readable medium according to claim 13 , wherein the culling parameters are selected from the group of node position on the interconnecting lines and length of the reinforcement lines.",13,claim 13,0,D
10606981,15,"15. The non-transitory computer-readable medium according to claim 11 , wherein evaluating the performance score of each of the plurality of potential space frame designs is performed using a finite element analysis.",14,claim 11,0,D
10606981,16,"16. The non-transitory computer-readable medium according to claim 11 , wherein the potential space frame designs are clustered in a multi-variate optimization parameter diagram to find space frame designs near a Pareto frontier.",15,claim 11,0,D
10606981,17,"17. The non-transitory computer-readable medium according to claim 11 , wherein the iteration of the steps of generating the plurality of potential space frame designs and evaluating the performance score of each of the plurality of potential space frame designs is terminated when an increment in performance score for subsequently generated potential space frame designs falls below a termination threshold.",16,claim 11,0,D
10606981,18,"18. The non-transitory computer-readable medium according to claim 11 , further comprising generating a truss model with a microstructural framework for each line in the starting network of interconnecting lines of selected ones of the potential space frame designs on the basis of corresponding values of the load stress map.",17,claim 11,0,D
10606981,19,"19. The non-transitory computer-readable medium according to claim 18 , wherein the truss models are employed as input geometry for an additive manufacturing, AM, process for manufacturing a plurality of space frame rods.",18,claim 18,0,D
10606981,20,"20. The non-transitory computer-readable medium according to claim 18 , further comprising sub-dividing a plurality of space frame rods into a number of partial space frame rods having a predefined maximum length.",19,claim 18,0,D
10606981,21,"21. A system, comprising: a memory that includes instructions; and a processor that is coupled to the memory and, when executing the instructions, is configured to perform the steps of: constructing a load stress map in a geometrical boundary representation of a design space; defining a plurality of attachment points and load application points in the design space; creating a starting network of interconnecting lines between each two of the plurality of attachment points and load application points in the design space; assigning load application factors to each line of the starting network of interconnecting lines based on values of the load stress map; generating a plurality of potential space frame designs by selectively culling different subsets of lines of the starting network of interconnecting lines for each potential space frame design according to variable culling parameters; evaluating a performance score of each of the plurality of potential space frame designs with respect to a number of predefined optimization parameters; combining the culling parameters for the potential space frame designs the performance score of which is above a predefined performance threshold; and iterating the steps of generating the plurality of potential space frame designs and evaluating the performance score of each of the plurality of potential space frame designs on the basis of the combined culling parameters.",20,,0,D
10606982,1,"1. A method comprising: applying a classifier to each of a first plurality of medical images to generate a label and an associated confidence value for each of the first plurality of medical images, resulting in generated labels and associated confidence values, the classifier being pre-trained using a manually labeled set of medical images; selecting those of the first plurality of medical images having an associated confidence value below a predetermined threshold, resulting in selected medical images; providing the selected medical images to a user; receiving from the user updated labels for the selected medical images; retraining the classifier using the first plurality of medical images, with the updated labels for the selected medical images and the generated labels for medical images not selected.",0,,1,D
10606982,2,"2. The method of claim 1 , wherein said retraining uses the manually labeled set of medical images.",1,claim 1,0,D
10606982,3,"3. The method of claim 1 , wherein the classifier comprises a random decision forest, a linear classifier, logistic regression, a support vector machine, or an artificial neural network.",2,claim 1,0,D
10606982,4,"4. The method of claim 1 , further comprising: retraining the classifier using additional sets of medical images and user-updated labels until the classifier achieves a predetermined accuracy.",3,claim 1,0,D
10606982,5,"5. The method of claim 1 , further comprising: for a superset of medical images comprising the first plurality of medical images, dividing the superset of medical images into the first plurality of medical images and additional sets of medical images; retraining the classifier using the additional sets of medical images and user-updated labels until the classifier has been trained on all medical images in the superset.",4,claim 1,0,D
10606982,6,"6. The method of claim 1 , wherein providing the selected medical images to a user comprises displaying the selected medical images via a web interface.",5,claim 1,0,D
10606982,7,"7. The method of claim 1 , wherein receiving from the user updated labels comprises receiving a selection from among a plurality of predetermined labels.",6,claim 1,0,D
10606982,8,"8. A system comprising: a data store comprising a first plurality of medical images; a computing node comprising a computer readable storage medium having program instructions embodied therewith, the program instructions executable by a processor of the computing node to cause the processor to perform a method comprising: applying a classifier to each of the first plurality of medical images to generate a label and an associated confidence value for each of the first plurality of medical images, resulting in generated labels and associated confidence values, the classifier being pre-trained using a manually labeled set of medical images; selecting those of the first plurality of medical images having an associated confidence value below a predetermined threshold, resulting in selected medical images; providing the selected medical images to a user; receiving from the user updated labels for the selected medical images; retraining the classifier using the first plurality of medical images, with the updated labels for the selected medical images and the generated labels for medical images not selected.",7,,0,D
10606982,9,"9. The system of claim 8 , wherein said retraining uses the manually labeled set of medical images.",8,claim 8,0,D
10606982,10,"10. The system of claim 8 , wherein the classifier comprises a random decision forest, a linear classifier, logistic regression, a support vector machine, or an artificial neural network.",9,claim 8,0,D
10606982,11,"11. The system of claim 8 , the method further comprising: retraining the classifier using additional sets of medical images and user-updated labels until the classifier achieves a predetermined accuracy.",10,claim 8,0,D
10606982,12,"12. The system of claim 8 , the method further comprising: for a superset of medical images comprising the first plurality of medical images, dividing the superset of medical images into the first plurality of medical images and additional sets of medical images; retraining the classifier using the additional sets of medical images and user-updated labels until the classifier has been trained on all medical images in the superset.",11,claim 8,0,D
10606982,13,"13. The system of claim 8 , wherein providing the selected medical images to a user comprises displaying the selected medical images via a web interface.",12,claim 8,0,D
10606982,14,"14. The system of claim 8 , wherein receiving from the user updated labels comprises receiving a selection from among a plurality of predetermined labels.",13,claim 8,0,D
10606982,15,"15. A computer program product for semi-automatic annotation of medical images, the computer program product comprising a computer readable storage medium having program instructions embodied therewith, the program instructions executable by a processor to cause the processor to perform a method comprising: applying a classifier to each of a first plurality of medical images to generate a label and an associated confidence value for each of the first plurality of medical images, resulting in generated labels and associated confidence values, the classifier being pre-trained using a manually labeled set of medical images; selecting those of the first plurality of medical images having an associated confidence value below a predetermined threshold, resulting in selected medical images; providing the selected medical images to a user; receiving from the user updated labels for the selected medical images; retraining the classifier using the first plurality of medical images, with the updated labels for the selected medical images and the generated labels for medical images not selected.",14,,0,D
10606982,16,"16. The computer program product of claim 15 , wherein said retraining uses the manually labeled set of medical images.",15,claim 15,0,D
10606982,17,"17. The computer program product of claim 15 , wherein the classifier comprises a random decision forest, a linear classifier, logistic regression, a support vector machine, or an artificial neural network.",16,claim 15,0,D
10606982,18,"18. The computer program product of claim 15 , the method further comprising: retraining the classifier using additional sets of medical images and user-updated labels until the classifier achieves a predetermined accuracy.",17,claim 15,0,D
10606982,19,"19. The computer program product of claim 15 , the method further comprising: for a superset of medical images comprising the first plurality of medical images, dividing the superset of medical images into the first plurality of medical images and additional sets of medical images; retraining the classifier using the additional sets of medical images and user-updated labels until the classifier has been trained on all medical images in the superset.",18,claim 15,0,D
10606982,20,"20. The computer program product of claim 15 , wherein providing the selected medical images to a user comprises displaying the selected medical images via a web interface.",19,claim 15,0,D
10606983,1,"1. A system, comprising: a central database having a hierarchical access control based on a category of user, the category of user being selected from the group consisting of member/enrollee, provider, management, coder, and auditor, the central database storing medical records for each of a plurality of patients in a patient population, and structured to filter out all incoming updates to the central databases except those corresponding to one of the plurality of individuals; a computer running a plurality of applications, including a program for creating an individual profile, wherein the individual profile for each of the plurality of patients is stored in the central database; and a server for providing a remote computer with access to the central database via a web-based application, the web-based application performing operations comprising: generating a plurality of graphical user interfaces dynamically created by the program for viewing information from the central database and providing users with a capability to derive information at a specified level; wherein a first graphical user interface of the plurality of graphical user interfaces displays a dashboard for displaying information on the patient population with review capabilities as to services provided to patients within the patient population, wherein the dashboard includes a navigation menu with a plurality of navigation elements, the plurality of navigation elements including Summary, Review by Plan, Review By Primary Care Physician (PCP), Review by Category, Evaluations, Prevalence, Record Upload, and Reports Library, wherein, under Review by Plan, a plurality of reports by PCP are selectable; wherein a second graphical user interface of the plurality of graphical user interfaces displays information providing Risk Adjusted Factor (RAF) comparative analysis by plan for the Current Year (CY) active or termed members to provide users an overall RAF score for the same membership between two years; wherein a third graphical user interface of the plurality of graphical user interfaces displays a member summary page; wherein a fourth graphical user interface of the plurality of graphical user interfaces displays information on claims, medication refills, provider, designated specialty of said provider, and date of services rendered; wherein a fifth graphical user interface of the plurality of graphical user interfaces displays a screen for displaying diagnostic information for a specific patient from among the plurality of patients, the diagnostic information including one or more diagnostic codes and a diagnosis description corresponding to each of the one or more diagnostic codes. wherein the operations further comprise: displaying, on the screen, one or more data entry fields by which an additional diagnostic code may be added to the medical records stored for the specific patient in the central database; applying a plurality of code edits to prevent the addition of inappropriate diagnostic codes using the web-based application; and, for each additional diagnostic code added using the web-based application, tracking a page number of the medical records stored for the specific patient in the central database; wherein a sixth graphical user interface of the plurality of graphical user interfaces displays information on objective quality measures as represented in a Centers for Medicare and Medicaid Services (CMS) star ratings program format; wherein a seventh graphical user interface of the plurality of graphical user displays information of a monthly trend report tracking historical compliance scores for each objective quality measure; and wherein an eighth graphical user interface of the plurality of graphical user interfaces displays information specific to a patient of the patient population regarding specific quality measures that have been met or not met, and providing for supplemental data or exclusions that may apply to said patient for the specific quality measure.",0,,1,D
10606983,2,"2. The system of claim 1 , wherein the diagnostic information further includes a hierarchical condition category (HCC) corresponding to each of the one or more diagnostic codes.",1,claim 1,0,D
10606983,3,"3. The system of claim 1 , wherein the operations further comprise displaying, on the screen, a comment input tool by which a user of the web-based application may add comments to the medical records stored for the specific patient in the central database.",2,claim 1,0,D
10606983,4,"4. The system of claim 3 , wherein the comment input tool includes a plurality of selectable prewritten comments.",3,claim 3,0,D
10606983,5,"5. The system of claim 4 , wherein the comment input tool further includes a text field for adding a comment other than the selectable prewritten comments.",4,claim 4,0,D
10606984,1,"1. A system, comprising; at least one memory operable to store computer-executable instructions; and at least one processor configured to access the at least one memory and execute the computer-executable instructions to: receive electronically, from a healthcare provider computer for a prescriber via an electronic health records (EHR) intermediary configured to aggregate healthcare transactions originating from a plurality of healthcare provider computers and a plurality of pharmacy claims processor computers, a prescription benefit check request comprising at least one or more patient data, a service identifier, an identifier for a prescribed medication, and one or more prescriber data; receive electronically, from a pharmacy claims processor computer, a prescription response comprising at least a patient pay amount for the prescribed medication; in response to receiving the prescription response, access a routing table stored by a service provider computer embodied by a switch or a router to identify the healthcare provider computer from which the prescription benefit check request originated; electronically direct the communication of a prescription benefit check response comprising at least the patient pay amount from the prescription response to the healthcare provider computer via the EHR intermediary; receive electronically, from the healthcare provider device via the EHR intermediary, a prescription fill notification request, wherein the prescription fill notification request is generated by the healthcare provider device in response to the healthcare provider receiving the patient pay amount; monitor, based at least upon the prescription fill notification request, traffic over a network comprising one or more communication channels associated with the EHR intermediary to determine that a pharmacy billing request corresponding to the prescription benefit check request has been submitted to a pharmacy benefits processor by matching at least one of the one or more prescriber data, the one or more patient data or the service identifier stored on the at least one memory in association with the prescription benefit check request to that of a matching pharmacy billing response communicated over the network; in response to identifying the matching pharmacy billing response, determine a status of the matching pharmacy billing response indicating that the pharmacy billing request was approved by the pharmacy benefits processor; access the routing table to identify the healthcare provider computer to be notified of medication adherence information associated with the matching pharmacy billing response; further in response to identifying the matching pharmacy billing response communicated via the EHR intermediary, generate, by at least the service provider computer, a prescription fill notification response comprising at least a prescription fill date, and a pharmacy identification; and electronically direct communication of the prescription fill notification response to the healthcare provider computer identified by accessing the routing table and via the EHR intermediary, thereby notifying the healthcare provider of medication adherence.",0,,1,D
10606984,2,"2. The system of claim 1 , wherein the prescription fill notification request is automatically communicated by the healthcare provider computer based at least upon the communicated patient pay amount.",1,claim 1,0,D
10606984,3,"3. The system of claim 1 , wherein the prescription fill notification request is communicated based upon a physician selection at the healthcare provider computer.",2,claim 1,0,D
10606984,4,"4. The system of claim 1 , wherein the processor is further configured to access the at least one memory and execute the computer-executable instructions to: identify an EHR vendor corresponding to the EHR intermediary; and generate, based at least upon the identified EHR vendor, the prescription fill notification request for the prescribed medication included in the prescription benefit check request.",3,claim 1,0,D
10606984,5,"5. The system of claim 1 , wherein the prescription fill notification request is a first fill notification request.",4,claim 1,0,D
10606984,6,"6. The system of claim 1 , wherein the prescription fill notification request is a subsequent fill notification request, and wherein the processor is further configured to access the at least one memory and execute the computer-executable instructions to: access one or more subsequent fill monitoring criteria comprising at least one of a request to monitor for one or more fills during a specified time period, a request to monitor for a total number of fills, a request to monitor for one or more fills until a refill status for the corresponding medication/product has expired; monitor the one or more communication channels for the prescribed medication identified in the prescription benefit check request based at least upon the one or more subsequent fill monitoring criteria; and generate a prescription fill notification response for each subsequent fill of the prescribed medication detected.",5,claim 1,0,D
10606984,7,"7. The system of claim 6 , wherein the processor is further configured to access the at least one memory and execute the computer-executable instructions to: receive electronically, from the healthcare provider computer via the EHR intermediary, a cancelation notice comprising notification to cancel tracking of one or more subsequent fills for the corresponding prescribed medication identified in the prescription benefit check request.",6,claim 6,0,D
10606984,8,"8. The system of claim 1 , wherein the processor is further configured to access the at least one memory and execute the computer-executable instructions to: generate, based at least upon the prescription benefit check request or the prescription benefit check response, one or more adherence reports based upon the medication identifier for the prescribed medication, wherein an adherence report comprises at least an adherence fill rate for the prescribed medication; and electronically direct the communication of the adherence report to the EHR intermediary for distribution to the healthcare provider computer, the pharmacy claims processor computer, or the pharmacy computer.",7,claim 1,0,D
10606984,9,"9. The system of claim 1 , wherein the pharmacy claims processor computer is the same as the pharmacy benefits processor, and wherein the determination that the pharmacy billing request was approved by the pharmacy benefits processor is based at least upon the detection of a pharmacy billing response comprising a field status indicator indicating that the request was approved.",8,claim 1,0,D
10606984,10,"10. A computer-implemented method for adherence monitoring, comprising: receiving electronically, by the service provider computer associated with a service provider and comprising one or more computer processors from a healthcare provider computer for a prescriber via an electronic health records (EHR) intermediary, an electronic health records (EHR) intermediary configured to aggregate healthcare transactions originating from a plurality of healthcare provider computers and a plurality of pharmacy claims processor computers, a prescription benefit check request comprising at least one or more patient data, a service identifier, an identifier for a prescribed medication, and one or more prescriber data; receiving electronically, by the service provider computer from a pharmacy claims processor computer, a prescription response comprising at least a patient pay amount for the prescribed medication; in response to receiving the prescription response, accessing a routing table stored by a service provider computer embodied by a switch or a router to identify the healthcare provider computer from which the prescription benefit check request originated; transmitting electronically, by the service provider computer, a prescription benefit check response comprising at least the patient pay amount from the prescription response to the healthcare provider computer via the EHR intermediary; receiving electronically, by the service provider computer from the healthcare provider device via the EHR intermediary, the prescription fill notification request, wherein the prescription fill notification request is generated by the healthcare provider device in response to the healthcare provider receiving the patient pay amount; monitoring, by the service provider computer and based at least upon the prescription fill notification request, traffic over a network comprising one or more communication channels associated with the EHR intermediary to determine that a pharmacy billing request corresponding to the prescription benefit check request has been submitted to a pharmacy benefits processor by matching at least one of the one or more prescriber data, the one or more patient data or the service identifier stored on the at least one memory in association with the prescription benefit check request to that of a matching pharmacy billing response communicated over the network; in response to identifying the matching pharmacy billing response, determining, by the service provider computer, a status of the matching pharmacy billing response indicating that the pharmacy billing request was approved by the pharmacy benefits processor; accessing the routing table to identify the healthcare provider computer to be notified of medication adherence information associated with the matching pharmacy billing response; further in response to identifying the matching pharmacy billing response communicated via the EHR intermediary, generating, by at least the service provider computer, a prescription fill notification response comprising at least a prescription fill date, and a pharmacy identification; and transmitting electronically, by service provider computer, the prescription fill notification response to the healthcare provider computer identified by accessing the routing table and via the EHR intermediary, thereby notifying the healthcare provider of medication adherence.",9,,0,D
10606984,11,"11. The computer-implemented method of claim 10 , wherein the prescription fill notification request is automatically communicated by the healthcare provider computer based at least upon the communicated patient pay amount.",10,claim 10,0,D
10606984,12,"12. The computer-implemented method of claim 10 , wherein the prescription fill notification request is communicated based upon a physician selection at the healthcare provider computer.",11,claim 10,0,D
10606984,13,"13. The computer-implemented method of claim 10 further comprising: identifying, by the service provider computer, an EHR vendor corresponding to the EHR intermediary; and generating, by the service provider computer and based at least upon the identified EHR vendor, the prescription fill notification request for the prescribed medication included in the prescription benefit check request.",12,claim 10,0,D
10606984,14,"14. The computer-implemented method of claim 10 , wherein the prescription fill notification request is a first fill notification request.",13,claim 10,0,D
10606984,15,"15. The computer-implemented method of claim 10 , wherein the prescription fill notification request is a subsequent fill notification request, and further comprises: accessing, by the service provider computer, one or more subsequent fill monitoring criteria comprising at least one of a request to monitor for one or more fills during a specified time period, a request to monitor for a total number of fills, a request to monitor for one or more fills until a refill status for the corresponding medication/product has been exhausted; monitoring, by the service provider computer, the one or more communication channels for the prescribed medication identified in the prescription benefit check request based at least upon the one or more subsequent fill monitoring criteria; and generating, by the service provider computer, a prescription fill notification response for each subsequent fill of the prescribed medication detected.",14,claim 10,0,D
10606984,16,"16. The computer-implemented method of claim 10 further comprising: receiving electronically, by the service provider computer from the healthcare provider computer via the EHR intermediary, a cancellation notice comprising notification to cancel tracking of one or more subsequent fills for the corresponding prescribed medication identified in the prescription benefit check request.",15,claim 10,0,D
10606984,17,"17. The computer-implemented method of claim 10 further comprising: generating, by the service provider computer based at least upon the prescription benefit check request or the prescription benefit check response, one or more adherence reports for a prescriber based upon the medication identifier for the prescribed medication, wherein an adherence report comprises at least an adherence fill rate for the prescribed medication; and transmitting electronically, by the service provider computer, to the EHR intermediary for distribution to the healthcare provider computer, the pharmacy claims processor computer, or the pharmacy computer.",16,claim 10,0,D
10606984,18,"18. The computer-implemented method of claim 10 , wherein the pharmacy claims processor computer is the same as the pharmacy benefits processor, and wherein the determination that the pharmacy billing request was approved by the pharmacy benefits processor is based at least upon the detection of a pharmacy billing response comprising a field status indicator indicating that the request was approved.",17,claim 10,0,D
10606984,19,"19. The system of claim 1 , wherein monitoring a network comprising one or more communication channels associated with the EHR intermediary is further based on a monitoring window associated with the prescription fill notification request.",18,claim 1,0,D
10606985,1,"1. A method for processing a file on an information handling system, comprising: reading a first portion of the file, wherein the first portion is unencrypted; determining, based on the first portion of the file, that a second portion of the file is encrypted; and reading the second portion of the file through a virtual file system access path different from an access path used to perform the step of reading the first portion of the file, wherein the virtual file system decrypts the second portion of the file, wherein the access path comprises a first address for accessing the first portion of the file at a location in a data storage through a default file system and the virtual file system access path comprises a second address for accessing the second portion of the file at the location in the data storage through the virtual file system.",0,,1,D
10606985,2,"2. The method of claim 1 , wherein information in the first portion of the file comprises an image, and wherein the second portion of the file comprises a document.",1,claim 1,0,D
10606985,3,"3. The method of claim 1 , further comprising executing an application to display the second portion of the file, wherein the application used to display the second portion of the file is selected based, at least in part, on information in the first portion of the file.",2,claim 1,0,D
10606985,4,"4. The method of claim 3 , wherein the application comprises a document editor, and wherein the information in the first portion of the file indicates that the second portion of the file comprises a document file.",3,claim 3,0,D
10606985,5,"5. The method of claim 1 , wherein the file comprises a TIFF-formatted file comprising a plurality of images, and wherein the first portion of the file comprises an immediate first image of the plurality of images of the TIFF formatted file.",4,claim 1,0,D
10606985,6,"6. The method of claim 5 , further comprising generating a preview of the TIFF-formatted file based on the first image.",5,claim 5,0,D
10606985,7,"7. The method of claim 5 , wherein the second portion of the file comprises a second image of the plurality of images, and wherein the second image comprises a custom block type defined in the TIFF formatted file.",6,claim 5,0,D
10606985,8,"8. An information handling system, comprising: a memory; and a processor coupled to the memory, wherein the processor is configured to perform steps comprising: reading a first portion of the file, wherein the first portion is unencrypted; determining, based on the first portion of the file, that a second portion of the file is encrypted; and reading the second portion of the file through a virtual file system access path different from an access path used to perform the step of reading the first portion of the file, wherein the virtual file system decrypts the second portion of the file, wherein the access path comprises a first address for accessing the first portion of the file at a location in a data storage through a default file system and the virtual file system access path comprises a second address for accessing the second portion of the file at the location in the data storage through the virtual file system.",7,,0,D
10606985,9,"9. The information handling system of claim 8 , wherein information in the first portion of the file comprises an image, and wherein the second portion of the file comprises a document.",8,claim 8,0,D
10606985,10,"10. The information handling system of claim 8 , wherein the processor is further configured to perform steps comprising executing an application to display the second portion of the file, wherein the application used to display the second portion of the file is selected based, at least in part, on information in the first portion of the file.",9,claim 8,0,D
10606985,11,"11. The information handling system of claim 10 , wherein the application comprises a document editor, and wherein the information in the first portion of the file indicates that the second portion of the file comprises a document file.",10,claim 10,0,D
10606985,12,"12. The information handling system of claim 8 , wherein the file comprises a TIFF-formatted file comprising a plurality of images, and wherein the first portion of the file comprises an immediate first image of the plurality of images of the TIFF formatted file.",11,claim 8,0,D
10606985,13,"13. The information handling system of claim 12 , wherein the processor is further configured to perform steps comprising generating a preview of the TIFF-formatted file based on the first image.",12,claim 12,0,D
10606985,14,"14. The information handling system of claim 12 , wherein the second portion of the file comprises a second image of the plurality of images, and wherein the second image comprises a custom block type defined in the TIFF formatted file.",13,claim 12,0,D
10606985,15,"15. A computer program product, comprising: a non-transitory computer readable medium comprising code to perform steps comprising: reading a first portion of the file, wherein the first portion is unencrypted; determining, based on the first portion of the file, that a second portion of the file is encrypted; and reading the second portion of the file through a virtual file system access path different from an access path used to perform the step of reading the first portion of the file, wherein the virtual file system decrypts the second portion of the file, wherein the access path comprises a first address for accessing the first portion of the file at a location in a data storage through a default file system and the virtual file system access path comprises a second address for accessing the second portion of the file at the location in the data storage through the virtual file system.",14,,0,D
10606985,16,"16. The computer program product of claim 15 , wherein information in the first portion of the file comprises an image, and wherein the second portion of the file comprises a document.",15,claim 15,0,D
10606985,17,"17. The computer program product of claim 15 , wherein the medium further comprises code to perform steps comprising executing an application to display the second portion of the file, wherein the application used to display the second portion of the file is selected based, at least in part, on information in the first portion of the file.",16,claim 15,0,D
10606985,18,"18. The computer program product of claim 15 , wherein the file comprises a TIFF-formatted file comprising a plurality of images, and wherein the first portion of the file comprises an immediate first image of the plurality of images of the TIFF formatted file.",17,claim 15,0,D
10606985,19,"19. The computer program product of claim 18 , wherein the medium further comprises code to perform steps comprising generating a preview of the TIFF-formatted file based on the first image.",18,claim 18,0,D
10606985,20,"20. The computer program product of claim 18 , wherein the second portion of the file comprises a second image of the plurality of images, and wherein the second image comprises a custom block type defined in the TIFF formatted file.",19,claim 18,0,D
10606986,1,"1. A method performed by a first computer system, the method comprising: receiving a request to access content on behalf of a first user from a second computer system; generating a request for authentication of the first user, the request for authentication of the first user specifying one or more credentialed applications permitted to perform the authentication of the first user; sending the request for authentication of the first user to the second computer system; receiving a result from the second computer system in response to the request for authentication of the first user; verifying, based on the received result, that authentication of the first user was performed by at least one of the specified one or more credentialed applications; determining, based on the received result, that the first user was authenticated, wherein determining that the first user was authenticated comprises cryptographically validating at least one digital signature included in the received result using a public key corresponding to a credential associated with the first user; and conditionally permitting access to the content based, at least in part, on verifying that the authentication of the first user was performed by at least one of the specified one or more credentialed applications and determining that the first user was authenticated.",0,,1,D
10606986,2,"2. The method of claim 1 , wherein the request to access content on behalf of the first user comprises a request to use the content by the first user.",1,claim 1,0,D
10606986,3,"3. The method of claim 1 , wherein the second computer system is remote from the first computer system.",2,claim 1,0,D
10606986,4,"4. The method of claim 1 , wherein the request for authentication of the first user comprises one or more first credential identifiers identifying one or more required user credentials associated with the first user.",3,claim 1,0,D
10606986,5,"5. The method of claim 4 , wherein the request for authentication of the first user comprises one or more second credential identifiers identifying one or more permitted application credentials associated with credentialed applications permitted to perform the authentication of the first user.",4,claim 4,0,D
10606986,6,"6. The method of claim 5 , wherein at least one of the one or more required user credentials is issued by a first entity and at least one of the one or more permitted application credentials is issued by a second entity different from the first entity.",5,claim 5,0,D
10606986,7,"7. The method of claim 4 , wherein the request for authentication of the first user comprises one or more third credential identifiers identifying one or more required application credentials associated with credentialed applications permitted to perform the authentication of the first user.",6,claim 4,0,D
10606986,8,"8. The method of claim 1 , wherein at least one of the one or more required user credentials is issued by a first entity and at least one of the one or more required application credentials is issued by a second entity different from the first entity.",7,claim 1,0,D
10606986,9,"9. The method of claim 1 , wherein the method further comprises evaluating, based on the received result, a security level associated with the at least one of the specified one or more credentialed applications that performed the authentication of the first user.",8,claim 1,0,D
10606986,10,"10. The method of claim 9 , wherein conditionally permitting access to the content is further based on the security level associated with the at least one of the specified one or more credentialed applications that performed the authentication of the first user.",9,claim 9,0,D
10606986,11,"11. The method of claim 10 , wherein conditionally permitting access to the content comprises permitting restricted access to the content.",10,claim 10,0,D
10606986,12,"12. The method of claim 9 , wherein the security level is associated with a relative level of tamper resistance of the at least one of the specified one or more credentialed applications that performed the authentication of the first user.",11,claim 9,0,D
10606986,13,"13. The method of claim 12 , wherein the relative level of tamper resistance is determined by a certification authority.",12,claim 12,0,D
10606986,14,"14. The method of claim 13 , wherein the request for authentication of the first user comprises one or more credential identifiers identifying one or more required user credentials associated with the first user, the one or more required user credentials being issued by a first entity different than the certification authority.",13,claim 13,0,D
10606986,15,"15. The method of claim 1 , wherein the received result comprises an indication that the at least one of the specified one or more credentialed applications has been certified by a particular certification authority.",14,claim 1,0,D
10606986,16,"16. The method of claim 1 , wherein the received result comprises an identifier of the at least one of the specified one or more credentialed applications.",15,claim 1,0,D
10606987,1,"1. A computer-implemented method, comprising: obtaining, at an interface of a computing system, information that includes job codes of users of the computing system and access permissions assigned to the users; generating, based at least in part on the information, an initial value corresponding to a probability of a role being associated with a user; perturbing a candidate value corresponding to the probability to produce a perturbed value corresponding to the probability, the candidate value being associated with a first score and based at least in part on the initial value; calculating a second score based at least in part on passing the perturbed value as input to an objective function that minimizes at least one ambiguous assignment penalty function for measuring correctness of the role being associated with the user; setting, as a result of an evaluation of the second score against the first score, the perturbed value to be the candidate value; storing the candidate value as an entry in a candidate solution matrix, wherein the candidate solution matrix is configured to store a plurality of perturbed values associated with information for assigning roles to users; and assigning, as a result of a comparison of the candidate value in the candidate solution matrix to a threshold, the role to the user such that the user accesses one or more computing resources associated with the role.",0,,1,D
10606987,2,"2. The computer-implemented method of claim 1 , wherein calculating the second score further includes weighting the objective function based at least in part on an importance value associated with the role.",1,claim 1,0,D
10606987,3,"3. The computer-implemented method of claim 1 , further comprising: identifying an anomalous user role assignment; and providing a report of the anomalous user role assignment.",2,claim 1,0,D
10606987,4,"4. The computer-implemented method of claim 3 , wherein identifying the anomalous user role assignment includes determining that: the candidate value is within a range that indicates uncertainty that the user is associated with the role; at least one of the users has no assigned role; or at least one role, determined based at least in part on the information, is unassigned.",3,claim 3,0,D
10606987,5,"5. The computer-implemented method of claim 1 , wherein the objective function further minimizes redundant roles.",4,claim 1,0,D
10606987,6,"6. A system, comprising: one or more processors; and memory to store computer-executable instructions that, as a result of being executed by the one or more processors, cause the system to: obtain information that indicates permissions of users associated with the system; generate, based at least in part on the information, an initial probability value of a role being associated with a user; perturb a candidate probability value to produce a perturbed probability value, the candidate probability value based at least in part on the initial probability value; calculate a first score based at least in part on the candidate probability value and a second score based at least in part on passing the perturbed probability value as input to an objective function that minimizes at least one ambiguous assignment penalty function for measuring the correctness of the perturbed value; set, as a result of an evaluation of the second score against the first score, the perturbed probability value to be the candidate probability value; generate a matrix to store the candidate probability value as an entry in the matrix, the entry representing a probability of whether the role is associated with the user; assign, as a result of a comparison of the candidate probability value of the matrix to a threshold, the role to the user; and enforce access to one or more computing resources by the user in accordance with the role as a result of the comparison.",5,,0,D
10606987,7,"7. The system of claim 6 , wherein the information includes: data from an access control list; cryptographic key information; or data from a security policy.",6,claim 6,0,D
10606987,8,"8. The system of claim 6 , wherein the information includes: a job description of the user; a job code of the user; or a reporting structure associated with the user.",7,claim 6,0,D
10606987,9,"9. The system of claim 6 , wherein the computer-executable instructions that cause the system to perturb the candidate probability value includes computer-executable instructions that further cause the system to: perturb a probability value based at least in part on the initial probability value to produce a second perturbed probability value with a third score; and determine, based at least in part on an evaluation of the third score against the second score, that the candidate probability value is more optimal than the second perturbed probability value.",8,claim 6,0,D
10606987,10,"10. The system of claim 6 , wherein the computer-executable instructions that cause the system to calculate the first score and the second score includes computer-executable instructions that further cause the system to penalize a probability value that lies within a particular range by applying a penalty weight to the probability value.",9,claim 6,0,D
10606987,11,"11. The system of claim 6 , wherein the computer-executable instructions that cause the system to perturb the candidate probability value further cause the system to normalize the perturbed probability value to ensure that the perturbed probability value remains below a threshold.",10,claim 6,0,D
10606987,12,"12. The system of claim 6 , wherein the second score is further computed by weighting the objective function based at least in part on an importance value associated with the role.",11,claim 6,0,D
10606987,13,"13. The system of claim 12 , wherein the penalty function involves one or more of: counting a number of roles that comprise a non-zero probability of being assigned to a user; counting a number of different roles that are assignable to a particular user; or counting a number of different users that are assignable to a particular role.",12,claim 12,0,D
10606987,14,"14. A non-transitory computer-readable storage medium that stores executable instructions that, as a result of being executed by one or more processors of a computer system, cause the computer system to: determine a first probability that indicates a probability value that a user of the computing system is associated with a role, the first probability comprising a first score; perturb, by an objective function that minimizes at least one ambiguous assignment penalty function, the first probability to determine a second probability comprising a second score; evaluate the second score against the first score using a penalty function to determine that the second probability indicates a more optimal probability of the user being associated with the role than the first probability; set, based on the evaluation, the second probability as an entry in a matrix configured to store a plurality of probabilities indicating whether to assign the role to the user; and assign, based at least in part on the entry in matrix, the role to the user such that the user accesses one or more computing resources provided by the computer system.",13,,0,D
10606987,15,"15. The non-transitory computer-readable storage medium of claim 14 , wherein the executable instructions that cause the computer system to perturb the first probability cause the computer system to: perturb the first probability to produce a third probability comprising a third score; evaluate the third probability against the first score to determine that the third probability indicates a more optimal probability of the user being associated with the role than the first probability; and perturb the third probability to produce the second probability.",14,claim 14,0,D
10606987,16,"16. The non-transitory computer-readable storage medium of claim 14 , wherein the executable instructions that cause the computer system to perturb the first probability further cause the computer system to normalize the second probability to ensure that the second probability remains below a threshold.",15,claim 14,0,D
10606987,17,"17. The non-transitory computer-readable storage medium of claim 14 , wherein the executable instructions that cause the computer system to perturb the first probability cause the computer system to increase or decrease the first probability by a random amount.",16,claim 14,0,D
10606987,18,"18. The non-transitory computer-readable storage medium of claim 14 , wherein the executable instructions that cause the computer system to determine the second probability include executable instructions that cause the computer system to determine the second probability based at least in part on a metaheuristic algorithm.",17,claim 14,0,D
10606987,19,"19. The non-transitory computer-readable storage medium of claim 18 , wherein the metaheuristic algorithm is a genetic algorithm or a probabilistic algorithm.",18,claim 18,0,D
10606987,20,"20. The non-transitory computer-readable storage medium of claim 14 , wherein the executable instructions that cause the computer system to determine the second probability include executable instructions that cause the computer system to determine the second probability based at least in part on a numerical optimization algorithm.",19,claim 14,0,D
10606987,21,"21. The non-transitory computer-readable storage medium of claim 20 , wherein: the numerical optimization algorithm is a gradient descent optimization function; and the executable instructions that cause the computer system to determine that that the second probability indicates the more optimal probability include executable instructions that cause the computer system to: compute the first score and the second score by including the first probability and the second probability as inputs to the gradient descent optimization function; and determine that the second score is closer to a local minimum than the first score.",20,claim 20,0,D
10606988,1,"1. A method for monitoring security of a computing device interfaced with a security computing device, the method comprising: authenticating a user prior to providing access to content via the computing device; receiving images of the user captured periodically by an image capture device and images rendered on a display screen of the computing device, the images of the user and of the display screen captured while the user is interacting with the computing device; tracking user inputs provided at the computing device while the user is accessing the content; analyzing the user inputs to identify user activities included therein, the analysis used to assign descriptive tags to the identified user activities, wherein the user activities and the descriptive tags, the images of the user and the images of the display screen are stored in a user activity log for the user to provide an audit trail, the user activity log is searchable using the descriptive tags; and generating an alert upon detecting a deviation in the user activities from activities allowed for the user, the deviation used to disable access to the content using the computing device.",0,,1,D
10606988,2,"2. The method of claim 1 , wherein operations of the method are performed by a processor of the security computing device in cooperation with a processor of the computing device.",1,claim 1,0,D
10606988,3,"3. The method of claim 1 , wherein the tracking of user inputs is performed when the user is accessing the computing device in a secure mode and the tracking is de-activated when the user is accessing the computing device in a non-secure mode.",2,claim 1,0,D
10606988,4,"4. The method of claim 1 , wherein the user is notified of the tracking.",3,claim 1,0,D
10606988,5,"5. The method of claim 1 , further includes providing an option to the user to view the user activity log.",4,claim 1,0,D
10606988,6,"6. The method of claim 1 , wherein the activities allowed for the user are activities identified from the user inputs provided by other users while accessing the content.",5,claim 1,0,D
10606988,7,"7. The method of claim 1 , wherein the activities allowed for the user are activities identified from the user inputs provided routinely by the user during prior access of the content.",6,claim 1,0,D
10606988,8,"8. The method of claim 1 , wherein identifying the activities allowed for the user includes, analyzing the user inputs in the user activity log collected for the content over a period of time to identify the user activities provided through the user inputs by the user during prior access of the content; and wherein generating an alert includes, correlating the user activities of the user identified from tracking the user inputs with the activities allowed for the user to identify a deviation in the user activities, the deviation triggering the alert.",7,claim 1,0,D
10606988,9,"9. The method of claim 1 , wherein identifying the activities allowed for the user includes, identifying a security policy defined for accessing the content, the security policy specifying activities and access modes allowed for the content, security critical events identified for the content and a security rule to apply when a particular security critical event occurs; generating a security model using the security policy for the content and the user activities identified from the user activity log; and using the generated security model to determine the user activities of the user that are allowed activities and user activities of the user that are not allowed activities.",8,claim 1,0,D
10606988,10,"10. The method of claim 1 , wherein the user inputs includes one or a combination of keyboard inputs, audio inputs, or computer generated data.",9,claim 1,0,D
10606988,11,"11. The method of claim 1 , wherein authenticating the user includes, capturing biometric measure of the user using one or more biometric sensors, the biometric measure used to generate sensor data, the sensor data transmitted to the security computing device using an out of band channel, for authentication, the authentication performed by comparing the sensor data captured by the one or more biometric sensors with sensor data of the user stored in an authentication registry.",10,claim 1,0,D
10606988,12,"12. The method of claim 1 , wherein the authenticating of the user is performed continuously based on images taken of the user while the user is interacting with the computing device.",11,claim 1,0,D
10606988,13,"13. A method for monitoring security of a computing device interfaced with a security computing device, the method comprising: authenticating a user prior to providing access to content via the computing device; receiving images of the user captured by an image capture device and images rendered on a display screen of the computing device, the images of the user and of the display screen captured periodically while the user is interacting with the computing device; tracking user inputs provided at the computing device while the user is accessing the content, the user inputs analyzed to identify user activities included therein, the analysis used to assign descriptive tags to user activities; storing the user inputs, the user activities, the descriptive tags, the images of the user and the images of the display screen in a user activity log for the user to provide an audit trail, the user activity log indexed using the descriptive tags; and modeling the user activities provided in the user inputs by the user to activities allowed for the user, the modeling used to determine a deviation in the user activities from the activities allowed for the user; and generating an alert upon detecting the deviation in the user activities from the activities allowed for the user, the deviation used to disable access to the content using the computing device.",12,,0,D
10606988,14,"14. The method of claim 13 , wherein operations of the method are performed by a processor of the security computing device in cooperation with a processor of the computing device.",13,claim 13,0,D
10606988,15,"15. The method of claim 13 , wherein modeling the user activities includes, extracting semantic meaning of the user inputs, the semantic meaning used to determine the descriptive tags; generating a schema based on the semantic meaning extracted from the user inputs; analyzing the schema based on a security model defined for the content accessed by the user to identify the deviation in the user activities, wherein the security model identifies a security policy for assessing the user inputs, the assessing of the user inputs includes analyzing user activities of the user received over a pre-defined period of time from prior access of the content, to identify operational parameters associated with the user for the content, the operational parameters used to determine the deviation in the user activities.",14,claim 13,0,D
10606988,16,"16. The method of claim 15 , wherein the security policy specifies user activities allowed for the content, access modes allowed to access the content, security critical events identified for the content and a security rule to apply when a particular security critical event is detected in the user inputs received for the content.",15,claim 15,0,D
10606988,17,"17. The method of claim 13 , wherein modeling the user activities includes correlating the user activities provided through the user inputs during current access of the content to the normal activities established for the user based on user inputs provided during prior access of the content.",16,claim 13,0,D
10606988,18,"18. The method of claim 13 , wherein modeling the user activities includes correlating the user activities provided through the user inputs during current access of the content to the user activities provided by other users during prior access of the content.",17,claim 13,0,D
10606988,19,"19. The method of claim 13 , further includes providing an option to the user to view the user activity log.",18,claim 13,0,D
10606988,20,"20. The method of claim 13 , wherein the tracking of user inputs is performed when the user is accessing the computing device in a private mode.",19,claim 13,0,D
10606989,1,"1. A system, comprising: circuitry for accepting a request for personal information, the request for personal information accepted in association with an online transaction initiated by a user; circuitry for evaluating a total cost of the online transaction, including at least circuitry for parsing at least some markup language code representing a checkout page of the online transaction to identify, via the parsing, a symbol associated with currency and to retrieve a value associated with and displayable adjacent to the symbol associated with currency, the value presumed to represent the total cost associated with the online transaction; circuitry for determining a number of elements of personal information relating to the user to expose at least partly based on the circuitry for evaluating the total cost; circuitry for selecting a persona from at least two stored personas associated with the user at least partly based on the circuitry for determining the number of elements, the persona and the number of elements of personal information to expose selected to prevent gratuitous disclosure of at least some personal information relating to the user in view of the total cost associated with the online transaction; and circuitry for presenting the persona selected from the at least two stored personas responsive to the request for personal information.",0,,1,D
10606989,2,"2. The system of claim 1 , wherein circuitry for selecting a persona from at least two stored personas associated with the user at least partly based on the circuitry for determining the number of elements, the persona and the number of elements of personal information to expose selected to prevent gratuitous disclosure of at least some personal information relating to the user in view of the total cost associated with the online transaction comprises: circuitry for selecting a persona including at least some data relating to at least one billing account associated with the user at least partly based on the circuitry for determining the number of elements.",1,claim 1,0,D
10606989,3,"3. The system of claim 2 , wherein circuitry for selecting a persona including at least some data relating to at least one billing account associated with the user at least partly based on the circuitry for determining the number of elements comprises: circuitry for selecting a persona including at least some credit card account data associated with the user at least partly based on the circuitry for determining the number of elements.",2,claim 2,0,D
10606989,4,"4. The system of claim 2 , wherein circuitry for selecting a persona including at least some data relating to at least one billing account associated with the user at least partly based on the circuitry for determining the number of elements comprises: circuitry for selecting a persona including at least some data relating to at least one bank account associated with the user at least partly based on the circuitry for determining the number of elements.",3,claim 2,0,D
10606989,5,"5. The system of claim 2 , wherein circuitry for selecting a persona including at least some data relating to at least one billing account associated with the user at least partly based on the circuitry for determining the number of elements comprises: circuitry for selecting a persona including at least some data relating to at least one electronic payment account associated with the user at least partly based on the circuitry for determining the number of elements.",4,claim 2,0,D
10606989,6,"6. The system of claim 5 , wherein circuitry for selecting a persona including at least some data relating to at least one electronic payment account associated with the user at least partly based on the circuitry for determining the number of elements comprises: circuitry for selecting a persona including at least some data relating to at least one of a Google Checkout account, an Amazon Payments account, a PayPal account, a mobile PayPal account, or an Apple Pay account associated with the user at least partly based on the circuitry for determining the number of elements.",5,claim 5,0,D
10606989,7,"7. The system of claim 2 , wherein circuitry for selecting a persona including at least some data relating to at least one billing account associated with the user at least partly based on the circuitry for determining the number of elements comprises: circuitry for selecting a persona including at least some data relating to at least one cable telecommunications billing account associated with the user at least partly based on the circuitry for determining the number of elements.",6,claim 2,0,D
10606989,8,"8. The system of claim 2 , wherein circuitry for selecting a persona including at least some data relating to at least one billing account associated with the user at least partly based on the circuitry for determining the number of elements comprises: circuitry for selecting a persona including at least some data relating to one or more of at least one wireless telecommunications billing account or at least one satellite telecommunications billing account associated with the user at least partly based on the circuitry for determining the number of elements.",7,claim 2,0,D
10606989,9,"9. The system of claim 1 , wherein circuitry for presenting the persona selected from the at least two stored personas responsive to the request for personal information comprises: circuitry for presenting the persona responsive to the request for personal information, including at least presenting an indication that the persona is verified with respect to the user by at least one of a telecommunications carrier or a bank.",8,claim 1,0,D
10606989,10,"10. A computer program product, comprising: at least one non-transitory signal-bearing medium including at least: one or more instructions for accepting a request for personal information, the request for personal information accepted in association with an online transaction initiated by a user; one or more instructions for evaluating a total cost of the online transaction, including at least one or more instructions for parsing at least some markup language code representing a checkout page of the online transaction to identify, via the parsing, a symbol associated with currency and to retrieve a value associated with and displayable adjacent to the symbol associated with currency, the value presumed to represent the total cost associated with the online transaction; one or more instructions for determining a number of elements of personal information relating to the user to expose at least partly based on the one or more instructions for evaluating the total cost; one or more instructions for selecting a persona from at least two stored personas associated with the user at least partly based on the one or more instructions for determining the number of elements, the persona and the number of elements of personal information to expose selected to prevent gratuitous disclosure of at least some personal information relating to the user in view of the total cost associated with the online transaction; and one or more instructions for presenting the persona selected from the at least two stored personas responsive to the request for personal information.",9,,0,D
10606989,11,"11. A system, comprising: a computing device; and one or more instructions that, when executed by the computing device, cause the computing device to perform one or more operations including at least: accepting a request for personal information, the request for personal information accepted in association with an online transaction initiated by a user; evaluating a total cost of the online transaction, including at least parsing at least some markup language code representing a checkout page of the online transaction to identify, via the parsing, a symbol associated with currency and to retrieve a value associated with and displayable adjacent to the symbol associated with currency, the value presumed to represent the total cost associated with the online transaction; determining a number of elements of personal information relating to the user to expose at least partly based on the evaluating the total cost; selecting a persona from at least two stored personas associated with the user at least partly based on the determining the number of elements, the persona and the number of elements of personal information to expose selected to prevent gratuitous disclosure of at least some personal information relating to the user in view of the total cost associated with the online transaction; and presenting the persona selected from the at least two stored personas responsive to the request for personal information.",10,,0,D
10606989,12,"12. A method, comprising: accepting a request for personal information, the request for personal information accepted in association with an online transaction initiated by a user; evaluating a total cost of the online transaction, including at least parsing at least some markup language code representing a checkout page of the online transaction to identify, via the parsing, a symbol associated with currency and to retrieve a value associated with and displayable adjacent to the symbol associated with currency, the value presumed to represent the total cost associated with the online transaction; determining a number of elements of personal information relating to the user to expose at least partly based on the evaluating the total cost; selecting a persona from at least two stored personas associated with the user at least partly based on the determining the number of elements, the persona and the number of elements of personal information to expose selected to prevent gratuitous disclosure of at least some personal information relating to the user in view of the total cost associated with the online transaction; and presenting the persona selected from the at least two stored personas responsive to the request for personal information, wherein at least one of the accepting, evaluating, determining, selecting, or presenting is at least partly implemented using at least one processing device.",11,,0,D
10606989,13,"13. The system of claim 1 , wherein circuitry for selecting a persona from at least two stored personas associated with the user at least partly based on the circuitry for determining the number of elements, the persona and the number of elements of personal information to expose selected to prevent gratuitous disclosure of at least some personal information relating to the user in view of the total cost associated with the online transaction comprises: circuitry for selecting a persona from at least two stored personas associated with the user at least partly based on the circuitry for determining the number of elements, the persona and the number of elements of personal information to expose selected to prevent dissemination of more personal information than would be sufficient for completion of the online transaction.",12,claim 1,0,D
10606989,14,"14. The system of claim 1 , wherein circuitry for selecting a persona from at least two stored personas associated with the user at least partly based on the circuitry for determining the number of elements, the persona and the number of elements of personal information to expose selected to prevent gratuitous disclosure of at least some personal information relating to the user in view of the total cost associated with the online transaction comprises: circuitry for selecting a persona from at least two stored personas associated with the user at least partly based on the circuitry for determining the number of elements, the persona and the number of elements of personal information to expose including only that amount of personal information which is sufficient for completion.",13,claim 1,0,D
10606989,15,"15. The system of claim 1 , wherein circuitry for presenting the persona selected from the at least two stored personas responsive to the request for personal information comprises: circuitry for accessing a vendor-specific persona database relating to a sender of the request for personal information to obtain one or more XY coordinates referring to where on the checkout page personal information should go; and circuitry for placing one or more elements of personal information from the persona into one or more corresponding fields of the checkout page of the online transaction at least partly based on the one or more XY coordinates obtained from the vendor-specific persona database.",14,claim 1,0,D
10606989,16,"16. The system of claim 1 , wherein circuitry for presenting the persona selected from the at least two stored personas responsive to the request for personal information comprises: circuitry for presenting the persona to an online vendor in the online transaction initiated by the user.",15,claim 1,0,D
10606989,17,"17. The system of claim 16 , wherein circuitry for presenting the persona to an online vendor in the online transaction initiated by the user comprises: circuitry for presenting the persona to an online vendor in the online transaction initiated by the user for use by the online vendor in securing credit on behalf of the user for use in conjunction with the online transaction.",16,claim 16,0,D
10606989,18,"18. The system of claim 1 , wherein circuitry for determining a number of elements of personal information relating to the user to expose at least partly based on the circuitry for evaluating the total cost comprises: circuitry for determining whether the circuitry for evaluating the total cost indicates that the total cost is above a monetary threshold requiring a particular element of personal information in the persona to complete the online transaction, including at least determining that a social security number of the user may be exposed responsive to the circuitry for evaluating the total cost indicating that the total cost is over one thousand dollars.",17,claim 1,0,D
10606989,19,"19. The system of claim 1 , wherein circuitry for determining a number of elements of personal information relating to the user to expose at least partly based on the circuitry for evaluating the total cost comprises: circuitry for comparing the total cost with a ruleset defining one or more monetary amount thresholds for exposing one or more particular elements of personal information corresponding to the one or more monetary amount thresholds.",18,claim 1,0,D
10606989,20,"20. The system of claim 19 , wherein circuitry for comparing the total cost with a ruleset defining one or more monetary amount thresholds for exposing one or more particular elements of personal information corresponding to the one or more monetary amount thresholds comprises: circuitry for comparing the total cost with a ruleset defining one or more monetary amount thresholds for exposing one or more particular elements of personal information corresponding to the one or more monetary amount thresholds, the ruleset including at least a first rule permitting only a name and credit card information to be exposed when the total cost is below a first monetary threshold, the ruleset including at least a second rule permitting only a name, credit card information, and telephone number to be exposed when the total cost is above the a first monetary threshold and below a second monetary threshold, and the ruleset including at least a third rule permitting a name, credit card information, telephone number, and social security number to be exposed when the total cost is above the second monetary threshold.",19,claim 19,0,D
10606989,21,"21. The system of claim 1 , further comprising: circuitry for attempting to complete the online transaction initiated by the user subsequent to the presenting the persona responsive to the request for personal information; circuitry for detecting whether the attempt to complete the online transaction initiated by the user subsequent to the presenting the persona responsive to the request for personal information was successful; and circuitry for selecting a different persona from the one or more stored personas associated with the user at least partly based on at least one indication by the circuitry for detecting whether the attempt to complete the online transaction initiated by the user subsequent to the presenting the persona responsive to the request for personal information was successful that the attempt to complete the online transaction was not successful.",20,claim 1,0,D
10606989,22,"22. The system of claim 21 , wherein circuitry for detecting whether the attempt to complete the online transaction initiated by the user subsequent to the presenting the persona responsive to the request for personal information was successful comprises: circuitry for parsing at least one web page code received in response to the circuitry for attempting to complete the online transaction to locate, via the parsing, at least some markup language code within the at least one web page configured to display one or more labels corresponding to one or more fields requesting personal information in red type; and circuitry for determining that the attempt to complete the online transaction was not successful responsive to a presence of the at least some markup language code within the at least one web page configured to display the one or more labels corresponding to the one or more fields requesting personal information in red type.",21,claim 21,0,D
10606989,23,"23. The system of claim 1 , wherein circuitry for evaluating a total cost of the online transaction, including at least circuitry for parsing at least some markup language code representing a checkout page of the online transaction to identify, via the parsing, a symbol associated with currency and to retrieve a value associated with and displayable adjacent to the symbol associated with currency, the value presumed to represent the total cost associated with the online transaction comprises: circuitry for evaluating a total cost of the online transaction, including at least circuitry for parsing at least some markup language code representing a checkout page of the online transaction to identify, via the parsing, a symbol associated with one or more of dollars, yen, euros, or pesos and to retrieve a value associated with and displayable adjacent to the symbol associated with one or more of dollars, yen, euros, or pesos, the value presumed to represent the total cost associated with the online transaction.",22,claim 1,0,D
10606989,24,"24. The system of claim 1 , wherein circuitry for presenting the persona selected from the at least two stored personas responsive to the request for personal information comprises: circuitry for negotiating presentation of the persona at least partly based on the circuitry for evaluating the total cost.",23,claim 1,0,D
10606989,25,"25. The system of claim 24 , wherein circuitry for negotiating presentation of the persona at least partly based on the circuitry for evaluating the total cost comprises: circuitry for negotiating presentation of the persona at least partly based on the circuitry for evaluating the total cost, the negotiating concluded on the basis of a future condition.",24,claim 24,0,D
10606989,26,"26. The system of claim 25 , wherein circuitry for negotiating presentation of the persona at least partly based on the circuitry for evaluating the total cost, the negotiating concluded on the basis of a future condition comprises: circuitry for negotiating presentation of the persona at least partly based on the circuitry for evaluating the total cost, the negotiating concluded on the basis of a promise to pay the total cost within a defined time period after an object of the online transaction is delivered.",25,claim 25,0,D
10606989,27,"27. The system of claim 1 , wherein circuitry for presenting the persona selected from the at least two stored personas responsive to the request for personal information comprises: circuitry for presenting the persona on behalf of a trusted custodian of verified personal information associated with the user responsive to the request for personal information.",26,claim 1,0,D
10606989,28,"28. The system of claim 27 , wherein circuitry for presenting the persona on behalf of a trusted custodian of verified personal information associated with the user responsive to the request for personal information comprises: circuitry for presenting the persona on behalf of a second user responsive to the request for personal information, the second user including a trusted custodian of verified personal information associated with the user, the trusted custodian vouching for integrity of the user.",27,claim 27,0,D
10606989,29,"29. The system of claim 27 , wherein circuitry for presenting the persona on behalf of a trusted custodian of verified personal information associated with the user responsive to the request for personal information comprises: circuitry for presenting the persona on behalf of a second user responsive to the request for personal information, the second user including a trusted custodian of verified personal information associated with the user, the trusted custodian providing security for the online transaction.",28,claim 27,0,D
10606989,30,"30. The system of claim 27 , wherein circuitry for presenting the persona on behalf of a trusted custodian of verified personal information associated with the user responsive to the request for personal information comprises: circuitry for presenting the persona on behalf of a second user responsive to the request for personal information, the second user including a trusted custodian of verified personal information associated with the user, the trusted custodian enabling the user to maintain a personal information repository at the trusted custodian.",29,claim 27,0,D
10606989,31,"31. The system of claim 1 , wherein circuitry for selecting a persona from at least two stored personas associated with the user at least partly based on the circuitry for determining the number of elements, the persona and the number of elements of personal information to expose selected to prevent gratuitous disclosure of at least some personal information relating to the user in view of the total cost associated with the online transaction comprises: circuitry for selecting a persona including at least some network-participation data associated with the user at least partly based on the circuitry for determining the number of elements, a network associated with the at least some network-participation data providing security for the transaction.",30,claim 1,0,D
10606989,32,"32. The system of claim 1 , wherein circuitry for selecting a persona from at least two stored personas associated with the user at least partly based on the circuitry for determining the number of elements, the persona and the number of elements of personal information to expose selected to prevent gratuitous disclosure of at least some personal information relating to the user in view of the total cost a associated with the online transaction comprises: circuitry for selecting a persona from at least two stored personas associated with the user at least partly based on the circuitry for determining the number of elements, the persona and the number of elements of personal information to expose selected in accordance with minimizing transmission of personal information of the user.",31,claim 1,0,D
10606990,1,"1. A method comprising: accessing access data for a first user of a plurality of users, the access data for the first user indicating an access history by the first user to one or more of a plurality of available computing assets; analyzing, by a machine learning algorithm executing on one or more hardware processors, the access data of the first user to generate a set of access characteristics for the first user, the expected access characteristics for the first user identifying one or more expected characteristics when the first user accesses data; receiving an indication of a current access attempt for a first available computing asset, the current access attempt using an identity of the first user of the plurality of users; comparing at least one access characteristic associated with the current access attempt to the set of access characteristics for the first user, yielding a first comparison; determining a security level associated with the first available computing asset; and selecting, based on the first comparison and the level of security associated with the first available computing asset, a first authentication process from a plurality of authentication processes for presentation to the first user.",0,,1,D
10606990,2,"2. The method of claim 1 , wherein the selecting the first authentication process is further based on a requested privilege level associated with the current access attempt.",1,claim 1,0,D
10606990,3,"3. The method of claim 1 , further comprising: accessing identification data for the first user, the identification data describing an operational role assigned to the first user within an organization, wherein the analyzing of the access data of the first user is based on the operational role assigned to the first user.",2,claim 1,0,D
10606990,4,"4. The method of claim 1 , wherein analyzing the access data of the first user comprises: identifying similarities between the access data of the first user and the access data of a second user of the plurality of users.",3,claim 1,0,D
10606990,5,"5. The method of claim 4 , wherein the access data of the first user comprises a first network graph, the access data of the second user comprises a second network graph, and the method further comprises: generating a correlation metric relating the first network graph to the second network graph, wherein the identifying of similarities between the access data of the first user and the access data of the second user is based on the correlation metric.",4,claim 4,0,D
10606990,6,"6. The method of claim 1 , wherein the selecting the first authentication process is based on the at least one characteristic associated with the current access attempt being anomalous to the at least one characteristic from the set of access characteristics for the first user.",5,claim 1,0,D
10606990,7,"7. The method of claim 1 , further comprising: receiving an indication of a subsequent access attempt for a second available computing asset, the subsequent access attempt using the identity of the first user; comparing at least one access characteristic associated with the subsequent access attempt to the set of access characteristics for the first user, yielding a second comparison, wherein the at least one access characteristic associated with the subsequent access attempt is within a threshold similarity to the at least one access characteristic associated with the current access attempt; determining a security level associated with the second available computing asset, the security level associated with the second available computing asset being higher than the security level associated with the first available computing asset; and selecting, based on the second comparison and the level of security associated with the second available computing asset, a second authentication process from the plurality of authentication processes for presentation to the first user, the second authentication process requiring one piece of information not required in the first authentication process.",6,claim 1,0,D
10606990,8,"8. The method of claim 1 , further comprising: generating, based on the at least one access characteristic associated with the current access attempt, a risk reduction recommendation indicating at least one action operable by the user to reduce risk in relation to access attempts; and transmitting the risk reduction recommendation to the first user.",7,claim 1,0,D
10606990,9,"9. The method of claim 1 , further comprising: receiving a support request using the identity of the first user, the support request regarding a particular issue experienced by the first user; determining, based on the set of access characteristics of the first user, a computing asset related to the particular issue.",8,claim 1,0,D
10606990,10,"10. The method of claim 9 , further comprising: determining, based on the computing asset, sets of access characteristics of other users that accessed the computing asset; and determining, based on the sets of access characteristics of the other users that accessed the computing asset, a previously identified issue associated with the first asset.",9,claim 9,0,D
10606990,11,"11. A system comprising: one or more computer processors; and one or more computer-readable mediums storing instructions that, when executed by the one or more computer processors, cause the system to perform operations comprising: accessing access data for a first user of a plurality of users, the access data for the first user indicating an access history by the first user to one or more of a plurality of available computing assets; analyzing, by a machine learning algorithm executing on one or more hardware processors, the access data of the first user to generate a set of access characteristics for the first user, the expected access characteristics for the first user identifying one or more expected characteristics when the first user accesses data; receiving an indication of a current access attempt for a first available computing asset, the current access attempt using an identity of the first user of the plurality of users; comparing at least one access characteristic associated with the current access attempt to the set of access characteristics for the first user, yielding a first comparison; determining a security level associated with the first available computing asset; and selecting, based on the first comparison and the level of security associated with the first available computing asset, a first authentication process from a plurality of authentication processes for presentation to the first user.",10,,0,D
10606990,12,"12. The system of claim 11 , wherein the selecting the first authentication process is further based on a requested privilege level associated with the current access attempt.",11,claim 11,0,D
10606990,13,"13. The system of claim 11 , the operations further comprising: accessing identification data for the first user, the identification data describing an operational role assigned to the first user within an organization, wherein the analyzing of the access data of the first user is based on the operational role assigned to the first user.",12,claim 11,0,D
10606990,14,"14. The system of claim 11 , wherein analyzing the access data of the first user comprises: identifying similarities between the access data of the first user and the access data of a second user of the plurality of users.",13,claim 11,0,D
10606990,15,"15. The system of claim 14 , wherein the access data of the first user comprises a first network graph, the access data of the second user comprises a second network graph, and the method further comprises: generating a correlation metric relating the first network graph to the second network graph, wherein the identifying of similarities between the access data of the first user and the access data of the second user is based on the correlation metric.",14,claim 14,0,D
10606990,16,"16. The system of claim 11 , wherein the selecting the first authentication process is based on the at least one characteristic associated with the current access attempt being anomalous to the at least one characteristic from the set of access characteristics for the first user.",15,claim 11,0,D
10606990,17,"17. The system of claim 11 , the operations further comprising: receiving an indication of a subsequent access attempt for a second available computing asset, the subsequent access attempt using the identity of the first user; comparing at least one access characteristic associated with the subsequent access attempt to the set of access characteristics for the first user, yielding a second comparison, wherein the at least one access characteristic associated with the subsequent access attempt is within a threshold similarity to the at least one access characteristic associated with the current access attempt; determining a security level associated with the second available computing asset, the security level associated with the second available computing asset being higher than the security level associated with the first available computing asset; and selecting, based on the second comparison and the level of security associated with the second available computing asset, a second authentication process from the plurality of authentication processes for presentation to the first user, the second authentication process requiring one piece of information not required in the first authentication process.",16,claim 11,0,D
10606990,18,"18. The system of claim 11 , the operations further comprising: receiving a support request using the identity of the first user, the support request regarding a particular issue experienced by the first user; determining, based on the set of access characteristics of the first user, a computing asset related to the particular issue.",17,claim 11,0,D
10606990,19,"19. The system of claim 18 , the operations further comprising: determining, based on the computing asset, sets of access characteristics of other users that accessed the computing asset; and determining, based on the sets of access characteristics of the other users that accessed the computing asset, a previously identified issue associated with the first asset.",18,claim 18,0,D
10606990,20,"20. A non-transitory computer-readable medium storing instructions that, when executed by one or more computer processors of one or more computing devices, cause the one or more computing devices to perform operations comprising: accessing access data for a first user of a plurality of users, the access data for the first user indicating an access history by the first user to one or more of a plurality of available computing assets; analyzing, by a machine learning algorithm executing on one or more hardware processors, the access data of the first user to generate a set of access characteristics for the first user, the expected access characteristics for the first user identifying one or more expected characteristics when the first user accesses data; receiving an indication of a current access attempt for a first available computing asset, the current access attempt using an identity of the first user of the plurality of users; comparing at least one access characteristic associated with the current access attempt to the set of access characteristics for the first user, yielding a first comparison; determining a security level associated with the first available computing asset; and selecting, based on the first comparison and the level of security associated with the first available computing asset, a first authentication process from a plurality of authentication processes for presentation to the first user.",19,,0,D
10606990,21,"21. The non-transitory computer-readable medium of claim 20 , the operations further comprising: receiving an indication of a subsequent access attempt for a second available computing asset, the subsequent access attempt using the identity of the first user; comparing at least one access characteristic associated with the subsequent access attempt to the set of access characteristics for the first user, yielding a second comparison, wherein the at least one access characteristic associated with the subsequent access attempt is within a threshold similarity to the at least one access characteristic associated with the current access attempt; determining a security level associated with the second available computing asset, the security level associated with the second available computing asset being higher than the security level associated with the first available computing asset; and selecting, based on the second comparison and the level of security associated with the second available computing asset, a second authentication process from the plurality of authentication processes for presentation to the first user, the second authentication process requiring one piece of information not required in the first authentication process.",20,claim 20,0,D
10606991,1,"1. A user-centric cyber security system, comprising: a plurality of DAAs (Data Acquisition Agents) configured to collect data relative to activities of a user in online accounts from a plurality of user's OSPs (Online Service Providers) and from a plurality of electronic user communication devices, wherein the data received from said plurality of user's OSPs is used to build a combined profile of a user that holds two kinds of data, one specific for each specific OSP among said plurality of user's OSPs and the second a cross OSPs profile data, thus said combined profile represents the identity and usage characteristic of said user in online accounts; and a system server communicating with said plurality of DAAs, said system server configured to receive said collected data from said plurality of DAAs, analyze said data for threats by identifying deviation from normal usage characteristic of said user, alert said user accordingly, receive feedback from said user regarding said alert and improve said threat analysis using said user's feedback.",0,,1,D
10606991,2,"2. The system of claim 1 , wherein said system server comprises: a CTAS (Cyber Threats Analysis System) configured to analyze said data and to determine whether it introduces a threat to said user's account or data; and a Threat Broker configured to determine a course of action relating to a determined threat.",1,claim 1,0,D
10606991,3,"3. The system of claim 2 , wherein said course of action comprises informing the user about the threat that his accounts and data are facing through at least one User Interface.",2,claim 2,0,D
10606991,4,"4. The system of claim 3 , wherein said at least one User Interface is selected from the group consisting of software client on a mobile device, software client on a PC and Web client interface.",3,claim 3,0,D
10606991,5,"5. The system of claim 2 , wherein said course of action is selected from the group consisting of informing at least one of said user's OSPs (Online Service Providers), informing an IT (Information Technology) and informing a security specialist.",4,claim 2,0,D
10606991,6,"6. The system of claim 2 , wherein said Threat Broker is further configured to offer remediation steps to said user.",5,claim 2,0,D
10606991,7,"7. The system of claim 6 , wherein said remediation steps are selected from the group consisting of changing OSP's password, closing all active connections to the OSP and reporting the threat to the OSP.",6,claim 6,0,D
10606991,8,"8. The system of claim 1 , wherein said data collected by said DAAs is selected from the group consisting of user activities in his accounts, user's stored data in the accounts and user's accounts settings.",7,claim 1,0,D
10606991,9,"9. The system of claim 1 , wherein said data collected by said DAAs comprises at least one of session data, behavioral data and content data.",8,claim 1,0,D
10606991,10,"10. The system of claim 9 , wherein said session data comprises at least one of IPs (Internet Protocols) used to login to the OSPs, locations the OSPs were logged from, devices used to login to the OSPs and browser types and signatures that were used to login to the OSPs.",9,claim 9,0,D
10606991,11,"11. The system of claim 9 , wherein said behavioral data comprises at least one of usual time of activities in the OSPs, average activities count per time frame, rules the user enforced on the OSPs and languages used by the user when interacting with the OSPs.",10,claim 9,0,D
10606991,12,"12. The system of claim 9 , wherein said content data comprises at least one of template of malicious posts in the OSPs, malicious URLs found in content of the OSPs and malicious files found in the OSPs.",11,claim 9,0,D
10606991,13,"13. The system of claim 1 , wherein said system server comprises a User Profiles database, a Cross User's database and an External Intelligence database.",12,claim 1,0,D
10606991,14,"14. The system of claim 13 , wherein said user profiles database is continuously updated and comprises at least one user characteristic selected from user's typical IPs, user's typical browsers, user's typical devices, user's typical activity times on the OSPs, user's typical posts and user's typical sequence of actions in the OSP.",13,claim 13,0,D
10606991,15,"15. The system of claim 14 , wherein said user profiles database comprises profile data specific for each one of said plurality of OSPs and a cross OSPs profile data.",14,claim 14,0,D
10606991,16,"16. The system of claim 14 , wherein each one of said at least one user characteristic comprises a weight representing the degree to which said characteristic matches the user's identity and behavior.",15,claim 14,0,D
10606991,17,"17. The system of claim 16 , wherein said analyzing comprises finding similarities and/or discrepancies between the characteristics received and deduced from a DAA data and the characteristics residing in the User Profile.",16,claim 16,0,D
10606991,18,"18. The system of claim 13 , wherein said Cross User database is continuously updated and comprises generalized characteristics applicable to a group of similar users.",17,claim 13,0,D
10606991,19,"19. The system of claim 13 , wherein said External Intelligence database comprises external sources from which the system collects and aggregates known threats to users' online accounts and data.",18,claim 13,0,D
10606991,20,"20. The system of claim 19 , wherein said known threats are selected from the group consisting of: malicious hosts IPs, anonymous proxy nodes, malicious URLs, phishing and scam mail templates and known malicious files signatures.",19,claim 19,0,D
10606991,21,"21. The system of claim 1 , wherein at least one of said plurality of DAAs is deployed on the user's devices as a part of a user application.",20,claim 1,0,D
10606991,22,"22. The system of claim 1 , wherein at least one of said plurality of DAAs is deployed on a user's OSP.",21,claim 1,0,D
10606991,23,"23. The system of claim 1 , wherein at least one of said plurality of DAAs is deployed on a remote server.",22,claim 1,0,D
10606991,24,"24. A method of providing user-centric cyber security, comprising: receiving from at least one DAA (Data Acquisition Agents) raw data collected from at least one user's OSPs (Online Service Providers) and from at least one user's electronic communication device, wherein said raw data relative to activities of a user in online accounts; building a combined profile of a user from the data received from said user's OSPs, wherein said profile holds two kinds of data, one specific for each OSP and the second a cross OSPs profile data, thus said combined profile represents the identity and usage characteristic of said user in online accounts; analyzing said data for threats by identifying deviation from normal usage characteristic of said user; and if said analysis indicates that the data is inconsistent with a stored profile of said user, generating a threat alert to said user's device; receiving feedback from said user regarding said threat alert; and improving said threat analysis using said user's feedback.",23,,0,D
10606991,25,"25. The method of claim 24 , wherein said analyzing comprises: using said user's profile to normalize said received raw data; using external sources to enrich said normalized data; and comparing said enriched data to said user's profile.",24,claim 24,0,D
10606991,26,"26. The method of claim 25 , further comprising comparing said enriched data to a Cross User database.",25,claim 25,0,D
10606991,27,"27. The method of claim 24 , further comprising updating said user's profile according to said feedback.",26,claim 24,0,D
10606991,28,"28. The method of claim 25 , further comprising comparing said enriched data to other users aggregated data.",27,claim 25,0,D
10606991,29,"29. The method of claim 24 , further comprising determining a course of action relating to a determined threat.",28,claim 24,0,D
10606991,30,"30. The method of claim 29 , wherein said course of action comprises informing the user about the threat that his accounts and data are facing through at least one User Interface.",29,claim 29,0,D
10606991,31,"31. The method of claim 30 , wherein said at least one User Interface is selected from the group consisting of software client on a mobile device, software client on a PC and Web client interface.",30,claim 30,0,D
10606991,32,"32. The method of claim 31 , wherein said course of action is selected from the group consisting of informing at least one of said user's OSPs, informing an IT (Information Technology) and informing a security specialist.",31,claim 31,0,D
10606991,33,"33. The method of claim 24 , further comprising offering remediation steps to said user.",32,claim 24,0,D
10606991,34,"34. The method of claim 33 , wherein said remediation steps are selected from the group consisting of changing OSP's password, closing all active connections to the OSP and reporting the threat to the OSP.",33,claim 33,0,D
10606991,35,"35. The method of claim 24 , wherein said received data is selected from the group consisting of user activities in his accounts, user's stored data in the accounts and user's accounts settings.",34,claim 24,0,D
10606991,36,"36. The method of claim 24 , wherein said data is collected from said user's electronic communication devices.",35,claim 24,0,D
10606991,37,"37. The method of claim 24 , wherein said data comprises at least one of session data, behavioral data and content data.",36,claim 24,0,D
10606991,38,"38. The method of claim 37 , wherein said session data comprises at least one of IPs used to login to the OSPs, locations the OSPs were logged from, devices used to login to the OSPs and browser types and signatures that were used to login to the OSPs.",37,claim 37,0,D
10606991,39,"39. The method of claim 37 , wherein said behavioral data comprises at least one of usual time of activities in the OSPs, average activities count per time frame, rules the user enforced on the OSPs and languages used by the user when interacting with the OSPs.",38,claim 37,0,D
10606991,40,"40. The method of claim 37 , wherein said content data comprises at least one of template of malicious posts in the OSPs, malicious URLs found in content of the OSPs and malicious files found in the OSPs.",39,claim 37,0,D
10606991,41,"41. One or more computer-storage media embedded with computer-executable instructions, the embedded computer-executable instructions are executed by at least one processor for performing a method of providing user-centric cyber security, comprising: receiving from at least one DAA (Data Acquisition Agents) raw data collected from at least one user's OSPs (Online Service Providers) and from at least one user's device, wherein said raw data relative to activities of a user in online accounts; building a combined profile of a user from the data received from said user's OSPs, wherein said profile holds two kinds of data, one specific for each OSP and the second a cross OSPs profile data, thus said combined profile represents the identity and usage characteristic of said user in online accounts; analyzing said data for threats by identifying deviation from normal usage characteristic of said user; and if said analysis indicates that the data is inconsistent with a stored profile of said user, generating a threat alert to said user's device; receiving feedback from said user regarding said threat alert; and improving said threat analysis using said user's feedback.",40,,0,D
10606992,1,"1. A user authentication method comprising: selecting, by an information terminal, during an authentication reception time, a beacon signal based on one of a first ID number and a second ID number included in a beacon signal output at an authentication location at an authentication time which is received from an authentication server: extracting, by the information terminal, the other of the first ID number and the second ID number from the selected beacon signal; receiving, by the information terminal, biological information of a user from outside the information terminal; comparing, by the information terminal, biological information stored on a storage portion of the information terminal, and the received biological information; and transmitting, by the information terminal, to the authentication server, the other of the first ID number and the second ID number, a user ID number, and a biological authentication result.",0,,1,D
10606992,2,"2. A user authentication system comprising an authentication server, the user authentication system being configured to: correlate, by the authentication server, one of a first ID number and a second ID number included in a beacon signal output at an authentication location at an authentication time, to a user ID number and store, by the authentication server, the one of the first ID number and the second ID number in a correlated state on a storage portion of the authentication server; receive, by the authentication server, from an information terminal which receives the other of the first ID number and the second ID number, one of the first ID number and the second ID number, the user ID number, and a biological authentication result; compare, by the authentication server, the one of the first ID number and the second ID number received from the information terminal, and the one of the first ID number and the second ID number stored on the storage portion and corresponding to the user ID number received from the information terminal; and generate, by the authentication server, a comprehensive authentication result based on a result of the comparison and the biological authentication result.",1,,0,D
10606992,3,"3. A user authentication method comprising: selecting, by an information terminal, during an authentication reception time, a beacon signal based on one of a first ID number and a second ID number included in a beacon signal output at an authentication location at an authentication time which is received from an authentication server; extracting, by the information terminal, the other of the first ID number and the second ID number from the selected beacon signal; receiving, by the information terminal, biological information of a user during the authentication reception time and transmitting, by the information terminal, the biological information to the authentication server together with a user ID number; and transmitting, by the information terminal, to the authentication server, the other of the first ID number and the second ID number, and the user ID number.",2,,0,D
10606992,4,"4. A user authentication system comprising an authentication server, the user authentication system being configured to: correlate, by the authentication server, one of a first ID number and a second ID number included in a beacon signal output at an authentication location at an authentication time, to a user ID number and store, by the authentication server, the one of the first ID number and the second ID number in a correlated state on a storage portion of the authentication server; receive, by the authentication server, from an information terminal which receives the other of the first ID number and the second ID number, one of the first ID number and the second ID number, a user ID number, and biological information during an authentication reception time; compare, by the authentication server, the one of the first ID number and the second ID number received from the information terminal, and the one of the first ID number and the second ID number stored on the storage portion and corresponding to the user ID number received from the information terminal; compare, by the authentication server, the biological information received during the authentication reception time, and biological information stored on the storage portion and corresponding to the user ID number received from the information terminal; and generate, by the authentication server, a comprehensive authentication result based on results of the two comparisons.",3,,0,D
10606992,5,"5. The user authentication application method to claim 1 , further comprising: transmitting, by the information terminal, a third ID number regarding the information terminal to the authentication server; and transmitting, by the information terminal, during the authentication reception time, a beacon signal including the one of the first ID number and the second ID number and the third ID number.",4,claim 1,0,D
10606992,6,"6. The user authentication system according to claim 2 , wherein: before the one of the first ID number and the second ID number is transmitted to the information terminal, the one of the first ID number and the second ID number is stored on the storage portion; and before the other of the first ID number and the second ID number is stored on the storage portion, the other of the first ID number and the second ID number transmitted from another information terminal is received by the authentication terminal.",5,claim 2,0,D
10606992,7,"7. The user authentication method according to claim 3 , further comprising: transmitting, by the information terminal, a third ID number regarding the information terminal to the authentication server; and transmitting by the information terminal, during the authentication reception time, a beacon signal including the one of the first ID number and the second ID number and the third ID number.",6,claim 3,0,D
10606992,8,"8. The user authentication system according to claim 4 , wherein: before the one of the first ID number and the second ID number is transmitted to the information terminal, the one of the first ID number and the second ID number is stored on the storage portion; and before the other of the first ID number and the second ID number is stored on the storage portion, the other of the first ID number and the second ID number transmitted from another information terminal is received by the authentication server.",7,claim 4,0,D
10606993,1,"1. A computer-implemented method, comprising: at a computing system including one or more processors and memory storing one or more programs configured for execution by the one or more processors: receiving, from an image capturing device, a single captured image that includes: a first facial image of a user, an image of a document that includes a second facial image, and a third facial image captured at a first time that is different from a second time at which at least one other facial image is captured; wherein the first facial image and the image of the document that includes the second facial image are included in a single image frame; analyzing the single captured image to determine: a first portion of the single captured image that corresponds to the first facial image, and a second portion of the single captured image that corresponds to the second facial image; determining whether the first facial image and the second facial image meet matching criteria by comparing the first portion of the single captured image with the second portion of the single captured image; determining that a facial feature of the third facial image and a corresponding facial feature of the at least one other facial image meet movement criteria by comparing the facial feature of the third facial image with the corresponding facial feature of the at least one other facial image; in accordance with a determination that the first facial image and the second facial image meet the matching criteria and in accordance with a determination that the facial feature of the third facial image and the corresponding facial feature of the at least one other facial image meet the movement criteria, transmitting authorization information to the image capturing device that includes an indication that the movement criteria are met; and in accordance with a determination that the first facial image and the second facial image do not meet the matching criteria, transmitting, to the image capturing device, a facial position adjustment request.",0,,1,D
10606993,2,"2. The method of claim 1 , wherein the single captured image includes a still image.",1,claim 1,0,D
10606993,3,"3. The method of claim 1 , wherein the single captured image includes a video stream.",2,claim 1,0,D
10606993,4,"4. The method of claim 1 , wherein analyzing the single captured image to determine the first portion of the single captured image that corresponds to the first facial image includes determining, in a plurality of image frames, a respective portion of a respective image frame that corresponds to the first facial image.",3,claim 1,0,D
10606993,5,"5. The method of claim 4 , wherein analyzing the single captured image to determine the first portion of the single captured image that corresponds to the first facial image includes generating the first portion by compositing a plurality of respective portions of respective image frames from the plurality of image frames that correspond to the first facial image.",4,claim 4,0,D
10606993,6,"6. The method of claim 1 , wherein analyzing the single captured image to determine the first portion of the single captured image that corresponds to the first facial image includes selecting, using the second portion of the single captured image that corresponds to the second facial image, a respective portion of a respective image frame that corresponds to the first facial image.",5,claim 1,0,D
10606993,7,"7. The method of claim 1 , wherein: the image of the document that includes the second facial image includes facial image location cue information; and determining the second portion of the single captured image that corresponds to the second facial image includes determining a location of the facial image location cue information.",6,claim 1,0,D
10606993,8,"8. The method of claim 1 , including: after analyzing the single captured image to determine the first portion of the single captured image that corresponds to the first facial image and the second portion of the single captured image that corresponds to the second facial image: analyzing the first portion of the single captured image to determine a first facial position; analyzing the second portion of the single captured image to determine a second facial position; determining whether facial position matching criteria are met by comparing the first facial position with the second facial position; in accordance with a determination that facial position matching criteria are not met, transmitting, to the image capturing device, a facial position matching request; and in accordance with a determination that facial position matching criteria are met, forgoing transmitting, to the image capturing device, the facial position matching request.",7,claim 1,0,D
10606993,9,"9. The method of claim 1 , including: after analyzing the single captured image to determine the first portion of the single captured image that corresponds to the first facial image and the second portion of the single captured image that corresponds to the second facial image: analyzing the second portion of the single captured image to determine a second facial position; determining whether the second facial position meets facial position criteria that correspond to the document; in accordance with a determination that the facial position criteria that correspond to the document are not met, transmitting, to the image capturing device, the facial position adjustment request; and in accordance with a determination that the facial position criteria that correspond to the document are met, forgoing transmitting, to the image capturing device, the facial position adjustment request.",8,claim 1,0,D
10606993,10,"10. The method of claim 1 , wherein determining whether the first facial image and the second facial image meet matching criteria includes at least one of: comparing the first portion of the single captured image with image data that corresponds to a stored facial image; or comparing the second portion of the single captured image with image data that corresponds to the stored facial image.",9,claim 1,0,D
10606993,11,"11. The method of claim 1 , including, in accordance with a determination that the first facial image and the second facial image do not meet the matching criteria, transmitting authorization denial information to the image capturing device.",10,claim 1,0,D
10606993,12,"12. The method of claim 1 , including: prior to receiving the single captured image that includes the first facial image and the image of the document that includes the second facial image: receiving an authorization request from the image capturing device via a first network; determining whether the first network meets image validation criteria; in accordance with a determination that the first network meets the image validation criteria, transmitting a request for the single captured image that includes the first facial image and the image of the document that includes the second facial image; and in accordance with a determination that the first network does not meet the image validation criteria, forgoing transmitting the request for the single captured image that includes the first facial image and the image of the document that includes the second facial image.",11,claim 1,0,D
10606993,13,"13. The method of claim 12 , wherein determining whether the first network meets image validation criteria includes accessing a stored value to determine whether a previous authorization of a received request occurred.",12,claim 12,0,D
10606993,14,"14. The method of claim 12 , including: in accordance with a determination that the first network does not meet the image validation criteria, transmitting a request for alternative authentication data.",13,claim 12,0,D
10606993,15,"15. The method of claim 12 , including, receiving an authorization request from the image capturing device via a second network; and in response to receiving the authorization request from the image capturing device via the second network, forgoing transmitting the request for the single captured image that includes the first facial image and the image of the document that includes the second facial image.",14,claim 12,0,D
10606993,16,"16. The method of claim 1 , wherein determining that the facial feature of the third facial image and the corresponding facial feature of the at least one other facial image meet the movement criteria includes: determining a facial feature movement path by comparing the facial feature of the third facial image with the corresponding facial feature of the at least one other facial image; and determining that a length of the facial feature movement path meets threshold distance criteria.",15,claim 1,0,D
10606993,17,"17. The method of claim 1 , wherein determining that the facial feature of the third facial image and the corresponding facial feature of the at least one other facial image meet the movement criteria includes: transmitting, to the image capturing device, information for displaying a target that moves along a target path; determining a facial feature movement path by comparing the facial feature of the third facial image with the corresponding facial feature of the at least one other facial image; comparing the target path with the facial feature movement path to determine a path matching value; and determining that the path matching value meets path similarity criteria.",16,claim 1,0,D
10606993,18,"18. The method of claim 1 , wherein determining that the facial feature of the third facial image and the corresponding facial feature of the at least one other facial image meet the movement criteria includes: determining a facial feature movement path by comparing the facial feature of the third facial image with the corresponding facial feature of the at least one other facial image; determining a facial boundary movement path by comparing a facial boundary of the third facial image with a corresponding facial boundary of the at least one other facial image; and determining that a length of the facial feature movement path exceeds a length of the facial boundary movement path by more than a threshold distance.",17,claim 1,0,D
10606993,19,"19. The method of claim 1 , wherein the facial feature of the third facial image includes at least a part of one or more eyes in a face.",18,claim 1,0,D
10606993,20,"20. The method of claim 1 , further comprising: transmitting, to the image capturing device, information for displaying a message; receiving, from the imaging capturing device, a recording of the user speaking the message; determining whether the recording meets message speaking criteria; and in accordance with a determination that the recording meets message speaking criteria, including, in the transmitted authorization information, an indication that the message speaking criteria are met.",19,claim 1,0,D
10606993,21,"21. The method of claim 20 , wherein: the recording is an audio recording; and determining whether the recording meets message speaking criteria includes determining whether at least a portion of the audio recording corresponds to a predetermined audio profile for the message.",20,claim 20,0,D
10606993,22,"22. The method of claim 20 , wherein: the recording is a video recording that captures movements of the user's face while the user reads the message; and determining whether the recording meets message speaking criteria includes determining whether at least a portion of the video recording corresponds to a set of predefined facial movements for the message.",21,claim 20,0,D
10606993,23,"23. The method of claim 20 , wherein the message is randomly or pseudorandomly generated.",22,claim 20,0,D
10606993,24,"24. The method of claim 20 , wherein the message is randomly or pseudorandomly selected from a predefined set of messages.",23,claim 20,0,D
10606993,25,"25. A system, comprising: one or more processors; memory; and one or more programs, wherein the one or more programs are stored in the memory and are configured for execution by the one or more processors, the one or more programs including instructions for: receiving, from an image capturing device, a single captured image that includes: a first facial image of a user, an image of a document that includes a second facial image, and a third facial image captured at a first time that is different from a second time at which at least one other facial image is captured; wherein the first facial image and the image of the document that includes the second facial image are included in a single image frame; analyzing the single captured image to determine: a first portion of the single captured image that corresponds to the first facial image, and a second portion of the single captured image that corresponds to the second facial image; determining that a facial feature of the third facial image and a corresponding facial feature of the at least one other facial image meet movement criteria by comparing the facial feature of the third facial image with the corresponding facial feature of the at least one other facial image; in accordance with a determination that the first facial image and the second facial image meet the matching criteria and in accordance with a determination that the facial feature of the third facial image and the corresponding facial feature of the at least one other facial image meet the movement criteria, transmitting authorization information to the image capturing device that includes an indication that the movement criteria are met; and in accordance with a determination that the first facial image and the second facial image do not meet the matching criteria, transmitting, to the image capturing device, a facial position adjustment request.",24,,0,D
10606993,26,"26. The system of claim 25 , wherein the one or more programs include instructions for, in accordance with a determination that the first facial image and the second facial image do not meet the matching criteria, transmitting authorization denial information to the image capturing device.",25,claim 25,0,D
10606993,27,"27. A non-transitory computer readable storage medium storing one or more programs, the one or more programs comprising instructions, which when executed, cause a device to: receive, from an image capturing device, a single captured image that includes: a first facial image of a user, an image of a document that includes a second facial image, and a third facial image captured at a first time that is different from a second time at which at least one other facial image is captured; wherein the first facial image and the image of the document that includes the second facial image are included in a single image frame; analyze the single captured image to determine: a first portion of the single captured image that corresponds to the first facial image, and a second portion of the single captured image that corresponds to the second facial image; determine that a facial feature of the third facial image and a corresponding facial feature of the at least one other facial image meet movement criteria by comparing the facial feature of the third facial image with the corresponding facial feature of the at least one other facial image; in accordance with a determination that the first facial image and the second facial image meet the matching criteria and in accordance with a determination that the facial feature of the third facial image and the corresponding facial feature of the at least one other facial image meet the movement criteria, transmit authorization information to the image capturing device that includes an indication that the movement criteria are met; and in accordance with a determination that the first facial image and the second facial image do not meet the matching criteria, transmit, to the image capturing device, a facial position adjustment request.",26,,0,D
10606993,28,"28. A computer-implemented method, comprising: at a computing system including one or more processors and memory storing one or more programs configured for execution by the one or more processors: receiving, from an image capturing device, a single captured image that includes both: a first facial image of a user, and an image of a document that includes a second facial image, wherein the first facial image and the image of the document that includes the second facial image are included in a single image frame; analyzing the single captured image to determine: a first portion of the single captured image that corresponds to the first facial image, and a second portion of the single captured image that corresponds to the second facial image; after analyzing the single captured image to determine the first portion of the single captured image that corresponds to the first facial image and the second portion of the single captured image that corresponds to the second facial image: analyzing the first portion of the single captured image to determine a first facial position; analyzing the second portion of the single captured image to determine a second facial position; determining whether facial position matching criteria are met by comparing the first facial position with the second facial position; in accordance with a determination that facial position matching criteria are not met, transmitting, to the image capturing device, a facial position matching request; and in accordance with a determination that facial position matching criteria are met, forgoing transmitting, to the image capturing device, the facial position matching request; determining whether the first facial image and the second facial image meet matching criteria by comparing the first portion of the single captured image with the second portion of the single captured image; in accordance with a determination that the first facial image and the second facial image meet the matching criteria, transmitting authorization information to the image capturing device; and in accordance with a determination that the first facial image and the second facial image do not meet the matching criteria, transmitting, to the image capturing device, a facial position adjustment request.",27,,0,D
10606993,29,"29. A system, comprising: one or more processors; memory; and one or more programs, wherein the one or more programs are stored in the memory and are configured for execution by the one or more processors, the one or more programs including instructions for: receiving, from an image capturing device, a single captured image that includes both: a first facial image, and an image of a document that includes a second facial image, wherein the first facial image and the image of the document that includes the second facial image are included in a single image frame; analyzing the single captured image to determine: a first portion of the single captured image that corresponds to the first facial image, and a second portion of the single captured image that corresponds to the second facial image; after analyzing the single captured image to determine the first portion of the single captured image that corresponds to the first facial image and the second portion of the single captured image that corresponds to the second facial image: analyzing the first portion of the single captured image to determine a first facial position; analyzing the second portion of the single captured image to determine a second facial position; determining whether facial position matching criteria are met by comparing the first facial position with the second facial position; in accordance with a determination that facial position matching criteria are not met, transmitting, to the image capturing device, a facial position matching request; and in accordance with a determination that facial position matching criteria are met, forgoing transmitting, to the image capturing device, the facial position matching request; determining whether the first facial image and the second facial image meet matching criteria by comparing the first portion of the single captured image with the second portion of the single captured image; in accordance with a determination that the first facial image and the second facial image meet the matching criteria, transmitting authorization information to the image capturing device; and in accordance with a determination that the first facial image and the second facial image do not meet the matching criteria, transmitting, to the image capturing device, a facial position adjustment request.",28,,0,D
10606993,30,"30. A non-transitory computer readable storage medium storing one or more programs, the one or more programs comprising instructions, which when executed, cause a device to: receive, from an image capturing device, a single captured image that includes both: a first facial image, and an image of a document that includes a second facial image, wherein the first facial image and the image of the document that includes the second facial image are included in a single image frame; analyze the single captured image to determine: a first portion of the single captured image that corresponds to the first facial image, and a second portion of the single captured image that corresponds to the second facial image; after analyzing the single captured image to determine the first portion of the single captured image that corresponds to the first facial image and the second portion of the single captured image that corresponds to the second facial image: analyze the first portion of the single captured image to determine a first facial position; analyze the second portion of the single captured image to determine a second facial position; determine whether facial position matching criteria are met by comparing the first facial position with the second facial position; in accordance with a determination that facial position matching criteria are not met, transmit, to the image capturing device, a facial position matching request; and in accordance with a determination that facial position matching criteria are met, forgoing transmit, to the image capturing device, the facial position matching request; determine whether the first facial image and the second facial image meet matching criteria by comparing the first portion of the single captured image with the second portion of the single captured image; and in accordance with a determination that the first facial image and the second facial image meet the matching criteria, transmit authorization information to the image capturing device; and in accordance with a determination that the first facial image and the second facial image do not meet the matching criteria, transmit, to the image capturing device, a facial position adjustment request.",29,,0,D
10606994,1,"1. An authentication system comprising memory operable to store instructions and processing circuitry operable to execute the instructions, whereby the authentication system is operable to: prompt a first user to make a set of facial expressions according to an authentication pattern; receive first user data depicting the set of facial expressions of the first user, wherein at least one of the set of facial expressions comprises a dynamic facial movement that is distinct from a static facial feature of the first user; authenticate the first user based on the first user data; and restrict the first user from performing an operation in response to determining that the operation requires authenticating at least one other user in addition to authenticating the first user.",0,,1,D
10606994,2,"2. The authentication system of claim 1 , further operable to: receive second user data depicting a facial expression of a second user; authenticate the second user based on the second user data; and allow the first user or the second user to perform the operation in response to determining that authenticating both the first user and the second user is sufficient to permit the operation.",1,claim 1,0,D
10606994,3,"3. The authentication system of claim 2 , wherein the first user data is received from a first sensor and the second user data is received from a second sensor, the first sensor located in a different geographical location than the second sensor.",2,claim 2,0,D
10606994,4,"4. The authentication system of claim 1 , further operable to: restrict the performing of the operation in response to determining that fewer than a quorum of users have been authenticated; and allow the performing of the operation in response to determining that at least the quorum of users has been authenticated.",3,claim 1,0,D
10606994,5,"5. The authentication system of claim 4 , wherein the quorum of users comprises a pre-determined number of users belonging to a group of users having authority to perform the operation.",4,claim 4,0,D
10606994,6,"6. The authentication system of claim 5 , wherein the pre-determined number of users making up the quorum is based in part on the authorization level of each user requesting to perform the operation.",5,claim 5,0,D
10606994,7,"7. The authentication system of claim 4 , wherein to authenticate the quorum of users, the authentication system further is operable to provide a set of prompts to the users being authenticated as part of the quorum, wherein each user is provided with a respective prompt that prompts that user to make a respective facial expression, the set of prompts determined according to an authentication pattern.",6,claim 4,0,D
10606994,8,"8. The authentication system of claim 1 , wherein to authenticate the first user, the authentication system is operable to: determine a confidence level based on comparing the first user data to first validation data, the first validation data depicting a previously validated facial expression associated with the user; and authenticate the first user if the confidence level exceeds a pre-defined threshold.",7,claim 1,0,D
10606994,9,"9. A method, comprising: prompting a first user to make a set of facial expressions according to an authentication pattern; receiving first user data depicting the set of facial expressions of the first user, wherein at least one of the set of facial expressions comprises a dynamic facial movement that is distinct from a static facial feature of the first user; authenticating the first user based on the first user data; and restricting the first user from performing an operation in response to determining that the operation requires authenticating at least one other user in addition to authenticating the first user.",8,,0,D
10606994,10,"10. The method of claim 9 , further comprising: receiving second user data depicting a facial expression of a second user; authenticating the second user based on the second user data; and allowing the first user or the second user to perform the operation in response to determining that authenticating both the first user and the second user is sufficient to permit the operation.",9,claim 9,0,D
10606994,11,"11. The method of claim 10 , wherein the first user data is received from a first sensor and the second user data is received from a second sensor, the first sensor located in a different geographical location than the second sensor.",10,claim 10,0,D
10606994,12,"12. The method of claim 9 , further comprising: restricting the performing of the operation in response to determining that fewer than a quorum of users have been authenticated; and allowing the performing of the operation in response to determining that at least the quorum of users has been authenticated.",11,claim 9,0,D
10606994,13,"13. The method of claim 12 , wherein the quorum of users comprises a pre-determined number of users belonging to a group of users having authority to perform the operation.",12,claim 12,0,D
10606994,14,"14. The method of claim 13 , wherein the pre-determined number of users making up the quorum is based in part on the authorization level of each user requesting to perform the operation.",13,claim 13,0,D
10606994,15,"15. The method of claim 12 , wherein authenticating the quorum of users comprises providing a set of prompts to the users being authenticated as part of the quorum, wherein each user is provided with a respective prompt that prompts that user to make a respective facial expression, the set of prompts determined according to an authentication pattern.",14,claim 12,0,D
10606994,16,"16. The method of claim 9 , wherein authenticating the first user further comprises: determining a confidence level based on comparing the first user data to first validation data, the first validation data depicting a previously validated facial expression associated with the user; and authenticating the first user if the confidence level exceeds a pre-defined threshold.",15,claim 9,0,D
10606994,17,"17. A non-transitory computer readable medium comprising logic that, when executed by processing circuitry, causes the processing circuitry to perform actions comprising: prompting a first user to make a set of facial expressions according to an authentication pattern; receiving first user data depicting the set of facial expressions of the first user, wherein at least one of the set of facial expressions comprises a dynamic facial movement that is distinct from a static facial feature of the first user; authenticating the first user based on the first user data; and restricting the first user from performing an operation in response to determining that the operation requires authenticating at least one other user in addition to authenticating the first user.",16,,0,D
10606994,18,"18. The non-transitory computer readable medium of claim 17 , the actions further comprising: receiving second user data depicting a facial expression of a second user; authenticating the second user based on the second user data; and allowing the first user or the second user to perform the operation in response to determining that authenticating both the first user and the second user is sufficient to permit the operation.",17,claim 17,0,D
10606994,19,"19. The non-transitory computer readable medium of claim 18 , wherein the first user data is received from a first sensor and the second user data is received from a second sensor, the first sensor located in a different geographical location than the second sensor.",18,claim 18,0,D
10606994,20,"20. The non-transitory computer readable medium of claim 17 , the actions further comprising: restricting the performing of the operation in response to determining that fewer than a quorum of users have been authenticated; and allowing the performing of the operation in response to determining that at least the quorum of users has been authenticated.",19,claim 17,0,D
10606995,1,"1. A character input device, comprising: an operation unit configured to accept key input, and to display and accept selection of a prediction candidate that depends on a result of the key input; and a processor configured with a program to perform operations comprising operation as a character input determining unit configured to: determine an input character, using the result of the key input; or determine a selection result of the prediction candidate, using the result of the key input to accept the selection of the prediction candidate from one or more prediction candidates, wherein the processor is configured with the program to perform operations such that operation as the character input determining unit comprises operation the character input determining unit that: executes fingerprint authentication of a fingerprint at a time of accepting the key input, or at a time of accepting the selection of the prediction candidate, in response to successfully authenticating the fingerprint at the time accepting the key input, displays private information associated with the authenticated fingerprint, in response to being unable to successfully authenticate the fingerprint at the time of accepting the key input, displays information other than the private information, and in response to successfully authenticating the fingerprint at the time of selecting the prediction candidate, outputs a character string comprising private information associated with the selection result of the prediction candidate.",0,,0,D
10606995,2,"2. The character input device according to claim 1 , wherein: the operation unit comprises an operation surface; and the processor is configured with the program to perform operations such that operation as the character input determining unit comprises operation as the character input determining unit that executes the fingerprint authentication, based on contact on the operation surface.",1,claim 1,0,D
10606995,3,"3. The character input device according to claim 1 , wherein: the operation unit comprises a candidate display unit; the processor is configured with the program to perform operations further comprising operation as a private information saving unit in which the private information is saved; and the processor is configured with the program to perform operations such that operation as the character input determining unit comprises operation as the character input determining unit that, in response to the fingerprint authentication at the time of accepting the key input being successful, displays a private candidate of the private information saved in the private information saving unit on the candidate display unit.",2,claim 1,0,D
10606995,4,"4. The character input device according to claim 2 , wherein: the operation unit comprises a candidate display unit; the processor is configured with the program to perform operations further comprising operation as a private information saving unit in which the private information is saved; and the processor is configured with the program to perform operations such that operation as the character input determining unit comprises operation as the character input determining unit that, in response to the fingerprint authentication at the time of accepting the key input being successful, displays a private candidate of the private information saved in the private information saving unit on the candidate display unit.",3,claim 2,0,D
10606995,5,"5. The character input device according to claim 1 , wherein: the operation unit comprises a candidate display unit; and the processor is configured with the program to perform operations such that operation as the character input determining unit comprises operation as the character input determining unit that displays the prediction candidate on the candidate display unit so as to be partly concealed, and, in response to the fingerprint authentication at the time of accepting the selection of the prediction candidate being successful, outputs the prediction candidate externally.",4,claim 1,0,D
10606995,6,"6. The character input device according to claim 2 , wherein: the operation unit comprises a candidate display unit; and the processor is configured with the program to perform operations such that operation as the character input determining unit comprises operation as the character input determining unit that displays the prediction candidate on the candidate display unit so as to be partly concealed, and, in response to the fingerprint authentication at the time of accepting the selection of the prediction candidate being successful, outputs the prediction candidate externally.",5,claim 2,0,D
10606995,7,"7. A character input method according to which a computational processing device perform operations comprising: accepting key input, and displaying and accepting selection of a prediction candidate that depends on a result of the key input; and determining an input character, using the result of the key input; or determining a selection result of the prediction candidate, using the result of the key input to display one or more prediction candidates, and accept the selection of the prediction candidate from the one or more displayed prediction candidates, wherein fingerprint authentication of a fingerprint is executed at a time of accepting the key input, or at a time of accepting the selection of the prediction candidate; in response to successfully authenticating the fingerprint at the time accepting the key input, displaying private information associated with the authenticated fingerprint, in response to being unable to successfully authenticate the fingerprint at the time of accepting the key input, displaying information other than the private information, and in response to successfully authenticating the fingerprint at the time of selecting the prediction candidate, outputting a character string comprising private information associated with the selection result of the prediction candidate.",6,,1,D
10606995,8,"8. A non-transitory computer-readable storage medium storing a character input program that causes a computational processing device to perform operations comprising: accepting key input, and displaying and accepting selection of a prediction candidate that depends on a result of the key input; and determining an input character, using the result of the key input; or determining a selection result of the prediction candidate, using the result of the key input to display one or more prediction candidates, and accept the selection of the prediction candidate from the one or more displayed prediction candidates, wherein fingerprint authentication of a fingerprint is executed at a time of accepting the key input, or at a time of accepting the selection of the prediction candidate; in response to successfully authenticating the fingerprint at the time accepting the key input, displaying private information associated with the authenticated fingerprint, in response to being unable to successfully authenticate the fingerprint at the time of accepting the key input, displaying information other than the private information, and in response to successfully authenticating the fingerprint at the time of selecting the prediction candidate, outputting a character string comprising private information associated with the selection result of the prediction candidate.",7,,0,D
10606996,1,"1. A method of authenticating a biometric input, comprising: receiving image capture information from a first processing stream; generating a first image and authentication information with a second processing stream based at least part on the image capture information received from the first processing stream; providing the first image and the authentication information to a third processing stream; concurrently performing a first pattern matching process based on the first image with the second processing stream and a second pattern feature extraction process with the third processing stream, wherein the second pattern feature extraction process is based on the first image and the authentication information provided by the second processing stream; providing a first set of match parameters based on the first pattern matching process to the third processing stream; determining a second set of match parameters based on a second pattern matching process performed with the third processing stream; generating a match score based on the first set of match parameters and the second set of match parameters; and authenticating the biometric input based on the match score.",0,,1,D
10606996,2,2. The method of claim 1 wherein the second processing stream is executed on at least one application processor.,1,claim 1,0,D
10606996,3,3. The method of claim 2 wherein the third processing stream is executed on a secure processor.,2,claim 2,0,D
10606996,4,4. The method of claim 3 wherein a processing capability of the at least one application processor is greater than a processing capability of the secure processor.,3,claim 3,0,D
10606996,5,5. The method of claim 1 wherein the first processing stream is executed on an application-specific integrated circuit.,4,claim 1,0,D
10606996,6,6. The method of claim 1 wherein the authentication information comprises a reduced feature descriptor and location information.,5,claim 1,0,D
10606996,7,7. The method of claim 1 wherein generating the match score comprises generating the match score with the third processing stream.,6,claim 1,0,D
10606996,8,8. The method of claim 1 wherein at least a portion of the second pattern matching process occurs concurrently with performing a first liveness detection process with the second processing stream.,7,claim 1,0,D
10606996,9,9. The method of claim 8 further comprising: performing a second liveness detection process with the third processing stream; and authenticating the biometric input based at least in part on the first liveness detection process and the second liveness detection process.,8,claim 8,0,D
10606996,10,10. The method of claim 1 wherein the biometric input is a fingerprint.,9,claim 1,0,D
10606996,11,"11. A system for authenticating a biometric input, comprising: a biometric sensor configured to obtain the biometric input a first processor executing a first processing stream configured to generate image information based on the biometric input; a second processor executing a second processing stream configured to: receive the image information from the first processing stream; generate authentication information based on the image information; generate a first set of match parameters based on the image information; a third processor executing a third processing stream configured to: receive the image information from the second processing stream; receive the authentication information and the first set of match parameters from the second processing stream; generate a second set of match parameters based on the image information and the authentication information; and authenticate the biometric input based on the first set of match parameters and the second set of match parameters, wherein at least a portion of the second processing stream and the third processing stream occur concurrently.",10,,0,D
10606996,12,12. The system of claim 11 wherein the image information received by the third processing stream from the second processing stream is the image information generated by the first processing stream.,11,claim 11,0,D
10606996,13,"13. The system of claim 11 wherein the second processing stream is configured to generate an image based on the image information received from the first processing stream, and the image information received by the third processing stream from the second processing stream is the image generated by the second processing stream.",12,claim 11,0,D
10606996,14,14. The system of claim 11 wherein the second processing stream is configured to perform a first liveness detection process based on the image information and the third processing stream is configured to perform a second liveness detection process based on the image information.,13,claim 11,0,D
10606996,15,15. The system of claim 14 wherein at least a portion of the first liveness detection process is executed concurrently with an execution of the second liveness detection process.,14,claim 14,0,D
10606996,16,16. The system of claim 14 wherein the third processing stream is configured to authenticate the biometric input based at least in part on the first liveness detection process and the second liveness detection process.,15,claim 14,0,D
10606996,17,17. The system of claim 11 wherein the first processor is at least one application-specific integrated circuit.,16,claim 11,0,D
10606996,18,18. The system of claim 11 wherein the second processor is at least one application processor.,17,claim 11,0,D
10606996,19,19. The system of claim 11 wherein the third processor is at least one secure processor.,18,claim 11,0,D
10606996,20,20. The system of claim 11 wherein a processing capability of the second processor is greater than a processing capability of the third processor.,19,claim 11,0,D
10606996,21,21. The system of claim 11 wherein the authentication information comprises a reduced feature descriptor and location information.,20,claim 11,0,D
10606996,22,22. The system of claim 11 wherein the biometric input is an iris image.,21,claim 11,0,D
10606996,23,"23. A computer program product, comprising: a first non-transitory computer-readable storage medium comprising code for a first processing stream including code for generating image information based on a biometric input; a second non-transitory computer-readable storage medium comprising code for a second processing stream including: code for receiving the image information from the first processing stream; code for generating authentication information based on the image information; conde for generating a first set of match parameters based on the image information; a third non-transitory computer-readable storage medium comprising code for a third processing stream including: code for receiving the image information from the second processing stream; code for receiving the authentication information and the first set of match parameters from the second processing stream; code for generating a second set of match parameters based on the image information and the authentication information; and code for authenticating the biometric input based on the first set of match parameters and the second set of match parameters, wherein at least a portion of the second processing stream and the third processing stream occur concurrently.",22,,0,D
10606996,24,24. The computer program product of claim 23 wherein the code for receiving the image information from the second processing stream includes code for receiving the image information generated by the first processing stream.,23,claim 23,0,D
10606996,25,"25. The computer program product of claim 23 wherein the code for the second processing stream includes code for generating an image based on the image information received from the first processing stream, and the code for receiving the image information from the second processing stream include code for receiving the image generated by the second processing stream.",24,claim 23,0,D
10606996,26,"26. The computer program product of claim 23 wherein the code for the second processing stream includes code for performing a first liveness detection process based on the image information, and the code for the third processing stream includes code for performing a second liveness detection process based on the image information.",25,claim 23,0,D
10606996,27,27. The computer program product of claim 26 wherein at least a portion of the code for performing the first liveness detection process is executed concurrently with the code for performing the second liveness detection process.,26,claim 26,0,D
10606996,28,28. The computer program product of claim 26 wherein the code for the third processing stream includes code for authenticating the biometric input based at least in part on the code for the first liveness detection process and the code for the second liveness detection process.,27,claim 26,0,D
10606996,29,29. The computer program product of claim 23 wherein the code for the first processing stream includes code for generating the image information based on a fingerprint input.,28,claim 23,0,D
10606996,30,"30. An apparatus for authenticating a biometric input, comprising: means for receiving image capture information from a first processing stream; means for generating a first image and authentication information with a second processing stream based at least part on the image capture information received from the first processing stream; means for providing the first image and the authentication information to a third processing stream; means for concurrently performing a first pattern matching process based on the first image with the second processing stream and a second pattern feature extraction process with the third processing stream, wherein the second pattern feature extraction process is based on the first image and the authentication information provided by the second processing stream; means for providing a first set of match parameters based on the first pattern matching process to the third processing stream; means for determining a second set of match parameters based on a second pattern matching process performed with the third processing stream; means for generating a match score based on the first set of match parameters and the second set of match parameters; and means for authenticating the biometric input based on the match score.",29,,0,D
10606997,1,"1. A remote authentication method, comprising: obtaining, by an electronic cipher device, information to be validated, wherein the information to be validated comprises one-time authentication information; generating and displaying, by the electronic cipher device, a graphic identification code based on the information to be validated; obtaining, by a terminal, a picture comprising a facial image of a user and the graphic identification code displayed on the electronic cipher device; transmitting, by the terminal, the picture to a background server, comprising: carrying, by the terminal, the picture in an authentication request to transmit the authentication request to the background server, wherein the authentication request further carries user information; and receiving, by the background server, the picture, and validating, by the background server, the graphic identification code and the facial image of the user recorded in the picture; before transmitting, by the terminal, the authentication request to the background server, the method further comprising: reading, by a resident identity card reading module, resident identity card information stored in a resident identity card of the user; encrypting, by the electronic cipher device, the resident identity card information read through the resident identity card reading module; and transmitting, by the electronic cipher device, a ciphertext of the resident identity card information obtained after encrypting the resident identity card information to the terminal; the user information comprising: the ciphertext of the resident identity card information; and after transmitting, by the terminal, the authentication request to the background server, the method further comprising: receiving, by the background server, the authentication request and validating, by the background server, an identity of the user based on the ciphertext of the resident identity card information.",0,,1,E
10606997,2,"2. The method according to claim 1 , before transmitting by the terminal the authentication request to the background server, the method further comprising: obtaining, by the terminal, signature data of the ciphertext of the resident identity card information from the electronic cipher device; the user information further comprising: the signature data of the ciphertext of the resident identity card information; and before validating by the background server the identity of the user based on the ciphertext of the resident identity card information, the method further comprising: validating, by the background server, the signature data of the ciphertext of the resident identity card information.",1,claim 1,0,E
10606997,3,"3. The method according to claim 1 , wherein validating by the background server the identity of the user based on the ciphertext of the resident identity card information comprises: decrypting, by the background server, the ciphertext of the resident identity card information to obtain the resident identity card information; obtaining, by the background server, pre-stored resident identity card information corresponding to the electronic cipher device; and comparing, by the background server, the obtained resident identity card information with the decrypted resident identity card information, confirming, by the background server, that identity validation of the user who currently requests opening an account passes when the obtained resident identity card information matches with the decrypted resident identity card information, or confirming, by the background server, that identity validation of the user who currently requests opening an account fails when the obtained resident identity card information does not match with the decrypted resident identity card information.",2,claim 1,0,E
10606997,4,"4. The method according to claim 1 , wherein obtaining, by the electronic cipher device, the information to be validated comprises: generating, by the electronic cipher device, the information to be validated based on parameters synchronized with the background server.",3,claim 1,0,E
10606997,5,"5. The method according to claim 1 , wherein generating, by the electronic cipher device, the graphic identification code based on the information to be validated comprises: converting, by the electronic cipher device, the information to be validated into the graphic identification code; or calculating, by the electronic cipher device, the information to be validated according to a preset algorithm and generating, by the electronic cipher device, the graphic identification code corresponding to a calculation result.",4,claim 1,0,E
10606997,6,"6. The method according to claim 5 , wherein calculating, by the electronic cipher device, the information to be validated according to the preset algorithm comprises: signing, by the electronic cipher device, the information to be validated using a private key stored in the electronic cipher device; or performing, by the electronic cipher device, a message authentication code (MAC) calculation on the information to be validated.",5,claim 5,0,E
10606997,7,"7. The method according to claim 1 , wherein obtaining by the terminal the picture comprising the facial image of the user and the graphic identification code displayed on the electronic cipher device, comprises: capturing, by a capturing device provided on the terminal, an image comprising the facial image of the user and the graphic identification code displayed on the electronic cipher device, to acquire the picture; or receiving, by the terminal, the picture comprising the facial image of the user and the graphic identification code displayed on the electronic cipher device from an external device.",6,claim 1,0,E
10606997,8,"8. The method according to claim 1 , wherein validating by the background server the facial image of the user recorded in the picture comprises: obtaining, by the background server, pre-stored identity information of the user corresponding to the electronic cipher device, wherein the identity information comprises a facial image of a user; and comparing, by the background server, the facial image of the user recorded in the picture with the facial image of the user comprised in the obtained identity information, confirming, by the background server, that validation passes when the facial image of the user recorded in the picture matches with the facial image of the user comprised in the obtained identity information, or confirming, by the background server, that validation fails when the facial image of the user recorded in the picture does not match with the facial image of the user comprised in the obtained identity information.",7,claim 1,0,E
10606997,9,"9. The method according to claim 1 , after the background server fails to validate the graphic identification code and the facial image of the user recorded in the picture, further comprising: transmitting, by the background server, a retransmission instruction to the terminal for instructing the terminal to re-upload the picture until the validation passes or the validation reaches a preset number of times.",8,claim 1,0,E
10606997,10,"10. The method according to claim 1 , further comprising opening an account remotely after the validation passes.",9,claim 1,0,E
10606997,11,"11. A remote authentication system, comprising an electronic cipher device, a terminal and a background server, wherein the electronic cipher device is configured to obtain information to be validated and to generate and display a graphic identification code based on the information to be validated, wherein the information to be validated comprises one-time authentication information; the terminal is configured to obtain a picture comprising a facial image of a user and the graphic identification code displayed on the electronic cipher device and to transmit the picture to the background server; and the background server is configured to receive the picture and to validate the graphic identification code and the facial image of the user recorded in the picture; wherein the terminal is configured to transmit the picture to the background server by: carrying the picture in an authentication request to transmit the authentication request to the background server, wherein the authentication request further carries user information; and wherein the system further comprises a resident identity card reading module; wherein the resident identity card reading module is configured to read resident identity card information stored in a resident identity card of the user and to transmit the resident identity card information to the electronic cipher device; wherein the electronic cipher device is further configured to encrypt the resident identity card information read through the resident identity card reading module and to transmit a ciphertext of the resident identity card information obtained after encrypting the resident identity card information to the terminal; wherein the user information comprises: the ciphertext of the resident identity card information of the user; and wherein the background server is further configured to receive the authentication request and to validate an identity of the user according to the ciphertext of the resident identity card information.",10,,0,E
10606997,12,"12. The system according to claim 11 , wherein the electronic cipher device is configured to generate the graphic identification code by: converting the information to be validated into the graphic identification code; or calculating the information to be validated according to a preset algorithm and generating the graphic identification code corresponding to a calculation result; and the electronic cipher device is configured to calculate the information to be validated by: signing the information to be validated using a private key stored in the electronic cipher device; or performing a message authentication code MAC calculation on the information to be validated.",11,claim 11,0,E
10606997,13,"13. The system according to claim 11 , wherein the background server is further configured to open an account remotely after the validation passes.",12,claim 11,0,E
10606997,14,"14. The system according to claim 11 , wherein, the terminal is further configured to obtain signature data of the ciphertext of the resident identity card information from the electronic cipher device; the user information further comprises: the signature data of the ciphertext of the resident identity card information; and the background server is further configured to validate the signature data of the ciphertext of the resident identity card information.",13,claim 11,0,E
10606997,15,"15. The system according to claim 11 , wherein the background server is configured to validate the identity of the user by: decrypting the ciphertext of the resident identity card information to obtain the resident identity card information; obtaining pre-stored resident identity card information corresponding to the electronic cipher device; and comparing the obtained resident identity card information with the decrypted resident identity card information, confirming that identity validation of the user who currently requests opening an account passes when the obtained resident identity card information matches with the decrypted resident identity card information, or confirming that identity validation of the user who currently requests opening an account fails when the obtained resident identity card information does not match with the decrypted resident identity card information.",14,claim 11,0,E
10606997,16,"16. A remote authentication method, comprising: transmitting, by a terminal, an authentication request to a background server, wherein the authentication request carries user information; obtaining, by an electronic cipher device, information to be validated, wherein the information to be validated comprises one-time authentication information; generating and displaying, by the electronic cipher device, a graphic identification code based on the information to be validated; obtaining, by the terminal, a picture comprising a facial image of a user and the graphic identification code displayed on the electronic cipher device; transmitting, by the terminal, the picture to the background server; before transmitting by the terminal the authentication request to the background server, the method further comprising: reading, by a resident identity card reading module, resident identity card information stored in a resident identity card of the user; encrypting, by the electronic cipher device, the resident identity card information read through the resident identity card reading module; and transmitting, by the electronic cipher device, a ciphertext of the resident identity card information obtained after encrypting the resident identity card information to the terminal; the user information comprising: the ciphertext of the resident identity card information; and after transmitting by the terminal the authentication request to the background server, the method further comprising: receiving, by the background server, the authentication request and validating, by the background server, an identity of the user based on the ciphertext of the resident identity card information.",15,,0,E
10606997,17,"17. The method according to claim 16 , before transmitting by the terminal the authentication request to the background server, the method further comprising: obtaining, by the terminal, signature data of the ciphertext of the resident identity card information from the electronic cipher device; the user information further comprising: the signature data of the ciphertext of the resident identity card information; and before validating by the background server the identity of the user based on the ciphertext of the resident identity card information, the method further comprising: validating, by the background server, the signature data of the ciphertext of the resident identity card information.",16,claim 16,0,E
10606997,18,"18. The method according to claim 16 , wherein validating by the background server the identity of the user based on the ciphertext of the resident identity card information comprises: decrypting, by the background server, the ciphertext of the resident identity card information to obtain the resident identity card information; obtaining, by the background server, pre-stored resident identity card information corresponding to the electronic cipher device; and comparing, by the background server, the obtained resident identity card information with the decrypted resident identity card information, confirming, by the background server, that identity validation of the user who currently requests opening an account passes when the obtained resident identity card information matches with the decrypted resident identity card information, or confirming, by the background server, that identity validation of the user who currently requests opening an account fails when the obtained resident identity card information does not match with the decrypted resident identity card information.",17,claim 16,0,E
10606999,1,"1. A keyword verification method for data access, comprising: receiving, by a server computer system, a first request sent by a client device for requesting a verification; wherein the first request carries related information disclosed by the client device; the related information comprises: verification display, position and area for displaying; sending, by the server computer system, a verification object of verification objects selected from a verification object storage unit according to the first request; wherein each of characteristics and contents of the verification object corresponds to a keyword; the keyword corresponds to an identifier; generating a verification prompt according to a relationship of the keyword and the identifier; storing, by a server storage unit, a first verification code generated by the server computer system according to the verification prompt; receiving, by the server computer system, a second request sent by the client device for requesting the verification; wherein the second request carries a second verification code filled in or selected from selection items by the client device according to the verification prompt; matching, by the server computer system, the first verification code with the second verification code; granting, by the server computer system, data access rights to the client device if the first verification code matches with the second verification code; rejecting, by the server computer system, data access request of the client device if the first verification code does not match with the second verification code.",0,,1,E
10606999,2,"2. The method according to claim 1 , wherein the related information further comprises: user disclosure information, user IP address, geographic location information, user gender, age and interest preferences and forum or website incentives for passing the verification of the user; wherein the verification objects are video, audio, animation, characters, text, dynamic pictures, static pictures, or combinations thereof; wherein the identifier is a letter, a number, a symbol or a picture.",1,claim 1,0,E
10606999,3,"3. The method according to claim 2 , further comprising: acquiring the verification object from a local or network storage server, or through directly uploading the verification object; setting an identifier coordinate corresponding to the characteristics and contents of the verification object according to the keyword corresponding to the characteristics and contents of the verification object; and binding and storing the verification object, the keyword and the identifier coordinates in the verification object storage unit.",2,claim 2,0,E
10606999,4,"4. The method according to claim 3 , wherein the identifier coordinate comprises: a start point coordinate of the identifier, marker type, a start point coordinate of the marker, an end point coordinate of the marker and an end point coordinate of the identifier.",3,claim 3,0,E
10606999,5,"5. The method according to claim 3 , further comprising a control step for constituting a second verification object by combining a keyword object; wherein the keyword object is a video, an audio, an animation, a character, a text, a dynamic picture, a static picture or a combination thereof containing the keyword; the identifier coordinates of the keyword object are set according to the keyword; the keyword object, the keyword and the identifier coordinates of the keyword object are bound, and then stored in the verification object storage unit; the keyword object is extracted from the verification object storage unit, then transmitted to the client device; the keyword object is played and displayed on a surface or an adjacent location of the verification object or played as a background of the verification object, the second verification object is constituted by combining the verification object and the keyword object; a keyword corresponding to the second verification object and identifier coordinates of the second verification object are determined by the keyword bound by the keyword object and the identifier coordinates of the keyword object; alternatively, the keyword object is directly generated according to the keyword corresponding to the characteristics and contents of the verification object and displayed and played on the client device; alternatively, the keyword object is directly generated according to the keyword corresponding to the characteristics and contents of the verification object and played and displayed on the surface or the adjacent location of the verification object or played as the background of the verification object.",4,claim 3,0,E
10606999,6,"6. A device for implementing the verification method for data access, comprising: a server computer system comprising processors and a storage unit; an acquisition module, configured to acquire keywords corresponding to characteristics and contents of verification objects displayed and played by a client device; wherein the verification objects are video, audio, animation, characters, text, dynamic pictures, static pictures, or combinations thereof; a marking module, configured to mark the characteristics and contents with identifier, and further generate a verification prompt according to relationship of the keyword and the identifier; wherein the identifier is a letter, a number, a symbol or a picture; a second receiving module, configured to receive a second request for requesting a verification from the client device; wherein the second request carries a second verification code that is filled in or selected from selection items by the client device according to the verification prompt; a second determining module, configured to acquire a first verification code associated with the keyword, the identifier and the verification prompt according to the second request; and a second judging module, configured to determine a verification result according to the first verification code and the second verification code; wherein the acquisition module, the marking module, the second receiving module, the second determining module and the second judging module are stored in the storage unit and operated by the processors.",5,,0,E
10606999,7,"7. The device of claim 6 , wherein, before acquiring the keyword corresponding to the characteristics and contents of a verification object of the verification objects displayed and played on a client device, the device further comprises: a first receiving module, configured to receive a first request sent by the client device for requesting the verification; wherein the first request carries related information disclosed by the client device; the related information comprises: verification display, position and area for displaying, the verification object, user disclosure information, user IP address, geographic location information, user gender, age and interest preferences and forum or website incentives for passing the verification of the user; a first determining module, configured to select the verification object from a verification object storage unit according to the first request; a sending module, configured to send the verification object to the client device; wherein the first receiving module, the first determining module and the seconding module are stored in the storage unit and operated by the processors.",6,claim 6,0,E
10606999,8,"8. The device of claim 7 , further comprising: a verification object storage module configured to provide a verification object storage unit; wherein the verification object storage unit is configured to store the verification object, the keyword and an identifier coordinates; wherein the verification object is acquired from a local or network storage server, or through directly uploading; the identifier coordinate corresponding to the characteristics and contents of the verification object is set according to the keyword corresponding to the characteristics and contents of the verification object; the verification object, the keyword and the identifier coordinates are bound before being stored in the verification object storage unit; wherein the verification object storage module is stored in the storage unit and operated by the processors.",7,claim 7,0,E
10606999,9,"9. The device of claim 8 , further comprising: a coordinate module configured to set the identifier coordinates; wherein the identifier coordinate comprises: a start point coordinate of the identifier, marker type, a start point coordinate of the marker, an end point coordinate of the marker and an end point coordinate of the identifier; wherein the coordinate module is stored in the storage unit and operated by the processors.",8,claim 8,0,E
10606999,10,"10. The device of claim 8 , further comprising: a control module configured to constitute a second verification object by combining a keyword object; wherein the keyword object is a video, an audio, an animation, a character, a text, a dynamic picture, a static picture or a combination thereof containing the keyword; the identifier coordinates of the keyword object are set according to the keyword; the keyword object, the keyword and the identifier coordinates of the keyword object are bound, and then stored in the verification object storage unit; the keyword object is extracted from the verification object storage unit, then transmitted to the client device; the keyword object is played and displayed on a surface or an adjacent location of the verification object or played as a background of the verification object, the second verification object is constituted by combining the verification object and the keyword object; a keyword corresponding to the second verification object and identifier coordinates of the second verification object are determined by the keyword bound by the keyword object and the identifier coordinates of the keyword object; alternatively, the keyword object is directly generated according to the keyword corresponding to the characteristics and contents of the verification object and displayed and played on the client device; alternatively, the keyword object is directly generated according to the keyword corresponding to the characteristics and contents of the verification object and played and displayed on the surface or the adjacent location of the verification object or played as the background of the verification object; wherein the control module is stored in the storage unit and operated by the processors.",9,claim 8,0,E
10607000,1,"1. An image capture device for a secure industrial control system, comprising: an image sensor; a signal processor coupled to the image sensor; and a controller for managing the signal processor and transmitting data associated with processed image signals to at least one of an input/output module or a communications/control module via a communications interface that couples the controller to the at least one of the input/output module or the communications/control module, wherein the controller is configured to establish an encrypted tunnel between the controller and the at least one of the input/output module or the communications/control module based upon a unique security credential of the image capture device and a unique security credential of the at least one of the input/output module or the communications/control module, wherein the image capture device is provisioned with the unique security credential at a point of manufacture of the image capture device by a key management entity, and wherein the unique security credential of the image capture device is at least one of modifiable or revocable, by the at least one of the input/output module or the communications/control module.",0,,1,E
10607000,2,"2. The image capture device of claim 1 , wherein the controller is further configured to perform an authentication sequence with the at least one of the input/output module or the communications/control module utilizing the at unique security credential of the image capture device and the unique security credential of the at least one of the input/output module or the communications/control module.",1,claim 1,0,E
10607000,3,"3. The image capture device of claim 1 , wherein the security credential of the image capture device is at least one of modifiable, revocable, or authenticatable by the key management entity at a site different from the respective point of manufacture of the image capture device.",2,claim 1,0,E
10607000,4,"4. The image capture device of claim 1 , wherein the unique security credential of the image capture device is authenticatable by the at least one of the input/output module or the communications/control module.",3,claim 1,0,E
10607000,5,"5. The image capture device of claim 1 , wherein the communications interface is configured to connect the controller, via the at least one of the input/output module or the communications/control module, to a communications backplane including a serial communications interface and a parallel communications interface.",4,claim 1,0,E
10607000,6,"6. The image capture device of claim 5 , wherein the communications interface comprises a Power Over Ethernet (POE) port for receiving power supplied by the at least one of the input/output module or the communications/control module.",5,claim 5,0,E
10607000,7,"7. The image capture device of claim 1 , wherein the one or more processed image signals include spectral data detected by the image sensor.",6,claim 1,0,E
10607000,8,"8. The image capture device of claim 7 , wherein the controller is configured to transmit the spectral data for monitoring one or more industrial control system environmental conditions including an environmental presence of one or more of: fire, dust, smoke, micro-particles, heat, moisture, elevated pressure, gas, or radiation.",7,claim 7,0,E
10607000,9,"9. A secure industrial control system, comprising: a communications/control module provisioned with a first unique security credential; an input/output module provisioned with a second unique security credential; a communications backplane that physically and communicatively couples the communications/control module to the input/output module; and an image capture device provisioned with a third unique security credential and comprising: an image sensor; a signal processor coupled to the image sensor; and a controller for managing the signal processor and transmitting data associated with processed image signals to at least one of the input/output module or the communications/control module via a communications interface that couples the controller to the at least one of the input/output module or the communications/control module, wherein the controller is configured to establish an encrypted tunnel between the controller and the at least one of the input/output module or the communications/control module based upon the third unique security credential of the image capture device and at least one of the first and second unique security credentials associated with the at least one of the input/output module or the communications/control module, wherein the image capture device is provisioned with the third unique security credential at a point of manufacture of the image capture device from a key management entity, and wherein the third unique security credential of the image capture device is at least one of modifiable or revocable by the at least one of the input/output module or the communications/control module.",8,,0,E
10607000,10,"10. The secure industrial control system of claim 9 , wherein the controller is further configured to perform an authentication sequence with the at least one of the input/output module or the communications/control module based on the third unique security credential of the image capture device and at least one of the first and second unique security credentials associated with the at least one of the input/output module or the communications/control module.",9,claim 9,0,E
10607000,11,"11. The secure industrial control system of claim 9 , wherein the third unique security credential of the image capture device is at least one of modifiable, revocable, or authenticatable by the key management entity at a site different from the respective point of manufacture.",10,claim 9,0,E
10607000,12,"12. The secure industrial control system of claim 9 , wherein the third unique security credential of the image capture device is authenticatable by the at least one of the input/output module or the communications/control module.",11,claim 9,0,E
10607000,13,"13. The secure industrial control system of claim 9 , wherein the communications interface is configured to connect the controller, via the at least one of the input/output module or the communications/control module, to the communications backplane, wherein the communications backplane includes a serial communications interface and a parallel communications interface.",12,claim 9,0,E
10607000,14,"14. The secure industrial control system of claim 13 , wherein the communications interface comprises a Power Over Ethernet (POE) port for receiving power supplied by the at least one of the input/output module or the communications/control module.",13,claim 13,0,E
10607000,15,"15. The secure industrial control system of claim 9 , wherein the one or more processed image signals include spectral data detected by the image sensor.",14,claim 9,0,E
10607000,16,"16. The secure industrial control system of claim 15 , wherein the controller is configured to transmit the spectral data for monitoring one or more industrial control system environmental conditions including an environmental presence of one or more of: fire, dust, smoke, micro-particles, heat, moisture, elevated pressure, gas, or radiation.",15,claim 15,0,E
10607000,17,"17. The secure industrial control system of claim 9 , wherein at least one of the communications/control module or the input/output module is configured to pre-process or post-process image signals received from the image capture device before transmitting the image signals to another industrial element of the secure industrial control system or a network connected device.",16,claim 9,0,E
10607000,18,"18. A secure industrial control system, comprising: a communications/control module provisioned with a first unique security credential; an input/output module provisioned with a second unique security credential; a communications backplane that physically and communicatively couples the communications/control module to the input/output module, the communications backplane including a serial communications interface for connecting the input/output module to the communications/control module and a parallel communications interface configured for separately connecting the input/output module to the communications/control module; and an image capture device provisioned with a third unique security credential and comprising: an image sensor; a signal processor coupled to the image sensor; and a controller for managing the signal processor and transmitting data associated with processed image signals to at least one of the input/output module or the communications/control module via a communications interface that couples the controller to the at least one of the input/output module or the communications/control module based upon the third unique security credential and at least one of the first and second unique security credentials associated with the at least one of the input/output module or the communications/control module, wherein the image capture device is provisioned with the third unique security credential at a point of manufacture of the image capture device from a key management entity, and wherein the third unique security credential of the image capture device is at least one of modifiable or revocable by the at least one of the input/output module or the communications/control module.",17,,0,E
10607001,1,"1. A web-based electronic document service apparatus, which is capable of authenticating an edit of a document, the web-based electronic document service apparatus comprising: a document authentication token generating unit configured to, when an access request for an electronic document is received from an unauthenticated client terminal, convert the electronic document into a markup language-based document and store the markup language-based document in a memory, and randomly generate a document authentication token to be used for authentication of the unauthenticated client terminal, and store the document authentication token in a token database; a document transmitting unit configured to transmit the markup language-based document and the document authentication token to the unauthenticated client terminal in response to the access request; a document authentication token determining unit configured to, when an authentication request is received from the unauthenticated client terminal, determine whether the same document authentication token as the document authentication token stored in the token database is received from the unauthenticated client terminal together with the authentication request; a client authenticating unit configured to, when it is determined that the document authentication token, which is the same as the document authentication token, is received from the unauthenticated client terminal together with the authentication request, authenticate the unauthenticated client terminal; a one-time token generating unit configured to, when the authentication is completed, randomly generate a one-time token to be used for authenticating an editing command, which is to be generated by an authenticated client terminal for an editing of the markup language-based document, and store the one-time token in the token database; a one-time token transmitting unit configured to transmit the one-time token to the authenticated client terminal after the authentication is completed; a one-time token determining unit configured to, when the editing command is received from the authenticated client terminal, determine whether the one-time token, which is the same as the one-time token stored in the token database, is received from the authenticated client terminal together with the editing command; a document editing performing unit configured to, when it is determined that the one-time token, which is the same as the one-time token, is received from the authenticated client terminal together with the editing command, reflect the editing according to the editing command on the markup language-based document stored in the memory, wherein when the editing of the markup language-based document is performed by the authenticated client terminal after the authenticated client terminal receives the one-time token from the web-based electronic document service, the authenticated client terminal generates unique serial data representing the performed editing and generates the editing command including the unique serial data, encrypts the one-time token by using the unique serial data as an encryption key, and then transmits the editing command, the unique serial data included in the editing command, and the encrypted one-time token to the web-based electronic document service apparatus, and wherein the one-time token determining unit includes: a serial data extracting unit configured to, when the editing command and the encrypted one-time token are received from the authenticated client terminal, extract the unique serial data from the editing command; a decoding unit configured to decode the encrypted one-time token by using the extracted unique serial data as a decoding key; and a correspondence determining unit configured to compare whether the decoded one-time token corresponds to the one-time token stored in the token database, and determine whether the same one-time token as the one-time token stored in the token database is received from the authenticated client terminal together with the editing command; and a one-time token deleting unit configured to, when the editing according to the editing command is completely reflected on the markup language-based document, delete the one-time token from the token database, wherein when the one-time token is completely deleted, the one-time token generating unit randomly generates another one-time token to be used for authenticating an additional editing command, which is to be generated after the editing command, and stores the another one-time token in the token database, and the one-time token transmitting unit transmits the another one-time token to the authenticated client terminal.",0,,1,E
10607001,2,"2. The web-based electronic document service apparatus of claim 1 , wherein the authenticated client terminal generates a time stamp value based on a time point, at which the editing is generated, as the unique serial data.",1,claim 1,0,E
10607001,3,"3. A method of operating a web-based electronic document service apparatus, which is capable of authenticating an edit of a document, the method comprising: when an access request for an electronic document is received from an unauthenticated client terminal, converting the electronic document into a markup language-based document and storing the markup language-based document in a memory, and randomly generating a document authentication token to be used for authentication of the unauthenticated client terminal, and storing the document authentication token in a token database; transmitting the markup language-based document and the document authentication token to the unauthenticated client terminal in response to the access request; when an authentication request is received from the unauthenticated client terminal, determining whether the same document authentication token as the document authentication token stored in the token database is received from the unauthenticated client terminal together with the authentication request; when it is determined that the same document authentication token, which is the same as the document authentication token, is received from the unauthenticated client terminal together with the authentication request, authenticating the unauthenticated client terminal; when the authentication is completed, randomly generating a one-time token to be used for authenticating an editing command, which is to be generated by an authenticated client terminal for an editing of the markup language-based document, and storing the one-time token in the token database; transmitting the one-time token to the authenticated client terminal after the authentication is completed; when the editing command is received from the authenticated client terminal, determining whether the one-time token, which is the same as the one-time token stored in the token database, is received from the authenticated client terminal together with the editing command; when it is determined that the one-time token, which is the same as the one-time token, is received from the authenticated client terminal together with the editing command, reflecting the editing according to the editing command on the markup language-based document stored in the memory, wherein when the editing of the markup language-based document is performed by the authenticated client terminal after the authenticated client terminal receives the one-time token from the web-based electronic document service, the authenticated client terminal generates unique serial data representing the performed editing and generates the editing command including the unique serial data, encrypts the one-time token by using the unique serial data as an encryption key, and then transmits the editing command, the unique serial data included in the editing command, and the encrypted one-time token to the web-based electronic document service apparatus, and wherein the determining whether the one-time token, which is the same as the one-time token, is received includes: when the editing command and the encrypted one-time token are received from the authenticated client terminal, extracting the unique serial data from the editing command; decoding the encrypted one-time token by using the extracted unique serial data as a decoding key; and comparing whether the decoded one-time token corresponds to the one-time token stored in the token database, and determining whether the same one-time token as the one-time token stored in the token database is received from the authenticated client terminal together with the editing command; when the editing according to the editing command is completely reflected on the markup language-based document, deleting the one-time token stored from the token database; when the one-time token is completely deleted, randomly generating another one-time token to be used for authenticating an additional editing command, which is to be generated after the editing command, and storing the another one-time token in the token database; and transmitting the another one-time token to the authenticated client terminal.",2,,0,E
10607001,4,"4. The method of claim 3 , wherein the authenticated client terminal generates a time stamp value based on a time point, at which the editing is generated, as the unique serial data.",3,claim 3,0,E
10607001,5,"5. A non-transitory computer readable recording medium in which a program for executing a method of operating a web-based electronic document service apparatus, which is capable of authenticating an edit of a document is recorded, the method comprising: when an access request for an electronic document is received from an unauthenticated client terminal, converting the electronic document into a markup language-based document and storing the markup language-based document in a memory, and randomly generating a document authentication token to be used for authentication of the unauthenticated client terminal, and storing the document authentication token in a token database; transmitting the markup language-based document and the document authentication token to the unauthenticated client terminal in response to the access request; when an authentication request is received from the unauthenticated client terminal, determining whether the same document authentication token as the document authentication token stored in the token database is received from the unauthenticated client terminal together with the authentication request; when it is determined that the same document authentication token, which is the same as the document authentication token, is received from the unauthenticated client terminal together with the authentication request, authenticating the unauthenticated client terminal; when the authentication is completed, randomly generating a one-time token to be used for authenticating an editing command, which is to be generated by an authenticated client terminal for an editing of the markup language-based document, and storing the one-time token in the token database; transmitting the one-time token to the authenticated client terminal after the authentication is completed; when the editing command is received from the authenticated client terminal, determining whether the one-time token, which is the same as the one-time token stored in the token database, is received from the authenticated client terminal together with the editing command; when it is determined that the one-time token, which is the same as the one-time token, is received from the authenticated client terminal together with the editing command, reflecting the editing according to the editing command on the markup language-based document stored in the memory, wherein when the editing of the markup language-based document is performed by the authenticated client terminal after the authenticated client terminal receives the one-time token from the web-based electronic document service, the authenticated client terminal generates unique serial data representing the performed editing and generates the editing command including the unique serial data, encrypts the one-time token by using the unique serial data as an encryption key, and then transmits the editing command, the unique serial data included in the editing command, and the encrypted one-time token to the web-based electronic document service apparatus, and wherein the determining whether the one-time token, which is the same as the one-time token, is received includes: when the editing command and the encrypted one-time token are received from the authenticated client terminal, extracting the unique serial data from the editing command; decoding the encrypted one-time token by using the extracted unique serial data as a decoding key; and comparing whether the decoded one-time token corresponds to the one-time token stored in the token database, and determining whether the same one-time token as the one-time token stored in the token database is received from the authenticated client terminal together with the editing command; when the editing according to the editing command is completely reflected on the markup language-based document, deleting the one-time token stored from the token database; when the one-time token is completely deleted, randomly generating another one-time token to be used for authenticating an additional editing command, which is to be generated after the editing command, and storing the another one-time token in the token database; and transmitting the another one-time token to the authenticated client terminal.",4,,0,E
10607002,1,"1. A computer system comprising: one or more processors; and one or more computer-readable media having stored thereon instructions that are executable by the one or more processors to configure the computer system to limit access to native device capabilities, including instructions that are executable to configure the computer system to perform at least the following: executing a container application installed at the computer system, the container application configured to execute one or more hosted script based applications and the container application configured to: identify a hosted application to execute; obtain information identifying a limited set of capabilities from among the native device capabilities indicating which of the native device capabilities the hosted application has been granted access to; create a hosting manager, the hosting manager implemented completely within a native context of the device, and provide the information identifying the limited set of capabilities to the hosting manager; the container application preventing the hosted application from directly accessing any of the native device capabilities; to provide access to the limited set of capabilities, for the limited set of capabilities, identify and provide plugins which provide access to the limited set of capabilities to the hosted application, the plugins providing a transport layer between the container application and the hosted application which provides a connection between the native context associated with the container application and a hosted application context such that the hosted application can communicate with the limited set of capabilities through the plugins and the hosting manager, each plugin having a container part executing within the container application and an outside part executing within the native context, wherein the container part communicates with the outside part through messages and wherein, before allowing access to any native device capability, the outside part verifies permissions of the hosted application to access the any native device capability; and execute the hosted application and enforce limits on the hosted application such that the hosted application is able to access only the native device capabilities identified in the limited set of capabilities.",0,,1,E
10607002,2,"2. The system of claim 1 , wherein the hosted application includes functionality configured to use device capabilities for which device capabilities have not been granted to the hosted application and wherein the container application prevents the hosted application from accessing the device capabilities that have not been granted to the hosted application.",1,claim 1,0,E
10607002,3,"3. The system of claim 1 , wherein at least one of the capabilities in the set of capabilities comprises a capability for a limited portion of a file system such that the hosted application is limited to accessing only the limited portion of the file system without being able to access other portions of the file system.",2,claim 1,0,E
10607002,4,"4. The system of claim 1 , wherein at least one of the capabilities in the set of capabilities comprises a capability for accessing or controlling device hardware including at least one of a camera, a microphone, communication hardware, or location hardware.",3,claim 1,0,E
10607002,5,"5. The system of claim 1 , further comprising revoking access to one or more of the capabilities in the set of capabilities.",4,claim 1,0,E
10607002,6,"6. The system of claim 5 , wherein the one or more computer-readable media further have stored thereon instructions that are executable by the one or more processors to configure the computer system to determine that an attempt to uninstall the hosted application has occurred, and wherein revoking access to one or more of the capabilities in the set of capabilities is performed as a result of determining that an attempt to uninstall the hosted application has occurred.",5,claim 5,0,E
10607002,7,"7. The system of claim 5 , wherein the one or more computer-readable media further have stored thereon instructions that are executable by the one or more processors to configure the computer system to determine that the hosted application is associated with a virus infection, and wherein revoking access to one or more of the capabilities in the set of capabilities is performed as a result of determining that the hosted application is associated with a virus infection.",6,claim 5,0,E
10607002,8,"8. The system of claim 5 , wherein the one or more computer-readable media further have stored thereon instructions that are executable by the one or more processors to configure the computer system to determine that policy has been changed, and wherein revoking access to one or more of the capabilities in the set of capabilities is performed as a result of determining that policy has been changed.",7,claim 5,0,E
10607002,9,"9. At a computing device having native device capabilities, a computer implemented method of limiting access to native device capabilities, the method comprising: executing a container application installed at the computing device, the container application configured to execute one or more hosted script based applications and the container application configured to perform: identifying a hosted application to execute; obtaining information identifying a limited set of capabilities from among the native device capabilities indicating which of the native device capabilities the hosted application has been granted access to; creating a hosting manager, the hosting manager implemented completely within a native context of the device, and providing the information identifying the limited set of capabilities to the hosting manager; the container application preventing the hosted application from directly accessing any of the native device capabilities; to provide access to the limited set of capabilities, for the limited set of capabilities, identifying and providing plugins which provide access to the limited set of capabilities to the hosted application, the plugins providing a transport layer between the container application and the hosted application which provides a connection between the native context associated with the container application and a hosted application context such that the hosted application can communicate with the limited set of capabilities through the plugins and the hosting manager, each plugin having a container part executing within the container application and an outside part executing within the native context, wherein the container part communicates with the outside part through messages and wherein, before allowing access to any native device capability, the outside part verifies permissions of the hosted application to access the any native device capability; and executing the hosted application and enforcing limits on the hosted application such that the hosted application is able to access only the native device capabilities identified in the limited set of capabilities.",8,,0,E
10607002,10,"10. The method of claim 9 , wherein the hosted application includes functionality configured to use device capabilities for which device capabilities have not been granted to the hosted application and wherein the container application prevents the hosted application from accessing the device capabilities that have not been granted to the hosted application.",9,claim 9,0,E
10607002,11,"11. The method of claim 9 , wherein at least one of the capabilities in the set of capabilities comprises a capability for a limited portion of a file system such that the hosted application is limited to accessing only the limited portion of the file system without being able to access other portions of the file system.",10,claim 9,0,E
10607002,12,"12. The method of claim 9 , wherein at least one of the capabilities in the set of capabilities comprises a capability for accessing or controlling device hardware including at least one of a camera, a microphone, communication hardware, or location hardware.",11,claim 9,0,E
10607002,13,"13. The method of claim 9 , further comprising revoking access to one or more of the capabilities in the set of capabilities.",12,claim 9,0,E
10607002,14,"14. The method of claim 13 , further comprising determining that an attempt to uninstall the hosted application has occurred, and wherein revoking access to one or more of the capabilities in the set of capabilities is performed as a result of determining that an attempt to uninstall the hosted application has occurred.",13,claim 13,0,E
10607002,15,"15. The method of claim 13 , further comprising determining that the hosted application is associated with a virus infection, and wherein revoking access to one or more of the capabilities in the set of capabilities is performed as a result of determining that the hosted application is associated with a virus infection.",14,claim 13,0,E
10607002,16,"16. The method of claim 13 , further comprising determining that policy has been changed, and wherein revoking access to one or more of the capabilities in the set of capabilities is performed as a result of determining that policy has been changed.",15,claim 13,0,E
10607002,17,"17. A computing device comprising: one or more cameras; one or more microphones; one or more pieces of communication hardware; one or more pieces of location hardware; a file system; a container application coupled to the one or more cameras, one or more microphones, one or more pieces of communication hardware, one or more pieces of location hardware and the file system, wherein the container application is configured to access computing device capabilities associated with the one or more cameras, one or more microphones, one or more pieces of communication hardware, one or more pieces of location hardware and the file system; and a script based hosted application configured to be executed by the container application, wherein the container application is configured to: create a hosting manager, the hosting manager implemented completely within a native context of the device, and provide information identifying the computing device capabilities to the hosting manager; the container application preventing the hosted application from directly accessing any of the native device capabilities; to provide access to the limited set of capabilities, for the computing device capabilities, identify and provide plugins which provide access to the computing device capabilities to the hosted application, the plugins providing a transport layer between the container application and the hosted application which provides a connection between the a native context associated with the container application and a hosted application context such that the hosted application can communicate with the computing device capabilities through the plugins and the hosting manager, each plugin having a container part executing within the container application and an outside part executing within the native context, wherein the container part communicates with the outside part through messages and wherein, before allowing access to any native device capability, the outside part verifies permissions of the hosted application to access the any native device capability; and limit capabilities associated with the one or more cameras, one or more microphones, one or more pieces of communication hardware, one or more pieces of location hardware and the file system to the hosted application even when the hosted application includes functionality for accessing capabilities from which it is limited.",16,,0,E
10607002,18,"18. The computing device of claim 17 , further comprising a central portal coupled to the container application, wherein the central portal comprises a correlation of hosted applications and device capabilities, such that the hosted application is able to identify from the central portal what device capabilities should be granted to hosted applications.",17,claim 17,0,E
10607002,19,"19. The computing device of claim 18 , wherein the hosted application is configured to create a hosting manager using the correlation from the central portal, wherein the hosting manager is configured to permit or deny requests from hosted applications.",18,claim 18,0,E
10607002,20,"20. The computing device of claim 17 , further comprising a plugin layer configured to allow the hosted applications to access device capabilities.",19,claim 17,0,E
10607003,1,"1. A method, comprising: receiving for execution, by one or more processors, a first jump instruction having a target address; determining, by one or more processors, a target address offset for the first jump instruction, the target address offset being an offset between a current instruction address and the target address; storing, by one or more processors, a second jump instruction comprising the target address offset and a predetermined maximal number of bits, the second jump instruction being an indirect jump instruction; determining, by one or more processors, a maximal offset value of the second jump instruction by setting a set of bits of the maximal offset value corresponding to the maximal number of bits to one and setting the rest of the bits of the maximal offset value to zero; determining, by one or more processors, a bitwise-not of the maximal offset value; determining, by one or more processors, that the target address offset of the second jump instruction is valid based on the result of a bitwise-and operation between: (i) the target address offset, and (ii) the bitwise-not of the maximal offset value, being equal to zero; and executing, by one or more processors, a jump operation based on the target address offset being valid; wherein the jump operation comprises executing an instruction located at the target address, based on applying the target address offset of the second jump instruction to the current instruction address.",0,,1,E
10607003,2,"2. The method of claim 1 , further comprising: receiving, by one or more processors, a third jump instruction comprising a second target address offset and a second maximal number of bits, the third jump instruction being an indirect jump instruction; determining, by one or more processors, a second maximal offset value of the third indirect jump instruction by setting a set of bits of the second maximal offset value corresponding to the second maximal number of bits to zero and setting the rest of the bits of the second maximal offset value to one; determining, by one or more processors, that the second target address offset is valid based on the result of a bitwise- and operation between: (i) the second target address offset, and (ii) the second maximal offset value, being equal to the second maximal offset value; and executing, by one or more processors, a second jump operation based on the second target address offset being valid, wherein the second jump operation comprises executing an instruction located at a second target address, the second targed address determined by applying the second target address offset to the current instruction address.",1,claim 1,0,E
10607003,3,"3. The method of claim 1 , further comprising: receiving, by one or more processors, a third jump instruction comprising a second target address offset and a second maximal number of bits, the third jump instruction being an indirect jump instruction; determining, by one or more processors, a second maximal offset value of the third jump instruction by setting a set of bits of the second maximal offset value corresponding to the second maximal number of bits to one and setting the rest of the bits of the second maximal offset value to zero; determining, by one or more processors, that the second target address offset is valid based on the second target address offset being between zero and the second maximal offset value; and executing, by one or more processors, a second jump operation based on the second target address offset being valid, wherein the second jump operation comprises executing an instruction located at a second target address, the second targed address determined by applying the second target address offset to the current instruction address.",2,claim 1,0,E
10607003,4,"4. The method of claim 1 , wherein the maximal offset value is an immediate value.",3,claim 1,0,E
10607003,5,"5. The method of claim 1 , further comprising: receiving for execution, by one or more processors, a third jump instruction having a second target address; determining, by one or more processors, a second target address offset for the third jump instruction, the second target address offset being an offset between the current instruction address and the second target address; storing, by one or more processors, a fourth jump instruction comprising the second target address offset and a second maximal number of bits, the fourth jump instruction being an indirect jump instruction; determining, by one or more processors, a second maximal offset value by setting a set of bits of the second maximal offset value corresponding to the second maximal number of bits to one and setting the rest of the bits of the second maximal offset value to zero; determining, by one or more processors, a bitwise-not of the second maximal offset value; determining, by one or more processors, that the second target address offset is not valid based on the result of a bitwise- and operation between: (i) the second target address offset, and (ii) the bitwise-not of the second maximal offset value, being not equal to zero; upon determining that the second target address offset is not valid, raising, by one or more processors, a runtime exception, wherein the runtime exception is classified as a fault, trap, or abort exception; and halting, by one or more processors, an execution of a program in response to the runtime exception being raised.",4,claim 1,0,E
10607003,6,"6. The method of claim 1 , further comprising: receiving for execution, by one or more processors, a third jump instruction having a second target address; determining, by one or more processors, a second target address offset for the third jump instruction, the second target address offset being an offset between the current instruction address and the second target address; storing, by one or more processors, a fourth jump instruction comprising the second target address offset and a second maximal number of bits, the fourth jump instruction being an indirect jump instruction; determining, by one or more processors, a second maximal offset value by setting a set of bits of the second maximal offset value corresponding to the second maximal number of bits to one and setting the rest of the bits of the second maximal offset value to zero; performing, by one or more processors, a first comparison, the first comparison being a bitwise- and operation between: (i) the second target address offset, and (ii) the bitwise-not of the second maximal offset value; performing, by one or more processors, a second comparison, the second comparison being a bitwise- and operation between: (i) the second target address offset, and (ii) the second maximal offset value; and determining, by one or more processors, whether the second target address offset is valid based, at least in part, on results of the first comparison and the second comparison.",5,claim 1,0,E
10607003,7,"7. The method of claim 6 , further comprising determining, by one or more processors, that the second target address offset is valid based, at least in part, on one of: (i) a result of the first comparison being equal to zero, and (ii) a result of the second comparison being equal to the second maximal offset value.",6,claim 6,0,E
10607003,8,"8. The method of claim 6 , further comprising determining, by one or more processors, that the second target address offset is not valid based, at least in part, on: (i) a result of the first comparison being not equal to zero, and (ii) a result of the second comparison being not equal to the second maximal offset value.",7,claim 6,0,E
10607003,9,"9. A computer program product, comprising a computer readable storage medium having stored thereon: program instructions to receive for execution a first jump instruction having a target address; program instructions to determine a target address offset for the first jump instruction, the target address offset being an offset between a current instruction address and the target address; program instructions to store a second jump instruction comprising the target address offset and a predetermined maximal number of bits, the second jump instruction being an indirect jump instruction; program instructions to determine a maximal offset value of the second jump instruction by setting a set of bits of the maximal offset value corresponding to the maximal number of bits to one and setting the rest of the bits of the maximal offset value to zero; program instructions to determine a bitwise-not of the maximal offset value; program instructions to determine that the target address offset of the second jump instruction is valid based on the result of a bitwise- and operation between: (i) the target address offset, and (ii) the bitwise-not of the maximal offset value, being equal to zero; and program instructions to execute a jump operation based on the target address offset being valid; wherein the jump operation comprises executing an instruction located at the target address, based on applying the target address offset of the second jump instruction to the current instruction address.",8,,0,E
10607003,10,"10. The computer program product of claim 9 , the computer readable storage medium having further stored thereon: program instructions to receive a third jump instruction comprising a second target address offset and a second maximal number of bits, the third jump instruction being an indirect jump instruction; program instructions to determine a second maximal offset value of the third indirect jump instruction by setting a set of bits of the second maximal offset value corresponding to the second maximal number of bits to zero and setting the rest of the bits of the second maximal offset value to one; program instructions to determine that the second target address offset is valid based on the result of a bitwise- and operation between: (i) the second target address offset, and (ii) the second maximal offset value, being equal to the second maximal offset value; and program instructions to execute a second jump operation based on the second target address offset being valid, wherein the second jump operation comprises executing an instruction located at a second target address, the second targed address determined by applying the second target address offset to the current instruction address.",9,claim 9,0,E
10607003,11,"11. The computer program product of claim 9 , the computer readable storage medium having further stored thereon: program instructions to receive a third jump instruction comprising a second target address offset and a second maximal number of bits, the third jump instruction being an indirect jump instruction; program instructions to determine a second maximal offset value of the third jump instruction by setting a set of bits of the second maximal offset value corresponding to the second maximal number of bits to one and setting the rest of the bits of the second maximal offset value to zero; program instructions to determine that the second target address offset is valid based on the second target address offset being between zero and the second maximal offset value; and program instructions to execute a second jump operation based on the second target address offset being valid, wherein the second jump operation comprises executing an instruction located at a second target address, the second targed address determined by applying the second target address offset to the current instruction address.",10,claim 9,0,E
10607003,12,"12. The computer program product of claim 9 , wherein the maximal offset value is an immediate value.",11,claim 9,0,E
10607003,13,"13. The computer program product of claim 9 , the computer readable storage medium having further stored thereon: program instructions to receive for execution a third jump instruction having a second target address; program instructions to determine a second target address offset for the third jump instruction, the second target address offset being an offset between the current instruction address and the second target address; program instructions to store a fourth jump instruction comprising the second target address offset and a second maximal number of bits, the fourth jump instruction being an indirect jump instruction; program instructions to determine a second maximal offset value by setting a set of bits of the second maximal offset value corresponding to the second maximal number of bits to one and setting the rest of the bits of the second maximal offset value to zero; program instructions to determine a bitwise-not of the second maximal offset value; program instructions to determine that the second target address offset is not valid based on the result of a bitwise- and operation between: (i) the second target address offset, and (ii) the bitwise-not of the second maximal offset value, being not equal to zero; program instructions to, upon determining that the target address offset is not valid, raise a runtime exception, wherein the runtime exception is classified as a fault, trap, or abort exception; and program instructions to halt an execution of a program in response to the runtime exception being raised.",12,claim 9,0,E
10607003,14,"14. The computer program product of claim 9 , the computer readable storage medium having further stored thereon: program instructions to receive for execution a third jump instruction having a second target address; program instructions to determine a second target address offset for the third jump instruction, the second target address offset being an offset between the current instruction address and the second target address; program instructions to store a fourth jump instruction comprising the second target address offset and a second maximal number of bits, the fourth jump instruction being an indirect jump instruction; program instructions to determine a second maximal offset value by setting a set of bits of the second maximal offset value corresponding to the second maximal number of bits to one and setting the rest of the bits of the second maximal offset value to zero; program instructions to perform a first comparison, the first comparison being a bitwise- and operation between: (i) the second target address offset, and (ii) the bitwise-not of the second maximal offset value; program instructions to perform a second comparison, the second comparison being a bitwise- and operation between: (i) the second target address offset, and (ii) the second maximal offset value; and program instructions to determine that the second target address offset is not valid based, at least in part, on: (i) a result of the first comparison being not equal to zero, and (ii) a result of the second comparison being not equal to the second maximal offset value.",13,claim 9,0,E
10607003,15,"15. A computer system, comprising: a processor(s) set; and a computer readable storage medium; wherein: the processor set is structured, located, connected and/or programmed to run program instructions stored on the computer readable storage medium; and the stored program instructions include: program instructions to receive for execution a first jump instruction having a target address; program instructions to determine a target address offset for the first jump instruction, the target address offset being an offset between a current instruction address and the target address; program instructions to store a second jump instruction comprising the target address offset and a predetermined maximal number of bits, the second jump instruction being an indirect jump instruction; program instructions to determine a maximal offset value of the second jump instruction by setting a set of bits of the maximal offset value corresponding to the maximal number of bits to one and setting the rest of the bits of the maximal offset value to zero; program instructions to determine a bitwise-not of the maximal offset value; program instructions to determine that the target address offset of the second jump instruction is valid based on the result of a bitwise- and operation between: (i) the target address offset, and (ii) the bitwise-not of the maximal offset value, being equal to zero; and program instructions to execute a jump operation based on the target address offset being valid; wherein the jump operation comprises executing an instruction located at the target address, based on applying the target address offset of the second jump instruction to the current instruction address.",14,,0,E
10607003,16,"16. The system of claim 15 , the stored program instructions further including: program instructions to receive a third jump instruction comprising a second target address offset and a second maximal number of bits, the third jump instruction being an indirect jump instruction; program instructions to determine a second maximal offset value of the third indirect jump instruction by setting a set of bits of the second maximal offset value corresponding to the second maximal number of bits to zero and setting the rest of the bits of the second maximal offset value to one; program instructions to determine that the second target address offset is valid based on the result of a bitwise- and operation between: (i) the second target address offset, and (ii) the second maximal offset value, being equal to the second maximal offset value; and program instructions to execute a second jump operation based on the second target address offset being valid, wherein the second jump operation comprises executing an instruction located at a second target address, the second targed address determined by applying the second target address offset to the current instruction address.",15,claim 15,0,E
10607003,17,"17. The system of claim 15 , the stored program instructions further including: program instructions to receive a third jump instruction comprising a second target address offset and a second maximal number of bits, the third jump instruction being an indirect jump instruction; program instructions to determine a second maximal offset value of the third jump instruction by setting a set of bits of the second maximal offset value corresponding to the second maximal number of bits to one and setting the rest of the bits of the second maximal offset value to zero; program instructions to determine that the second target address offset is valid based on the second target address offset being between zero and the second maximal offset value; and program instructions to execute a second jump operation based on the second target address offset being valid, wherein the second jump operation comprises executing an instruction located at a second target address, the second targed address determined by applying the second target address offset to the current instruction address.",16,claim 15,0,E
10607003,18,"18. The system of claim 15 , wherein the maximal offset value is an immediate value.",17,claim 15,0,E
10607003,19,"19. The computer system of claim 15 , the stored program instructions further including: program instructions to receive for execution a third jump instruction having a second target address; program instructions to determine a second target address offset for the third jump instruction, the second target address offset being an offset between the current instruction address and the second target address; program instructions to store a fourth jump instruction comprising the second target address offset and a second maximal number of bits, the fourth jump instruction being an indirect jump instruction; program instructions to determine a second maximal offset value by setting a set of bits of the second maximal offset value corresponding to the second maximal number of bits to one and setting the rest of the bits of the second maximal offset value to zero; program instructions to determine a bitwise-not of the second maximal offset value; program instructions to determine that the second target address offset is not valid based on the result of a bitwise- and operation between: (i) the second target address offset, and (ii) the bitwise-not of the second maximal offset value, being not equal to zero; program instructions to, upon determining that the target address offset is not valid, raise a runtime exception, wherein the runtime exception is classified as a fault, trap, or abort exception; and program instructions to halt an execution of a program in response to the runtime exception being raised.",18,claim 15,0,E
10607003,20,"20. The computer system of claim 15 , the stored program instructions further comprising: program instructions to receive for execution a third jump instruction having a second target address; program instructions to determine a second target address offset for the third jump instruction, the second target address offset being an offset between the current instruction address and the second target address; program instructions to store a fourth jump instruction comprising the second target address offset and a second maximal number of bits, the fourth jump instruction being an indirect jump instruction; program instructions to determine a second maximal offset value by setting a set of bits of the second maximal offset value corresponding to the second maximal number of bits to one and setting the rest of the bits of the second maximal offset value to zero; program instructions to perform a first comparison, the first comparison being a bitwise- and operation between: (i) the second target address offset, and (ii) the bitwise-not of the second maximal offset value; program instructions to perform a second comparison, the second comparison being a bitwise- and operation between: (i) the second target address offset, and (ii) the second maximal offset value; and program instructions to determine that the second target address offset is not valid based, at least in part, on: (i) a result of the first comparison being not equal to zero, and (ii) a result of the second comparison being not equal to the second maximal offset value.",19,claim 15,0,E
10607004,1,"1. A computer-implemented method to apply pattern engineering with metadata-driven unit operations to improve an efficiency of analysis of log files having different file formats, the computer-implemented method comprising: determining, by executing an instruction with a processor, a first file format of a log file from the different file formats, the log file to be converted to a vector output file; generating, by executing an instruction with the processor, a first sequence of processing tasks based on the first file format, the first sequence including a first metadata tag corresponding to a conversion task to convert the first file format to a string format, the log file including pattern occurrence data; generating, by executing an instruction with the processor, a second metadata tag within the first sequence of processing tasks, the second metadata tag associated with a second processing task to identify respective features from the pattern occurrence data by comparing the string to a pattern corresponding to malware; generating, by executing an instruction with the processor, a third metadata tag within the first sequence of processing tasks, the third metadata tag associated with a third processing task to create the vector output file of the respective features from the pattern occurrence data identified by the second metadata tag; and executing, by executing an instruction with the processor, the first sequence of the first metadata tag, the second metadata tag, and the third metadata tag to create the vector output file associated with the first file format.",0,,1,E
10607004,2,"2. The computer-implemented method as defined in claim 1 , wherein the first metadata tag includes parsing operations of the log file for at least one of a text file format, a comma separated value (CSV) file format, a JavaScript Object Notation (JSON) file format, or a binary file format.",1,claim 1,0,E
10607004,3,"3. The computer-implemented method as defined in claim 1 , further including building a dictionary of feature nomenclature associated with the respective features from the pattern occurrence data.",2,claim 1,0,E
10607004,4,"4. The computer-implemented method as defined in claim 3 , further including generating search substrings of the feature nomenclature.",3,claim 3,0,E
10607004,5,"5. The computer-implemented method as defined in claim 4 , wherein the second metadata tag identifies at least one of the search substrings as feature occurrence instances.",4,claim 4,0,E
10607004,6,"6. The computer-implemented method as defined in claim 1 , further including executing a second sequence of the first metadata tag, a fourth metadata tag, and a fifth metadata tag to create a second vector output file associated with the first file format.",5,claim 1,0,E
10607004,7,"7. The computer-implemented method as defined in claim 6 , wherein the second metadata tag is to invoke a dictionary to identify feature occurrence instances, and the fourth metadata tag is to invoke regular expressions to identify feature occurrence instances.",6,claim 6,0,E
10607004,8,"8. An apparatus to apply pattern engineering with metadata-driven metadata tags to improve an efficiency of analysis of log files having different file formats, the apparatus comprising: a log file retriever to: retrieve a log file in a first log file format, the log file including pattern occurrence data; and determine a first file format of the log file from the different file formats, the log file to be converted to a vector output file; a file to string operation builder to generate a first metadata tag of a first sequence of processing tasks that is based on the first file format, the first metadata tag corresponding to a conversion task to convert the first file format to a string format; an extraction operation builder to generate a second metadata tag within the first sequence of processing tasks, the second metadata tag associated with a second processing task to identify respective features from the pattern occurrence data by comparing the string to a pattern corresponding to malware; a feature save operation builder to generate a third metadata tag within the first sequence of processing tasks, the third metadata tag associated with a third processing task to save the vector output file; and an operation flow builder to: generate the first sequence of processing tasks, the first sequence including the first metadata tag, the second metadata tag, and the third metadata tag to create the vector output file of the respective features from the pattern occurrence data identified by the second metadata tag; and execute the first sequence of the first metadata tag, the second metadata tag, and the third metadata tag to create the vector output file associated with the first file format.",7,,0,E
10607004,9,"9. The apparatus as defined in claim 8 , wherein the file to string operation builder is to generate parsing operations of the log file for at least one of a text file format, a comma separated value (CSV) file format, a JavaScript Object Notation (JSON) file format, or a binary file format.",8,claim 8,0,E
10607004,10,"10. The apparatus as defined in claim 8 , further including a dictionary editor to build a dictionary of feature nomenclature associated with the respective features from the pattern occurrence data.",9,claim 8,0,E
10607004,11,"11. The apparatus as defined in claim 8 , further including a dictionary editor to facilitate extraction of feature instances based on at least one of dictionary matching or regular expression strings.",10,claim 8,0,E
10607004,12,"12. The apparatus as defined in claim 8 , further including a dictionary editor to normalize one or more search substrings to identify feature nomenclature based on a dictionary association.",11,claim 8,0,E
10607004,13,"13. The apparatus as defined in claim 8 , further including a hashing operation builder to hash the respective features to a unique integer value.",12,claim 8,0,E
10607004,14,"14. The apparatus as defined in claim 8 , further including a formatting operation builder to format the vector output file based on a Library for Support Vector Machines (LIBSVM) classification format.",13,claim 8,0,E
10607004,15,"15. A tangible computer readable storage medium comprising computer readable instructions to improve an efficiency of analysis of log files having different file formats, the instructions which, when executed, cause a processor to at least: determine a first file format of a log file from the different file formats, the log file to be converted to a vector output file; generate a first sequence of processing tasks based on the first file format, the first sequence including a first metadata tag corresponding to a conversion task to convert the first file format to a string format, the log file including pattern occurrence data; generate a second metadata tag within the first sequence of processing tasks, the second metadata tag associated with a second processing task to identify respective features from the pattern occurrence data by comparing the string to a pattern corresponding to malware; generate a third metadata tag within the first sequence of processing tasks, the third metadata tag associated with a third processing task to create the vector output file of the respective features from the pattern occurrence data identified by the second metadata tag; and execute the first sequence of the first metadata tag, the second metadata tag, and the third metadata tag to create the vector output file associated with the first file format.",14,,0,E
10607004,16,"16. The tangible computer readable storage medium of claim 15 , wherein the instructions, when executed, cause the processor to generate parsing operations of the log file for at least one of a text file format, a comma separated value (CSV) file format, a JavaScript Object Notation (JSON) file format, or a binary file format.",15,claim 15,0,E
10607004,17,"17. The tangible computer readable storage medium of claim 15 , wherein the instructions, when executed, cause the processor to build a dictionary of feature nomenclature associated with the respective features from the pattern occurrence data.",16,claim 15,0,E
10607004,18,"18. The tangible computer readable storage medium of claim 17 , wherein the instructions, when executed, cause the processor to generate search substrings of the feature nomenclature.",17,claim 17,0,E
10607004,19,"19. The tangible computer readable storage medium of claim 18 , wherein the instructions, when executed, cause the processor to identify, by executing the second processing task associated with the second metadata tag, the search substrings as feature occurrence instances.",18,claim 18,0,E
10607004,20,"20. The tangible computer readable storage medium of claim 15 , wherein the instructions, when executed, cause the processor to execute a second sequence of the first metadata tag, a fourth metadata tag, and a fifth metadata tag to create a second vector output file associated with the first file format.",19,claim 15,0,E
10607005,1,"1. A computer-implemented method for labeling automatically generated reports, at least a portion of the method being performed by a computing device comprising at least one processor, the method comprising: identifying: a set of incident reports that describe incidents that each involve at least one computing system and that comprise automatically collected information about the incidents; and a manually analyzed subset of the set of incident reports that further comprise manually generated information about the incidents in addition to automatically collected information about the incidents; assigning at least one label from a set of labels to at least one incident report in the manually analyzed subset of the set of incident reports, wherein the set of labels was generated based on applying a machine learning model to the manually generated information; deriving, from the automatically collected information, a set of features that describe the set of incident reports wherein each feature in the set of features discriminates between differing types of incident reports; plotting each incident report in the set of incident reports on a graph based on at least one value for the incident report of at least one feature in the set of features; in response to determining that the labeled incident report and the incident report comprise similar features from the set of features by determining that the labeled incident report and the incident report are plotted within a predetermined distance of each other in the graph, propagating at least one label assigned to a labeled incident report in the manually analyzed subset of the set of incident reports to an incident report that is not in the manually analyzed subset; and performing an action related to the label on the incident report that is not in the manually analyzed subset in response to propagating the label to the incident report.",0,,1,E
10607005,2,"2. The computer-implemented method of claim 1 , wherein performing the action comprises forwarding the incident report to an analyst for manual analysis.",1,claim 1,0,E
10607005,3,"3. The computer-implemented method of claim 1 , wherein performing the action comprises propagating at least one manually added note from the labeled incident report to the incident report.",2,claim 1,0,E
10607005,4,"4. The computer-implemented method of claim 1 , wherein the incidents comprise security incidents and the set of incident reports comprises incident reports generated by security applications.",3,claim 1,0,E
10607005,5,"5. The computer-implemented method of claim 1 , wherein assigning the at least one label from a set of labels to the at least one incident report in the manually analyzed subset of the set of incident reports based on applying the machine learning model to the manually generated information comprises analyzing the manually generated information using a natural language processing technique.",4,claim 1,0,E
10607005,6,"6. The computer-implemented method of claim 1 , wherein deriving, from the automatically collected information, the set of features that describe the set of incident reports comprises: deriving an original set of features from the set of incident reports; and refining, using a machine learning model, the original set of features into a reduced set of features that comprises a subset of the original set features that differentiates between incident reports of different types more effectively than a subset of the original features not in the reduced set of features.",5,claim 1,0,E
10607005,7,"7. The computer-implemented method of claim 1 , wherein assigning the at least one label from a set of labels to the at least one incident report in the manually analyzed subset of the set of incident reports comprises: labeling the at least one incident report in the manually analyzed subset as severe; and labeling at least one additional incident report in the manually analyzed subset as not severe.",6,claim 1,0,E
10607005,8,"8. The computer-implemented method of claim 7 , wherein performing the action comprises at least one of: forwarding the incident report labeled as severe to an analyst for manual analysis in response to labeling the incident report as severe; and avoiding forwarding the additional incident report labeled as not severe to an analyst for manual analysis in response to labeling the additional incident report as not severe.",7,claim 7,0,E
10607005,9,"9. A system for labeling automatically generated reports, the system comprising: an identification module, stored in memory, that identifies: a set of incident reports that describe incidents that each involve at least one computing system and that comprise automatically collected information about the incidents; and a manually analyzed subset of the set of incident reports that further comprise manually generated information about the incidents in addition to automatically collected information about the incidents; an assignment module, stored in memory, that assigns at least one label from a set of labels to at least one incident report in the manually analyzed subset of the set of incident reports, wherein the set of labels was generated based on applying a machine learning model to the manually generated information; a deriving module, stored in memory, that derives, from the automatically collected information, a set of features that describe the set of incident reports, wherein each feature in the set of features discriminates between differing types of incident reports; a propagation module, stored in memory, that propagates at least one label assigned to a labeled incident report in the manually analyzed subset of the set of incident reports to an incident report that is not in the manually analyzed subset and that comprises similar features from the set of features with the labeled incident report by: plotting each incident report in the set of incident reports on a graph based on at least one value for the incident report of at least one feature in the set of features; and propagating the at least one label from the labeled incident report to the incident report in response to determining that the labeled incident report and the incident report are plotted within a predetermined distance of each other in the graph; a performing module, stored in memory, that performs an action related to the label on the incident report that is not in the manually analyzed subset in response to propagating the label to the incident report; and at least one physical processor configured to execute the identification module, the assignment module, the deriving module, the propagation module, and the performing module.",8,,0,E
10607005,10,"10. The system of claim 9 , wherein the performing module performs the action by forwarding the incident report to an analyst for manual analysis.",9,claim 9,0,E
10607005,11,"11. The system of claim 9 , wherein the performing module performs the action by propagating at least one manually added note from the labeled incident report to the incident report.",10,claim 9,0,E
10607005,12,"12. The system of claim 9 , wherein the incidents comprise security incidents and the set of incident reports comprises incident reports generated by security applications.",11,claim 9,0,E
10607005,13,"13. The system of claim 9 , wherein the assignment module assigns the at least one label from a set of labels to the at least one incident report in the manually analyzed subset of the set of incident reports based on applying the machine learning model to the manually generated information by analyzing the manually generated information using a natural language processing technique.",12,claim 9,0,E
10607005,14,"14. The system of claim 9 , wherein the deriving module derives, from the automatically collected information, the set of features that describe the set of incident reports by: deriving an original set of features from the set of incident reports; and refining, using a machine learning model, the original set of features into a reduced set of features that comprises a subset of the original set features that differentiates between incident reports of different types more effectively than a subset of the original features not in the reduced set of features.",13,claim 9,0,E
10607005,15,"15. The system of claim 9 , wherein the assignment module assigns the at least one label from a set of labels to the at least one incident report in the manually analyzed subset of the set of incident reports by: labeling the at least one incident report in the manually analyzed subset as severe; and labeling at least one additional incident report in the manually analyzed subset as not severe.",14,claim 9,0,E
10607005,16,"16. The system of claim 15 , wherein the performing module performs the action by at least one of: forwarding the incident report labeled as severe to an analyst for manual analysis in response to labeling the incident report as severe; and avoiding forwarding the additional incident report labeled as not severe to an analyst for manual analysis in response to labeling the additional incident report as not severe.",15,claim 15,0,E
10607005,17,"17. A non-transitory computer-readable medium comprising one or more computer-readable instructions that, when executed by at least one processor of a computing device, cause the computing device to: identify: a set of incident reports that describe incidents that each involve at least one computing system and that comprise automatically collected information about the incidents; and a manually analyzed subset of the set of incident reports that further comprise manually generated information about the incidents in addition to automatically collected information about the incidents; assign at least one label from a set of labels to at least one incident report in the manually analyzed subset of the set of incident reports, wherein the set of labels was generated based on applying a machine learning model to the manually generated information; derive, from the automatically collected information, a set of features that describe the set of incident reports wherein each feature in the set of features discriminates between differing types of incident reports; plot each incident report in the set of incident reports on a graph based on at least one value for the incident report of at least one feature in the set of features; in response to determining that the labeled incident report and the incident report comprise similar features from the set of features by determining that the labeled incident report and the incident report are plotted within a predetermined distance of each other in the graph, propagate at least one label assigned to a labeled incident report in the manually analyzed subset of the set of incident reports to an incident report that is not in the manually analyzed subset and that comprises similar features from the set of features with the labeled incident report; and perform an action related to the label on the incident report that is not in the manually analyzed subset in response to propagating the label to the incident report.",16,,0,E
10607005,18,"18. The non-transitory computer-readable medium of claim 17 , wherein the one or more computer-readable instructions cause the computing device to perform the action by forwarding the incident report to an analyst for manual analysis.",17,claim 17,0,E
10607005,19,"19. The non-transitory computer-readable medium of claim 17 , wherein performing the action comprises propagating at least one manually added note from the labeled incident report to the incident report.",18,claim 17,0,E
10607005,20,"20. The non-transitory computer-readable medium of claim 17 , wherein the incidents comprise security incidents and the set of incident reports comprises incident reports generated by security applications.",19,claim 17,0,E
10607006,1,"1. A supervision circuit monitoring the security of a target system, the target system comprising at least one processor, wherein: the supervision circuit comprises a finite-state machine; the finite-state machine is configured to receive data from one or more sensors, at least one sensor being located in the target system; the finite-state machine is configured to determine a state output in response to data received from said one or more sensors; the supervision circuit monitoring the security of the target system based on said state output, wherein the finite-state machine comprises a self-alarm mechanism monitoring said finite-state machine; the self-alarm mechanism comprises an encoder, said encoder being configured to encode with redundancy at least one state of the finite-state machine into an encoded state by applying an error correction code, said error correction code being associated with a threshold and/or a minimum distance; and if an encoded state is determined to be valid by reference to a plurality of predefined valid encoded states, the decoded state of said encoded state is communicated to the decision logic and to the state change logic.",0,,1,E
10607006,2,"2. The supervision circuit of claim 1 , wherein if an encoded state is determined to be invalid by reference to a plurality of predefined valid encoded states, the self-alarm mechanism is triggered and an alarm is communicated to the at least one processor.",1,claim 1,0,E
10607006,3,"3. The supervision circuit of claim 1 , wherein the finite-state machine is further associated with a decision logic, said decision logic being configured to determine one or more actions in response to the state output of the finite-state machine.",2,claim 1,0,E
10607006,4,"4. The supervision circuit of claim 3 , wherein the decision logic is configured to communicate said one or more actions to the processor of the system.",3,claim 3,0,E
10607006,5,"5. The supervision circuit of claim 3 , wherein the decision logic is configured to control at least one of the sensors, wherein the decision logic is configured to modify one or more thresholds in one or more sensors, and/or to reset one or more sensors, and/or to deactivate temporarily or permanently one or more sensors.",4,claim 3,0,E
10607006,6,"6. The supervision circuit of claim 1 , wherein the finite-state machine and/or the decision logic are configured to compare data communicated by one or more sensors with one or more predefined values or ranges of values.",5,claim 1,0,E
10607006,7,"7. The supervision circuit of claim 6 , wherein the finite-state machine is configured to determine a diagnostic between a plurality of predefined diagnostics in response to said comparisons of data, said predefined diagnostics comprising one or more of a normal situation, a false positive, a local or a global fault, a local or a global defect, a physical attack or a cyber-logical attack.",6,claim 6,0,E
10607006,8,"8. The supervision circuit of claim 7 , wherein the decision logic is configured to determine one or more countermeasures in response to the diagnostic determined by the finite-state machine and/or wherein the decision logic is configured to communicate a message to the at least one processor, said message comprising one or more instructions for the processor to perform one or more actions selected from the group comprising terminating one or more services executed in the processor, deleting data in the processor, logging incidents, renegotiating a user session, soft resetting the processor, hard rebooting the processor, disconnecting one or more ports or networks, disconnecting power supply, physically damaging or destroying the processor.",7,claim 7,0,E
10607006,9,"9. The supervision circuit of claim 1 , wherein a sensor is a hardware sensor selected from the group comprising a sensor measuring a physical value of the environment and a sensor configured to determine data integrity.",8,claim 1,0,E
10607006,10,"10. The supervision circuit of claim 1 , wherein a sensor is a software sensor selected from the group comprising a cyber-sensor configured to determine invariants out of data injected in the system and an emulated sensor mobilizing idle resources of the processor to perform security tests.",9,claim 1,0,E
10607006,11,"11. The supervision circuit of claim 1 , wherein the at least one sensor is located in or on the at least one processor.",10,claim 1,0,E
10607006,12,"12. The supervision circuit of claim 1 , wherein the finite-state machine and/or the decision logic circuit further comprise input/output interfaces for the configuration of a state change logic of the finite-state machine and/or of decision rules accessed by the decision logic.",11,claim 1,0,E
10607006,13,"13. A method of monitoring the security of a target system with a supervision circuit, the target system comprising at least one processor, the supervision circuit comprising a finite-state machine; the method comprising: the finite-state machine receiving data from one or more sensors, at least one sensor being located in the target system; the finite-state machine determining a state output in response to data received from said one or more sensors; the supervision circuit monitoring the security of the target system based on said state output, wherein the finite-state machine comprises a self-alarm mechanism monitoring said finite-state machine; the self-alarm mechanism comprises an encoder, said encoder being configured to encode with redundancy at least one state of the finite-state machine into an encoded state by applying an error correction code, said error correction code being associated with a threshold and/or a minimum distance; and if an encoded state is determined to be valid by reference to a plurality of redefined valid encoded states, the decoded state of said encoded state is communicated to the decision logic and to the state change logic.",12,,0,E
10607007,1,"1. One or more non-transitory computer-readable storage mediums storing one or more sequences of instructions for monitoring process behavior, which when executed by one or more processors, cause: identifying one or more events occurring within an isolated environment in which a process executes, wherein the isolated environment is instantiated in response to receiving a request to execute the process; determining whether an actual behavior of the process executing within the isolated environment deviates from an expected behavior of the execution of the process based upon a set of events associated with the process that pertain to the process accessing or attempting to access an encryption API or an API associated with sleeping; only upon determining that the process deviates from the expected behavior, storing behavior data that describes the actual behavior of the process during execution, the storing behavior data includes creating a snapshot of the isolated environment; and determining whether the process is compromised by analyzing the behavior data that describes the actual behavior of the process.",0,,1,E
10607007,2,"2. The non-transitory one or more computer-readable storage mediums of claim 1 , wherein determining that the process deviates from the expected behavior is based upon a set of events performed upon simulated hardware.",1,claim 1,0,E
10607007,3,"3. The non-transitory one or more computer-readable storage mediums of claim 2 , wherein the simulated hardware is network hardware.",2,claim 2,0,E
10607007,4,"4. The non-transitory one or more computer-readable storage mediums of claim 2 , wherein the simulated hardware is a region of memory or a non-volatile storage medium.",3,claim 2,0,E
10607007,5,"5. The non-transitory one or more computer-readable storage mediums of claim 2 , wherein the simulated hardware is a register or a page table.",4,claim 2,0,E
10607007,6,"6. The non-transitory one or more computer-readable storage mediums of claim 1 , wherein determining that the process deviates from the expected behavior is based upon a set of events pertaining to a change in a file system or a registry.",5,claim 1,0,E
10607007,7,"7. The non-transitory one or more computer-readable storage mediums of claim 1 , wherein analyzing the behavioral data to determine whether the process has been compromised comprises: storing data comprising known behavior of a plurality of processes; comparing the behavioral data to the data comprising known behavior of a plurality of processes; and based on the comparison, identifying whether the behavioral data matches a portion of the data comprising known behavior of a plurality of processes.",6,claim 1,0,E
10607007,8,"8. An apparatus, comprising: one or more processors; and one or more non-transitory computer-readable storage mediums storing one or more sequences of instructions for monitoring process behavior, which when executed, cause: identifying one or more events occurring within an isolated environment in which a process executes, wherein the isolated environment is instantiated in response to receiving a request to execute the process; determining whether an actual behavior of the process executing within the isolated environment deviates from an expected behavior of the execution of the process based upon a set of events associated with the process that pertain to the process accessing or attempting to access an encryption API or an API associated with sleeping; only upon determining that the process deviates from the expected behavior, storing behavior data that describes the actual behavior of the process during execution, the storing behavior data includes creating a snapshot of the isolated environment; and determining whether the process is compromised by analyzing the behavior data that describes the actual behavior of the process.",7,,0,E
10607007,9,"9. The apparatus of claim 8 , wherein determining that the process deviates from the expected behavior is based upon a set of events performed upon simulated hardware.",8,claim 8,0,E
10607007,10,"10. The apparatus of claim 9 , wherein the simulated hardware is network hardware.",9,claim 9,0,E
10607007,11,"11. The apparatus of claim 9 , wherein the simulated hardware is a region of memory or a non-volatile storage medium.",10,claim 9,0,E
10607007,12,"12. The apparatus of claim 9 , wherein the simulated hardware is a register or a page table.",11,claim 9,0,E
10607007,13,"13. The apparatus of claim 8 , wherein determining that the process deviates from the expected behavior is based upon a set of events pertaining to a change in a file system or a registry.",12,claim 8,0,E
10607007,14,"14. The apparatus of claim 8 , wherein analyzing the behavioral data to determine whether the process has been compromised comprises: storing data comprising known behavior of a plurality of processes; comparing the behavioral data to the data comprising known behavior of a plurality of processes; and based on the comparison, identifying whether the behavioral data matches a portion of the data comprising known behavior of a plurality of processes.",13,claim 8,0,E
10607007,15,"15. A method for monitoring process behavior, comprising: programmatically identifying one or more events occurring within an isolated environment in which a process executes, wherein the isolated environment is instantiated in response to receiving a request to execute the process; programmatically determining whether an actual behavior of the process executing within the isolated environment deviates from an expected behavior of the execution of the process based upon a set of events associated with the process that pertain to the process accessing or attempting to access an encryption API or an API associated with sleeping; programmatically storing behavior data that describes the actual behavior of the process during execution only upon determining that the process deviates from the expected behavior the programmatically storing behavior data includes programmatically creating a snapshot of the isolated environment; and programmatically determining whether the process is compromised by analyzing the behavior data that describes the actual behavior of the process.",14,,0,E
10607007,16,"16. The method of claim 15 , wherein determining that the process deviates from the expected behavior is based upon a set of events performed upon simulated hardware.",15,claim 15,0,E
10607007,17,"17. The non-transitory one or more computer-readable storage mediums of claim 1 , wherein determining that the process deviates from the expected behavior further comprises consulting a set of configurable rules stored in an XML file that are established by an administrator.",16,claim 1,0,E
10607007,18,"18. The non-transitory one or more computer-readable storage mediums of claim 1 , wherein determining that the process deviates from the expected behavior further comprises consulting a set of configurable rules, established by a user, specific to a document MIME type associated with said file.",17,claim 1,0,E
10607008,1,"1. A computer-implemented method of counter-fraud operation management, the method comprising: executing, with respect to a first set of data, a counter-fraud operation using an initial set of parameter values for a set of parameters of the counter-fraud operation; monitoring a set of user counter-fraud activities of a fraud detection analyst interacting with a user interface, the set of counter-fraud activities are activities carried out by the fraud detection analyst to determine a false-positive identification of fraud with respect to the first set of data; capturing, based on the set of user counter-fraud activities of the fraud detection analyst, a set of user feedback data to determine a feedback-driven set of parameter values for the set of parameters of the counter-fraud operation; determining, based on the set of user feedback data, the feedback-driven set of parameter values for the set of parameters of the counter-fraud operation; and executing, with respect to a second set of data, the counter-fraud operation using the feedback-driven set of parameter values for the set of parameters based on the set of user feedback data.",0,,1,E
10607008,2,"2. The method of claim 1 , further comprising: detecting that the set of user counter-fraud activities of the user corresponding to the user interface includes a set of user inputs; capturing, in the set of user feedback data, a set of user input data which is based on the set of user inputs; determining, based on the set of user input data in the set of user feedback data, the feedback-driven set of parameter values for the set of parameters of the counter-fraud operation; and executing, with respect to the second set of data, the counter-fraud operation using the feedback-driven set of parameter values for the set of parameters based on the set of user input data in the set of user feedback data.",1,claim 1,0,E
10607008,3,"3. The method of claim 1 , further comprising: detecting that the set of user counter-fraud activities of the user corresponding to the user interface includes a set of user-accessed modules; capturing, in the set of user feedback data, a set of user-interaction module data which is based on the set of user-accessed modules; determining, based on the set of user-interaction module data in the set of user feedback data, the feedback-driven set of parameter values for the set of parameters of the counter-fraud operation; and executing, with respect to the second set of data, the counter-fraud operation using the feedback-driven set of parameter values for the set of parameters based on the set of user-interaction module data in the set of user feedback data.",2,claim 1,0,E
10607008,4,"4. The method of claim 1 , further comprising: detecting that the set of user counter-fraud activities of the user corresponding to the user interface includes a sequence of a set of user actions; capturing, in the set of user feedback data, a set of user action sequence data which is based on the sequence of the set of user actions; determining, based on the set of user action sequence data in the set of user feedback data, the feedback-driven set of parameter values for the set of parameters of the counter-fraud operation; and executing, with respect to the second set of data, the counter-fraud operation using the feedback-driven set of parameter values for the set of parameters based on the set of user action sequence data in the set of user feedback data.",3,claim 1,0,E
10607008,5,"5. The method of claim 1 , further comprising: detecting that the set of user counter-fraud activities of the user corresponding to the user interface includes a set of temporal periods related to the set of user counter-fraud activities; capturing, in the set of user feedback data, a set of temporal-oriented activity data which is based on the set of temporal periods related to the set of user counter-fraud activities; determining, based on the set of temporal-oriented activity data in the set of user feedback data, the feedback-driven set of parameter values for the set of parameters of the counter-fraud operation; and executing, with respect to the second set of data, the counter-fraud operation using the feedback-driven set of parameter values for the set of parameters based on the set of temporal-oriented activity data in the set of user feedback data.",4,claim 1,0,E
10607008,6,"6. The method of claim 1 , further comprising: ascertaining, based on the set of user feedback data, a set of confidence scores which pertains to the set of user counter-fraud activities related to false-positive identification with respect to the first set of data; and determining, based on the set of confidence scores which pertains to the set of user counter-fraud activities related to false-positive identification with respect to the first set of data, the feedback-driven set of parameter values for the set of parameters of the counter-fraud operation; and executing, with respect to the second set of data, the counter-fraud operation using the feedback-driven set of parameter values for the set of parameters based on the set of confidence scores.",5,claim 1,0,E
10607008,7,"7. The method of claim 3 , further comprising: computing, based on the set of user-interaction module data in the set of user feedback data, a set of module abstraction scores which pertains to the set of user-accessed modules of the set of user counter-fraud activities related to false-positive identification with respect to the first set of data; and determining, based on the set of module abstraction scores which pertains to the set of user counter-fraud activities related to false-positive identification with respect to the first set of data, the feedback-driven set of parameter values for the set of parameters of the counter-fraud operation; and executing, with respect to the second set of data, the counter-fraud operation using the feedback-driven set of parameter values for the set of parameters based on the set of module abstraction scores.",6,claim 3,0,E
10607008,8,"8. The method of claim 1 , further comprising: computing, based on the set of user feedback data, a set of activity complexity scores which pertains to the set of user counter-fraud activities related to false-positive identification with respect to the first set of data; and determining, based on the set of activity complexity scores which pertains to the set of user counter-fraud activities related to false-positive identification with respect to the first set of data, the feedback-driven set of parameter values for the set of parameters of the counter-fraud operation; and executing, with respect to the second set of data, the counter-fraud operation using the feedback-driven set of parameter values for the set of parameters based on the set of activity complexity scores.",7,claim 1,0,E
10607008,9,"9. The method of claim 8 , further comprising: weighting, using a set of module abstraction scores which pertains to a set of user-accessed modules of the set of user counter-fraud activities related to false-positive identification with respect to the first set of data, the set of activity complexity scores which pertains to the set of user counter-fraud activities related to false-positive identification with respect to the first set of data.",8,claim 8,0,E
10607008,10,"10. The method of claim 1 , further comprising: configuring the feedback-driven set of parameter values for the set of parameters to include a set of triggering thresholds for the set of parameters of the counter-fraud operation; and providing, in response to an achievement of the set of triggering thresholds, an alert.",9,claim 1,0,E
10607008,11,"11. The method of claim 1 , further comprising: identifying that the set of user feedback data indicates both a false-positive for the first set of data and an extent of the set of user counter-fraud activities which correlates to the false-positive; resolving, based on the extent of the set of user counter-fraud activities which correlates to the false-positive, the feedback-driven set of parameter values for the set of parameters of the counter-fraud operation; and executing, with respect to a second set of data, the counter-fraud operation using the feedback-driven set of parameter values for the set of parameters based on the extent of the set of user counter-fraud activities which correlates to the false-positive.",10,claim 1,0,E
10607008,12,"12. The method of claim 1 , further comprising: collecting, from the first set of data, a set of fraud-indicative objects; performing, using an enterprise ontology, a set of semantic queries on the set of fraud-indicative objects; determining, based on the set of semantic queries on the set of fraud-indicative objects, a set of fraud-indicative relationships using a set of ontology annotation data; and overriding, based on the set of fraud-indicative relationships determined using the set of ontology annotation data, the feedback-driven set of parameter values for the set of parameters of the counter-fraud operation.",11,claim 1,0,E
10607008,13,"13. The method of claim 12 , further comprising: calculating, to determine the set of fraud-indicative relationships using the set of ontology annotation data, a measure of hops with respect to the set of fraud-indicative objects; comparing the measure of hops with a threshold hop benchmark; and overriding, in response to the threshold hop benchmark exceeding the measure of hops, the feedback-driven set of parameter values for the set of parameters of the counter-fraud operation to provide an alert.",12,claim 12,0,E
10607008,14,"14. The method of claim 12 , further comprising: calculating, to determine the set of fraud-indicative relationships using the set of ontology annotation data, a measure of suspect annotative markings with respect to the set of fraud-indicative objects; comparing the measure of suspect annotative markings with a threshold suspect marking benchmark; and overriding, in response to the measure of suspect annotative markings exceeding the threshold suspect marking benchmark, the feedback-driven set of parameter values for the set of parameters of the counter-fraud operation to provide an alert.",13,claim 12,0,E
10607008,15,"15. The method of claim 1 , further comprising: performing, using a counter-fraud domain-specific heuristic, a set of semantic queries with respect to a semantic framework; identifying, based on a set of pivot nodes derived from performance of the set of semantic queries with respect to the semantic framework, a set of candidate relationships; and modifying, based on the set of candidate relationships, the set of feedback-driven parameter values for the set of parameters.",14,claim 1,0,E
10607008,16,"16. The method of claim 1 , further comprising: formulating, with respect to the first set of data, a cumulative score based on: a set of user input data which is based on a set of user inputs, a set of user-interaction module data which is based on a set of user-accessed modules, a set of user action sequence data which is based on a sequence of the set of user actions, a set of temporal-oriented activity data which is based on a set of temporal periods related to the set of user counter-fraud activities, a set of confidence scores which pertains to the set of user counter-fraud activities related to false-positive identification with respect to the first set of data, a set of module abstraction scores which pertains to the set of user-accessed modules of the set of user counter-fraud activities related to false-positive identification with respect to the first set of data, and a set of activity complexity scores which pertains to the set of user counter-fraud activities related to false-positive identification with respect to the first set of data; comparing the cumulative score with a threshold overall score; and modifying, in response to the cumulative score achieving the threshold overall score, the counter-fraud operation in advance of executing the counter-fraud operation with respect to the second set of data.",15,claim 1,0,E
10607009,1,"1. A system for mitigating the effects of ransomware attacks, comprising: a plurality of computing devices interconnected via a network; a plurality of storage devices, wherein each storage device is configured to store a plurality of data files in a plurality of file directories, wherein a select number of the plurality of storage devices include at least one shared file directory for storing a plurality of data files therein, wherein each shared file directory is configured to allow access to data files stored therein to a select number of the plurality of computing devices via the network; a ransomware detection component connected to a select number of the plurality of computing devices and storage devices via the network, wherein the ransomware detection component is configured to detect possible ransomware attacks and comprises, a honeypot deployment module configured to selectively deploy a plurality of honeypot data items into a select number of the plurality of storage devices, wherein a select number of the plurality of honeypot data items deployed are accessible to selected users of the system, wherein the honeypot data items comprise honeypot drives, honeypot files, and combinations thereof; a monitoring module configured to monitor a plurality of activities executed on data files stored in a select number of the plurality of storage devices, detect activities executed on data files that conform to at least one of a predefined set of activities, and generate a plurality of event data associated with each detected activity; a trigger rule module configured to determine, based on event data associated with each detected activity, whether a detected activity is indicative of a ransomware attack by a third party not authorized to execute such detected activity; an action script module configured to execute, based on a determination by the trigger rule module that a detected activity is indicative of a ransomware attack, at least one action script to mitigate access to shared data files should the detected activity be a ransomware attack; and a database module configured to store at least a portion of event data associated with detected activities.",0,,1,E
10607009,2,"2. The system of claim 1 , wherein honeypot deployment module deploys at least one honeypot data item into a majority of the shared file directories.",1,claim 1,0,E
10607009,3,"3. The system of claim 1 , wherein the plurality of activities monitored comprises activities associated with predefined file types, predefined file activities, predefined directory activities, predefined user activities, predefined processes, and combinations thereof.",2,claim 1,0,E
10607009,4,"4. The system of claim 1 , wherein the trigger rule module is configured to: determine whether an occurrence of a detected activity exceeds a predetermined threshold level associated with such activity; and based on whether the predetermined threshold is exceeded, determine whether the detected activity is indicative of a ransomware attack.",3,claim 1,0,E
10607009,5,"5. The system of claim 4 , wherein the database is configured to store threshold data associated with a plurality of predetermined threshold levels with respect to selected activities executed on data files; wherein the trigger rule module is configured to access threshold data associated with a selected detected activity to determine whether the occurrence thereof exceeds the predetermined threshold level.",4,claim 4,0,E
10607009,6,"6. The system of claim 1 , wherein at least one action script comprises at least one security action selected from the group consisting of preventing at least one process from accessing data files stored in at least one of the plurality of storage devices; suspending at least one process executing on data files stored in at least one of the plurality of storage devices; creating a backup copy of at least a portion of data files stored in at least one of the plurality of storage devices; terminating processes on at least one of the plurality of storage devices and plurality of computing devices; generating at least one alert in response to a determination that a detected activity is indicative of a ransomware attack; restricting access to the system of at least one user associated with a detected activity that is determined to be indicative of a ransomware attack; quarantining at least one of the plurality of storage devices and plurality of computing devices on which a detected activity is executed that is determined to be indicative of a ransomware attack; and combinations thereof.",5,claim 1,0,E
10607009,7,"7. The system of claim 1 , wherein the database is configured to store a plurality of action scripts associated with a plurality of detected activities executed on data files; wherein the action script module is configured to access at least one action script associated with a selected detected activity to mitigate access to shared data files should the detected activity be a ransomware attack.",6,claim 1,0,E
10607009,8,"8. The system of claim 1 , wherein the ransomware detection component comprises a plurality of monitoring modules, wherein each monitoring module is configured to: monitor a plurality of activities executed on data files stored in a select number of the plurality of storage devices; detect activities executed on honeypot data items that conform to at least one of a predefined set of activities; generate a plurality of event data associated with each detected activity; and transmit at least a portion of the generated event data to a select number of a remainder of the plurality of monitoring modules via the network for processing thereby.",7,claim 1,0,E
10607009,9,"9. The system of claim 1 , wherein the ransomware detection component further comprises an input/output interface configured to receive a plurality of configuration data associated with configuration parameters for at least one of the at least one monitoring module, the trigger rule module, the action script module, the database, and combinations thereof.",8,claim 1,0,E
10607009,10,"10. A system for mitigating the effects of ransomware attacks, comprising: a plurality of computing devices interconnected via a network; a plurality of storage devices, wherein each storage device is configured to store a plurality of data files in a plurality of file directories, wherein a select number of the plurality of storage devices include at least one shared file directory for storing a plurality of data files therein, wherein each shared file directory is configured to allow access to data files stored therein to a select number of the plurality of computing devices via the network; a plurality of ransomware detection components, wherein each ransomware detection component is connected to a select number of the plurality of computing devices and storage devices via the network, wherein each ransomware detection component is operable to detect possible ransomware attacks and comprises: a honeypot deployment module configured to selectively deploy a plurality of honeypot data items into a select number of the plurality of storage devices, wherein a select number of the plurality of honeypot data items deployed are accessible to selected users of the system, wherein the honeypot data items comprise honeypot drives, honeypot files, and combinations thereof; at least one monitoring module configured to monitor a plurality of activities executed on data files stored in the plurality of storage devices, detect activities executed on data files that conform to at least one of a predefined set of activities, and generate a plurality of event data associated with each detected activity; a trigger rule module configured to determine, based on event data associated with each detected activity, whether a detected activity is indicative of a ransomware attack by a third party not authorized to execute such detected activity, and generate a plurality of event analysis data therefrom; an action script module configured to execute, based on a determination by the trigger rule module that a detected activity is indicative of a ransomware attack, at least one action script to mitigate access to shared data files should the detected activity be a ransomware attack; a database module configured to store at least a portion of event data associated with detected activities; and an input/output device configured to exchange at least a portion of least one of event data associated with detected activities, event analysis data, at least one action script, status update messages, and combinations thereof with a select number of a remainder of the plurality of ransomware detection components via the network.",9,,0,E
10607009,11,"11. The system of claim 10 , further comprising an anti-ransomware failover component connected to each of the plurality of ransomware detection components via the network, wherein the anti-ransomware failover component comprises: a failover processor for controlling the anti-ransomware failover component; a heartbeat component operatively connected to the failover processor and controlled in part by the failover processor, wherein the heartbeat component is operable to receive a plurality of status update communications from each of the ransomware detection components connected via the network; and a shared database connected to each of the ransomware detection components, wherein the shared database is configured to store a plurality of event data associated with detected activities, event analysis data, at least one action script, and combinations thereof received from each of the ransomware detection components; wherein the failover processor is operable to: generate at least one control signal for each ransomware detection component to transmit a status update message to the heartbeat component at specific intervals; receive a plurality of status update messages from the heartbeat component and generate status data for each ransomware detection component therefrom; determine, based on at least a portion of the status data, whether a selected ransomware detection component is functioning within predetermined parameters; in response to a determination that the selected ransomware detection component is not functioning within predetermined parameters, generate at least one command to restrict ransomware detection functionality of the non-functioning ransomware detection component; and transmit at least one command to a select number of remainder of the plurality of ransomware detection components to undertake at least a portion of the ransomware detection functionality of the non-functioning ransomware detection component.",10,claim 10,0,E
10607009,12,"12. A method for mitigating the effects of ransomware attacks within a networked system, wherein the system comprises (a) a plurality of computing devices interconnected via a network, (b) a plurality of storage devices, wherein each storage device is configured to store a plurality of data files in a plurality of file directories, wherein a select number of the plurality of storage devices include at least one shared file directory for storing a plurality of data files therein, wherein each shared file directory is configured to allow access to data files stored therein to a select number of the plurality of computing devices via the network, and (c) a ransomware detection component connected to a select number of the plurality of computing devices and storage devices via the network for detecting possible ransomware attacks, wherein the ransomware detection component comprises (i) a honeypot deployment module, (ii) a monitoring module, (iii) a trigger rule module, (iv) an action script module, and (v) a database module, the method comprising: deploying, via the honeypot deployment module, a plurality of honeypot data items into a select number of the plurality of storage devices, wherein a select number of the plurality of honeypot data items deployed are accessible to selected users of the system, wherein the honeypot data items comprise honeypot drives, honeypot files, and combinations thereof; monitoring, via the monitoring module, a plurality of activities executed on data files stored in a select number of the plurality of storage devices, detecting, via the monitoring module, activities executed on data files that conform to at least one of a predefined set of activities, and generating a plurality of event data associated with each detected activity; determining, via the trigger rule module, based on event data associated with each detected activity, whether a detected activity is indicative of a ransomware attack by a third party not authorized to execute such detected activity, and generating a plurality of event analysis data therefrom; and executing, via the action script module, based on a determination by the trigger rule module that a detected activity is indicative of a ransomware attack, at least one action script to mitigate access to shared data files should the detected activity be a ransomware attack.",11,,0,E
10607009,13,"13. The method of claim 12 , further comprising storing at least a portion of at least one of the plurality of event data associated with detected activities, the plurality of event analysis data, and combinations thereof in the database module.",12,claim 12,0,E
10607009,14,"14. The method of claim 12 , at least one honeypot data item is deployed into a majority of the shared file directories.",13,claim 12,0,E
10607009,15,"15. The method of claim 12 , wherein the plurality of activities monitored comprises activities associated with predefined file types, predefined file activities, predefined directory activities, predefined user activities, predefined processes, and combinations thereof.",14,claim 12,0,E
10607009,16,"16. The method of claim 12 , further comprising: storing threshold data associated with a plurality of predetermined threshold levels with respect to selected activities executed on data files in the database module; determining, via the trigger rule module, whether an occurrence of a detected activity exceeds a predetermined threshold level associated with such activity; and based on whether the predetermined threshold is exceeded, determining, via the trigger rule module, whether the detected activity is indicative of a ransomware attack.",15,claim 12,0,E
10607009,17,"17. The method of claim 12 , wherein at least one action script comprises at least one security action selected from the group consisting of preventing at least one process from accessing data files stored in at least one of the plurality of storage devices; suspending at least one process executing on data files stored in at least one of the plurality of storage devices; creating a backup copy of at least a portion of data files stored in at least one of the plurality of storage devices; terminating processes on at least one of the plurality of storage devices and plurality of computing devices; generating at least one alert in response to a determination that a detected activity is indicative of a ransomware attack; restricting access to the system of at least one user associated with a detected activity that is determined to be indicative of a ransomware attack; quarantining at least one of the plurality of storage devices and plurality of computing devices on which a detected activity is executed that is determined to be indicative of a ransomware attack; and combinations thereof.",16,claim 12,0,E
10607009,18,"18. The method of claim 12 , further comprising: storing a plurality of action scripts associated with a plurality of detected activities executed on data files in the database module; and accessing, by the action script module, at least one action script associated with a selected detected activity and executing the at least one action script to mitigate access to shared data files should the detected activity be a ransomware attack.",17,claim 12,0,E
10607009,19,"19. The method of claim 12 , wherein the ransomware detection component further comprises a plurality of monitoring modules, the method further comprising: monitoring, by each of the monitoring modules, a plurality of activities executed on data files stored in a select number of the plurality of storage devices; detecting, by each of the monitoring modules, activities executed on honeypot data items that conform to at least one of a predefined set of activities; generating, by each of the monitoring modules, a plurality of event data associated with each detected activity; and transmitting, by each of the monitoring modules, at least a portion of the generated event data to a select number of a remainder of the plurality of monitoring modules via the network for processing thereby.",18,claim 12,0,E
10607009,20,"20. The method of claim 12 , wherein the ransomware detection component further comprises an input/output interface, the method further comprising receiving, via the input/output interface, a plurality of configuration data associated with configuration parameters for at least one of the monitoring module, the trigger rule module, the action script module, the database, and combinations thereof.",19,claim 12,0,E
10607010,1,"1. A computer-implemented method for detecting malware by determining a file similarity vector of an executable file, the computer-implemented method comprising steps of: determining, by a processor of a computer system, a set of one or more functions in the executable file; for each function in the set of one or more functions, determining, by the processor, if the function is a valid function, wherein the step of determining if the function is a valid function comprises: determining, by the processor, whether a predetermined or configurable number of instructions at a beginning of the function can be successfully disassembled; and in response to determining that the predetermined or configurable number of instructions can be successfully disassembled, determining, by the processor, that the function is valid; for each valid function in the set of one or more functions, determining, by the processor, a length of the function; determining, by the processor, one or more statistics associated with each valid function in the set of one or more functions, the one or more statistics including statistics based, at least in part, on the length of the function; and determining, by the processor, the file similarity vector based, at least in part, on the one or more statistics.",0,,1,E
10607010,2,"2. The method of claim 1 , wherein the one or more statistics include at least one member of a group consisting of a number of functions in the executable file, a minimum function length, a maximum function length, an average function length, and an entropy value.",1,claim 1,0,E
10607010,3,"3. The method of claim 1 , further comprising the step of: locating, by the processor, a beginning of the function in the executable file based, at least in part, on an instruction type.",2,claim 1,0,E
10607010,4,"4. The method of claim 1 , wherein the step of determining if the function is a valid function comprises: in response to determining that the predetermined or configurable number of instructions cannot be successfully disassembled, determining, by the processor, that the function is invalid.",3,claim 1,0,E
10607010,5,"5. The method of claim 1 , further comprising the step of: searching, by the processor, a code section for acquiring function references.",4,claim 1,0,E
10607010,6,"6. The method of claim 5 , wherein the code section comprises a delimited functional block.",5,claim 5,0,E
10607010,7,"7. The method of claim 5 , wherein a value in the code section is an opcode for a call instruction, and further comprising the step of: determining, by the processor, if a target address for the call instruction is for a valid function.",6,claim 5,0,E
10607010,8,"8. The method of claim 5 , wherein a value in the code section is not an opcode for a call instruction, and further comprising the step of: determining, by the processor, if the value in the code section is a virtual address.",7,claim 5,0,E
10607010,9,"9. The method of claim 1 , wherein the executable file includes a PE file used in a Microsoft Windows system, an ELF file used in a Linux system, an ELF file used in a UNIX system, or a Mach-O file used in a MAC OS X.",8,claim 1,0,E
10607010,10,"10. The method of claim 1 , further comprising the step of: comparing, by the processor, the file similarity vector of the executable file with file similarity vectors associated with known malware to determine if the executable file contains malware.",9,claim 1,0,E
10607010,11,"11. The method of claim 10 , further comprising the step of: calculating, by the processor, a Euclidian distance between the file similarity vector of the executable file and the file similarity vector of the malware.",10,claim 10,0,E
10607010,12,"12. A non-transitory computer readable storage medium having a program stored thereon, the program causing the computer to execute the steps of: determining a set of one or more functions in an executable file; for each function in the set of one or more functions, determining if the function is a valid function, wherein the step of determining if the function is a valid function comprises: determining whether a predetermined or configurable number of instructions at a beginning of the function can be successfully disassembled; and in response to determining that the predetermined or configurable number of instructions can be successfully disassembled, determining that the function is valid; for each valid function in the set of one or more functions, determining a length of the function; determining one or more statistics associated with each valid function in the set of one or more functions, the one or more statistics including statistics based, at least in part, on the length of the function; and determining the file similarity vector based, at least in part, on the one or more statistics.",11,,0,E
10607010,13,"13. The non-transitory computer readable storage medium of claim 12 , wherein the one or more statistics include at least one member of a group consisting of a number of functions in the executable file, a minimum function length, a maximum function length, an average function length, and an entropy value.",12,claim 12,0,E
10607010,14,"14. The non-transitory computer readable storage medium of claim 12 , further comprising the step of: locating a beginning of the function in the executable file based, at least in part, on an instruction type.",13,claim 12,0,E
10607010,15,"15. The non-transitory computer readable storage medium of claim 12 , wherein the step of determining if the function is a valid function comprises: in response to determining that the predetermined or configurable number of instructions cannot be successfully disassembled, determining that the function is invalid.",14,claim 12,0,E
10607010,16,"16. The non-transitory computer readable storage medium of claim 12 , further comprising the step of: comparing the file similarity vector of the executable file with file similarity vectors associated with known malware to determine if the executable file contains malware.",15,claim 12,0,E
10607010,17,"17. The non-transitory computer readable storage medium of claim 12 , further comprising the step of: calculating a Euclidian distance between the file similarity vector of the executable file and the file similarity vector of the malware.",16,claim 12,0,E
10607010,18,"18. The non-transitory computer readable storage medium of claim 12 , further comprising the step of: searching a code section for acquiring a function reference.",17,claim 12,0,E
10607010,19,"19. The non-transitory computer readable storage medium of claim 18 , wherein a value in the code section is an opcode for a call instruction, and further comprising the step of: determining if a target address for the call instruction is for a valid function.",18,claim 18,0,E
10607011,1,"1. A method to identify and detect zero-day malware applications based on behavioural analysis comprising: identifying different behaviour types consisting of: file read and write operations, started services, loaded classes, sent SMS and phone calls, listing broadcast receivers, cryptography operations performed using system calls; creating an infrastructure to intercept and catch dynamic activities of a running application in offline mode through setting up a virtual machine or a sandbox on a server and hooking predefined system calls or activities; and distributing a dynamic behaviour signature, said signature based on dynamic features, to antivirus engines running on user's mobile devices; scanning and monitoring by said antivirus engines said running application for behaviours of said application once said running application is started; said dynamic behavior signature is created on server side comprising: gathering malware applications belonging to a same malware family from a malware repository; running said malware applications for several times and collecting the activity occurrences in time for each run; creating said dynamic behaviour signature; and storing said dynamic behaviour signature in a database to be distributed to clients; intercepting activities of said application, collecting said activities and comparing with said dynamic behaviour signatures where a comparison between said dynamic signature and actual behaviour is performed based on behaviour type and time of occurrence; determining a similarity ratio for each said dynamic signature; and verdicting a detection of malware for said running application if the similarity ratio is above 90% of a profile where said profile is a dynamic signature of a malware family and said profile is created offline using virtual devices and/or real devices, running modified operating systems, in order to hook application runtime behaviours comprising: determining threshold for acceptable occurrence rate; determining threshold for acceptable time delay; determining threshold for probability of occurrence; and creating by aggregation process said profile for each malware family type.",0,,1,E
10607011,2,"2. The method according to claim 1 , where said dynamic signature for a legitimate application downloaded from application stores is created and malicious re-packaged applications are detected comprising: downloading said legitimate application from application markets and/or Internet; installing said legitimate application by said server into several of said virtual machines and/or said sandboxes, running said application for a predefined period of time and monitoring the behaviours while collecting the activity types and their respective timestamps; collecting and aggregating activity logs and generating said dynamic behaviour signature; saving said dynamic behaviour signature into a signature database of a server application; installing by user an application that presumably is re-packaged and has the same application identifier as the original application; downloading by said client device said re-packaged application from said application market; sending said application identifier to said server; checking by said server if there is said dynamic behaviour signature for the application in said signature database by sending only package information; extracting by server said dynamic behaviour signature and returning said dynamic behaviour signature to said client; monitoring by said client application the runtime behaviour of said application, extracting activities type and times from said application and performing an anomaly detection with regard to said dynamic behaviour signature, which is gathered from said server; concluding that said application contains malicious activities and is said re-packaged malware application if an anomaly is detected.",1,claim 1,0,E
10607011,3,"3. The method according to claim 1 , where said acceptable occurrence rate is selected as half of total number of runs.",2,claim 1,0,E
10607011,4,4. The method according to claim 1 wherein said different behaviour types further consists of incoming/outgoing network data.,3,claim 1,0,E
10607011,5,"5. A method to identify and detect zero-day malware applications based on behavioral analysis comprising: identifying a set of dynamic behavior types of an unknown application, where said set of behavior types is selected from a group consisting of: file read and write operations, started services, loaded classes, sent SMS and phone calls, listing broadcast receivers, cryptography operations performed using system calls; creating an infrastructure to intercept and catch said dynamic activities of running said unknown application in offline mode wherein said infrastructure includes of a computing device comprising a non-transitory computer readable medium storing program instruction that, when executed by a processing unit, cause the processing unit to identify said dynamic behavior signature of said unknown application by running said unknown application on said computing device; monitoring and recording said set of dynamic behaviour types in said non-transitory computer-readable medium of said computing device; aggregating said set of dynamic behaviour types by a predetermined algorithm wherein said predetermined algorithm comprises: determining a threshold for acceptable occurrences rate of said dynamic behavior types and a threshold for the occurrence count of said dynamic behavior types and a threshold for acceptable time delay between each of said set of dynamic behavior types; calculating a mean and as standard deviation of each of said thresholds; determining a threshold for probability of occurrence; creating said profile of said unknown application based on said threshold for probability of occurrence; distributing said dynamic behavior signature to said antivirus engines running on mobile device of user where said dynamic behavior signature is created on server side comprising: gathering malware applications belonging to a same malware family from a malware repository; running said malware applications for several times and collecting the activity occurrences in time for each run; creating said dynamic behaviour signature; and storing said dynamic behaviour signature in a database to be distributed to clients.",4,,0,E
10607011,6,6. The method to identify and detect zero-day malware applications based on behavioral analysis according to claim 5 wherein said behavior types monitored during execution of said malware applications of the same malware family are presented as an activity map comprising: collecting various samples of said malware applications belonging to the same malware family after multiple different runs of each of said sample; aggregating outputs of sample collecting and extracting common items using data mining and pattern recognition techniques; providing said activity map by said outputs aggregation which is considered as said profile of the malware family or said dynamic behaviour signature.,5,claim 5,0,E
10607011,7,"7. The method according to claim 5 , where said acceptable occurrences rate is selected as half of total number of runs.",6,claim 5,0,E
10607011,8,"8. The method according to claim 5 wherein said set of behavior types is selected from a group consisting of: file read and write operations, started services, loaded classes, sent SMS and phone calls, listing broadcast receivers, cryptography operations performed using system calls, and incoming/outgoing network data.",7,claim 5,0,E
10607012,1,"1. A system comprising: a first computing device configured to connect a local network of interconnected devices to a wide area network, the first computing device comprising: one or more first processors; and first memory storing first instructions that, when executed by the one or more first processors, cause the first computing device to: transmit, after achieving a power-on state, a provisioning request; and a second computing device in signal communication with the first computing device, the second computing device comprising: one or more second processors; and second memory storing second instructions that, when executed by the one or more second processors, cause the second computing device to: receive, from the first computing device, the provisioning request, generate a provisioning response comprising: first information indicating a first channel, provided by a message broker that implements a publish-subscribe messaging protocol, to which the first computing device shall publish one or more first messages, and second information indicating a second channel, provided by the message broker, to which the second computing device shall publish one or more second messages, subscribe to the first channel; and transmit, to the first computing device, the provisioning response; wherein the first instructions, when executed, further cause the first computing device to subscribe to the second channel after receiving the provisioning response.",0,,1,E
10607012,2,"2. The system of claim 1 , wherein: the first instructions, when executed, further cause the first computing device to transmit, to the second computing device, an identifier; and the second instructions, when executed, further cause the second computing device to identify, based on the identifier, a device-specific encryption key associated with the first computing device.",1,claim 1,0,E
10607012,3,"3. The system of claim 1 , wherein: the second instructions, when executed, further cause the second computing device to transmit, to a third computing device, information indicating a channel to which the first computing device shall publish one or more messages; and receipt of the information by the third computing device causes the third computing device to subscribe to the channel.",2,claim 1,0,E
10607012,4,"4. The system of claim 1 , wherein: the first channel to which the first computing device shall publish the one or more first messages is a device-specific channel that no other computing device of the local network of interconnected devices publishes to.",3,claim 1,0,E
10607012,5,"5. The system of claim 1 , wherein: the second instructions, when executed, further cause the second computing device to transmit, to a third computing device, a device-specific encryption key associated with the first computing device.",4,claim 1,0,E
10607012,6,"6. The system of claim 5 , wherein: publication, by the first computing device and to a channel provided by the message broker, of a message causes the third computing device to decrypt, using the device-specific encryption key, at least a portion of the message that the first computing device has encrypted using the device-specific encryption key.",5,claim 5,0,E
10607012,7,"7. The system of claim 5 , wherein: the first instructions, when executed, further cause the first computing device to decrypt, using the device-specific encryption key and after publication of a message by the third computing device to a channel provided by the message broker, at least a portion of the message that the third computing device has encrypted using the device-specific encryption key.",6,claim 5,0,E
10607012,8,"8. The system of claim 1 , wherein: the first instructions, when executed, further cause the first computing device to: encrypt at least a portion of a first message of the one or more first messages using a device-specific encryption key associated with the first computing device in order to obtain an encrypted message, and publish the encrypted message to the first channel.",7,claim 1,0,E
10607012,9,"9. The system of claim 8 , wherein: the portion of the first message that is encrypted using the device-specific encryption key comprises a payload of the first message.",8,claim 8,0,E
10607012,10,"10. The system of claim 1 , wherein: the second instructions, when executed, further cause the second computing device to: encrypt at least a portion of a second message of the one or more second messages using a device-specific encryption key associated with the first computing device in order to obtain an encrypted message, and publish the encrypted message to the second channel.",9,claim 1,0,E
10607012,11,"11. The system of claim 1 , wherein: the first instructions, when executed, further cause the first computing device to publish, to the first channel, a first message of the one or more first messages; and the second instructions, when executed, cause the second computing device to publish, to the second channel, a second message of the one or more second messages.",10,claim 1,0,E
10607012,12,"12. The system of claim 11 , wherein: the first message comprises a request for a list of devices of the local network of interconnected devices that the second computing device determines to be associated with the first computing device; and the second message comprises the list of devices.",11,claim 11,0,E
10607012,13,"13. The system of claim 11 , wherein: the first message comprises a request for a portion of a file stored by the second computing device; and the second message comprises the portion of the file requested.",12,claim 11,0,E
10607012,14,"14. The system of claim 1 , wherein: the one or more first messages are a first type of message; and the provisioning response further comprises third information indicating a third channel, provided by the message broker, to which the first computing device shall publish one or more third messages that are a second type of message different than the first type of message.",13,claim 1,0,E
10607012,15,"15. The system of claim 1 , wherein: the provisioning response further comprises a first address of a first server of the message broker and a second address of a second server of the message broker; and the first instructions, when executed, further cause the first computing device to: connect to the first server at the first address before connecting to the second server, and connect, automatically, to the second server at the second address after the first computing device loses connectivity to the first server.",14,claim 1,0,E
10607012,16,"16. A method comprising: receiving, by a first computing device and after a second computing device achieves a power-on state, a provisioning request wherein the second computing device is configured to connect a local network of interconnected devices to a wide area network; generating, by the first computing device and after receiving the provisioning request, a provisioning response comprising: first information indicating a first channel, provided by a message broker that implements a publish-subscribe messaging protocol, to which the first computing device shall publish one or more first messages, and second information indicating a second channel, provided by the message broker, to which the second computing device shall publish one or more second messages; transmitting, by the first computing device to the second computing device, the provisioning response wherein receipt of the provisioning response by the second computing device causes the second computing device to subscribe to the first channel; subscribing, by the first computing device, to the second channel; and publishing, by the first computing device to the first channel, a message of the one or more first messages.",15,,0,E
10607012,17,"17. The method of claim 16 , further comprising: transmitting, by the first computing device to a third computing device, the second information indicating the second channel to which the second computing device shall publish the one or more second messages; and wherein receipt of the second information by the third computing device causes the third computing device to subscribe to the second channel.",16,claim 16,0,E
10607012,18,"18. The method of claim 16 , further comprising: transmitting, by the first computing device to a third computing device, a device-specific encryption key associated with the second computing device.",17,claim 16,0,E
10607012,19,"19. The method of claim 16 , further comprising: receiving, by the first computing device from the second computing device, information indicating a plurality of message types that the second computing device shall publish.",18,claim 16,0,E
10607012,20,"20. The method of claim 16 , further comprising: receiving, by the first computing device, a message of the one or more second messages that the second computing device has published to the second channel; and decrypting, by the first computing device and using a device-specific encryption key associated with the second computing device, at least a portion of the message that the second computing device has encrypted using the device-specific encryption key.",19,claim 16,0,E
10607012,21,"21. The method of claim 16 , further comprising: encrypting, by the first computing device and using a device-specific encryption key associated with the second computing device, at least a portion of a message of the one or more first messages in order to obtain an encrypted message; and publishing, by the first computing device to the first channel, the encrypted message.",20,claim 16,0,E
10607012,22,"22. A method comprising: achieving, by a first computing device configured to connect a local network of interconnected devices to a wide area network, a power-on state; transmitting, by the first computing device to a second computing device and after achieving the power-on state, a provisioning request; receiving, by the first computing device from the second computing device, a provisioning response comprising: first information indicating a first channel to which the first computing device shall publish one or more first messages, and second information indicating a second channel to which the second computing device shall publish one or more second messages; subscribing, by the first computing device and after receiving the provisioning response, to the second channel; and publishing, by the first computing device to the first channel, a message.",21,,0,E
10607012,23,"23. The method of claim 22 , further comprising: encrypting, by the first computing device and using a device-specific encryption key associated with the first computing device, at least a portion of a message of the one or more first messages to obtain an encrypted message; and publishing, by the first computing device to the first channel, the encrypted message.",22,claim 22,0,E
10607012,24,"24. The method of claim 22 , further comprising: receiving, by the first computing device, a message of the one or more second messages published to the second channel; and decrypting, by the first computing device and using a device-specific encryption key associated with the first computing device, at least a portion of the message that has been encrypted using the device-specific encryption key.",23,claim 22,0,E
10607012,25,"25. The method of claim 22 , wherein: the second computing device published the message to the second channel.",24,claim 22,0,E
10607012,26,"26. The method of claim 22 , further comprising: a third computing device published the message to the second channel.",25,claim 22,0,E
10607012,27,"27. The method of claim 22 , further comprising: transmitting, by the first computing device to the second computing device, information indicating a plurality of message types that the first computing device shall publish.",26,claim 22,0,E
10607013,1,"1. A system for determining security-related inquiries and inquiry frequency, the system comprising: a computer platform having a memory and at least processor in communication with the memory; an external data retrieval module stored in the memory, executable by the processor and configured to retrieve, from one or more external data sources via a publicly-accessible portion of a distributed computing network, security-related external data associated with an entity; an internal data reception module stored in the memory, executable by the processor and configured to receive, from one or more internal data sources via a privately-accessible portion of the distributed computing network, security-related internal data associated with the entity; an inquiry generator module stored in the memory, executable by the processor and configured to determine one or more security areas of focus based on the security-related external data and the security-related internal data and generate a plurality of security-related inquiries requesting input parameters, wherein the plurality of security-related inquiries are generated specific to the entity based at least on (i) the security-related external data and the security-related internal data, and (ii) the one or more security areas of focus; and an inquiry frequency determination module stored in the memory, executable by the processor and configured to determine a frequency for invoking the plurality of inquiries to the entity based at least on the security-related external data and the security-related internal data.",0,,1,E
10607013,2,"2. The system of claim 1 , further comprising an inquiry platform module stored in the memory, executable by the processor and configured to present, via the publicly-accessible portion of the distributed computing network, the plurality of security-related inquiries to the entity, request the input parameters for the plurality of security-related inquiries, and receive, via the publicly-accessible portion of the distributed computing network, the input parameters from the entity.",1,claim 1,0,E
10607013,3,"3. The system of claim 2 , wherein (i) the inquiry generator module is further configured to generate the plurality of security-related inquiries dynamically in response to the external data retrieval module and the internal data reception module dynamically retrieving and receiving the security-related external data and the security-related internal data in response to updates in one or more of the external data sources or one or more of the internal data sources and (ii) the inquiry platform is configured to dynamically present the plurality of security-related inquiries to the entity in response to dynamically generating the plurality of security-related inquiries.",2,claim 2,0,E
10607013,4,"4. The system of claim 1 , further comprising a security threat level determination module stored in the memory, executable by the processor and configured to determine a security threat level for the entity based on the security-related external data and the security-related internal data.",3,claim 1,0,E
10607013,5,"5. The system of claim 4 , wherein the a security threat level determination module is further configured to determine the security threat level for the entity, wherein the security threat level indicates at least one a likelihood of an occurrence of a security event or a likely loss associated with the occurrence of a security event.",4,claim 4,0,E
10607013,6,"6. The system of claim 4 , wherein the inquiry generator module is triggered to generate the plurality of security-related inquiries based on the security threat level determination module determining the security threat level.",5,claim 4,0,E
10607013,7,"7. The system of claim 4 , wherein the inquiry generator module is further configured to determine the plurality of security-related inquiries by identifying security components of the security threat level, identifying inquiries that are associated with security components and including the identified inquiries in the plurality of security-related inquiries.",6,claim 4,0,E
10607013,8,"8. The system of claim 4 , wherein the inquiry frequency determination module is triggered to assess the frequency for presenting the plurality of security-related inquiries based on the security threat level determination module determining the security threat level.",7,claim 4,0,E
10607013,9,"9. The system of claim 4 , wherein the inquiry frequency determination module is further configured to determine the frequency for presenting the plurality of security-related inquiries based further on the determined security threat level.",8,claim 4,0,E
10607013,10,"10. The system of claim 1 , further comprising a security analytics module stored in the memory, executable by the processor and configured to apply logic to the security-related external data and the security-related internal data to identify one or more security related data patterns associated with the entity.",9,claim 1,0,E
10607013,11,"11. The system of claim 10 , wherein the inquiry generator module is further configured to generate the plurality of security-related inquiries specific to the entity based further on the one or more security-related data patterns associated with the entity.",10,claim 10,0,E
10607013,12,"12. The system of claim 1 , wherein the security-related external data associated with the entity comprises at least public open source intelligence data.",11,claim 1,0,E
10607013,13,"13. The system of claim 1 , wherein the security-related internal data associated with the entity comprises at least one of (i) assessment results, (ii) application scan results, and (iii) incident management results.",12,claim 1,0,E
10607013,14,"14. The system of claim 1 , wherein the inquiry generator module is further configured to generate the plurality of security-related inquiries specific to the entity based further on at least one of entity type, product or service type providing by the entity, type of data hosted by the entity, amount of data hosted by the entity, volume of applications hosted by the entity.",13,claim 1,0,E
10607013,15,"15. The system of claim 1 , wherein the inquiry frequency determination module is further configured to determine the frequency for presenting the plurality of security-related inquiries to the entity based further on at least one of entity type, product or service type providing by the entity, type of data hosted by the entity, amount of data hosted by the entity, volume of applications hosted by the entity.",14,claim 1,0,E
10607013,16,"16. A computer processor-implemented method for determining security-related inquiries and inquiry frequency, the method comprising: retrieving, from one or more external data sources via a publicly-accessible portion of a distributed computing network, security-related external data associated with the entity; receiving, from one or more internal data sources via a privately-accessible portion of the distributed computing network, security-related internal data associated with the entity; determining, by a computing device processor, one or more security areas of focus based on the security-related external data and the security-related internal data; generating, by a computing device processor, a plurality of security-related inquiries requesting input parameters, wherein the plurality of security-related inquiries are generated specific to the entity based at least on (i) the security-related external data and the security-related internal data, and (ii) the one or more security areas of focus; and determining, by a computing device processor, a frequency for invoking the plurality of inquiries based at least on the security-related external data and the security-related internal data.",15,,0,E
10607013,17,"17. The method of claim 16 , wherein generating further comprises dynamically generating the plurality of security-related inquiries in response to the external data retrieval module and the internal data reception module dynamically retrieving and receiving the security-related external data and the security-related internal data in response to updates in one or more of the external data sources or one or more of the internal data sources.",16,claim 16,0,E
10607013,18,"18. A computer program product, comprising: a non-transitory computer-readable medium comprising codes for causing a computing device processor to: retrieve, from one or more external data sources via a publicly-accessible portion of a distributed computing network, security-related external data associated with the entity; receive, from one or more internal data sources via a privately-accessible portion of the distributed computing network, security-related internal data associated with the entity; determine one or more security areas of focus based on the security-related external data and the security-related internal data generate a plurality of security-related inquiries requesting input parameters, wherein the plurality of security-related inquiries are generated specific to the entity based at least on (i) the security-related external data and the security-related internal data, and (ii) the one or more security areas of focus; and determine a frequency for invoking the plurality of inquiries based at least on the security-related external data and the security-related internal data.",17,,0,E
10607014,1,"1. A method of determining a monetary loss due to security risks associated with a plurality of applications executing on a plurality of computers in a computer system, the method comprising: assigning to each application a set of loss levels from a plurality of loss levels, each loss level in the set of loss levels corresponding to a different type of risk associated to an application; defining a presentation that identifies a total monetary residual risk of loss due to security risks for the plurality of applications by assigning a monetary value to the set of loss levels assigned to each application; receiving an adjustment to a loss level for at least one application; and defining a presentation that identifies a revised total monetary residual risk of loss based on the adjustment to said at least one loss level.",0,,1,E
10607014,2,2. The method of claim 1 further comprising: receiving an adjustment to the monetary residual risk of loss for at least one loss level; and defining a presentation that identifies a revised total monetary residual risk of loss based on the adjustment to the monetary residual risk of loss.,1,claim 1,0,E
10607014,3,"3. The method of claim 2 , wherein receiving an adjustment to a loss level for an application comprises: displaying the plurality of loss levels associated with the application; and receiving a selection of a loss level for a particular type of risk associated to the application that is different than a current loss level for the particular type of risk associated with the application.",2,claim 2,0,E
10607014,4,4. The method of claim 1 further comprising: directing a set of machine-executable processes to examine an operating environment of a set of applications executing on the plurality of computers to identify security risks in the computer system; and defining a presentation that identifies a revised total monetary residual risk of loss based on the examining of the operating environment.,3,claim 1,0,E
10607014,5,5. The method of claim 4 further comprising: receiving an adjustment to the monetary residual risk of loss for at least one loss level based on the security risks identified in the examination of the operating environment; and defining a presentation that identifies a revised total monetary residual risk of loss based on the adjustment to said at least one loss level.,4,claim 4,0,E
10607014,6,"6. The method of claim 1 , wherein the residual risk of loss for each application is determined as a function of a loss due to an exploit of the application and a probability of occurrence of the exploit.",5,claim 1,0,E
10607014,7,"7. The method of claim 1 , wherein the residual risk of loss for each application is determined by monitoring the application executing on one or more computers in the computer system.",6,claim 1,0,E
10607014,8,"8. The method of claim 1 , wherein the value of the monetary residual risk of loss is presented as a currency value.",7,claim 1,0,E
10607014,9,"9. The method of claim 1 , wherein the type of risk associated to an application comprises one or more of an inherent risk of loss, a potential effect of loss of confidentiality caused by a threat to the application, a potential effect of loss on integrity caused by a threat to the application, and a potential effect of a loss of availability caused by a threat to the application.",8,claim 1,0,E
10607014,10,"10. A non-transitory machine readable medium storing a program for determining a monetary loss due to security risks associated with a plurality of applications executing on a plurality of computers in a computer system, the program executable by at least one processing unit, the program comprising sets of instructions for: assigning to each application a set of loss levels from a plurality of loss levels, each loss level in the set of loss levels corresponding to a different type of risk associated to an application; defining a presentation that identifies a total monetary residual risk of loss due to security risks for the plurality of applications by assigning a monetary value to the set of loss levels assigned to each application; receiving an adjustment to a loss level for at least one application; and defining a presentation that identifies a revised total monetary residual risk of loss based on the adjustment to said at least one loss level.",9,,0,E
10607014,11,"11. The non-transitory machine readable medium of claim 10 , the program further comprising sets of instructions for: receiving an adjustment to the monetary residual risk of loss for at least one loss level; and defining a presentation that identifies a revised total monetary residual risk of loss based on the adjustment to the monetary residual risk of loss.",10,claim 10,0,E
10607014,12,"12. The non-transitory machine readable medium of claim 11 , wherein the set of instructions for receiving an adjustment to a loss level for an application comprises sets of instructions for: displaying the plurality of loss levels associated with the application; and receiving a selection of a loss level for a particular type of risk associated to the application that is different than a current loss level for the particular type of risk associated with the application.",11,claim 11,0,E
10607014,13,"13. The non-transitory machine readable medium of claim 10 , the program further comprising sets of instructions for: directing a set of machine-executable processes to examine an operating environment of a set of applications executing on the plurality of computers to identify security risks in the computer system; and defining a presentation that identifies a revised total monetary residual risk of loss based on the examining of the operating environment.",12,claim 10,0,E
10607014,14,"14. The non-transitory machine readable medium of claim 13 , the program further comprising sets of instructions for: receiving an adjustment to the monetary residual risk of loss for at least one loss level based on the security risks identified in the examination of the operating environment; and defining a presentation that identifies a revised total monetary residual risk of loss based on the adjustment to said at least one loss level.",13,claim 13,0,E
10607014,15,"15. The non-transitory machine readable medium of claim 10 , wherein the residual risk of loss for each application is determined as a function of a loss due to an exploit of the application and a probability of occurrence of the exploit.",14,claim 10,0,E
10607014,16,"16. The non-transitory machine readable medium of claim 10 , wherein the residual risk of loss for each application is determined by monitoring the application executing on one or more computers in the computer system.",15,claim 10,0,E
10607014,17,"17. The non-transitory machine readable medium of claim 10 , wherein the value of the monetary residual risk of loss is presented as a currency value.",16,claim 10,0,E
10607014,18,"18. The non-transitory machine readable medium of claim 10 , wherein the type of risk associated to an application comprises one or more of an inherent risk of loss, a potential effect of loss of confidentiality caused by a threat to the application, a potential effect of loss on integrity caused by a threat to the application, and a potential effect of a loss of availability caused by a threat to the application.",17,claim 10,0,E
10607015,1,"1. A non-transitory computer readable medium including instructions that, when executed by at least one processor, cause the at least one processor to perform operations for automatically detecting and addressing security risks in code segments, the operations comprising: accessing a plurality of code segments developed for execution in a network environment; automatically identifying a first code segment, the first code segment being included in or developed for inclusion in a body of code, from the plurality of code segments for analysis; automatically performing a first code-level security risk assessment for the first code segment based on an embedded credentials risk level, the embedded credentials risk level being determined based on at least a number or a type of one or more credentials coded into the first code segment, and further based on at least one of: an application programming interface risk level, determined based on at least a number or a type of one or more application programming interface action calls associated with the first code segment, or a target resource risk level, determined based on at least a number or a type of one or more references to target resources associated with the first code segment; determining a first security risk level for the first code segment based on the embedded credentials risk level and the at least one of the application programming interface risk level, or the target resource risk level; automatically performing a second code-level security risk assessment for a modified version of the first code segment, the modified version of the first code segment including a change to at least one of: the application programming interface risk level, the embedded credentials risk level, or the target resource risk level; determining a second security risk level for the modified version of the first code segment; and enabling a comparison between the first security risk level and the second security risk level to identify a change in security risk associated with the first code segment, wherein a user is enabled to view the first security risk level and the second security risk level.",0,,1,E
10607015,2,"2. The non-transitory computer readable medium of claim 1 , wherein the first code segment is alterable, in real time, to produce the modified version of the first code segment.",1,claim 1,0,E
10607015,3,"3. The non-transitory computer readable medium of claim 1 , wherein accessing the plurality of code segments includes dynamically scanning the network environment in real time.",2,claim 1,0,E
10607015,4,"4. The non-transitory computer readable medium of claim 1 , wherein accessing the plurality of code segments includes analyzing a devops pipeline comprising the plurality of code segments, wherein the plurality of code segments have not yet been deployed into production.",3,claim 1,0,E
10607015,5,"5. The non-transitory computer readable medium of claim 1 , wherein the operations further comprise automatically generating a report based on the change in security risk associated with the first code segment, the report identifying the change to at least one of the application programming interface risk level, the embedded credentials risk level, or the target resource risk level.",4,claim 1,0,E
10607015,6,"6. The non-transitory computer readable medium of claim 1 , wherein automatically performing the first code-level security risk assessment includes determining a customizable risk factor that is configured to be unique to the network environment.",5,claim 1,0,E
10607015,7,"7. The non-transitory computer readable medium of claim 1 , wherein the operations further comprise updating a profile, associated with a creator of the first code segment, based on the change in security risk associated with the first code segment.",6,claim 1,0,E
10607015,8,"8. The non-transitory computer readable medium of claim 1 , wherein the application programming interface risk level is based on a determination of whether the one or more application programming interface action calls have security risks.",7,claim 1,0,E
10607015,9,"9. The non-transitory computer readable medium of claim 1 , wherein the embedded credentials risk level is determined based on a degree of privileged access associated with the one or more credentials.",8,claim 1,0,E
10607015,10,"10. The non-transitory computer readable medium of claim 1 , wherein the target resource risk level is determined based on a determination of whether the target resources are sensitive network resources.",9,claim 1,0,E
10607015,11,"11. A computer-implemented method for automatically detecting and addressing security risks in code segments, the method comprising: accessing a plurality of code segments developed for execution in a network environment; automatically identifying a first code segment, the first code segment being included in or developed for inclusion in a body of code, from the plurality of code segments for analysis automatically performing a first code-level security risk assessment for the first code segment based on an embedded credentials risk level, the embedded credentials risk level being determined based on at least a number or a type of one or more credentials coded into the first code segment, and further, based on at least one of: an application programming interface risk level, determined based on at least a number or a type of one or more application programming interface action calls associated with the first code segment, or a target resource risk level, determined based on at least a number or a type of one or more references to target resources associated with the first code segment; determining a first security risk level for the first code segment based on the embedded credentials risk level and the at least one of the application programming interface risk level, or the target resource risk level; automatically performing a second code-level security risk assessment for a modified version of the first code segment, the modified version of the first code segment including a change to at least one of: the application programming interface risk level, the embedded credentials risk level, or the target resource risk level; determining a second security risk level for the modified version of the first code segment; and enabling a comparison between the first security risk level and the second security risk level to identify a change in security risk associated with the first code segment, wherein a user is enabled to view the first security risk level and the second security risk level.",10,,0,E
10607015,12,"12. The computer-implemented method of claim 11 , further comprising generating a report based on the change in security risk associated with the first code segment, the report identifying a privilege threat alert associated with the first code segment.",11,claim 11,0,E
10607015,13,"13. The computer-implemented method of claim 11 , further comprising performing, based on the change in security risk associated with the first code segment, a privilege mitigation action for preventing the first code segment from being deployed for execution in the network environment.",12,claim 11,0,E
10607015,14,"14. The computer-implemented method of claim 11 , further comprising performing, based on the change in security risk associated with the first code segment, a privilege mitigation action for disabling the one or more credentials.",13,claim 11,0,E
10607015,15,"15. The computer-implemented method of claim 11 , further comprising performing, based on the change in security risk associated with the first code segment, a privilege mitigation action for changing an authentication requirement associated with the one or more target resources.",14,claim 11,0,E
10607015,16,"16. The computer-implemented method of claim 11 , further comprising performing, based on the change in security risk associated with the first code segment, a privilege mitigation action for adding an authentication requirement for the first code segment.",15,claim 11,0,E
10607015,17,"17. The computer-implemented method of claim 11 , wherein the first code-level security risk assessment is performed automatically upon creation of the first code segment.",16,claim 11,0,E
10607015,18,"18. The computer-implemented method of claim 11 , wherein the first code-level security risk assessment is performed automatically in response to a change in the first code segment.",17,claim 11,0,E
10607015,19,"19. The computer-implemented method of claim 11 , wherein the first code-level security risk assessment is performed automatically in response to a change in the one or more application programming interface action calls.",18,claim 11,0,E
10607015,20,"20. The computer-implemented method of claim 11 , wherein the first code-level security risk assessment is performed automatically in response to a change in the one or more credentials.",19,claim 11,0,E
10607016,1,"1. A method for providing data leak protection (DLP), comprising: determining, by a processor, that a predetermined application executing at a terminal is in the process of transmitting an encrypted file from the terminal; and in response to determining that the encrypted file is being transmitted from the terminal, identifying, by the processor, a password that decrypts the encrypted file; decrypting, by the processor, the encrypted file to generate a decrypted file; determining, by the processor, that the decrypted file is a file subject to DLP; in response to determining that the decrypted file is a file subject to DLP, preventing, by the processor, the transmitting of the file from the terminal; identifying meta data of the encrypted file, wherein the decrypting further comprises selecting the password by determining that meta data of the encrypted file matches at least a portion of meta data of the password; and identifying meta data of the encrypted file, wherein the decrypting further comprises determining a degree of match between meta data of the encrypted file and meta data of the multiple passwords obtained by comparing meta data associated with the encrypted file with meta data associated with the password several times, so as to determine priority given to a decryption performed with each of the multiple passwords.",0,,1,E
10607016,2,"2. The method of claim 1 , further comprising generating a list of passwords associated with the predetermined application, wherein the identifying the password comprises selecting the password from the list of passwords.",1,claim 1,0,E
10607016,3,"3. The method of claim 2 , further comprising storing in conjunction with the list a number of times each password on the list has been employed, wherein the selecting the password from the list is based upon the number of times each password has been employed.",2,claim 2,0,E
10607016,4,"4. The method of claim 1 , further comprising storing a first password entered during a first file encryption procedure performed at the terminal, wherein the identifying the password comprises selecting the first password.",3,claim 1,0,E
10607016,5,"5. An apparatus for providing data leak protection (DLP), comprising: a processor; a non-transitory, computer-readable medium coupled to the processor; and logic, stored on the computer-readable medium and executed on the processor, for: determining that a predetermined application executing at a terminal is in the process of transmitting an encrypted file from the terminal; and in response to determining that the encrypted file is being transmitted from the terminal, identifying a password that decrypts the encrypted file; decrypting the encrypted file to generate a decrypted file; determining that the decrypted file is a file subject to DLP; in response to determining that the decrypted file is a file subject to DLP, preventing the transmitting of the file from the terminal; identifying meta data of the encrypted file, wherein the decrypting further comprises selecting the password by determining that meta data of the encrypted file matches at least a portion of meta data of the password; and identifying meta data of the encrypted file, wherein the decrypting further comprises determining a degree of match between meta data of the encrypted file and meta data of the multiple passwords obtained by comparing meta data associated with the encrypted file with meta data associated with the password several times, so as to determine priority given to a decryption performed with each of the multiple passwords.",4,,0,E
10607016,6,"6. The apparatus of claim 5 , the logic further comprising logic for generating a list of passwords associated with the predetermined application, wherein the identifying the password comprises selecting the password from the list of passwords.",5,claim 5,0,E
10607016,7,"7. The apparatus of claim 6 , the logic further comprising logic for storing in conjunction with the list a number of times each password on the list has been employed, wherein the selecting the password from the list is based upon the number of times each password has been employed.",6,claim 6,0,E
10607016,8,"8. The apparatus of claim 5 , the logic further comprising logic for storing a first password entered during a first file encryption procedure performed at the terminal, wherein the identifying the password comprises selecting the first password.",7,claim 5,0,E
10607016,9,"9. A computer programming product for providing data leak protection (DLP), comprising: a non-transitory, computer-readable medium; and logic, stored on the computer-readable medium for execution on a processor, for: determining, by the processor, that a predetermined application executing at a terminal is in the process of transmitting an encrypted file from the terminal; and, in response to determining that the encrypted file is being transmitted from the terminal, identifying, by the processor, a password that decrypts the encrypted file; decrypting, by the processor, the encrypted file to generate a decrypted file; determining, by the processor, that the decrypted file is a file subject to DLP; in response to determining that the decrypted file is a file subject to DLP, preventing, by the processor, the transmitting of the file from the terminal; identifying meta data of the encrypted file, wherein the decrypting further comprises selecting the password by determining that meta data of the encrypted file matches at least a portion of meta data of the password; and identifying meta data of the encrypted file, wherein the decrypting further comprises determining a degree of match between meta data of the encrypted file and meta data of the multiple passwords obtained by comparing meta data associated with the encrypted file with meta data associated with the password several times, so as to determine priority given to decryption performed with each of the multiple passwords.",8,,0,E
10607016,10,"10. The computer programming product of claim 9 , the logic further comprising logic for generating a list of passwords associated with the predetermined application, wherein the identifying the password comprises selecting the password from the list of passwords.",9,claim 9,0,E
10607016,11,"11. The computer programming product of claim 10 , the logic further comprising logic fur storing in con unction with the list a number of times each password on the list has been employed, wherein the selecting the password from the list is based upon the number of times each password has been employed.",10,claim 10,0,E
10607016,12,"12. The computer programming product of claim 9 , the logic further comprising logic for storing a first password entered during a first file encryption procedure performed at the terminal, wherein the identifying the password comprises selecting the first password.",11,claim 9,0,E
10607016,13,"13. The method of claim 1 , the determining that the decrypted file is a file subject to DLP comprising checking for confidential content in the decrypted file.",12,claim 1,0,E
10607016,14,"14. The apparatus of claim 5 , the logic for determining that the decrypted file is a file subject to DLP comprising checking for confidential content in the decrypted file.",13,claim 5,0,E
10607016,15,"15. The computer programming product of claim 9 , the logic for determining that the decrypted file is a file subject to DLP comprising checking for confidential content in the decrypted file.",14,claim 9,0,E
10607017,1,"1. A method comprising: receiving a security profile comprising user-defined rules for processing sensitive data; identifying a plurality of sensitive data components in a data file according to the security profile; generating a respective format-preserving token for each of the identified plurality of sensitive data components on an end-user device that is remote from a tokenization server; generating a corresponding token key for each of the respective format-preserving tokens; replacing each of the plurality of sensitive data components in the data file with the respective format-preserving token; wherein the plurality of sensitive data components comprise a first sensitive data component associated with a first respective format-preserving token, and a second sensitive data component associated with a second respective format-preserving token, and wherein the first and second respective format-preserving tokens preserve different formats; cryptographically camouflaging each of the token keys using a first password; transmitting each of the cryptographically camouflaged token keys from the end-user device to the tokenization server; and storing each of the cryptographically camouflaged token keys.",0,,1,E
10607017,2,"2. The method of claim 1 , further comprising: receiving a second password; determining whether the first password is equal to the second password; and in response to determining that the first and second password are equal: decrypting each of the corresponding token keys; and replacing each respective format-preserving token in the data file with the respective sensitive data components.",1,claim 1,0,E
10607017,3,"3. The method of claim 1 , wherein the respective format-preserving tokens are original format-preserving tokens, and further comprising: receiving a second password; determining whether the first password is equal to the second password; and in response to determining that the first and second password are not equal: generating a new respective format-preserving token for each of the plurality of sensitive data components; and replacing each original format-preserving token in the data file with the respective new format-preserving token.",2,claim 1,0,E
10607017,4,"4. The method of claim 2 , wherein determining whether the first and second passwords are equal comprises: receiving the second password at an end-user device; determining the first password; and comparing the second password to the first password.",3,claim 2,0,E
10607017,5,"5. The method of claim 1 , wherein said generating the respective format-preserving token for each of the plurality of sensitive data components is based on respective initialization vectors.",4,claim 1,0,E
10607017,6,"6. The method of claim 5 , wherein the respective initialization vectors are comprised of a prime number and an expiration date.",5,claim 5,0,E
10607017,7,"7. The method of claim 5 , wherein the data file further comprises a plurality of non-sensitive data components and wherein the respective initialization vectors are comprised of one of the non-sensitive data components.",6,claim 5,0,E
10607017,8,"8. The method of claim 1 , wherein the plurality of sensitive data components comprise first and second sensitive data components, and wherein the first sensitive data component comprises a valid primary account number and the second sensitive data component comprises a social security number, and wherein the first respective format-preserving token is visually indistinguishable from a valid primary account number and the second respective format-preserving token is visually indistinguishable from a valid social security number.",7,claim 1,0,E
10607017,9,"9. The method of claim 1 , wherein the corresponding token key for each of the format-preserving tokens comprises an encryption key and the respective format-preserving token.",8,claim 1,0,E
10607017,10,"10. A computer comprising: one or more processors; and a non-transitory computer-readable storage medium storing computer-readable instructions that are executable by the one or more processors to perform: receiving a security profile comprising user-defined rules for identifying and processing sensitive data; identifying a plurality of sensitive data components in a data file according to the security profile; generating a respective format-preserving token for each of the identified plurality of sensitive data components on an end-user device that is remote from a tokenization server; generating a corresponding token key for each of the respective format-preserving tokens; replacing each of the plurality of sensitive data components in the data file with the respective format-preserving token; cryptographically camouflaging each of the token keys according to a format-preserving encryption technique using a first password; transmitting each of the cryptographically camouflaged token keys from the end-user device to the tokenization server; and storing each of the cryptographically camouflaged token keys; wherein the plurality of sensitive data components comprise a first sensitive data component associated with a first respective format-preserving token, and a second sensitive data component associated with a second respective format-preserving token, and wherein the first and second respective format-preserving tokens preserve different formats.",9,,0,E
10607017,11,"11. The computer of claim 10 , wherein the computer-readable instructions are executable by the one or more processors to perform: receiving a second password; determining whether the first password is equal to the second password; and in response to determining that the first and second password are equal: decrypting each of the corresponding token keys; and replacing each respective format-preserving token in the data file with the respective sensitive data components.",10,claim 10,0,E
10607017,12,"12. The computer of claim 10 , wherein the respective format-preserving tokens are original format-preserving tokens, and wherein the computer-readable instructions are executable by the one or more processors to perform: receiving a second password; determining whether the first password is equal to the second password; and in response to determining that the first and second password are not equal: generating a new respective format-preserving token for each of the plurality of sensitive data components; and replacing each original format-preserving token in the data file with the respective new format-preserving token.",11,claim 10,0,E
10607017,13,"13. The computer of claim 11 , wherein determining whether the first and second passwords are equal comprises; receiving the second password at an end-user device; interrogating the tokenization server to determine the first password; and comparing the second password to the first password.",12,claim 11,0,E
10607017,14,"14. The computer of claim 10 , wherein said generating the respective format-preserving token for each of the plurality of sensitive data components is based on respective initialization vectors.",13,claim 10,0,E
10607017,15,"15. The computer of claim 14 , wherein the data file further comprises a plurality of non-sensitive data components and wherein the respective initialization vectors are comprised of one of the non-sensitive data components.",14,claim 14,0,E
10607017,16,"16. The computer of claim 10 , wherein the plurality of sensitive data components comprise first and second sensitive data components, and wherein the first sensitive data component comprises a valid primary account number and the second sensitive data component comprises a social security number, and wherein the first respective format-preserving token is visually indistinguishable tram a valid primary account number and the second respective format-preserving token is visually indistinguishable from a valid social security number.",15,claim 10,0,E
10607017,17,"17. A non-transitory computer readable storage medium storing instructions that are executable to cause a system to perform operations comprising: receiving a security profile comprising user-defined rules for processing sensitive data in a data file; identifying a sensitive data component in the data file according to the security profile; generating a respective format-preserving token for the identified sensitive data component on an end-user device that is remote from a tokenization server: generating a corresponding token key for the respective format-preserving token; replacing the sensitive data component in the data file with the respective format-preserving token; wherein the plurality of sensitive data components comprise a first sensitive data component associated with a first respective format-preserving token, and a second sensitive data component associated with a second respective format-preserving token, and wherein the first and second respective format-preserving tokens preserve different formats; encrypting the corresponding token key using a format-preserving cryptographic camouflage encryption technique and a first password; and transmitting the cryptographically camouflaged token key to a tokenization server; wherein the corresponding token key for the respective format-preserving token comprises an encryption key and the respective format-preserving token.",16,,0,E
10607018,1,"1. A secure memory apparatus, comprising: a computer-readable medium; a processor; a host memory interface configured to be coupled to a host memory controller; a security key generator executed by the processor, the security key generator programmed to generate a security key to encrypt data saved to the computer-readable medium and decrypt data retrieved from the computer-readable medium; a hardware interrupt detector executed by the processor, the hardware interrupt detector programmed to permanently alter the security key when a signal between the host memory interface hardware and the host memory controller hardware is interrupted, and storing the security key in the computer-readable medium after the security key has been permanently altered; wherein the security key generator comprises: a private key generator that generates a private key; a public key generator that generates a public key; a key merger circuit that generates the security key as a function of the private key and the public key; and a host computer system comprising: a storage device driver programmed to transmit a unique identifier of the host computer system to the public key generator to generate the public key.",0,,1,E
10607018,2,"2. The secure memory apparatus of claim 1 , wherein the memory comprises an array of parallel volatile memories.",1,claim 1,0,E
10607018,3,"3. The secure memory apparatus of claim 1 , wherein the memory comprises at least one of DRAM, SRAM, DDR, and MRAM.",2,claim 1,0,E
10607018,4,"4. The secure memory apparatus of claim 1 , wherein the memory comprises at least one of Flash, PCM, ReRAM, 3D Xpoint, SSD, and MRAM.",3,claim 1,0,E
10607018,5,"5. The secure memory apparatus of claim 1 , wherein the host memory interface comprises a parallel memory interface.",4,claim 1,0,E
10607018,6,"6. The secure memory apparatus of claim 1 , wherein the hardware interrupt detector detects an edge pin decoupling from the host memory controller.",5,claim 1,0,E
10607018,7,"7. The secure memory apparatus of claim 1 , wherein the edge pin is dedicated to only a hardware interrupt detector hardware circuit.",6,claim 1,0,E
10607018,8,"8. The secure memory apparatus of claim 1 , wherein the hardware interrupt detector detects a power pin decoupling from the host memory controller.",7,claim 1,0,E
10607018,9,"9. The secure memory apparatus of claim 8 , wherein the power pin comprises at least one of a VDD pin and a GND pin.",8,claim 8,0,E
10607018,10,"10. The secure memory apparatus of claim 1 , wherein the key merger circuit comprises an AND logical module.",9,claim 1,0,E
10607018,11,"11. The secure memory apparatus of claim 10 , wherein the hardware interrupt detector deactivates at least a portion of the AND logical module.",10,claim 10,0,E
10607018,12,"12. The secure memory apparatus of claim 1 , wherein the private key generator executed by the processor is programmed to generate the private key as a function of a serial number of the secure memory apparatus.",11,claim 1,0,E
10607018,13,"13. A secure memory system, comprising: a computer-readable medium; a host memory interface coupled to a host memory controller; a security key generator that generates a security key to encrypt data saved to the computer-readable medium and decrypt data retrieved from the computer-readable medium; wherein the security key generator comprises: a private key generator that generates a private key; a public key generator that generates a public key; a key merger circuit that generates the security key as a function of the private key and the public key; and a hardware interrupt detector that permanently alters the security key when a signal between the host memory interface hardware and the host memory controller hardware is interrupted, and storing the security key in the computer-readable medium after the security key has been permanently altered; a host computer system comprising: a storage device driver programmed to transmit a unique identifier of the host computer system to the public key generator to generate the public key.",12,,0,E
10607018,14,"14. The secure memory system of claim 13 , wherein the unique identifier comprises a serial number of a processor of the host computer system.",13,claim 13,0,E
10607018,15,"15. The secure memory system of claim 13 , wherein the unique identifier comprises a serial number of an operating system of the host computer system.",14,claim 13,0,E
10607018,16,"16. A method of securing a memory system, comprising: communicating data with a host system via a host memory interface coupled with a host memory controller; generating a private key; transmitting a unique identifier of the host system to generate a public key; generating the security key as a function of the private key and the public key; wherein the security key encrypts data from the host memory controller saved to a computer-readable medium and decrypts data retrieved from the computer-readable medium to transmit to the host memory controller; permanently altering the security key when a portion of the host memory interface is decoupled from the host memory controller; and storing the security key in the computer-readable medium after the security key has been permanently altered.",15,,0,E
10607018,17,"17. The method of claim 16 , further comprising detecting when the portion of the host memory interface is decoupled from the host memory controller by tracking a closed circuit using an edge pin of the host memory interface.",16,claim 16,0,E
10607018,18,"18. The method of claim 16 , further comprising detecting when the portion of the host memory interface is decoupled from the host memory controller by tracking a VDD power input to the host memory interface.",17,claim 16,0,E
10607018,19,"19. The method of claim 16 , wherein permanently altering the security key comprises permanently altering a private key of the security key.",18,claim 16,0,E
10607019,1,"1. A method for facilitating delivery of a product and/or service to a user, comprising: causing a first executable computer code to be inserted into a computing environment in which a user session is established, the first executable computer code being associated with an entity that provides the product and/or service; establishing the user session in the computing environment; in response to the first executable computer code being inserted into the user session, creating a first virtual machine in the user session; executing the first executable computer code in the first virtual machine, wherein executing the first executable computer code includes obtaining, over a communications network and from a user computing device of the user, a first proper subset of all information needed from the user computing device that is required to fulfill delivery of the product and/or service, the first proper subset of all the information being less than a complete set of all the information needed from the user computing device that is required to fulfill delivery of the product and/or service, the first proper subset of the information being processed by the first executable computer code, the first executable computer code producing first output data; terminating the first virtual machine upon completion of executing the first executable computer code; obtaining a second executable computer code based at least on a first portion of the first output data produced by the first executable computer code; causing the second executable computer code to be inserted into the user session established in the computing environment; in response to the second executable computer code being inserted into the user session, creating a second virtual machine in the user session; executing the second executable computer code in the second virtual machine, wherein executing the second executable computer code includes obtaining, over the communications network and from the user computing device, a second proper subset of all the information needed from the user computing device that is required to fulfill delivery of the product and/or service, the second proper subset of all the information being less than the complete set of all the information needed from the user computing device that is required to fulfill delivery of the product and/or service and including information not included in the first proper subset of the information, the second proper subset of the information being processed by the second executable computer code, the second executable computer code producing second output data; terminating the second virtual machine upon completion of executing the second executable computer code to thereby prevent a linking of the first and second subsets of information and to thereby prevent a reconstruction of all the information required to fulfill delivery of the product and/or service; and based at least in part on the second output data produced by the second executable computer code, causing the product and/or service to be delivered to the user of the user computing device.",0,,1,E
10607019,2,"2. The method of claim 1 , wherein executing the second executable computer code includes executing the second executable computer code using at least a second portion of the first output data produced by the second executable computer code.",1,claim 1,0,E
10607019,3,"3. The method of claim 1 , wherein the first portion of the first output data includes an identifier of the second executable computer code.",2,claim 1,0,E
10607019,4,"4. The method of claim 3 , wherein at least some of the first output data produced by the first executable computer code is encrypted with an encryption key associated with the user computing device, wherein executing the second computing device includes obtaining the encryption key to decrypt the output data encrypted by the first executable computer code.",3,claim 3,0,E
10607019,5,"5. The method of claim 1 , further comprising terminating the user session after causing the product and/or service to be delivered to the user of the user computing device.",4,claim 1,0,E
10607019,6,"6. The method of claim 5 , further comprising terminating the user session in response to user action.",5,claim 5,0,E
10607019,7,"7. The method of claim 5 , further comprising terminating the user session in response to action of the computing environment.",6,claim 5,0,E
10607019,8,"8. The method of claim 5 , wherein terminating the user session includes clearing memory of the user session from the computing environment.",7,claim 5,0,E
10607019,9,"9. The method of claim 1 , further comprising storing the first and second proper subsets of the information in a data store included in the user session.",8,claim 1,0,E
10607019,10,"10. A method for performing a transaction over a communications network, comprising: responsive to a user request received over the communications network, establishing a user session in a computing environment; sequentially executing a plurality of executable computer codes that each perform a portion of the transaction, wherein executing each of the executable computer codes includes obtaining over a communications network and from a user computing device of the user, a different proper subset of all information needed from the user computing device that is required to complete the transaction, each of the proper subsets of all the information individually being less than a complete set of all the information needed from the user computing device that is required to complete the transaction and collectively being the complete set of all the information needed from the user computing device that is required to complete the transaction, each of the executable computer codes processing the respective subset of information that it obtains; wherein information is only exchanged between and among the plurality of executable computer codes during execution of each of the executable computer codes by obtaining the information from encrypted output information that was previously output from one of the executable computer codes so that a linking of each of the proper subset of information is prevented to thereby prevent a reconstruction of all the information required to perform the transaction, the encrypted output information being encrypted such that one or more decryption keys are required from the user in order to decrypt the output information; and after completing execution of a final one of the executable computer codes necessary to complete the transaction, terminating the user session so that each of the subsets of information no longer exist in the computing environment.",9,,0,E
10607019,11,"11. The method of claim 10 , wherein each of the executable computer codes is executed in a different virtual machine that is terminated after execution is completed and prior to executing a subsequent one of the executable computer codes.",10,claim 10,0,E
10607019,12,"12. The method of claim 10 , further comprising monitoring the plurality of executable computer codes to ensure that no individual one of the executable computer code obtains all of the information needed from the user computing device that is required to complete the transaction.",11,claim 10,0,E
10607019,13,"13. The method of claim 12 , further comprising alerting the user if any information provided by the user is communicated by any of the executable computer codes in the clear to another executable computer code.",12,claim 12,0,E
10607020,1,"1. A method, comprising: tagging, via a user device, data to identify that the data is to be secured and to limit access to the data to a user profile that is assigned a right to access the data, wherein a type of data tag assigned to the data designates that the user profile can access secured data according to at least one policy linked to the user profile and stored remotely from a data record storing the data; and responsive to tagging the data, modifying, via the user device, a data format of the data to create secured modified data, wherein the secured modified data is stored in a different file format than a file format of the data; wrapping, via the user device, the secured modified data in an HTML shell, the HTML shell including information associated with the at least one watermark policy, and where the information associated with the at least one watermark policy is also overlaid on the modified data; identifying, via the user device, data access command, from a user associated with the user profile, to access the secured modified data; receiving, via the user device, the at least one watermark policy linked to the user profile; executing, via the user device, the data access command to access the wrapped secured modified data based on the at least one watermark policy and the information included in the HTML shell and the information overlaid on the secured modified data.",0,,1,E
10607020,2,"2. The method of claim 1 , wherein the data record is stored on a policy server.",1,claim 1,0,E
10607020,3,"3. The method of claim 2 , further comprising: updating the secured modified data via the user device; and transmitting periodic messages to the policy server to update the data record to include the updates to the secured modified data.",2,claim 2,0,E
10607020,4,"4. The method of claim 3 , wherein the update to the data record comprises metadata including at least one of user identification and a policy associated with the update.",3,claim 3,0,E
10607020,5,"5. The method of claim 1 , wherein the different file format of the secured modified data is at least one of: a web browser compatible format; and a hyper-text markup language (HTML) format.",4,claim 1,0,E
10607020,6,"6. An apparatus, comprising: a hardware processor configured to: tag the data to identify that the data is to be secured and to limit access to the data to a user profile that is are assigned a right to access the data, wherein a type of data tag assigned to the data designates that the user profile can access secured data according to at least one policy linked to the user profile and stored remotely from a data record storing the data; responsive to the data being tagged, modify a data format of the data to create secured modified data, wherein the secured modified data is stored in a different file format than a file format of the data; wrap the secured modified data in an HTML shell, the HTML shell including information associated with the at least one watermark policy, and where the information associated with the at least one watermark policy is also overlaid on the modified data: identify a data access command, from a user associated with the user profile, to access the secured modified data; receive the at least one watermark policy linked to the user profile; execute the data access command to access the wrapped secured modified data based on the at least one watermark policy and the information included in the HTML shell and the information overlaid on the secured modified data.",5,,0,E
10607020,7,"7. The apparatus of claim 6 , wherein the data record is stored on a policy server.",6,claim 6,0,E
10607020,8,"8. The apparatus of claim 7 , wherein the hardware processor is further configured to: update the secured modified data via the user device, and a transmitter is configured to transmit periodic messages to the policy server to update the data record to include the updates to the secured modified data.",7,claim 7,0,E
10607020,9,"9. The apparatus of claim 8 , wherein the update to the data record comprises metadata including at least one of user identification and a policy associated with the update.",8,claim 8,0,E
10607020,10,"10. The apparatus of claim 6 , wherein the different file format of the secured modified data is at least one of: a web browser compatible format; and a hyper-text markup language (HTML) format.",9,claim 6,0,E
10607020,11,"11. A non-transitory computer readable storage medium configured to store one or more instructions that when executed by a processor causes the processor to perform: tagging, via a user device, data to identify that the data is to be secured and to limit access to the data to a user profile that is assigned a right to access the data, wherein a type of data tag assigned to the data designates that the user profile can access secured data according to at least one policy linked to the user profile and stored remotely from a data, record storing the data; and responsive to tagging the data, modifying, via the user device, a data format of the data to create secured modified data, wherein the secured modified data is stored in a different file format than a file format of the data; wrapping, via the user device, the secured modified data in an HTML shell, the HTML shell including information associated with the at least one watermark policy, and where the information associated with the at least one watermark policy is also overlaid on the modified data: identifying, via the user device, data access command, from a user associated with the user profile, to access the secured modified data; receiving, via the user device, the at least one watermark policy linked to the user profile; executing, via the user device, the data access command to access the wrapped secured modified data based on the at least one watermark policy and the information included in the HTML shell and the information overlaid on the secured modified data.",10,,0,E
10607020,12,"12. The non-transitory computer readable storage medium of claim 11 , wherein the data record is stored on a policy server.",11,claim 11,0,E
10607020,13,"13. The non-transitory computer readable storage medium of claim 12 , further configured to store one or more instructions that when executed by the processor cause the processor to perform: updating the secured modified data via the user device; and transmitting periodic messages to the policy server to update the data record to include the updates to the secured modified data.",12,claim 12,0,E
10607020,14,"14. The non-transitory computer readable storage medium of claim 13 , wherein the update to the data record comprises metadata including at least one of user identification and a policy associated with the update.",13,claim 13,0,E
